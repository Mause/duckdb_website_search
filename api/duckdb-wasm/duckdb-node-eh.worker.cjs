"use strict";
var wj = Object.create;
var lr = Object.defineProperty;
var kj = Object.getOwnPropertyDescriptor;
var Ej = Object.getOwnPropertyNames;
var Sj = Object.getPrototypeOf,
  Cj = Object.prototype.hasOwnProperty;
var te = (r, i) => () => (i || r((i = { exports: {} }).exports, i), i.exports),
  Aj = (r, i) => {
    for (var e in i) lr(r, e, { get: i[e], enumerable: !0 });
  },
  wl = (r, i, e, l) => {
    if ((i && typeof i == "object") || typeof i == "function")
      for (let p of Ej(i))
        !Cj.call(r, p) &&
          p !== e &&
          lr(r, p, {
            get: () => i[p],
            enumerable: !(l = kj(i, p)) || l.enumerable,
          });
    return r;
  };
var Pn = (r, i, e) => (
    (e = r != null ? wj(Sj(r)) : {}),
    wl(
      i || !r || !r.__esModule
        ? lr(e, "default", { value: r, enumerable: !0 })
        : e,
      r
    )
  ),
  Rj = (r) => wl(lr({}, "__esModule", { value: !0 }), r);
var Dl = te((qi) => {
  "use strict";
  Object.defineProperty(qi, "__esModule", { value: !0 });
  qi.splitWhen = qi.flatten = void 0;
  function Mj(r) {
    return r.reduce((i, e) => [].concat(i, e), []);
  }
  qi.flatten = Mj;
  function Uj(r, i) {
    let e = [[]],
      l = 0;
    for (let p of r) i(p) ? (l++, (e[l] = [])) : e[l].push(p);
    return e;
  }
  qi.splitWhen = Uj;
});
var Il = te((vr) => {
  "use strict";
  Object.defineProperty(vr, "__esModule", { value: !0 });
  vr.isEnoentCodeError = void 0;
  function Lj(r) {
    return r.code === "ENOENT";
  }
  vr.isEnoentCodeError = Lj;
});
var Ml = te((jr) => {
  "use strict";
  Object.defineProperty(jr, "__esModule", { value: !0 });
  jr.createDirentFromStats = void 0;
  var xs = class {
    constructor(i, e) {
      (this.name = i),
        (this.isBlockDevice = e.isBlockDevice.bind(e)),
        (this.isCharacterDevice = e.isCharacterDevice.bind(e)),
        (this.isDirectory = e.isDirectory.bind(e)),
        (this.isFIFO = e.isFIFO.bind(e)),
        (this.isFile = e.isFile.bind(e)),
        (this.isSocket = e.isSocket.bind(e)),
        (this.isSymbolicLink = e.isSymbolicLink.bind(e));
    }
  };
  function Fj(r, i) {
    return new xs(r, i);
  }
  jr.createDirentFromStats = Fj;
});
var Ul = te((Pt) => {
  "use strict";
  Object.defineProperty(Pt, "__esModule", { value: !0 });
  Pt.removeLeadingDotSegment =
    Pt.escape =
    Pt.makeAbsolute =
    Pt.unixify =
      void 0;
  var xj = require("path"),
    Nj = 2,
    Bj = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
  function Yj(r) {
    return r.replace(/\\/g, "/");
  }
  Pt.unixify = Yj;
  function Hj(r, i) {
    return xj.resolve(r, i);
  }
  Pt.makeAbsolute = Hj;
  function qj(r) {
    return r.replace(Bj, "\\$2");
  }
  Pt.escape = qj;
  function Wj(r) {
    if (r.charAt(0) === ".") {
      let i = r.charAt(1);
      if (i === "/" || i === "\\") return r.slice(Nj);
    }
    return r;
  }
  Pt.removeLeadingDotSegment = Wj;
});
var Fl = te((oE, Ll) => {
  Ll.exports = function (i) {
    if (typeof i != "string" || i === "") return !1;
    for (var e; (e = /(\\).|([@?!+*]\(.*\))/g.exec(i)); ) {
      if (e[2]) return !0;
      i = i.slice(e.index + e[0].length);
    }
    return !1;
  };
});
var Bl = te((cE, Nl) => {
  var Zj = Fl(),
    xl = { "{": "}", "(": ")", "[": "]" },
    $j = function (r) {
      if (r[0] === "!") return !0;
      for (var i = 0, e = -2, l = -2, p = -2, m = -2, w = -2; i < r.length; ) {
        if (
          r[i] === "*" ||
          (r[i + 1] === "?" && /[\].+)]/.test(r[i])) ||
          (l !== -1 &&
            r[i] === "[" &&
            r[i + 1] !== "]" &&
            (l < i && (l = r.indexOf("]", i)),
            l > i &&
              (w === -1 ||
                w > l ||
                ((w = r.indexOf("\\", i)), w === -1 || w > l)))) ||
          (p !== -1 &&
            r[i] === "{" &&
            r[i + 1] !== "}" &&
            ((p = r.indexOf("}", i)),
            p > i && ((w = r.indexOf("\\", i)), w === -1 || w > p))) ||
          (m !== -1 &&
            r[i] === "(" &&
            r[i + 1] === "?" &&
            /[:!=]/.test(r[i + 2]) &&
            r[i + 3] !== ")" &&
            ((m = r.indexOf(")", i)),
            m > i && ((w = r.indexOf("\\", i)), w === -1 || w > m))) ||
          (e !== -1 &&
            r[i] === "(" &&
            r[i + 1] !== "|" &&
            (e < i && (e = r.indexOf("|", i)),
            e !== -1 &&
              r[e + 1] !== ")" &&
              ((m = r.indexOf(")", e)),
              m > e && ((w = r.indexOf("\\", e)), w === -1 || w > m))))
        )
          return !0;
        if (r[i] === "\\") {
          var O = r[i + 1];
          i += 2;
          var P = xl[O];
          if (P) {
            var B = r.indexOf(P, i);
            B !== -1 && (i = B + 1);
          }
          if (r[i] === "!") return !0;
        } else i++;
      }
      return !1;
    },
    Gj = function (r) {
      if (r[0] === "!") return !0;
      for (var i = 0; i < r.length; ) {
        if (/[*?{}()[\]]/.test(r[i])) return !0;
        if (r[i] === "\\") {
          var e = r[i + 1];
          i += 2;
          var l = xl[e];
          if (l) {
            var p = r.indexOf(l, i);
            p !== -1 && (i = p + 1);
          }
          if (r[i] === "!") return !0;
        } else i++;
      }
      return !1;
    };
  Nl.exports = function (i, e) {
    if (typeof i != "string" || i === "") return !1;
    if (Zj(i)) return !0;
    var l = $j;
    return e && e.strict === !1 && (l = Gj), l(i);
  };
});
var Hl = te((lE, Yl) => {
  "use strict";
  var Vj = Bl(),
    Kj = require("path").posix.dirname,
    zj = require("os").platform() === "win32",
    Ns = "/",
    Qj = /\\/g,
    Xj = /[\{\[].*[\}\]]$/,
    Jj = /(^|[^\\])([\{\[]|\([^\)]+$)/,
    em = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
  Yl.exports = function (i, e) {
    var l = Object.assign({ flipBackslashes: !0 }, e);
    l.flipBackslashes && zj && i.indexOf(Ns) < 0 && (i = i.replace(Qj, Ns)),
      Xj.test(i) && (i += Ns),
      (i += "a");
    do i = Kj(i);
    while (Vj(i) || Jj.test(i));
    return i.replace(em, "$1");
  };
});
var mr = te((mt) => {
  "use strict";
  mt.isInteger = (r) =>
    typeof r == "number"
      ? Number.isInteger(r)
      : typeof r == "string" && r.trim() !== ""
      ? Number.isInteger(Number(r))
      : !1;
  mt.find = (r, i) => r.nodes.find((e) => e.type === i);
  mt.exceedsLimit = (r, i, e = 1, l) =>
    l === !1 || !mt.isInteger(r) || !mt.isInteger(i)
      ? !1
      : (Number(i) - Number(r)) / Number(e) >= l;
  mt.escapeNode = (r, i = 0, e) => {
    let l = r.nodes[i];
    !l ||
      (((e && l.type === e) || l.type === "open" || l.type === "close") &&
        l.escaped !== !0 &&
        ((l.value = "\\" + l.value), (l.escaped = !0)));
  };
  mt.encloseBrace = (r) =>
    r.type !== "brace"
      ? !1
      : (r.commas >> (0 + r.ranges)) >> 0 === 0
      ? ((r.invalid = !0), !0)
      : !1;
  mt.isInvalidBrace = (r) =>
    r.type !== "brace"
      ? !1
      : r.invalid === !0 || r.dollar
      ? !0
      : (r.commas >> (0 + r.ranges)) >> 0 === 0 ||
        r.open !== !0 ||
        r.close !== !0
      ? ((r.invalid = !0), !0)
      : !1;
  mt.isOpenOrClose = (r) =>
    r.type === "open" || r.type === "close"
      ? !0
      : r.open === !0 || r.close === !0;
  mt.reduce = (r) =>
    r.reduce(
      (i, e) => (
        e.type === "text" && i.push(e.value),
        e.type === "range" && (e.type = "text"),
        i
      ),
      []
    );
  mt.flatten = (...r) => {
    let i = [],
      e = (l) => {
        for (let p = 0; p < l.length; p++) {
          let m = l[p];
          Array.isArray(m) ? e(m, i) : m !== void 0 && i.push(m);
        }
        return i;
      };
    return e(r), i;
  };
});
var wr = te((_E, Wl) => {
  "use strict";
  var ql = mr();
  Wl.exports = (r, i = {}) => {
    let e = (l, p = {}) => {
      let m = i.escapeInvalid && ql.isInvalidBrace(p),
        w = l.invalid === !0 && i.escapeInvalid === !0,
        O = "";
      if (l.value)
        return (m || w) && ql.isOpenOrClose(l) ? "\\" + l.value : l.value;
      if (l.value) return l.value;
      if (l.nodes) for (let P of l.nodes) O += e(P);
      return O;
    };
    return e(r);
  };
});
var $l = te((dE, Zl) => {
  "use strict";
  Zl.exports = function (r) {
    return typeof r == "number"
      ? r - r === 0
      : typeof r == "string" && r.trim() !== ""
      ? Number.isFinite
        ? Number.isFinite(+r)
        : isFinite(+r)
      : !1;
  };
});
var tu = te((fE, eu) => {
  "use strict";
  var Gl = $l(),
    Si = (r, i, e) => {
      if (Gl(r) === !1)
        throw new TypeError(
          "toRegexRange: expected the first argument to be a number"
        );
      if (i === void 0 || r === i) return String(r);
      if (Gl(i) === !1)
        throw new TypeError(
          "toRegexRange: expected the second argument to be a number."
        );
      let l = { relaxZeros: !0, ...e };
      typeof l.strictZeros == "boolean" &&
        (l.relaxZeros = l.strictZeros === !1);
      let p = String(l.relaxZeros),
        m = String(l.shorthand),
        w = String(l.capture),
        O = String(l.wrap),
        P = r + ":" + i + "=" + p + m + w + O;
      if (Si.cache.hasOwnProperty(P)) return Si.cache[P].result;
      let B = Math.min(r, i),
        D = Math.max(r, i);
      if (Math.abs(B - D) === 1) {
        let J = r + "|" + i;
        return l.capture ? `(${J})` : l.wrap === !1 ? J : `(?:${J})`;
      }
      let q = Jl(r) || Jl(i),
        x = { min: r, max: i, a: B, b: D },
        ie = [],
        X = [];
      if ((q && ((x.isPadded = q), (x.maxLen = String(x.max).length)), B < 0)) {
        let J = D < 0 ? Math.abs(D) : 1;
        (X = Vl(J, Math.abs(B), x, l)), (B = x.a = 0);
      }
      return (
        D >= 0 && (ie = Vl(B, D, x, l)),
        (x.negatives = X),
        (x.positives = ie),
        (x.result = tm(X, ie, l)),
        l.capture === !0
          ? (x.result = `(${x.result})`)
          : l.wrap !== !1 &&
            ie.length + X.length > 1 &&
            (x.result = `(?:${x.result})`),
        (Si.cache[P] = x),
        x.result
      );
    };
  function tm(r, i, e) {
    let l = Bs(r, i, "-", !1, e) || [],
      p = Bs(i, r, "", !1, e) || [],
      m = Bs(r, i, "-?", !0, e) || [];
    return l.concat(m).concat(p).join("|");
  }
  function im(r, i) {
    let e = 1,
      l = 1,
      p = zl(r, e),
      m = new Set([i]);
    for (; r <= p && p <= i; ) m.add(p), (e += 1), (p = zl(r, e));
    for (p = Ql(i + 1, l) - 1; r < p && p <= i; )
      m.add(p), (l += 1), (p = Ql(i + 1, l) - 1);
    return (m = [...m]), m.sort(am), m;
  }
  function nm(r, i, e) {
    if (r === i) return { pattern: r, count: [], digits: 0 };
    let l = rm(r, i),
      p = l.length,
      m = "",
      w = 0;
    for (let O = 0; O < p; O++) {
      let [P, B] = l[O];
      P === B ? (m += P) : P !== "0" || B !== "9" ? (m += sm(P, B, e)) : w++;
    }
    return (
      w && (m += e.shorthand === !0 ? "\\d" : "[0-9]"),
      { pattern: m, count: [w], digits: p }
    );
  }
  function Vl(r, i, e, l) {
    let p = im(r, i),
      m = [],
      w = r,
      O;
    for (let P = 0; P < p.length; P++) {
      let B = p[P],
        D = nm(String(w), String(B), l),
        q = "";
      if (!e.isPadded && O && O.pattern === D.pattern) {
        O.count.length > 1 && O.count.pop(),
          O.count.push(D.count[0]),
          (O.string = O.pattern + Xl(O.count)),
          (w = B + 1);
        continue;
      }
      e.isPadded && (q = om(B, e, l)),
        (D.string = q + D.pattern + Xl(D.count)),
        m.push(D),
        (w = B + 1),
        (O = D);
    }
    return m;
  }
  function Bs(r, i, e, l, p) {
    let m = [];
    for (let w of r) {
      let { string: O } = w;
      !l && !Kl(i, "string", O) && m.push(e + O),
        l && Kl(i, "string", O) && m.push(e + O);
    }
    return m;
  }
  function rm(r, i) {
    let e = [];
    for (let l = 0; l < r.length; l++) e.push([r[l], i[l]]);
    return e;
  }
  function am(r, i) {
    return r > i ? 1 : i > r ? -1 : 0;
  }
  function Kl(r, i, e) {
    return r.some((l) => l[i] === e);
  }
  function zl(r, i) {
    return Number(String(r).slice(0, -i) + "9".repeat(i));
  }
  function Ql(r, i) {
    return r - (r % Math.pow(10, i));
  }
  function Xl(r) {
    let [i = 0, e = ""] = r;
    return e || i > 1 ? `{${i + (e ? "," + e : "")}}` : "";
  }
  function sm(r, i, e) {
    return `[${r}${i - r === 1 ? "" : "-"}${i}]`;
  }
  function Jl(r) {
    return /^-?(0+)\d/.test(r);
  }
  function om(r, i, e) {
    if (!i.isPadded) return r;
    let l = Math.abs(i.maxLen - String(r).length),
      p = e.relaxZeros !== !1;
    switch (l) {
      case 0:
        return "";
      case 1:
        return p ? "0?" : "0";
      case 2:
        return p ? "0{0,2}" : "00";
      default:
        return p ? `0{0,${l}}` : `0{${l}}`;
    }
  }
  Si.cache = {};
  Si.clearCache = () => (Si.cache = {});
  eu.exports = Si;
});
var qs = te((hE, lu) => {
  "use strict";
  var cm = require("util"),
    ru = tu(),
    iu = (r) => r !== null && typeof r == "object" && !Array.isArray(r),
    lm = (r) => (i) => r === !0 ? Number(i) : String(i),
    Ys = (r) => typeof r == "number" || (typeof r == "string" && r !== ""),
    Dn = (r) => Number.isInteger(+r),
    Hs = (r) => {
      let i = `${r}`,
        e = -1;
      if ((i[0] === "-" && (i = i.slice(1)), i === "0")) return !1;
      for (; i[++e] === "0"; );
      return e > 0;
    },
    um = (r, i, e) =>
      typeof r == "string" || typeof i == "string" ? !0 : e.stringify === !0,
    _m = (r, i, e) => {
      if (i > 0) {
        let l = r[0] === "-" ? "-" : "";
        l && (r = r.slice(1)), (r = l + r.padStart(l ? i - 1 : i, "0"));
      }
      return e === !1 ? String(r) : r;
    },
    nu = (r, i) => {
      let e = r[0] === "-" ? "-" : "";
      for (e && ((r = r.slice(1)), i--); r.length < i; ) r = "0" + r;
      return e ? "-" + r : r;
    },
    dm = (r, i) => {
      r.negatives.sort((w, O) => (w < O ? -1 : w > O ? 1 : 0)),
        r.positives.sort((w, O) => (w < O ? -1 : w > O ? 1 : 0));
      let e = i.capture ? "" : "?:",
        l = "",
        p = "",
        m;
      return (
        r.positives.length && (l = r.positives.join("|")),
        r.negatives.length && (p = `-(${e}${r.negatives.join("|")})`),
        l && p ? (m = `${l}|${p}`) : (m = l || p),
        i.wrap ? `(${e}${m})` : m
      );
    },
    au = (r, i, e, l) => {
      if (e) return ru(r, i, { wrap: !1, ...l });
      let p = String.fromCharCode(r);
      if (r === i) return p;
      let m = String.fromCharCode(i);
      return `[${p}-${m}]`;
    },
    su = (r, i, e) => {
      if (Array.isArray(r)) {
        let l = e.wrap === !0,
          p = e.capture ? "" : "?:";
        return l ? `(${p}${r.join("|")})` : r.join("|");
      }
      return ru(r, i, e);
    },
    ou = (...r) =>
      new RangeError("Invalid range arguments: " + cm.inspect(...r)),
    cu = (r, i, e) => {
      if (e.strictRanges === !0) throw ou([r, i]);
      return [];
    },
    fm = (r, i) => {
      if (i.strictRanges === !0)
        throw new TypeError(`Expected step "${r}" to be a number`);
      return [];
    },
    hm = (r, i, e = 1, l = {}) => {
      let p = Number(r),
        m = Number(i);
      if (!Number.isInteger(p) || !Number.isInteger(m)) {
        if (l.strictRanges === !0) throw ou([r, i]);
        return [];
      }
      p === 0 && (p = 0), m === 0 && (m = 0);
      let w = p > m,
        O = String(r),
        P = String(i),
        B = String(e);
      e = Math.max(Math.abs(e), 1);
      let D = Hs(O) || Hs(P) || Hs(B),
        q = D ? Math.max(O.length, P.length, B.length) : 0,
        x = D === !1 && um(r, i, l) === !1,
        ie = l.transform || lm(x);
      if (l.toRegex && e === 1) return au(nu(r, q), nu(i, q), !0, l);
      let X = { negatives: [], positives: [] },
        J = (Ae) => X[Ae < 0 ? "negatives" : "positives"].push(Math.abs(Ae)),
        ce = [],
        le = 0;
      for (; w ? p >= m : p <= m; )
        l.toRegex === !0 && e > 1 ? J(p) : ce.push(_m(ie(p, le), q, x)),
          (p = w ? p - e : p + e),
          le++;
      return l.toRegex === !0
        ? e > 1
          ? dm(X, l)
          : su(ce, null, { wrap: !1, ...l })
        : ce;
    },
    bm = (r, i, e = 1, l = {}) => {
      if ((!Dn(r) && r.length > 1) || (!Dn(i) && i.length > 1))
        return cu(r, i, l);
      let p = l.transform || ((x) => String.fromCharCode(x)),
        m = `${r}`.charCodeAt(0),
        w = `${i}`.charCodeAt(0),
        O = m > w,
        P = Math.min(m, w),
        B = Math.max(m, w);
      if (l.toRegex && e === 1) return au(P, B, !1, l);
      let D = [],
        q = 0;
      for (; O ? m >= w : m <= w; )
        D.push(p(m, q)), (m = O ? m - e : m + e), q++;
      return l.toRegex === !0 ? su(D, null, { wrap: !1, options: l }) : D;
    },
    kr = (r, i, e, l = {}) => {
      if (i == null && Ys(r)) return [r];
      if (!Ys(r) || !Ys(i)) return cu(r, i, l);
      if (typeof e == "function") return kr(r, i, 1, { transform: e });
      if (iu(e)) return kr(r, i, 0, e);
      let p = { ...l };
      return (
        p.capture === !0 && (p.wrap = !0),
        (e = e || p.step || 1),
        Dn(e)
          ? Dn(r) && Dn(i)
            ? hm(r, i, e, p)
            : bm(r, i, Math.max(Math.abs(e), 1), p)
          : e != null && !iu(e)
          ? fm(e, p)
          : kr(r, i, 1, e)
      );
    };
  lu.exports = kr;
});
var du = te((bE, _u) => {
  "use strict";
  var pm = qs(),
    uu = mr(),
    ym = (r, i = {}) => {
      let e = (l, p = {}) => {
        let m = uu.isInvalidBrace(p),
          w = l.invalid === !0 && i.escapeInvalid === !0,
          O = m === !0 || w === !0,
          P = i.escapeInvalid === !0 ? "\\" : "",
          B = "";
        if (l.isOpen === !0 || l.isClose === !0) return P + l.value;
        if (l.type === "open") return O ? P + l.value : "(";
        if (l.type === "close") return O ? P + l.value : ")";
        if (l.type === "comma")
          return l.prev.type === "comma" ? "" : O ? l.value : "|";
        if (l.value) return l.value;
        if (l.nodes && l.ranges > 0) {
          let D = uu.reduce(l.nodes),
            q = pm(...D, { ...i, wrap: !1, toRegex: !0 });
          if (q.length !== 0)
            return D.length > 1 && q.length > 1 ? `(${q})` : q;
        }
        if (l.nodes) for (let D of l.nodes) B += e(D, l);
        return B;
      };
      return e(r);
    };
  _u.exports = ym;
});
var bu = te((pE, hu) => {
  "use strict";
  var gm = qs(),
    fu = wr(),
    Wi = mr(),
    Ci = (r = "", i = "", e = !1) => {
      let l = [];
      if (((r = [].concat(r)), (i = [].concat(i)), !i.length)) return r;
      if (!r.length) return e ? Wi.flatten(i).map((p) => `{${p}}`) : i;
      for (let p of r)
        if (Array.isArray(p)) for (let m of p) l.push(Ci(m, i, e));
        else
          for (let m of i)
            e === !0 && typeof m == "string" && (m = `{${m}}`),
              l.push(Array.isArray(m) ? Ci(p, m, e) : p + m);
      return Wi.flatten(l);
    },
    vm = (r, i = {}) => {
      let e = i.rangeLimit === void 0 ? 1e3 : i.rangeLimit,
        l = (p, m = {}) => {
          p.queue = [];
          let w = m,
            O = m.queue;
          for (; w.type !== "brace" && w.type !== "root" && w.parent; )
            (w = w.parent), (O = w.queue);
          if (p.invalid || p.dollar) {
            O.push(Ci(O.pop(), fu(p, i)));
            return;
          }
          if (p.type === "brace" && p.invalid !== !0 && p.nodes.length === 2) {
            O.push(Ci(O.pop(), ["{}"]));
            return;
          }
          if (p.nodes && p.ranges > 0) {
            let q = Wi.reduce(p.nodes);
            if (Wi.exceedsLimit(...q, i.step, e))
              throw new RangeError(
                "expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit."
              );
            let x = gm(...q, i);
            x.length === 0 && (x = fu(p, i)),
              O.push(Ci(O.pop(), x)),
              (p.nodes = []);
            return;
          }
          let P = Wi.encloseBrace(p),
            B = p.queue,
            D = p;
          for (; D.type !== "brace" && D.type !== "root" && D.parent; )
            (D = D.parent), (B = D.queue);
          for (let q = 0; q < p.nodes.length; q++) {
            let x = p.nodes[q];
            if (x.type === "comma" && p.type === "brace") {
              q === 1 && B.push(""), B.push("");
              continue;
            }
            if (x.type === "close") {
              O.push(Ci(O.pop(), B, P));
              continue;
            }
            if (x.value && x.type !== "open") {
              B.push(Ci(B.pop(), x.value));
              continue;
            }
            x.nodes && l(x, p);
          }
          return B;
        };
      return Wi.flatten(l(r));
    };
  hu.exports = vm;
});
var yu = te((yE, pu) => {
  "use strict";
  pu.exports = {
    MAX_LENGTH: 1024 * 64,
    CHAR_0: "0",
    CHAR_9: "9",
    CHAR_UPPERCASE_A: "A",
    CHAR_LOWERCASE_A: "a",
    CHAR_UPPERCASE_Z: "Z",
    CHAR_LOWERCASE_Z: "z",
    CHAR_LEFT_PARENTHESES: "(",
    CHAR_RIGHT_PARENTHESES: ")",
    CHAR_ASTERISK: "*",
    CHAR_AMPERSAND: "&",
    CHAR_AT: "@",
    CHAR_BACKSLASH: "\\",
    CHAR_BACKTICK: "`",
    CHAR_CARRIAGE_RETURN: "\r",
    CHAR_CIRCUMFLEX_ACCENT: "^",
    CHAR_COLON: ":",
    CHAR_COMMA: ",",
    CHAR_DOLLAR: "$",
    CHAR_DOT: ".",
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: "=",
    CHAR_EXCLAMATION_MARK: "!",
    CHAR_FORM_FEED: "\f",
    CHAR_FORWARD_SLASH: "/",
    CHAR_HASH: "#",
    CHAR_HYPHEN_MINUS: "-",
    CHAR_LEFT_ANGLE_BRACKET: "<",
    CHAR_LEFT_CURLY_BRACE: "{",
    CHAR_LEFT_SQUARE_BRACKET: "[",
    CHAR_LINE_FEED: `
`,
    CHAR_NO_BREAK_SPACE: "\xA0",
    CHAR_PERCENT: "%",
    CHAR_PLUS: "+",
    CHAR_QUESTION_MARK: "?",
    CHAR_RIGHT_ANGLE_BRACKET: ">",
    CHAR_RIGHT_CURLY_BRACE: "}",
    CHAR_RIGHT_SQUARE_BRACKET: "]",
    CHAR_SEMICOLON: ";",
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: " ",
    CHAR_TAB: "	",
    CHAR_UNDERSCORE: "_",
    CHAR_VERTICAL_LINE: "|",
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF",
  };
});
var wu = te((gE, mu) => {
  "use strict";
  var jm = wr(),
    {
      MAX_LENGTH: gu,
      CHAR_BACKSLASH: Ws,
      CHAR_BACKTICK: mm,
      CHAR_COMMA: wm,
      CHAR_DOT: km,
      CHAR_LEFT_PARENTHESES: Em,
      CHAR_RIGHT_PARENTHESES: Sm,
      CHAR_LEFT_CURLY_BRACE: Cm,
      CHAR_RIGHT_CURLY_BRACE: Am,
      CHAR_LEFT_SQUARE_BRACKET: vu,
      CHAR_RIGHT_SQUARE_BRACKET: ju,
      CHAR_DOUBLE_QUOTE: Rm,
      CHAR_SINGLE_QUOTE: Om,
      CHAR_NO_BREAK_SPACE: Tm,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: Pm,
    } = yu(),
    Dm = (r, i = {}) => {
      if (typeof r != "string") throw new TypeError("Expected a string");
      let e = i || {},
        l = typeof e.maxLength == "number" ? Math.min(gu, e.maxLength) : gu;
      if (r.length > l)
        throw new SyntaxError(
          `Input length (${r.length}), exceeds max characters (${l})`
        );
      let p = { type: "root", input: r, nodes: [] },
        m = [p],
        w = p,
        O = p,
        P = 0,
        B = r.length,
        D = 0,
        q = 0,
        x,
        ie = {},
        X = () => r[D++],
        J = (ce) => {
          if (
            (ce.type === "text" && O.type === "dot" && (O.type = "text"),
            O && O.type === "text" && ce.type === "text")
          ) {
            O.value += ce.value;
            return;
          }
          return w.nodes.push(ce), (ce.parent = w), (ce.prev = O), (O = ce), ce;
        };
      for (J({ type: "bos" }); D < B; )
        if (((w = m[m.length - 1]), (x = X()), !(x === Pm || x === Tm))) {
          if (x === Ws) {
            J({ type: "text", value: (i.keepEscaping ? x : "") + X() });
            continue;
          }
          if (x === ju) {
            J({ type: "text", value: "\\" + x });
            continue;
          }
          if (x === vu) {
            P++;
            let ce = !0,
              le;
            for (; D < B && (le = X()); ) {
              if (((x += le), le === vu)) {
                P++;
                continue;
              }
              if (le === Ws) {
                x += X();
                continue;
              }
              if (le === ju && (P--, P === 0)) break;
            }
            J({ type: "text", value: x });
            continue;
          }
          if (x === Em) {
            (w = J({ type: "paren", nodes: [] })),
              m.push(w),
              J({ type: "text", value: x });
            continue;
          }
          if (x === Sm) {
            if (w.type !== "paren") {
              J({ type: "text", value: x });
              continue;
            }
            (w = m.pop()), J({ type: "text", value: x }), (w = m[m.length - 1]);
            continue;
          }
          if (x === Rm || x === Om || x === mm) {
            let ce = x,
              le;
            for (i.keepQuotes !== !0 && (x = ""); D < B && (le = X()); ) {
              if (le === Ws) {
                x += le + X();
                continue;
              }
              if (le === ce) {
                i.keepQuotes === !0 && (x += le);
                break;
              }
              x += le;
            }
            J({ type: "text", value: x });
            continue;
          }
          if (x === Cm) {
            q++;
            let ce = (O.value && O.value.slice(-1) === "$") || w.dollar === !0;
            (w = J({
              type: "brace",
              open: !0,
              close: !1,
              dollar: ce,
              depth: q,
              commas: 0,
              ranges: 0,
              nodes: [],
            })),
              m.push(w),
              J({ type: "open", value: x });
            continue;
          }
          if (x === Am) {
            if (w.type !== "brace") {
              J({ type: "text", value: x });
              continue;
            }
            let ce = "close";
            (w = m.pop()),
              (w.close = !0),
              J({ type: ce, value: x }),
              q--,
              (w = m[m.length - 1]);
            continue;
          }
          if (x === wm && q > 0) {
            if (w.ranges > 0) {
              w.ranges = 0;
              let ce = w.nodes.shift();
              w.nodes = [ce, { type: "text", value: jm(w) }];
            }
            J({ type: "comma", value: x }), w.commas++;
            continue;
          }
          if (x === km && q > 0 && w.commas === 0) {
            let ce = w.nodes;
            if (q === 0 || ce.length === 0) {
              J({ type: "text", value: x });
              continue;
            }
            if (O.type === "dot") {
              if (
                ((w.range = []),
                (O.value += x),
                (O.type = "range"),
                w.nodes.length !== 3 && w.nodes.length !== 5)
              ) {
                (w.invalid = !0), (w.ranges = 0), (O.type = "text");
                continue;
              }
              w.ranges++, (w.args = []);
              continue;
            }
            if (O.type === "range") {
              ce.pop();
              let le = ce[ce.length - 1];
              (le.value += O.value + x), (O = le), w.ranges--;
              continue;
            }
            J({ type: "dot", value: x });
            continue;
          }
          J({ type: "text", value: x });
        }
      do
        if (((w = m.pop()), w.type !== "root")) {
          w.nodes.forEach((Ae) => {
            Ae.nodes ||
              (Ae.type === "open" && (Ae.isOpen = !0),
              Ae.type === "close" && (Ae.isClose = !0),
              Ae.nodes || (Ae.type = "text"),
              (Ae.invalid = !0));
          });
          let ce = m[m.length - 1],
            le = ce.nodes.indexOf(w);
          ce.nodes.splice(le, 1, ...w.nodes);
        }
      while (m.length > 0);
      return J({ type: "eos" }), p;
    };
  mu.exports = Dm;
});
var Su = te((vE, Eu) => {
  "use strict";
  var ku = wr(),
    Im = du(),
    Mm = bu(),
    Um = wu(),
    gt = (r, i = {}) => {
      let e = [];
      if (Array.isArray(r))
        for (let l of r) {
          let p = gt.create(l, i);
          Array.isArray(p) ? e.push(...p) : e.push(p);
        }
      else e = [].concat(gt.create(r, i));
      return (
        i && i.expand === !0 && i.nodupes === !0 && (e = [...new Set(e)]), e
      );
    };
  gt.parse = (r, i = {}) => Um(r, i);
  gt.stringify = (r, i = {}) =>
    ku(typeof r == "string" ? gt.parse(r, i) : r, i);
  gt.compile = (r, i = {}) => (
    typeof r == "string" && (r = gt.parse(r, i)), Im(r, i)
  );
  gt.expand = (r, i = {}) => {
    typeof r == "string" && (r = gt.parse(r, i));
    let e = Mm(r, i);
    return (
      i.noempty === !0 && (e = e.filter(Boolean)),
      i.nodupes === !0 && (e = [...new Set(e)]),
      e
    );
  };
  gt.create = (r, i = {}) =>
    r === "" || r.length < 3
      ? [r]
      : i.expand !== !0
      ? gt.compile(r, i)
      : gt.expand(r, i);
  Eu.exports = gt;
});
var In = te((jE, Tu) => {
  "use strict";
  var Lm = require("path"),
    Dt = "\\\\/",
    Cu = `[^${Dt}]`,
    Wt = "\\.",
    Fm = "\\+",
    xm = "\\?",
    Er = "\\/",
    Nm = "(?=.)",
    Au = "[^/]",
    Zs = `(?:${Er}|$)`,
    Ru = `(?:^|${Er})`,
    $s = `${Wt}{1,2}${Zs}`,
    Bm = `(?!${Wt})`,
    Ym = `(?!${Ru}${$s})`,
    Hm = `(?!${Wt}{0,1}${Zs})`,
    qm = `(?!${$s})`,
    Wm = `[^.${Er}]`,
    Zm = `${Au}*?`,
    Ou = {
      DOT_LITERAL: Wt,
      PLUS_LITERAL: Fm,
      QMARK_LITERAL: xm,
      SLASH_LITERAL: Er,
      ONE_CHAR: Nm,
      QMARK: Au,
      END_ANCHOR: Zs,
      DOTS_SLASH: $s,
      NO_DOT: Bm,
      NO_DOTS: Ym,
      NO_DOT_SLASH: Hm,
      NO_DOTS_SLASH: qm,
      QMARK_NO_DOT: Wm,
      STAR: Zm,
      START_ANCHOR: Ru,
    },
    $m = {
      ...Ou,
      SLASH_LITERAL: `[${Dt}]`,
      QMARK: Cu,
      STAR: `${Cu}*?`,
      DOTS_SLASH: `${Wt}{1,2}(?:[${Dt}]|$)`,
      NO_DOT: `(?!${Wt})`,
      NO_DOTS: `(?!(?:^|[${Dt}])${Wt}{1,2}(?:[${Dt}]|$))`,
      NO_DOT_SLASH: `(?!${Wt}{0,1}(?:[${Dt}]|$))`,
      NO_DOTS_SLASH: `(?!${Wt}{1,2}(?:[${Dt}]|$))`,
      QMARK_NO_DOT: `[^.${Dt}]`,
      START_ANCHOR: `(?:^|[${Dt}])`,
      END_ANCHOR: `(?:[${Dt}]|$)`,
    },
    Gm = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9",
    };
  Tu.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE: Gm,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: { "***": "*", "**/**": "**", "**/**/**": "**" },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: Lm.sep,
    extglobChars(r) {
      return {
        "!": { type: "negate", open: "(?:(?!(?:", close: `))${r.STAR})` },
        "?": { type: "qmark", open: "(?:", close: ")?" },
        "+": { type: "plus", open: "(?:", close: ")+" },
        "*": { type: "star", open: "(?:", close: ")*" },
        "@": { type: "at", open: "(?:", close: ")" },
      };
    },
    globChars(r) {
      return r === !0 ? $m : Ou;
    },
  };
});
var Mn = te((ht) => {
  "use strict";
  var Vm = require("path"),
    Km = process.platform === "win32",
    {
      REGEX_BACKSLASH: zm,
      REGEX_REMOVE_BACKSLASH: Qm,
      REGEX_SPECIAL_CHARS: Xm,
      REGEX_SPECIAL_CHARS_GLOBAL: Jm,
    } = In();
  ht.isObject = (r) => r !== null && typeof r == "object" && !Array.isArray(r);
  ht.hasRegexChars = (r) => Xm.test(r);
  ht.isRegexChar = (r) => r.length === 1 && ht.hasRegexChars(r);
  ht.escapeRegex = (r) => r.replace(Jm, "\\$1");
  ht.toPosixSlashes = (r) => r.replace(zm, "/");
  ht.removeBackslashes = (r) => r.replace(Qm, (i) => (i === "\\" ? "" : i));
  ht.supportsLookbehinds = () => {
    let r = process.version.slice(1).split(".").map(Number);
    return (r.length === 3 && r[0] >= 9) || (r[0] === 8 && r[1] >= 10);
  };
  ht.isWindows = (r) =>
    r && typeof r.windows == "boolean"
      ? r.windows
      : Km === !0 || Vm.sep === "\\";
  ht.escapeLast = (r, i, e) => {
    let l = r.lastIndexOf(i, e);
    return l === -1
      ? r
      : r[l - 1] === "\\"
      ? ht.escapeLast(r, i, l - 1)
      : `${r.slice(0, l)}\\${r.slice(l)}`;
  };
  ht.removePrefix = (r, i = {}) => {
    let e = r;
    return e.startsWith("./") && ((e = e.slice(2)), (i.prefix = "./")), e;
  };
  ht.wrapOutput = (r, i = {}, e = {}) => {
    let l = e.contains ? "" : "^",
      p = e.contains ? "" : "$",
      m = `${l}(?:${r})${p}`;
    return i.negated === !0 && (m = `(?:^(?!${m}).*$)`), m;
  };
});
var xu = te((wE, Fu) => {
  "use strict";
  var Pu = Mn(),
    {
      CHAR_ASTERISK: Gs,
      CHAR_AT: ew,
      CHAR_BACKWARD_SLASH: Un,
      CHAR_COMMA: tw,
      CHAR_DOT: Vs,
      CHAR_EXCLAMATION_MARK: Ks,
      CHAR_FORWARD_SLASH: Lu,
      CHAR_LEFT_CURLY_BRACE: zs,
      CHAR_LEFT_PARENTHESES: Qs,
      CHAR_LEFT_SQUARE_BRACKET: iw,
      CHAR_PLUS: nw,
      CHAR_QUESTION_MARK: Du,
      CHAR_RIGHT_CURLY_BRACE: rw,
      CHAR_RIGHT_PARENTHESES: Iu,
      CHAR_RIGHT_SQUARE_BRACKET: aw,
    } = In(),
    Mu = (r) => r === Lu || r === Un,
    Uu = (r) => {
      r.isPrefix !== !0 && (r.depth = r.isGlobstar ? 1 / 0 : 1);
    },
    sw = (r, i) => {
      let e = i || {},
        l = r.length - 1,
        p = e.parts === !0 || e.scanToEnd === !0,
        m = [],
        w = [],
        O = [],
        P = r,
        B = -1,
        D = 0,
        q = 0,
        x = !1,
        ie = !1,
        X = !1,
        J = !1,
        ce = !1,
        le = !1,
        Ae = !1,
        Ee = !1,
        xe = !1,
        _e = !1,
        Se = 0,
        de,
        Y,
        ne = { value: "", depth: 0, isGlob: !1 },
        Ce = () => B >= l,
        F = () => P.charCodeAt(B + 1),
        je = () => ((de = Y), P.charCodeAt(++B));
      for (; B < l; ) {
        Y = je();
        let ge;
        if (Y === Un) {
          (Ae = ne.backslashes = !0), (Y = je()), Y === zs && (le = !0);
          continue;
        }
        if (le === !0 || Y === zs) {
          for (Se++; Ce() !== !0 && (Y = je()); ) {
            if (Y === Un) {
              (Ae = ne.backslashes = !0), je();
              continue;
            }
            if (Y === zs) {
              Se++;
              continue;
            }
            if (le !== !0 && Y === Vs && (Y = je()) === Vs) {
              if (
                ((x = ne.isBrace = !0),
                (X = ne.isGlob = !0),
                (_e = !0),
                p === !0)
              )
                continue;
              break;
            }
            if (le !== !0 && Y === tw) {
              if (
                ((x = ne.isBrace = !0),
                (X = ne.isGlob = !0),
                (_e = !0),
                p === !0)
              )
                continue;
              break;
            }
            if (Y === rw && (Se--, Se === 0)) {
              (le = !1), (x = ne.isBrace = !0), (_e = !0);
              break;
            }
          }
          if (p === !0) continue;
          break;
        }
        if (Y === Lu) {
          if (
            (m.push(B),
            w.push(ne),
            (ne = { value: "", depth: 0, isGlob: !1 }),
            _e === !0)
          )
            continue;
          if (de === Vs && B === D + 1) {
            D += 2;
            continue;
          }
          q = B + 1;
          continue;
        }
        if (
          e.noext !== !0 &&
          (Y === nw || Y === ew || Y === Gs || Y === Du || Y === Ks) === !0 &&
          F() === Qs
        ) {
          if (
            ((X = ne.isGlob = !0),
            (J = ne.isExtglob = !0),
            (_e = !0),
            Y === Ks && B === D && (xe = !0),
            p === !0)
          ) {
            for (; Ce() !== !0 && (Y = je()); ) {
              if (Y === Un) {
                (Ae = ne.backslashes = !0), (Y = je());
                continue;
              }
              if (Y === Iu) {
                (X = ne.isGlob = !0), (_e = !0);
                break;
              }
            }
            continue;
          }
          break;
        }
        if (Y === Gs) {
          if (
            (de === Gs && (ce = ne.isGlobstar = !0),
            (X = ne.isGlob = !0),
            (_e = !0),
            p === !0)
          )
            continue;
          break;
        }
        if (Y === Du) {
          if (((X = ne.isGlob = !0), (_e = !0), p === !0)) continue;
          break;
        }
        if (Y === iw) {
          for (; Ce() !== !0 && (ge = je()); ) {
            if (ge === Un) {
              (Ae = ne.backslashes = !0), je();
              continue;
            }
            if (ge === aw) {
              (ie = ne.isBracket = !0), (X = ne.isGlob = !0), (_e = !0);
              break;
            }
          }
          if (p === !0) continue;
          break;
        }
        if (e.nonegate !== !0 && Y === Ks && B === D) {
          (Ee = ne.negated = !0), D++;
          continue;
        }
        if (e.noparen !== !0 && Y === Qs) {
          if (((X = ne.isGlob = !0), p === !0)) {
            for (; Ce() !== !0 && (Y = je()); ) {
              if (Y === Qs) {
                (Ae = ne.backslashes = !0), (Y = je());
                continue;
              }
              if (Y === Iu) {
                _e = !0;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (X === !0) {
          if (((_e = !0), p === !0)) continue;
          break;
        }
      }
      e.noext === !0 && ((J = !1), (X = !1));
      let ye = P,
        Ue = "",
        I = "";
      D > 0 && ((Ue = P.slice(0, D)), (P = P.slice(D)), (q -= D)),
        ye && X === !0 && q > 0
          ? ((ye = P.slice(0, q)), (I = P.slice(q)))
          : X === !0
          ? ((ye = ""), (I = P))
          : (ye = P),
        ye &&
          ye !== "" &&
          ye !== "/" &&
          ye !== P &&
          Mu(ye.charCodeAt(ye.length - 1)) &&
          (ye = ye.slice(0, -1)),
        e.unescape === !0 &&
          (I && (I = Pu.removeBackslashes(I)),
          ye && Ae === !0 && (ye = Pu.removeBackslashes(ye)));
      let L = {
        prefix: Ue,
        input: r,
        start: D,
        base: ye,
        glob: I,
        isBrace: x,
        isBracket: ie,
        isGlob: X,
        isExtglob: J,
        isGlobstar: ce,
        negated: Ee,
        negatedExtglob: xe,
      };
      if (
        (e.tokens === !0 &&
          ((L.maxDepth = 0), Mu(Y) || w.push(ne), (L.tokens = w)),
        e.parts === !0 || e.tokens === !0)
      ) {
        let ge;
        for (let we = 0; we < m.length; we++) {
          let lt = ge ? ge + 1 : D,
            Je = m[we],
            Te = r.slice(lt, Je);
          e.tokens &&
            (we === 0 && D !== 0
              ? ((w[we].isPrefix = !0), (w[we].value = Ue))
              : (w[we].value = Te),
            Uu(w[we]),
            (L.maxDepth += w[we].depth)),
            (we !== 0 || Te !== "") && O.push(Te),
            (ge = Je);
        }
        if (ge && ge + 1 < r.length) {
          let we = r.slice(ge + 1);
          O.push(we),
            e.tokens &&
              ((w[w.length - 1].value = we),
              Uu(w[w.length - 1]),
              (L.maxDepth += w[w.length - 1].depth));
        }
        (L.slashes = m), (L.parts = O);
      }
      return L;
    };
  Fu.exports = sw;
});
var Hu = te((kE, Yu) => {
  "use strict";
  var Sr = In(),
    vt = Mn(),
    {
      MAX_LENGTH: Cr,
      POSIX_REGEX_SOURCE: ow,
      REGEX_NON_SPECIAL_CHARS: cw,
      REGEX_SPECIAL_CHARS_BACKREF: lw,
      REPLACEMENTS: Nu,
    } = Sr,
    uw = (r, i) => {
      if (typeof i.expandRange == "function") return i.expandRange(...r, i);
      r.sort();
      let e = `[${r.join("-")}]`;
      try {
        new RegExp(e);
      } catch {
        return r.map((p) => vt.escapeRegex(p)).join("..");
      }
      return e;
    },
    Zi = (r, i) =>
      `Missing ${r}: "${i}" - use "\\\\${i}" to match literal characters`,
    Bu = (r, i) => {
      if (typeof r != "string") throw new TypeError("Expected a string");
      r = Nu[r] || r;
      let e = { ...i },
        l = typeof e.maxLength == "number" ? Math.min(Cr, e.maxLength) : Cr,
        p = r.length;
      if (p > l)
        throw new SyntaxError(
          `Input length: ${p}, exceeds maximum allowed length: ${l}`
        );
      let m = { type: "bos", value: "", output: e.prepend || "" },
        w = [m],
        O = e.capture ? "" : "?:",
        P = vt.isWindows(i),
        B = Sr.globChars(P),
        D = Sr.extglobChars(B),
        {
          DOT_LITERAL: q,
          PLUS_LITERAL: x,
          SLASH_LITERAL: ie,
          ONE_CHAR: X,
          DOTS_SLASH: J,
          NO_DOT: ce,
          NO_DOT_SLASH: le,
          NO_DOTS_SLASH: Ae,
          QMARK: Ee,
          QMARK_NO_DOT: xe,
          STAR: _e,
          START_ANCHOR: Se,
        } = B,
        de = (ee) => `(${O}(?:(?!${Se}${ee.dot ? J : q}).)*?)`,
        Y = e.dot ? "" : ce,
        ne = e.dot ? Ee : xe,
        Ce = e.bash === !0 ? de(e) : _e;
      e.capture && (Ce = `(${Ce})`),
        typeof e.noext == "boolean" && (e.noextglob = e.noext);
      let F = {
        input: r,
        index: -1,
        start: 0,
        dot: e.dot === !0,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: !1,
        negated: !1,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: !1,
        tokens: w,
      };
      (r = vt.removePrefix(r, F)), (p = r.length);
      let je = [],
        ye = [],
        Ue = [],
        I = m,
        L,
        ge = () => F.index === p - 1,
        we = (F.peek = (ee = 1) => r[F.index + ee]),
        lt = (F.advance = () => r[++F.index] || ""),
        Je = () => r.slice(F.index + 1),
        Te = (ee = "", b = 0) => {
          (F.consumed += ee), (F.index += b);
        },
        Gt = (ee) => {
          (F.output += ee.output != null ? ee.output : ee.value), Te(ee.value);
        },
        Ji = () => {
          let ee = 1;
          for (; we() === "!" && (we(2) !== "(" || we(3) === "?"); )
            lt(), F.start++, ee++;
          return ee % 2 === 0 ? !1 : ((F.negated = !0), F.start++, !0);
        },
        Ti = (ee) => {
          F[ee]++, Ue.push(ee);
        },
        Lt = (ee) => {
          F[ee]--, Ue.pop();
        },
        se = (ee) => {
          if (I.type === "globstar") {
            let b =
                F.braces > 0 && (ee.type === "comma" || ee.type === "brace"),
              z =
                ee.extglob === !0 ||
                (je.length && (ee.type === "pipe" || ee.type === "paren"));
            ee.type !== "slash" &&
              ee.type !== "paren" &&
              !b &&
              !z &&
              ((F.output = F.output.slice(0, -I.output.length)),
              (I.type = "star"),
              (I.value = "*"),
              (I.output = Ce),
              (F.output += I.output));
          }
          if (
            (je.length &&
              ee.type !== "paren" &&
              (je[je.length - 1].inner += ee.value),
            (ee.value || ee.output) && Gt(ee),
            I && I.type === "text" && ee.type === "text")
          ) {
            (I.value += ee.value), (I.output = (I.output || "") + ee.value);
            return;
          }
          (ee.prev = I), w.push(ee), (I = ee);
        },
        Vt = (ee, b) => {
          let z = { ...D[b], conditions: 1, inner: "" };
          (z.prev = I), (z.parens = F.parens), (z.output = F.output);
          let oe = (e.capture ? "(" : "") + z.open;
          Ti("parens"),
            se({ type: ee, value: b, output: F.output ? "" : X }),
            se({ type: "paren", extglob: !0, value: lt(), output: oe }),
            je.push(z);
        },
        si = (ee) => {
          let b = ee.close + (e.capture ? ")" : ""),
            z;
          if (ee.type === "negate") {
            let oe = Ce;
            ee.inner &&
              ee.inner.length > 1 &&
              ee.inner.includes("/") &&
              (oe = de(e)),
              (oe !== Ce || ge() || /^\)+$/.test(Je())) &&
                (b = ee.close = `)$))${oe}`),
              ee.inner.includes("*") &&
                (z = Je()) &&
                /^\.[^\\/.]+$/.test(z) &&
                (b = ee.close = `)${z})${oe})`),
              ee.prev.type === "bos" && (F.negatedExtglob = !0);
          }
          se({ type: "paren", extglob: !0, value: L, output: b }), Lt("parens");
        };
      if (e.fastpaths !== !1 && !/(^[*!]|[/()[\]{}"])/.test(r)) {
        let ee = !1,
          b = r.replace(lw, (z, oe, Ne, Ie, Ye, oi) =>
            Ie === "\\"
              ? ((ee = !0), z)
              : Ie === "?"
              ? oe
                ? oe + Ie + (Ye ? Ee.repeat(Ye.length) : "")
                : oi === 0
                ? ne + (Ye ? Ee.repeat(Ye.length) : "")
                : Ee.repeat(Ne.length)
              : Ie === "."
              ? q.repeat(Ne.length)
              : Ie === "*"
              ? oe
                ? oe + Ie + (Ye ? Ce : "")
                : Ce
              : oe
              ? z
              : `\\${z}`
          );
        return (
          ee === !0 &&
            (e.unescape === !0
              ? (b = b.replace(/\\/g, ""))
              : (b = b.replace(/\\+/g, (z) =>
                  z.length % 2 === 0 ? "\\\\" : z ? "\\" : ""
                ))),
          b === r && e.contains === !0
            ? ((F.output = r), F)
            : ((F.output = vt.wrapOutput(b, F, i)), F)
        );
      }
      for (; !ge(); ) {
        if (((L = lt()), L === "\0")) continue;
        if (L === "\\") {
          let z = we();
          if ((z === "/" && e.bash !== !0) || z === "." || z === ";") continue;
          if (!z) {
            (L += "\\"), se({ type: "text", value: L });
            continue;
          }
          let oe = /^\\+/.exec(Je()),
            Ne = 0;
          if (
            (oe &&
              oe[0].length > 2 &&
              ((Ne = oe[0].length),
              (F.index += Ne),
              Ne % 2 !== 0 && (L += "\\")),
            e.unescape === !0 ? (L = lt()) : (L += lt()),
            F.brackets === 0)
          ) {
            se({ type: "text", value: L });
            continue;
          }
        }
        if (
          F.brackets > 0 &&
          (L !== "]" || I.value === "[" || I.value === "[^")
        ) {
          if (e.posix !== !1 && L === ":") {
            let z = I.value.slice(1);
            if (z.includes("[") && ((I.posix = !0), z.includes(":"))) {
              let oe = I.value.lastIndexOf("["),
                Ne = I.value.slice(0, oe),
                Ie = I.value.slice(oe + 2),
                Ye = ow[Ie];
              if (Ye) {
                (I.value = Ne + Ye),
                  (F.backtrack = !0),
                  lt(),
                  !m.output && w.indexOf(I) === 1 && (m.output = X);
                continue;
              }
            }
          }
          ((L === "[" && we() !== ":") || (L === "-" && we() === "]")) &&
            (L = `\\${L}`),
            L === "]" &&
              (I.value === "[" || I.value === "[^") &&
              (L = `\\${L}`),
            e.posix === !0 && L === "!" && I.value === "[" && (L = "^"),
            (I.value += L),
            Gt({ value: L });
          continue;
        }
        if (F.quotes === 1 && L !== '"') {
          (L = vt.escapeRegex(L)), (I.value += L), Gt({ value: L });
          continue;
        }
        if (L === '"') {
          (F.quotes = F.quotes === 1 ? 0 : 1),
            e.keepQuotes === !0 && se({ type: "text", value: L });
          continue;
        }
        if (L === "(") {
          Ti("parens"), se({ type: "paren", value: L });
          continue;
        }
        if (L === ")") {
          if (F.parens === 0 && e.strictBrackets === !0)
            throw new SyntaxError(Zi("opening", "("));
          let z = je[je.length - 1];
          if (z && F.parens === z.parens + 1) {
            si(je.pop());
            continue;
          }
          se({ type: "paren", value: L, output: F.parens ? ")" : "\\)" }),
            Lt("parens");
          continue;
        }
        if (L === "[") {
          if (e.nobracket === !0 || !Je().includes("]")) {
            if (e.nobracket !== !0 && e.strictBrackets === !0)
              throw new SyntaxError(Zi("closing", "]"));
            L = `\\${L}`;
          } else Ti("brackets");
          se({ type: "bracket", value: L });
          continue;
        }
        if (L === "]") {
          if (
            e.nobracket === !0 ||
            (I && I.type === "bracket" && I.value.length === 1)
          ) {
            se({ type: "text", value: L, output: `\\${L}` });
            continue;
          }
          if (F.brackets === 0) {
            if (e.strictBrackets === !0)
              throw new SyntaxError(Zi("opening", "["));
            se({ type: "text", value: L, output: `\\${L}` });
            continue;
          }
          Lt("brackets");
          let z = I.value.slice(1);
          if (
            (I.posix !== !0 &&
              z[0] === "^" &&
              !z.includes("/") &&
              (L = `/${L}`),
            (I.value += L),
            Gt({ value: L }),
            e.literalBrackets === !1 || vt.hasRegexChars(z))
          )
            continue;
          let oe = vt.escapeRegex(I.value);
          if (
            ((F.output = F.output.slice(0, -I.value.length)),
            e.literalBrackets === !0)
          ) {
            (F.output += oe), (I.value = oe);
            continue;
          }
          (I.value = `(${O}${oe}|${I.value})`), (F.output += I.value);
          continue;
        }
        if (L === "{" && e.nobrace !== !0) {
          Ti("braces");
          let z = {
            type: "brace",
            value: L,
            output: "(",
            outputIndex: F.output.length,
            tokensIndex: F.tokens.length,
          };
          ye.push(z), se(z);
          continue;
        }
        if (L === "}") {
          let z = ye[ye.length - 1];
          if (e.nobrace === !0 || !z) {
            se({ type: "text", value: L, output: L });
            continue;
          }
          let oe = ")";
          if (z.dots === !0) {
            let Ne = w.slice(),
              Ie = [];
            for (
              let Ye = Ne.length - 1;
              Ye >= 0 && (w.pop(), Ne[Ye].type !== "brace");
              Ye--
            )
              Ne[Ye].type !== "dots" && Ie.unshift(Ne[Ye].value);
            (oe = uw(Ie, e)), (F.backtrack = !0);
          }
          if (z.comma !== !0 && z.dots !== !0) {
            let Ne = F.output.slice(0, z.outputIndex),
              Ie = F.tokens.slice(z.tokensIndex);
            (z.value = z.output = "\\{"), (L = oe = "\\}"), (F.output = Ne);
            for (let Ye of Ie) F.output += Ye.output || Ye.value;
          }
          se({ type: "brace", value: L, output: oe }), Lt("braces"), ye.pop();
          continue;
        }
        if (L === "|") {
          je.length > 0 && je[je.length - 1].conditions++,
            se({ type: "text", value: L });
          continue;
        }
        if (L === ",") {
          let z = L,
            oe = ye[ye.length - 1];
          oe && Ue[Ue.length - 1] === "braces" && ((oe.comma = !0), (z = "|")),
            se({ type: "comma", value: L, output: z });
          continue;
        }
        if (L === "/") {
          if (I.type === "dot" && F.index === F.start + 1) {
            (F.start = F.index + 1),
              (F.consumed = ""),
              (F.output = ""),
              w.pop(),
              (I = m);
            continue;
          }
          se({ type: "slash", value: L, output: ie });
          continue;
        }
        if (L === ".") {
          if (F.braces > 0 && I.type === "dot") {
            I.value === "." && (I.output = q);
            let z = ye[ye.length - 1];
            (I.type = "dots"), (I.output += L), (I.value += L), (z.dots = !0);
            continue;
          }
          if (
            F.braces + F.parens === 0 &&
            I.type !== "bos" &&
            I.type !== "slash"
          ) {
            se({ type: "text", value: L, output: q });
            continue;
          }
          se({ type: "dot", value: L, output: q });
          continue;
        }
        if (L === "?") {
          if (
            !(I && I.value === "(") &&
            e.noextglob !== !0 &&
            we() === "(" &&
            we(2) !== "?"
          ) {
            Vt("qmark", L);
            continue;
          }
          if (I && I.type === "paren") {
            let oe = we(),
              Ne = L;
            if (oe === "<" && !vt.supportsLookbehinds())
              throw new Error(
                "Node.js v10 or higher is required for regex lookbehinds"
              );
            ((I.value === "(" && !/[!=<:]/.test(oe)) ||
              (oe === "<" && !/<([!=]|\w+>)/.test(Je()))) &&
              (Ne = `\\${L}`),
              se({ type: "text", value: L, output: Ne });
            continue;
          }
          if (e.dot !== !0 && (I.type === "slash" || I.type === "bos")) {
            se({ type: "qmark", value: L, output: xe });
            continue;
          }
          se({ type: "qmark", value: L, output: Ee });
          continue;
        }
        if (L === "!") {
          if (
            e.noextglob !== !0 &&
            we() === "(" &&
            (we(2) !== "?" || !/[!=<:]/.test(we(3)))
          ) {
            Vt("negate", L);
            continue;
          }
          if (e.nonegate !== !0 && F.index === 0) {
            Ji();
            continue;
          }
        }
        if (L === "+") {
          if (e.noextglob !== !0 && we() === "(" && we(2) !== "?") {
            Vt("plus", L);
            continue;
          }
          if ((I && I.value === "(") || e.regex === !1) {
            se({ type: "plus", value: L, output: x });
            continue;
          }
          if (
            (I &&
              (I.type === "bracket" ||
                I.type === "paren" ||
                I.type === "brace")) ||
            F.parens > 0
          ) {
            se({ type: "plus", value: L });
            continue;
          }
          se({ type: "plus", value: x });
          continue;
        }
        if (L === "@") {
          if (e.noextglob !== !0 && we() === "(" && we(2) !== "?") {
            se({ type: "at", extglob: !0, value: L, output: "" });
            continue;
          }
          se({ type: "text", value: L });
          continue;
        }
        if (L !== "*") {
          (L === "$" || L === "^") && (L = `\\${L}`);
          let z = cw.exec(Je());
          z && ((L += z[0]), (F.index += z[0].length)),
            se({ type: "text", value: L });
          continue;
        }
        if (I && (I.type === "globstar" || I.star === !0)) {
          (I.type = "star"),
            (I.star = !0),
            (I.value += L),
            (I.output = Ce),
            (F.backtrack = !0),
            (F.globstar = !0),
            Te(L);
          continue;
        }
        let ee = Je();
        if (e.noextglob !== !0 && /^\([^?]/.test(ee)) {
          Vt("star", L);
          continue;
        }
        if (I.type === "star") {
          if (e.noglobstar === !0) {
            Te(L);
            continue;
          }
          let z = I.prev,
            oe = z.prev,
            Ne = z.type === "slash" || z.type === "bos",
            Ie = oe && (oe.type === "star" || oe.type === "globstar");
          if (e.bash === !0 && (!Ne || (ee[0] && ee[0] !== "/"))) {
            se({ type: "star", value: L, output: "" });
            continue;
          }
          let Ye = F.braces > 0 && (z.type === "comma" || z.type === "brace"),
            oi = je.length && (z.type === "pipe" || z.type === "paren");
          if (!Ne && z.type !== "paren" && !Ye && !oi) {
            se({ type: "star", value: L, output: "" });
            continue;
          }
          for (; ee.slice(0, 3) === "/**"; ) {
            let Kt = r[F.index + 4];
            if (Kt && Kt !== "/") break;
            (ee = ee.slice(3)), Te("/**", 3);
          }
          if (z.type === "bos" && ge()) {
            (I.type = "globstar"),
              (I.value += L),
              (I.output = de(e)),
              (F.output = I.output),
              (F.globstar = !0),
              Te(L);
            continue;
          }
          if (z.type === "slash" && z.prev.type !== "bos" && !Ie && ge()) {
            (F.output = F.output.slice(0, -(z.output + I.output).length)),
              (z.output = `(?:${z.output}`),
              (I.type = "globstar"),
              (I.output = de(e) + (e.strictSlashes ? ")" : "|$)")),
              (I.value += L),
              (F.globstar = !0),
              (F.output += z.output + I.output),
              Te(L);
            continue;
          }
          if (z.type === "slash" && z.prev.type !== "bos" && ee[0] === "/") {
            let Kt = ee[1] !== void 0 ? "|$" : "";
            (F.output = F.output.slice(0, -(z.output + I.output).length)),
              (z.output = `(?:${z.output}`),
              (I.type = "globstar"),
              (I.output = `${de(e)}${ie}|${ie}${Kt})`),
              (I.value += L),
              (F.output += z.output + I.output),
              (F.globstar = !0),
              Te(L + lt()),
              se({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (z.type === "bos" && ee[0] === "/") {
            (I.type = "globstar"),
              (I.value += L),
              (I.output = `(?:^|${ie}|${de(e)}${ie})`),
              (F.output = I.output),
              (F.globstar = !0),
              Te(L + lt()),
              se({ type: "slash", value: "/", output: "" });
            continue;
          }
          (F.output = F.output.slice(0, -I.output.length)),
            (I.type = "globstar"),
            (I.output = de(e)),
            (I.value += L),
            (F.output += I.output),
            (F.globstar = !0),
            Te(L);
          continue;
        }
        let b = { type: "star", value: L, output: Ce };
        if (e.bash === !0) {
          (b.output = ".*?"),
            (I.type === "bos" || I.type === "slash") &&
              (b.output = Y + b.output),
            se(b);
          continue;
        }
        if (
          I &&
          (I.type === "bracket" || I.type === "paren") &&
          e.regex === !0
        ) {
          (b.output = L), se(b);
          continue;
        }
        (F.index === F.start || I.type === "slash" || I.type === "dot") &&
          (I.type === "dot"
            ? ((F.output += le), (I.output += le))
            : e.dot === !0
            ? ((F.output += Ae), (I.output += Ae))
            : ((F.output += Y), (I.output += Y)),
          we() !== "*" && ((F.output += X), (I.output += X))),
          se(b);
      }
      for (; F.brackets > 0; ) {
        if (e.strictBrackets === !0) throw new SyntaxError(Zi("closing", "]"));
        (F.output = vt.escapeLast(F.output, "[")), Lt("brackets");
      }
      for (; F.parens > 0; ) {
        if (e.strictBrackets === !0) throw new SyntaxError(Zi("closing", ")"));
        (F.output = vt.escapeLast(F.output, "(")), Lt("parens");
      }
      for (; F.braces > 0; ) {
        if (e.strictBrackets === !0) throw new SyntaxError(Zi("closing", "}"));
        (F.output = vt.escapeLast(F.output, "{")), Lt("braces");
      }
      if (
        (e.strictSlashes !== !0 &&
          (I.type === "star" || I.type === "bracket") &&
          se({ type: "maybe_slash", value: "", output: `${ie}?` }),
        F.backtrack === !0)
      ) {
        F.output = "";
        for (let ee of F.tokens)
          (F.output += ee.output != null ? ee.output : ee.value),
            ee.suffix && (F.output += ee.suffix);
      }
      return F;
    };
  Bu.fastpaths = (r, i) => {
    let e = { ...i },
      l = typeof e.maxLength == "number" ? Math.min(Cr, e.maxLength) : Cr,
      p = r.length;
    if (p > l)
      throw new SyntaxError(
        `Input length: ${p}, exceeds maximum allowed length: ${l}`
      );
    r = Nu[r] || r;
    let m = vt.isWindows(i),
      {
        DOT_LITERAL: w,
        SLASH_LITERAL: O,
        ONE_CHAR: P,
        DOTS_SLASH: B,
        NO_DOT: D,
        NO_DOTS: q,
        NO_DOTS_SLASH: x,
        STAR: ie,
        START_ANCHOR: X,
      } = Sr.globChars(m),
      J = e.dot ? q : D,
      ce = e.dot ? x : D,
      le = e.capture ? "" : "?:",
      Ae = { negated: !1, prefix: "" },
      Ee = e.bash === !0 ? ".*?" : ie;
    e.capture && (Ee = `(${Ee})`);
    let xe = (Y) =>
        Y.noglobstar === !0 ? Ee : `(${le}(?:(?!${X}${Y.dot ? B : w}).)*?)`,
      _e = (Y) => {
        switch (Y) {
          case "*":
            return `${J}${P}${Ee}`;
          case ".*":
            return `${w}${P}${Ee}`;
          case "*.*":
            return `${J}${Ee}${w}${P}${Ee}`;
          case "*/*":
            return `${J}${Ee}${O}${P}${ce}${Ee}`;
          case "**":
            return J + xe(e);
          case "**/*":
            return `(?:${J}${xe(e)}${O})?${ce}${P}${Ee}`;
          case "**/*.*":
            return `(?:${J}${xe(e)}${O})?${ce}${Ee}${w}${P}${Ee}`;
          case "**/.*":
            return `(?:${J}${xe(e)}${O})?${w}${P}${Ee}`;
          default: {
            let ne = /^(.*?)\.(\w+)$/.exec(Y);
            if (!ne) return;
            let Ce = _e(ne[1]);
            return Ce ? Ce + w + ne[2] : void 0;
          }
        }
      },
      Se = vt.removePrefix(r, Ae),
      de = _e(Se);
    return de && e.strictSlashes !== !0 && (de += `${O}?`), de;
  };
  Yu.exports = Bu;
});
var Wu = te((EE, qu) => {
  "use strict";
  var _w = require("path"),
    dw = xu(),
    Xs = Hu(),
    Js = Mn(),
    fw = In(),
    hw = (r) => r && typeof r == "object" && !Array.isArray(r),
    Ke = (r, i, e = !1) => {
      if (Array.isArray(r)) {
        let D = r.map((x) => Ke(x, i, e));
        return (x) => {
          for (let ie of D) {
            let X = ie(x);
            if (X) return X;
          }
          return !1;
        };
      }
      let l = hw(r) && r.tokens && r.input;
      if (r === "" || (typeof r != "string" && !l))
        throw new TypeError("Expected pattern to be a non-empty string");
      let p = i || {},
        m = Js.isWindows(i),
        w = l ? Ke.compileRe(r, i) : Ke.makeRe(r, i, !1, !0),
        O = w.state;
      delete w.state;
      let P = () => !1;
      if (p.ignore) {
        let D = { ...i, ignore: null, onMatch: null, onResult: null };
        P = Ke(p.ignore, D, e);
      }
      let B = (D, q = !1) => {
        let {
            isMatch: x,
            match: ie,
            output: X,
          } = Ke.test(D, w, i, { glob: r, posix: m }),
          J = {
            glob: r,
            state: O,
            regex: w,
            posix: m,
            input: D,
            output: X,
            match: ie,
            isMatch: x,
          };
        return (
          typeof p.onResult == "function" && p.onResult(J),
          x === !1
            ? ((J.isMatch = !1), q ? J : !1)
            : P(D)
            ? (typeof p.onIgnore == "function" && p.onIgnore(J),
              (J.isMatch = !1),
              q ? J : !1)
            : (typeof p.onMatch == "function" && p.onMatch(J), q ? J : !0)
        );
      };
      return e && (B.state = O), B;
    };
  Ke.test = (r, i, e, { glob: l, posix: p } = {}) => {
    if (typeof r != "string")
      throw new TypeError("Expected input to be a string");
    if (r === "") return { isMatch: !1, output: "" };
    let m = e || {},
      w = m.format || (p ? Js.toPosixSlashes : null),
      O = r === l,
      P = O && w ? w(r) : r;
    return (
      O === !1 && ((P = w ? w(r) : r), (O = P === l)),
      (O === !1 || m.capture === !0) &&
        (m.matchBase === !0 || m.basename === !0
          ? (O = Ke.matchBase(r, i, e, p))
          : (O = i.exec(P))),
      { isMatch: Boolean(O), match: O, output: P }
    );
  };
  Ke.matchBase = (r, i, e, l = Js.isWindows(e)) =>
    (i instanceof RegExp ? i : Ke.makeRe(i, e)).test(_w.basename(r));
  Ke.isMatch = (r, i, e) => Ke(i, e)(r);
  Ke.parse = (r, i) =>
    Array.isArray(r)
      ? r.map((e) => Ke.parse(e, i))
      : Xs(r, { ...i, fastpaths: !1 });
  Ke.scan = (r, i) => dw(r, i);
  Ke.compileRe = (r, i, e = !1, l = !1) => {
    if (e === !0) return r.output;
    let p = i || {},
      m = p.contains ? "" : "^",
      w = p.contains ? "" : "$",
      O = `${m}(?:${r.output})${w}`;
    r && r.negated === !0 && (O = `^(?!${O}).*$`);
    let P = Ke.toRegex(O, i);
    return l === !0 && (P.state = r), P;
  };
  Ke.makeRe = (r, i = {}, e = !1, l = !1) => {
    if (!r || typeof r != "string")
      throw new TypeError("Expected a non-empty string");
    let p = { negated: !1, fastpaths: !0 };
    return (
      i.fastpaths !== !1 &&
        (r[0] === "." || r[0] === "*") &&
        (p.output = Xs.fastpaths(r, i)),
      p.output || (p = Xs(r, i)),
      Ke.compileRe(p, i, e, l)
    );
  };
  Ke.toRegex = (r, i) => {
    try {
      let e = i || {};
      return new RegExp(r, e.flags || (e.nocase ? "i" : ""));
    } catch (e) {
      if (i && i.debug === !0) throw e;
      return /$^/;
    }
  };
  Ke.constants = fw;
  qu.exports = Ke;
});
var $u = te((SE, Zu) => {
  "use strict";
  Zu.exports = Wu();
});
var Qu = te((CE, zu) => {
  "use strict";
  var Vu = require("util"),
    Ku = Su(),
    It = $u(),
    eo = Mn(),
    Gu = (r) => r === "" || r === "./",
    Be = (r, i, e) => {
      (i = [].concat(i)), (r = [].concat(r));
      let l = new Set(),
        p = new Set(),
        m = new Set(),
        w = 0,
        O = (D) => {
          m.add(D.output), e && e.onResult && e.onResult(D);
        };
      for (let D = 0; D < i.length; D++) {
        let q = It(String(i[D]), { ...e, onResult: O }, !0),
          x = q.state.negated || q.state.negatedExtglob;
        x && w++;
        for (let ie of r) {
          let X = q(ie, !0);
          !(x ? !X.isMatch : X.isMatch) ||
            (x ? l.add(X.output) : (l.delete(X.output), p.add(X.output)));
        }
      }
      let B = (w === i.length ? [...m] : [...p]).filter((D) => !l.has(D));
      if (e && B.length === 0) {
        if (e.failglob === !0)
          throw new Error(`No matches found for "${i.join(", ")}"`);
        if (e.nonull === !0 || e.nullglob === !0)
          return e.unescape ? i.map((D) => D.replace(/\\/g, "")) : i;
      }
      return B;
    };
  Be.match = Be;
  Be.matcher = (r, i) => It(r, i);
  Be.isMatch = (r, i, e) => It(i, e)(r);
  Be.any = Be.isMatch;
  Be.not = (r, i, e = {}) => {
    i = [].concat(i).map(String);
    let l = new Set(),
      p = [],
      w = Be(r, i, {
        ...e,
        onResult: (O) => {
          e.onResult && e.onResult(O), p.push(O.output);
        },
      });
    for (let O of p) w.includes(O) || l.add(O);
    return [...l];
  };
  Be.contains = (r, i, e) => {
    if (typeof r != "string")
      throw new TypeError(`Expected a string: "${Vu.inspect(r)}"`);
    if (Array.isArray(i)) return i.some((l) => Be.contains(r, l, e));
    if (typeof i == "string") {
      if (Gu(r) || Gu(i)) return !1;
      if (r.includes(i) || (r.startsWith("./") && r.slice(2).includes(i)))
        return !0;
    }
    return Be.isMatch(r, i, { ...e, contains: !0 });
  };
  Be.matchKeys = (r, i, e) => {
    if (!eo.isObject(r))
      throw new TypeError("Expected the first argument to be an object");
    let l = Be(Object.keys(r), i, e),
      p = {};
    for (let m of l) p[m] = r[m];
    return p;
  };
  Be.some = (r, i, e) => {
    let l = [].concat(r);
    for (let p of [].concat(i)) {
      let m = It(String(p), e);
      if (l.some((w) => m(w))) return !0;
    }
    return !1;
  };
  Be.every = (r, i, e) => {
    let l = [].concat(r);
    for (let p of [].concat(i)) {
      let m = It(String(p), e);
      if (!l.every((w) => m(w))) return !1;
    }
    return !0;
  };
  Be.all = (r, i, e) => {
    if (typeof r != "string")
      throw new TypeError(`Expected a string: "${Vu.inspect(r)}"`);
    return [].concat(i).every((l) => It(l, e)(r));
  };
  Be.capture = (r, i, e) => {
    let l = eo.isWindows(e),
      m = It.makeRe(String(r), { ...e, capture: !0 }).exec(
        l ? eo.toPosixSlashes(i) : i
      );
    if (m) return m.slice(1).map((w) => (w === void 0 ? "" : w));
  };
  Be.makeRe = (...r) => It.makeRe(...r);
  Be.scan = (...r) => It.scan(...r);
  Be.parse = (r, i) => {
    let e = [];
    for (let l of [].concat(r || []))
      for (let p of Ku(String(l), i)) e.push(It.parse(p, i));
    return e;
  };
  Be.braces = (r, i) => {
    if (typeof r != "string") throw new TypeError("Expected a string");
    return (i && i.nobrace === !0) || !/\{.*\}/.test(r) ? [r] : Ku(r, i);
  };
  Be.braceExpand = (r, i) => {
    if (typeof r != "string") throw new TypeError("Expected a string");
    return Be.braces(r, { ...i, expand: !0 });
  };
  zu.exports = Be;
});
var a_ = te((be) => {
  "use strict";
  Object.defineProperty(be, "__esModule", { value: !0 });
  be.matchAny =
    be.convertPatternsToRe =
    be.makeRe =
    be.getPatternParts =
    be.expandBraceExpansion =
    be.expandPatternsWithBraceExpansion =
    be.isAffectDepthOfReadingPattern =
    be.endsWithSlashGlobStar =
    be.hasGlobStar =
    be.getBaseDirectory =
    be.isPatternRelatedToParentDirectory =
    be.getPatternsOutsideCurrentDirectory =
    be.getPatternsInsideCurrentDirectory =
    be.getPositivePatterns =
    be.getNegativePatterns =
    be.isPositivePattern =
    be.isNegativePattern =
    be.convertToNegativePattern =
    be.convertToPositivePattern =
    be.isDynamicPattern =
    be.isStaticPattern =
      void 0;
  var bw = require("path"),
    pw = Hl(),
    to = Qu(),
    Xu = "**",
    yw = "\\",
    gw = /[*?]|^!/,
    vw = /\[[^[]*]/,
    jw = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,
    mw = /[!*+?@]\([^(]*\)/,
    ww = /,|\.\./;
  function Ju(r, i = {}) {
    return !e_(r, i);
  }
  be.isStaticPattern = Ju;
  function e_(r, i = {}) {
    return r === ""
      ? !1
      : !!(
          i.caseSensitiveMatch === !1 ||
          r.includes(yw) ||
          gw.test(r) ||
          vw.test(r) ||
          jw.test(r) ||
          (i.extglob !== !1 && mw.test(r)) ||
          (i.braceExpansion !== !1 && kw(r))
        );
  }
  be.isDynamicPattern = e_;
  function kw(r) {
    let i = r.indexOf("{");
    if (i === -1) return !1;
    let e = r.indexOf("}", i + 1);
    if (e === -1) return !1;
    let l = r.slice(i, e);
    return ww.test(l);
  }
  function Ew(r) {
    return Ar(r) ? r.slice(1) : r;
  }
  be.convertToPositivePattern = Ew;
  function Sw(r) {
    return "!" + r;
  }
  be.convertToNegativePattern = Sw;
  function Ar(r) {
    return r.startsWith("!") && r[1] !== "(";
  }
  be.isNegativePattern = Ar;
  function t_(r) {
    return !Ar(r);
  }
  be.isPositivePattern = t_;
  function Cw(r) {
    return r.filter(Ar);
  }
  be.getNegativePatterns = Cw;
  function Aw(r) {
    return r.filter(t_);
  }
  be.getPositivePatterns = Aw;
  function Rw(r) {
    return r.filter((i) => !io(i));
  }
  be.getPatternsInsideCurrentDirectory = Rw;
  function Ow(r) {
    return r.filter(io);
  }
  be.getPatternsOutsideCurrentDirectory = Ow;
  function io(r) {
    return r.startsWith("..") || r.startsWith("./..");
  }
  be.isPatternRelatedToParentDirectory = io;
  function Tw(r) {
    return pw(r, { flipBackslashes: !1 });
  }
  be.getBaseDirectory = Tw;
  function Pw(r) {
    return r.includes(Xu);
  }
  be.hasGlobStar = Pw;
  function i_(r) {
    return r.endsWith("/" + Xu);
  }
  be.endsWithSlashGlobStar = i_;
  function Dw(r) {
    let i = bw.basename(r);
    return i_(r) || Ju(i);
  }
  be.isAffectDepthOfReadingPattern = Dw;
  function Iw(r) {
    return r.reduce((i, e) => i.concat(n_(e)), []);
  }
  be.expandPatternsWithBraceExpansion = Iw;
  function n_(r) {
    return to.braces(r, { expand: !0, nodupes: !0 });
  }
  be.expandBraceExpansion = n_;
  function Mw(r, i) {
    let { parts: e } = to.scan(
      r,
      Object.assign(Object.assign({}, i), { parts: !0 })
    );
    return (
      e.length === 0 && (e = [r]),
      e[0].startsWith("/") && ((e[0] = e[0].slice(1)), e.unshift("")),
      e
    );
  }
  be.getPatternParts = Mw;
  function r_(r, i) {
    return to.makeRe(r, i);
  }
  be.makeRe = r_;
  function Uw(r, i) {
    return r.map((e) => r_(e, i));
  }
  be.convertPatternsToRe = Uw;
  function Lw(r, i) {
    return i.some((e) => e.test(r));
  }
  be.matchAny = Lw;
});
var l_ = te((RE, c_) => {
  "use strict";
  var Fw = require("stream"),
    s_ = Fw.PassThrough,
    xw = Array.prototype.slice;
  c_.exports = Nw;
  function Nw() {
    let r = [],
      i = xw.call(arguments),
      e = !1,
      l = i[i.length - 1];
    l && !Array.isArray(l) && l.pipe == null ? i.pop() : (l = {});
    let p = l.end !== !1,
      m = l.pipeError === !0;
    l.objectMode == null && (l.objectMode = !0),
      l.highWaterMark == null && (l.highWaterMark = 64 * 1024);
    let w = s_(l);
    function O() {
      for (let D = 0, q = arguments.length; D < q; D++)
        r.push(o_(arguments[D], l));
      return P(), this;
    }
    function P() {
      if (e) return;
      e = !0;
      let D = r.shift();
      if (!D) {
        process.nextTick(B);
        return;
      }
      Array.isArray(D) || (D = [D]);
      let q = D.length + 1;
      function x() {
        --q > 0 || ((e = !1), P());
      }
      function ie(X) {
        function J() {
          X.removeListener("merge2UnpipeEnd", J),
            X.removeListener("end", J),
            m && X.removeListener("error", ce),
            x();
        }
        function ce(le) {
          w.emit("error", le);
        }
        if (X._readableState.endEmitted) return x();
        X.on("merge2UnpipeEnd", J),
          X.on("end", J),
          m && X.on("error", ce),
          X.pipe(w, { end: !1 }),
          X.resume();
      }
      for (let X = 0; X < D.length; X++) ie(D[X]);
      x();
    }
    function B() {
      (e = !1), w.emit("queueDrain"), p && w.end();
    }
    return (
      w.setMaxListeners(0),
      (w.add = O),
      w.on("unpipe", function (D) {
        D.emit("merge2UnpipeEnd");
      }),
      i.length && O.apply(null, i),
      w
    );
  }
  function o_(r, i) {
    if (Array.isArray(r))
      for (let e = 0, l = r.length; e < l; e++) r[e] = o_(r[e], i);
    else {
      if (
        (!r._readableState && r.pipe && (r = r.pipe(s_(i))),
        !r._readableState || !r.pause || !r.pipe)
      )
        throw new Error("Only readable stream can be merged.");
      r.pause();
    }
    return r;
  }
});
var __ = te((Rr) => {
  "use strict";
  Object.defineProperty(Rr, "__esModule", { value: !0 });
  Rr.merge = void 0;
  var Bw = l_();
  function Yw(r) {
    let i = Bw(r);
    return (
      r.forEach((e) => {
        e.once("error", (l) => i.emit("error", l));
      }),
      i.once("close", () => u_(r)),
      i.once("end", () => u_(r)),
      i
    );
  }
  Rr.merge = Yw;
  function u_(r) {
    r.forEach((i) => i.emit("close"));
  }
});
var d_ = te(($i) => {
  "use strict";
  Object.defineProperty($i, "__esModule", { value: !0 });
  $i.isEmpty = $i.isString = void 0;
  function Hw(r) {
    return typeof r == "string";
  }
  $i.isString = Hw;
  function qw(r) {
    return r === "";
  }
  $i.isEmpty = qw;
});
var Zt = te((st) => {
  "use strict";
  Object.defineProperty(st, "__esModule", { value: !0 });
  st.string =
    st.stream =
    st.pattern =
    st.path =
    st.fs =
    st.errno =
    st.array =
      void 0;
  var Ww = Dl();
  st.array = Ww;
  var Zw = Il();
  st.errno = Zw;
  var $w = Ml();
  st.fs = $w;
  var Gw = Ul();
  st.path = Gw;
  var Vw = a_();
  st.pattern = Vw;
  var Kw = __();
  st.stream = Kw;
  var zw = d_();
  st.string = zw;
});
var b_ = te((ot) => {
  "use strict";
  Object.defineProperty(ot, "__esModule", { value: !0 });
  ot.convertPatternGroupToTask =
    ot.convertPatternGroupsToTasks =
    ot.groupPatternsByBaseDirectory =
    ot.getNegativePatternsAsPositive =
    ot.getPositivePatterns =
    ot.convertPatternsToTasks =
    ot.generate =
      void 0;
  var $t = Zt();
  function Qw(r, i) {
    let e = f_(r),
      l = h_(r, i.ignore),
      p = e.filter((P) => $t.pattern.isStaticPattern(P, i)),
      m = e.filter((P) => $t.pattern.isDynamicPattern(P, i)),
      w = no(p, l, !1),
      O = no(m, l, !0);
    return w.concat(O);
  }
  ot.generate = Qw;
  function no(r, i, e) {
    let l = [],
      p = $t.pattern.getPatternsOutsideCurrentDirectory(r),
      m = $t.pattern.getPatternsInsideCurrentDirectory(r),
      w = ro(p),
      O = ro(m);
    return (
      l.push(...ao(w, i, e)),
      "." in O ? l.push(so(".", m, i, e)) : l.push(...ao(O, i, e)),
      l
    );
  }
  ot.convertPatternsToTasks = no;
  function f_(r) {
    return $t.pattern.getPositivePatterns(r);
  }
  ot.getPositivePatterns = f_;
  function h_(r, i) {
    return $t.pattern
      .getNegativePatterns(r)
      .concat(i)
      .map($t.pattern.convertToPositivePattern);
  }
  ot.getNegativePatternsAsPositive = h_;
  function ro(r) {
    let i = {};
    return r.reduce((e, l) => {
      let p = $t.pattern.getBaseDirectory(l);
      return p in e ? e[p].push(l) : (e[p] = [l]), e;
    }, i);
  }
  ot.groupPatternsByBaseDirectory = ro;
  function ao(r, i, e) {
    return Object.keys(r).map((l) => so(l, r[l], i, e));
  }
  ot.convertPatternGroupsToTasks = ao;
  function so(r, i, e, l) {
    return {
      dynamic: l,
      positive: i,
      negative: e,
      base: r,
      patterns: [].concat(i, e.map($t.pattern.convertToNegativePattern)),
    };
  }
  ot.convertPatternGroupToTask = so;
});
var y_ = te((Gi) => {
  "use strict";
  Object.defineProperty(Gi, "__esModule", { value: !0 });
  Gi.removeDuplicateSlashes = Gi.transform = void 0;
  var Xw = /(?!^)\/{2,}/g;
  function Jw(r) {
    return r.map((i) => p_(i));
  }
  Gi.transform = Jw;
  function p_(r) {
    return r.replace(Xw, "/");
  }
  Gi.removeDuplicateSlashes = p_;
});
var v_ = te((Or) => {
  "use strict";
  Object.defineProperty(Or, "__esModule", { value: !0 });
  Or.read = void 0;
  function ek(r, i, e) {
    i.fs.lstat(r, (l, p) => {
      if (l !== null) {
        g_(e, l);
        return;
      }
      if (!p.isSymbolicLink() || !i.followSymbolicLink) {
        oo(e, p);
        return;
      }
      i.fs.stat(r, (m, w) => {
        if (m !== null) {
          if (i.throwErrorOnBrokenSymbolicLink) {
            g_(e, m);
            return;
          }
          oo(e, p);
          return;
        }
        i.markSymbolicLink && (w.isSymbolicLink = () => !0), oo(e, w);
      });
    });
  }
  Or.read = ek;
  function g_(r, i) {
    r(i);
  }
  function oo(r, i) {
    r(null, i);
  }
});
var j_ = te((Tr) => {
  "use strict";
  Object.defineProperty(Tr, "__esModule", { value: !0 });
  Tr.read = void 0;
  function tk(r, i) {
    let e = i.fs.lstatSync(r);
    if (!e.isSymbolicLink() || !i.followSymbolicLink) return e;
    try {
      let l = i.fs.statSync(r);
      return i.markSymbolicLink && (l.isSymbolicLink = () => !0), l;
    } catch (l) {
      if (!i.throwErrorOnBrokenSymbolicLink) return e;
      throw l;
    }
  }
  Tr.read = tk;
});
var m_ = te((ei) => {
  "use strict";
  Object.defineProperty(ei, "__esModule", { value: !0 });
  ei.createFileSystemAdapter = ei.FILE_SYSTEM_ADAPTER = void 0;
  var Pr = require("fs");
  ei.FILE_SYSTEM_ADAPTER = {
    lstat: Pr.lstat,
    stat: Pr.stat,
    lstatSync: Pr.lstatSync,
    statSync: Pr.statSync,
  };
  function ik(r) {
    return r === void 0
      ? ei.FILE_SYSTEM_ADAPTER
      : Object.assign(Object.assign({}, ei.FILE_SYSTEM_ADAPTER), r);
  }
  ei.createFileSystemAdapter = ik;
});
var w_ = te((lo) => {
  "use strict";
  Object.defineProperty(lo, "__esModule", { value: !0 });
  var nk = m_(),
    co = class {
      constructor(i = {}) {
        (this._options = i),
          (this.followSymbolicLink = this._getValue(
            this._options.followSymbolicLink,
            !0
          )),
          (this.fs = nk.createFileSystemAdapter(this._options.fs)),
          (this.markSymbolicLink = this._getValue(
            this._options.markSymbolicLink,
            !1
          )),
          (this.throwErrorOnBrokenSymbolicLink = this._getValue(
            this._options.throwErrorOnBrokenSymbolicLink,
            !0
          ));
      }
      _getValue(i, e) {
        return i ?? e;
      }
    };
  lo.default = co;
});
var Ai = te((ti) => {
  "use strict";
  Object.defineProperty(ti, "__esModule", { value: !0 });
  ti.statSync = ti.stat = ti.Settings = void 0;
  var k_ = v_(),
    rk = j_(),
    uo = w_();
  ti.Settings = uo.default;
  function ak(r, i, e) {
    if (typeof i == "function") {
      k_.read(r, _o(), i);
      return;
    }
    k_.read(r, _o(i), e);
  }
  ti.stat = ak;
  function sk(r, i) {
    let e = _o(i);
    return rk.read(r, e);
  }
  ti.statSync = sk;
  function _o(r = {}) {
    return r instanceof uo.default ? r : new uo.default(r);
  }
});
var C_ = te((NE, S_) => {
  var E_;
  S_.exports =
    typeof queueMicrotask == "function"
      ? queueMicrotask.bind(typeof window < "u" ? window : global)
      : (r) =>
          (E_ || (E_ = Promise.resolve())).then(r).catch((i) =>
            setTimeout(() => {
              throw i;
            }, 0)
          );
});
var R_ = te((BE, A_) => {
  A_.exports = ck;
  var ok = C_();
  function ck(r, i) {
    let e,
      l,
      p,
      m = !0;
    Array.isArray(r)
      ? ((e = []), (l = r.length))
      : ((p = Object.keys(r)), (e = {}), (l = p.length));
    function w(P) {
      function B() {
        i && i(P, e), (i = null);
      }
      m ? ok(B) : B();
    }
    function O(P, B, D) {
      (e[P] = D), (--l === 0 || B) && w(B);
    }
    l
      ? p
        ? p.forEach(function (P) {
            r[P](function (B, D) {
              O(P, B, D);
            });
          })
        : r.forEach(function (P, B) {
            P(function (D, q) {
              O(B, D, q);
            });
          })
      : w(null),
      (m = !1);
  }
});
var fo = te((Ir) => {
  "use strict";
  Object.defineProperty(Ir, "__esModule", { value: !0 });
  Ir.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
  var Dr = process.versions.node.split(".");
  if (Dr[0] === void 0 || Dr[1] === void 0)
    throw new Error(
      `Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`
    );
  var O_ = Number.parseInt(Dr[0], 10),
    lk = Number.parseInt(Dr[1], 10),
    T_ = 10,
    uk = 10,
    _k = O_ > T_,
    dk = O_ === T_ && lk >= uk;
  Ir.IS_SUPPORT_READDIR_WITH_FILE_TYPES = _k || dk;
});
var P_ = te((Mr) => {
  "use strict";
  Object.defineProperty(Mr, "__esModule", { value: !0 });
  Mr.createDirentFromStats = void 0;
  var ho = class {
    constructor(i, e) {
      (this.name = i),
        (this.isBlockDevice = e.isBlockDevice.bind(e)),
        (this.isCharacterDevice = e.isCharacterDevice.bind(e)),
        (this.isDirectory = e.isDirectory.bind(e)),
        (this.isFIFO = e.isFIFO.bind(e)),
        (this.isFile = e.isFile.bind(e)),
        (this.isSocket = e.isSocket.bind(e)),
        (this.isSymbolicLink = e.isSymbolicLink.bind(e));
    }
  };
  function fk(r, i) {
    return new ho(r, i);
  }
  Mr.createDirentFromStats = fk;
});
var bo = te((Ur) => {
  "use strict";
  Object.defineProperty(Ur, "__esModule", { value: !0 });
  Ur.fs = void 0;
  var hk = P_();
  Ur.fs = hk;
});
var po = te((Lr) => {
  "use strict";
  Object.defineProperty(Lr, "__esModule", { value: !0 });
  Lr.joinPathSegments = void 0;
  function bk(r, i, e) {
    return r.endsWith(e) ? r + i : r + e + i;
  }
  Lr.joinPathSegments = bk;
});
var F_ = te((ii) => {
  "use strict";
  Object.defineProperty(ii, "__esModule", { value: !0 });
  ii.readdir = ii.readdirWithFileTypes = ii.read = void 0;
  var pk = Ai(),
    D_ = R_(),
    yk = fo(),
    I_ = bo(),
    M_ = po();
  function gk(r, i, e) {
    if (!i.stats && yk.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      U_(r, i, e);
      return;
    }
    L_(r, i, e);
  }
  ii.read = gk;
  function U_(r, i, e) {
    i.fs.readdir(r, { withFileTypes: !0 }, (l, p) => {
      if (l !== null) {
        Fr(e, l);
        return;
      }
      let m = p.map((O) => ({
        dirent: O,
        name: O.name,
        path: M_.joinPathSegments(r, O.name, i.pathSegmentSeparator),
      }));
      if (!i.followSymbolicLinks) {
        yo(e, m);
        return;
      }
      let w = m.map((O) => vk(O, i));
      D_(w, (O, P) => {
        if (O !== null) {
          Fr(e, O);
          return;
        }
        yo(e, P);
      });
    });
  }
  ii.readdirWithFileTypes = U_;
  function vk(r, i) {
    return (e) => {
      if (!r.dirent.isSymbolicLink()) {
        e(null, r);
        return;
      }
      i.fs.stat(r.path, (l, p) => {
        if (l !== null) {
          if (i.throwErrorOnBrokenSymbolicLink) {
            e(l);
            return;
          }
          e(null, r);
          return;
        }
        (r.dirent = I_.fs.createDirentFromStats(r.name, p)), e(null, r);
      });
    };
  }
  function L_(r, i, e) {
    i.fs.readdir(r, (l, p) => {
      if (l !== null) {
        Fr(e, l);
        return;
      }
      let m = p.map((w) => {
        let O = M_.joinPathSegments(r, w, i.pathSegmentSeparator);
        return (P) => {
          pk.stat(O, i.fsStatSettings, (B, D) => {
            if (B !== null) {
              P(B);
              return;
            }
            let q = {
              name: w,
              path: O,
              dirent: I_.fs.createDirentFromStats(w, D),
            };
            i.stats && (q.stats = D), P(null, q);
          });
        };
      });
      D_(m, (w, O) => {
        if (w !== null) {
          Fr(e, w);
          return;
        }
        yo(e, O);
      });
    });
  }
  ii.readdir = L_;
  function Fr(r, i) {
    r(i);
  }
  function yo(r, i) {
    r(null, i);
  }
});
var H_ = te((ni) => {
  "use strict";
  Object.defineProperty(ni, "__esModule", { value: !0 });
  ni.readdir = ni.readdirWithFileTypes = ni.read = void 0;
  var jk = Ai(),
    mk = fo(),
    x_ = bo(),
    N_ = po();
  function wk(r, i) {
    return !i.stats && mk.IS_SUPPORT_READDIR_WITH_FILE_TYPES
      ? B_(r, i)
      : Y_(r, i);
  }
  ni.read = wk;
  function B_(r, i) {
    return i.fs.readdirSync(r, { withFileTypes: !0 }).map((l) => {
      let p = {
        dirent: l,
        name: l.name,
        path: N_.joinPathSegments(r, l.name, i.pathSegmentSeparator),
      };
      if (p.dirent.isSymbolicLink() && i.followSymbolicLinks)
        try {
          let m = i.fs.statSync(p.path);
          p.dirent = x_.fs.createDirentFromStats(p.name, m);
        } catch (m) {
          if (i.throwErrorOnBrokenSymbolicLink) throw m;
        }
      return p;
    });
  }
  ni.readdirWithFileTypes = B_;
  function Y_(r, i) {
    return i.fs.readdirSync(r).map((l) => {
      let p = N_.joinPathSegments(r, l, i.pathSegmentSeparator),
        m = jk.statSync(p, i.fsStatSettings),
        w = { name: l, path: p, dirent: x_.fs.createDirentFromStats(l, m) };
      return i.stats && (w.stats = m), w;
    });
  }
  ni.readdir = Y_;
});
var q_ = te((ri) => {
  "use strict";
  Object.defineProperty(ri, "__esModule", { value: !0 });
  ri.createFileSystemAdapter = ri.FILE_SYSTEM_ADAPTER = void 0;
  var Vi = require("fs");
  ri.FILE_SYSTEM_ADAPTER = {
    lstat: Vi.lstat,
    stat: Vi.stat,
    lstatSync: Vi.lstatSync,
    statSync: Vi.statSync,
    readdir: Vi.readdir,
    readdirSync: Vi.readdirSync,
  };
  function kk(r) {
    return r === void 0
      ? ri.FILE_SYSTEM_ADAPTER
      : Object.assign(Object.assign({}, ri.FILE_SYSTEM_ADAPTER), r);
  }
  ri.createFileSystemAdapter = kk;
});
var W_ = te((vo) => {
  "use strict";
  Object.defineProperty(vo, "__esModule", { value: !0 });
  var Ek = require("path"),
    Sk = Ai(),
    Ck = q_(),
    go = class {
      constructor(i = {}) {
        (this._options = i),
          (this.followSymbolicLinks = this._getValue(
            this._options.followSymbolicLinks,
            !1
          )),
          (this.fs = Ck.createFileSystemAdapter(this._options.fs)),
          (this.pathSegmentSeparator = this._getValue(
            this._options.pathSegmentSeparator,
            Ek.sep
          )),
          (this.stats = this._getValue(this._options.stats, !1)),
          (this.throwErrorOnBrokenSymbolicLink = this._getValue(
            this._options.throwErrorOnBrokenSymbolicLink,
            !0
          )),
          (this.fsStatSettings = new Sk.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink,
          }));
      }
      _getValue(i, e) {
        return i ?? e;
      }
    };
  vo.default = go;
});
var xr = te((ai) => {
  "use strict";
  Object.defineProperty(ai, "__esModule", { value: !0 });
  ai.Settings = ai.scandirSync = ai.scandir = void 0;
  var Z_ = F_(),
    Ak = H_(),
    jo = W_();
  ai.Settings = jo.default;
  function Rk(r, i, e) {
    if (typeof i == "function") {
      Z_.read(r, mo(), i);
      return;
    }
    Z_.read(r, mo(i), e);
  }
  ai.scandir = Rk;
  function Ok(r, i) {
    let e = mo(i);
    return Ak.read(r, e);
  }
  ai.scandirSync = Ok;
  function mo(r = {}) {
    return r instanceof jo.default ? r : new jo.default(r);
  }
});
var G_ = te((zE, $_) => {
  "use strict";
  function Tk(r) {
    var i = new r(),
      e = i;
    function l() {
      var m = i;
      return (
        m.next ? (i = m.next) : ((i = new r()), (e = i)), (m.next = null), m
      );
    }
    function p(m) {
      (e.next = m), (e = m);
    }
    return { get: l, release: p };
  }
  $_.exports = Tk;
});
var K_ = te((QE, wo) => {
  "use strict";
  var Pk = G_();
  function V_(r, i, e) {
    if ((typeof r == "function" && ((e = i), (i = r), (r = null)), e < 1))
      throw new Error("fastqueue concurrency must be greater than 1");
    var l = Pk(Dk),
      p = null,
      m = null,
      w = 0,
      O = null,
      P = {
        push: J,
        drain: wt,
        saturated: wt,
        pause: D,
        paused: !1,
        concurrency: e,
        running: B,
        resume: ie,
        idle: X,
        length: q,
        getQueue: x,
        unshift: ce,
        empty: wt,
        kill: Ae,
        killAndDrain: Ee,
        error: xe,
      };
    return P;
    function B() {
      return w;
    }
    function D() {
      P.paused = !0;
    }
    function q() {
      for (var _e = p, Se = 0; _e; ) (_e = _e.next), Se++;
      return Se;
    }
    function x() {
      for (var _e = p, Se = []; _e; ) Se.push(_e.value), (_e = _e.next);
      return Se;
    }
    function ie() {
      if (!!P.paused) {
        P.paused = !1;
        for (var _e = 0; _e < P.concurrency; _e++) w++, le();
      }
    }
    function X() {
      return w === 0 && P.length() === 0;
    }
    function J(_e, Se) {
      var de = l.get();
      (de.context = r),
        (de.release = le),
        (de.value = _e),
        (de.callback = Se || wt),
        (de.errorHandler = O),
        w === P.concurrency || P.paused
          ? m
            ? ((m.next = de), (m = de))
            : ((p = de), (m = de), P.saturated())
          : (w++, i.call(r, de.value, de.worked));
    }
    function ce(_e, Se) {
      var de = l.get();
      (de.context = r),
        (de.release = le),
        (de.value = _e),
        (de.callback = Se || wt),
        w === P.concurrency || P.paused
          ? p
            ? ((de.next = p), (p = de))
            : ((p = de), (m = de), P.saturated())
          : (w++, i.call(r, de.value, de.worked));
    }
    function le(_e) {
      _e && l.release(_e);
      var Se = p;
      Se
        ? P.paused
          ? w--
          : (m === p && (m = null),
            (p = Se.next),
            (Se.next = null),
            i.call(r, Se.value, Se.worked),
            m === null && P.empty())
        : --w === 0 && P.drain();
    }
    function Ae() {
      (p = null), (m = null), (P.drain = wt);
    }
    function Ee() {
      (p = null), (m = null), P.drain(), (P.drain = wt);
    }
    function xe(_e) {
      O = _e;
    }
  }
  function wt() {}
  function Dk() {
    (this.value = null),
      (this.callback = wt),
      (this.next = null),
      (this.release = wt),
      (this.context = null),
      (this.errorHandler = null);
    var r = this;
    this.worked = function (e, l) {
      var p = r.callback,
        m = r.errorHandler,
        w = r.value;
      (r.value = null),
        (r.callback = wt),
        r.errorHandler && m(e, w),
        p.call(r.context, e, l),
        r.release(r);
    };
  }
  function Ik(r, i, e) {
    typeof r == "function" && ((e = i), (i = r), (r = null));
    function l(D, q) {
      i.call(this, D).then(function (x) {
        q(null, x);
      }, q);
    }
    var p = V_(r, l, e),
      m = p.push,
      w = p.unshift;
    return (p.push = O), (p.unshift = P), (p.drained = B), p;
    function O(D) {
      var q = new Promise(function (x, ie) {
        m(D, function (X, J) {
          if (X) {
            ie(X);
            return;
          }
          x(J);
        });
      });
      return q.catch(wt), q;
    }
    function P(D) {
      var q = new Promise(function (x, ie) {
        w(D, function (X, J) {
          if (X) {
            ie(X);
            return;
          }
          x(J);
        });
      });
      return q.catch(wt), q;
    }
    function B() {
      var D = p.drain,
        q = new Promise(function (x) {
          p.drain = function () {
            D(), x();
          };
        });
      return q;
    }
  }
  wo.exports = V_;
  wo.exports.promise = Ik;
});
var Nr = te((Mt) => {
  "use strict";
  Object.defineProperty(Mt, "__esModule", { value: !0 });
  Mt.joinPathSegments =
    Mt.replacePathSegmentSeparator =
    Mt.isAppliedFilter =
    Mt.isFatalError =
      void 0;
  function Mk(r, i) {
    return r.errorFilter === null ? !0 : !r.errorFilter(i);
  }
  Mt.isFatalError = Mk;
  function Uk(r, i) {
    return r === null || r(i);
  }
  Mt.isAppliedFilter = Uk;
  function Lk(r, i) {
    return r.split(/[/\\]/).join(i);
  }
  Mt.replacePathSegmentSeparator = Lk;
  function Fk(r, i, e) {
    return r === "" ? i : r.endsWith(e) ? r + i : r + e + i;
  }
  Mt.joinPathSegments = Fk;
});
var So = te((Eo) => {
  "use strict";
  Object.defineProperty(Eo, "__esModule", { value: !0 });
  var xk = Nr(),
    ko = class {
      constructor(i, e) {
        (this._root = i),
          (this._settings = e),
          (this._root = xk.replacePathSegmentSeparator(
            i,
            e.pathSegmentSeparator
          ));
      }
    };
  Eo.default = ko;
});
var Ro = te((Ao) => {
  "use strict";
  Object.defineProperty(Ao, "__esModule", { value: !0 });
  var Nk = require("events"),
    Bk = xr(),
    Yk = K_(),
    Br = Nr(),
    Hk = So(),
    Co = class extends Hk.default {
      constructor(i, e) {
        super(i, e),
          (this._settings = e),
          (this._scandir = Bk.scandir),
          (this._emitter = new Nk.EventEmitter()),
          (this._queue = Yk(
            this._worker.bind(this),
            this._settings.concurrency
          )),
          (this._isFatalError = !1),
          (this._isDestroyed = !1),
          (this._queue.drain = () => {
            this._isFatalError || this._emitter.emit("end");
          });
      }
      read() {
        return (
          (this._isFatalError = !1),
          (this._isDestroyed = !1),
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          }),
          this._emitter
        );
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed)
          throw new Error("The reader is already destroyed");
        (this._isDestroyed = !0), this._queue.killAndDrain();
      }
      onEntry(i) {
        this._emitter.on("entry", i);
      }
      onError(i) {
        this._emitter.once("error", i);
      }
      onEnd(i) {
        this._emitter.once("end", i);
      }
      _pushToQueue(i, e) {
        let l = { directory: i, base: e };
        this._queue.push(l, (p) => {
          p !== null && this._handleError(p);
        });
      }
      _worker(i, e) {
        this._scandir(i.directory, this._settings.fsScandirSettings, (l, p) => {
          if (l !== null) {
            e(l, void 0);
            return;
          }
          for (let m of p) this._handleEntry(m, i.base);
          e(null, void 0);
        });
      }
      _handleError(i) {
        this._isDestroyed ||
          !Br.isFatalError(this._settings, i) ||
          ((this._isFatalError = !0),
          (this._isDestroyed = !0),
          this._emitter.emit("error", i));
      }
      _handleEntry(i, e) {
        if (this._isDestroyed || this._isFatalError) return;
        let l = i.path;
        e !== void 0 &&
          (i.path = Br.joinPathSegments(
            e,
            i.name,
            this._settings.pathSegmentSeparator
          )),
          Br.isAppliedFilter(this._settings.entryFilter, i) &&
            this._emitEntry(i),
          i.dirent.isDirectory() &&
            Br.isAppliedFilter(this._settings.deepFilter, i) &&
            this._pushToQueue(l, e === void 0 ? void 0 : i.path);
      }
      _emitEntry(i) {
        this._emitter.emit("entry", i);
      }
    };
  Ao.default = Co;
});
var z_ = te((To) => {
  "use strict";
  Object.defineProperty(To, "__esModule", { value: !0 });
  var qk = Ro(),
    Oo = class {
      constructor(i, e) {
        (this._root = i),
          (this._settings = e),
          (this._reader = new qk.default(this._root, this._settings)),
          (this._storage = []);
      }
      read(i) {
        this._reader.onError((e) => {
          Wk(i, e);
        }),
          this._reader.onEntry((e) => {
            this._storage.push(e);
          }),
          this._reader.onEnd(() => {
            Zk(i, this._storage);
          }),
          this._reader.read();
      }
    };
  To.default = Oo;
  function Wk(r, i) {
    r(i);
  }
  function Zk(r, i) {
    r(null, i);
  }
});
var Q_ = te((Do) => {
  "use strict";
  Object.defineProperty(Do, "__esModule", { value: !0 });
  var $k = require("stream"),
    Gk = Ro(),
    Po = class {
      constructor(i, e) {
        (this._root = i),
          (this._settings = e),
          (this._reader = new Gk.default(this._root, this._settings)),
          (this._stream = new $k.Readable({
            objectMode: !0,
            read: () => {},
            destroy: () => {
              this._reader.isDestroyed || this._reader.destroy();
            },
          }));
      }
      read() {
        return (
          this._reader.onError((i) => {
            this._stream.emit("error", i);
          }),
          this._reader.onEntry((i) => {
            this._stream.push(i);
          }),
          this._reader.onEnd(() => {
            this._stream.push(null);
          }),
          this._reader.read(),
          this._stream
        );
      }
    };
  Do.default = Po;
});
var X_ = te((Mo) => {
  "use strict";
  Object.defineProperty(Mo, "__esModule", { value: !0 });
  var Vk = xr(),
    Yr = Nr(),
    Kk = So(),
    Io = class extends Kk.default {
      constructor() {
        super(...arguments),
          (this._scandir = Vk.scandirSync),
          (this._storage = []),
          (this._queue = new Set());
      }
      read() {
        return (
          this._pushToQueue(this._root, this._settings.basePath),
          this._handleQueue(),
          this._storage
        );
      }
      _pushToQueue(i, e) {
        this._queue.add({ directory: i, base: e });
      }
      _handleQueue() {
        for (let i of this._queue.values())
          this._handleDirectory(i.directory, i.base);
      }
      _handleDirectory(i, e) {
        try {
          let l = this._scandir(i, this._settings.fsScandirSettings);
          for (let p of l) this._handleEntry(p, e);
        } catch (l) {
          this._handleError(l);
        }
      }
      _handleError(i) {
        if (!!Yr.isFatalError(this._settings, i)) throw i;
      }
      _handleEntry(i, e) {
        let l = i.path;
        e !== void 0 &&
          (i.path = Yr.joinPathSegments(
            e,
            i.name,
            this._settings.pathSegmentSeparator
          )),
          Yr.isAppliedFilter(this._settings.entryFilter, i) &&
            this._pushToStorage(i),
          i.dirent.isDirectory() &&
            Yr.isAppliedFilter(this._settings.deepFilter, i) &&
            this._pushToQueue(l, e === void 0 ? void 0 : i.path);
      }
      _pushToStorage(i) {
        this._storage.push(i);
      }
    };
  Mo.default = Io;
});
var J_ = te((Lo) => {
  "use strict";
  Object.defineProperty(Lo, "__esModule", { value: !0 });
  var zk = X_(),
    Uo = class {
      constructor(i, e) {
        (this._root = i),
          (this._settings = e),
          (this._reader = new zk.default(this._root, this._settings));
      }
      read() {
        return this._reader.read();
      }
    };
  Lo.default = Uo;
});
var ed = te((xo) => {
  "use strict";
  Object.defineProperty(xo, "__esModule", { value: !0 });
  var Qk = require("path"),
    Xk = xr(),
    Fo = class {
      constructor(i = {}) {
        (this._options = i),
          (this.basePath = this._getValue(this._options.basePath, void 0)),
          (this.concurrency = this._getValue(
            this._options.concurrency,
            Number.POSITIVE_INFINITY
          )),
          (this.deepFilter = this._getValue(this._options.deepFilter, null)),
          (this.entryFilter = this._getValue(this._options.entryFilter, null)),
          (this.errorFilter = this._getValue(this._options.errorFilter, null)),
          (this.pathSegmentSeparator = this._getValue(
            this._options.pathSegmentSeparator,
            Qk.sep
          )),
          (this.fsScandirSettings = new Xk.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink:
              this._options.throwErrorOnBrokenSymbolicLink,
          }));
      }
      _getValue(i, e) {
        return i ?? e;
      }
    };
  xo.default = Fo;
});
var Bo = te((Ut) => {
  "use strict";
  Object.defineProperty(Ut, "__esModule", { value: !0 });
  Ut.Settings = Ut.walkStream = Ut.walkSync = Ut.walk = void 0;
  var td = z_(),
    Jk = Q_(),
    e0 = J_(),
    No = ed();
  Ut.Settings = No.default;
  function t0(r, i, e) {
    if (typeof i == "function") {
      new td.default(r, Hr()).read(i);
      return;
    }
    new td.default(r, Hr(i)).read(e);
  }
  Ut.walk = t0;
  function i0(r, i) {
    let e = Hr(i);
    return new e0.default(r, e).read();
  }
  Ut.walkSync = i0;
  function n0(r, i) {
    let e = Hr(i);
    return new Jk.default(r, e).read();
  }
  Ut.walkStream = n0;
  function Hr(r = {}) {
    return r instanceof No.default ? r : new No.default(r);
  }
});
var qo = te((Ho) => {
  "use strict";
  Object.defineProperty(Ho, "__esModule", { value: !0 });
  var r0 = require("path"),
    a0 = Ai(),
    id = Zt(),
    Yo = class {
      constructor(i) {
        (this._settings = i),
          (this._fsStatSettings = new a0.Settings({
            followSymbolicLink: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks,
          }));
      }
      _getFullEntryPath(i) {
        return r0.resolve(this._settings.cwd, i);
      }
      _makeEntry(i, e) {
        let l = { name: e, path: e, dirent: id.fs.createDirentFromStats(e, i) };
        return this._settings.stats && (l.stats = i), l;
      }
      _isFatalError(i) {
        return !id.errno.isEnoentCodeError(i) && !this._settings.suppressErrors;
      }
    };
  Ho.default = Yo;
});
var $o = te((Zo) => {
  "use strict";
  Object.defineProperty(Zo, "__esModule", { value: !0 });
  var s0 = require("stream"),
    o0 = Ai(),
    c0 = Bo(),
    l0 = qo(),
    Wo = class extends l0.default {
      constructor() {
        super(...arguments),
          (this._walkStream = c0.walkStream),
          (this._stat = o0.stat);
      }
      dynamic(i, e) {
        return this._walkStream(i, e);
      }
      static(i, e) {
        let l = i.map(this._getFullEntryPath, this),
          p = new s0.PassThrough({ objectMode: !0 });
        p._write = (m, w, O) =>
          this._getEntry(l[m], i[m], e)
            .then((P) => {
              P !== null && e.entryFilter(P) && p.push(P),
                m === l.length - 1 && p.end(),
                O();
            })
            .catch(O);
        for (let m = 0; m < l.length; m++) p.write(m);
        return p;
      }
      _getEntry(i, e, l) {
        return this._getStat(i)
          .then((p) => this._makeEntry(p, e))
          .catch((p) => {
            if (l.errorFilter(p)) return null;
            throw p;
          });
      }
      _getStat(i) {
        return new Promise((e, l) => {
          this._stat(i, this._fsStatSettings, (p, m) =>
            p === null ? e(m) : l(p)
          );
        });
      }
    };
  Zo.default = Wo;
});
var nd = te((Vo) => {
  "use strict";
  Object.defineProperty(Vo, "__esModule", { value: !0 });
  var Ki = Zt(),
    Go = class {
      constructor(i, e, l) {
        (this._patterns = i),
          (this._settings = e),
          (this._micromatchOptions = l),
          (this._storage = []),
          this._fillStorage();
      }
      _fillStorage() {
        let i = Ki.pattern.expandPatternsWithBraceExpansion(this._patterns);
        for (let e of i) {
          let l = this._getPatternSegments(e),
            p = this._splitSegmentsIntoSections(l);
          this._storage.push({
            complete: p.length <= 1,
            pattern: e,
            segments: l,
            sections: p,
          });
        }
      }
      _getPatternSegments(i) {
        return Ki.pattern
          .getPatternParts(i, this._micromatchOptions)
          .map((l) =>
            Ki.pattern.isDynamicPattern(l, this._settings)
              ? {
                  dynamic: !0,
                  pattern: l,
                  patternRe: Ki.pattern.makeRe(l, this._micromatchOptions),
                }
              : { dynamic: !1, pattern: l }
          );
      }
      _splitSegmentsIntoSections(i) {
        return Ki.array.splitWhen(
          i,
          (e) => e.dynamic && Ki.pattern.hasGlobStar(e.pattern)
        );
      }
    };
  Vo.default = Go;
});
var rd = te((zo) => {
  "use strict";
  Object.defineProperty(zo, "__esModule", { value: !0 });
  var u0 = nd(),
    Ko = class extends u0.default {
      match(i) {
        let e = i.split("/"),
          l = e.length,
          p = this._storage.filter((m) => !m.complete || m.segments.length > l);
        for (let m of p) {
          let w = m.sections[0];
          if (
            (!m.complete && l > w.length) ||
            e.every((P, B) => {
              let D = m.segments[B];
              return !!(
                (D.dynamic && D.patternRe.test(P)) ||
                (!D.dynamic && D.pattern === P)
              );
            })
          )
            return !0;
        }
        return !1;
      }
    };
  zo.default = Ko;
});
var ad = te((Xo) => {
  "use strict";
  Object.defineProperty(Xo, "__esModule", { value: !0 });
  var qr = Zt(),
    _0 = rd(),
    Qo = class {
      constructor(i, e) {
        (this._settings = i), (this._micromatchOptions = e);
      }
      getFilter(i, e, l) {
        let p = this._getMatcher(e),
          m = this._getNegativePatternsRe(l);
        return (w) => this._filter(i, w, p, m);
      }
      _getMatcher(i) {
        return new _0.default(i, this._settings, this._micromatchOptions);
      }
      _getNegativePatternsRe(i) {
        let e = i.filter(qr.pattern.isAffectDepthOfReadingPattern);
        return qr.pattern.convertPatternsToRe(e, this._micromatchOptions);
      }
      _filter(i, e, l, p) {
        if (this._isSkippedByDeep(i, e.path) || this._isSkippedSymbolicLink(e))
          return !1;
        let m = qr.path.removeLeadingDotSegment(e.path);
        return this._isSkippedByPositivePatterns(m, l)
          ? !1
          : this._isSkippedByNegativePatterns(m, p);
      }
      _isSkippedByDeep(i, e) {
        return this._settings.deep === 1 / 0
          ? !1
          : this._getEntryLevel(i, e) >= this._settings.deep;
      }
      _getEntryLevel(i, e) {
        let l = e.split("/").length;
        if (i === "") return l;
        let p = i.split("/").length;
        return l - p;
      }
      _isSkippedSymbolicLink(i) {
        return !this._settings.followSymbolicLinks && i.dirent.isSymbolicLink();
      }
      _isSkippedByPositivePatterns(i, e) {
        return !this._settings.baseNameMatch && !e.match(i);
      }
      _isSkippedByNegativePatterns(i, e) {
        return !qr.pattern.matchAny(i, e);
      }
    };
  Xo.default = Qo;
});
var sd = te((ec) => {
  "use strict";
  Object.defineProperty(ec, "__esModule", { value: !0 });
  var Ri = Zt(),
    Jo = class {
      constructor(i, e) {
        (this._settings = i),
          (this._micromatchOptions = e),
          (this.index = new Map());
      }
      getFilter(i, e) {
        let l = Ri.pattern.convertPatternsToRe(i, this._micromatchOptions),
          p = Ri.pattern.convertPatternsToRe(e, this._micromatchOptions);
        return (m) => this._filter(m, l, p);
      }
      _filter(i, e, l) {
        if (
          (this._settings.unique && this._isDuplicateEntry(i)) ||
          this._onlyFileFilter(i) ||
          this._onlyDirectoryFilter(i) ||
          this._isSkippedByAbsoluteNegativePatterns(i.path, l)
        )
          return !1;
        let p = this._settings.baseNameMatch ? i.name : i.path,
          m =
            this._isMatchToPatterns(p, e) &&
            !this._isMatchToPatterns(i.path, l);
        return this._settings.unique && m && this._createIndexRecord(i), m;
      }
      _isDuplicateEntry(i) {
        return this.index.has(i.path);
      }
      _createIndexRecord(i) {
        this.index.set(i.path, void 0);
      }
      _onlyFileFilter(i) {
        return this._settings.onlyFiles && !i.dirent.isFile();
      }
      _onlyDirectoryFilter(i) {
        return this._settings.onlyDirectories && !i.dirent.isDirectory();
      }
      _isSkippedByAbsoluteNegativePatterns(i, e) {
        if (!this._settings.absolute) return !1;
        let l = Ri.path.makeAbsolute(this._settings.cwd, i);
        return Ri.pattern.matchAny(l, e);
      }
      _isMatchToPatterns(i, e) {
        let l = Ri.path.removeLeadingDotSegment(i);
        return Ri.pattern.matchAny(l, e) || Ri.pattern.matchAny(l + "/", e);
      }
    };
  ec.default = Jo;
});
var od = te((ic) => {
  "use strict";
  Object.defineProperty(ic, "__esModule", { value: !0 });
  var d0 = Zt(),
    tc = class {
      constructor(i) {
        this._settings = i;
      }
      getFilter() {
        return (i) => this._isNonFatalError(i);
      }
      _isNonFatalError(i) {
        return d0.errno.isEnoentCodeError(i) || this._settings.suppressErrors;
      }
    };
  ic.default = tc;
});
var ld = te((rc) => {
  "use strict";
  Object.defineProperty(rc, "__esModule", { value: !0 });
  var cd = Zt(),
    nc = class {
      constructor(i) {
        this._settings = i;
      }
      getTransformer() {
        return (i) => this._transform(i);
      }
      _transform(i) {
        let e = i.path;
        return (
          this._settings.absolute &&
            ((e = cd.path.makeAbsolute(this._settings.cwd, e)),
            (e = cd.path.unixify(e))),
          this._settings.markDirectories &&
            i.dirent.isDirectory() &&
            (e += "/"),
          this._settings.objectMode
            ? Object.assign(Object.assign({}, i), { path: e })
            : e
        );
      }
    };
  rc.default = nc;
});
var Wr = te((sc) => {
  "use strict";
  Object.defineProperty(sc, "__esModule", { value: !0 });
  var f0 = require("path"),
    h0 = ad(),
    b0 = sd(),
    p0 = od(),
    y0 = ld(),
    ac = class {
      constructor(i) {
        (this._settings = i),
          (this.errorFilter = new p0.default(this._settings)),
          (this.entryFilter = new b0.default(
            this._settings,
            this._getMicromatchOptions()
          )),
          (this.deepFilter = new h0.default(
            this._settings,
            this._getMicromatchOptions()
          )),
          (this.entryTransformer = new y0.default(this._settings));
      }
      _getRootDirectory(i) {
        return f0.resolve(this._settings.cwd, i.base);
      }
      _getReaderOptions(i) {
        let e = i.base === "." ? "" : i.base;
        return {
          basePath: e,
          pathSegmentSeparator: "/",
          concurrency: this._settings.concurrency,
          deepFilter: this.deepFilter.getFilter(e, i.positive, i.negative),
          entryFilter: this.entryFilter.getFilter(i.positive, i.negative),
          errorFilter: this.errorFilter.getFilter(),
          followSymbolicLinks: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          stats: this._settings.stats,
          throwErrorOnBrokenSymbolicLink:
            this._settings.throwErrorOnBrokenSymbolicLink,
          transform: this.entryTransformer.getTransformer(),
        };
      }
      _getMicromatchOptions() {
        return {
          dot: this._settings.dot,
          matchBase: this._settings.baseNameMatch,
          nobrace: !this._settings.braceExpansion,
          nocase: !this._settings.caseSensitiveMatch,
          noext: !this._settings.extglob,
          noglobstar: !this._settings.globstar,
          posix: !0,
          strictSlashes: !1,
        };
      }
    };
  sc.default = ac;
});
var ud = te((cc) => {
  "use strict";
  Object.defineProperty(cc, "__esModule", { value: !0 });
  var g0 = $o(),
    v0 = Wr(),
    oc = class extends v0.default {
      constructor() {
        super(...arguments), (this._reader = new g0.default(this._settings));
      }
      read(i) {
        let e = this._getRootDirectory(i),
          l = this._getReaderOptions(i),
          p = [];
        return new Promise((m, w) => {
          let O = this.api(e, i, l);
          O.once("error", w),
            O.on("data", (P) => p.push(l.transform(P))),
            O.once("end", () => m(p));
        });
      }
      api(i, e, l) {
        return e.dynamic
          ? this._reader.dynamic(i, l)
          : this._reader.static(e.patterns, l);
      }
    };
  cc.default = oc;
});
var _d = te((uc) => {
  "use strict";
  Object.defineProperty(uc, "__esModule", { value: !0 });
  var j0 = require("stream"),
    m0 = $o(),
    w0 = Wr(),
    lc = class extends w0.default {
      constructor() {
        super(...arguments), (this._reader = new m0.default(this._settings));
      }
      read(i) {
        let e = this._getRootDirectory(i),
          l = this._getReaderOptions(i),
          p = this.api(e, i, l),
          m = new j0.Readable({ objectMode: !0, read: () => {} });
        return (
          p
            .once("error", (w) => m.emit("error", w))
            .on("data", (w) => m.emit("data", l.transform(w)))
            .once("end", () => m.emit("end")),
          m.once("close", () => p.destroy()),
          m
        );
      }
      api(i, e, l) {
        return e.dynamic
          ? this._reader.dynamic(i, l)
          : this._reader.static(e.patterns, l);
      }
    };
  uc.default = lc;
});
var dd = te((dc) => {
  "use strict";
  Object.defineProperty(dc, "__esModule", { value: !0 });
  var k0 = Ai(),
    E0 = Bo(),
    S0 = qo(),
    _c = class extends S0.default {
      constructor() {
        super(...arguments),
          (this._walkSync = E0.walkSync),
          (this._statSync = k0.statSync);
      }
      dynamic(i, e) {
        return this._walkSync(i, e);
      }
      static(i, e) {
        let l = [];
        for (let p of i) {
          let m = this._getFullEntryPath(p),
            w = this._getEntry(m, p, e);
          w === null || !e.entryFilter(w) || l.push(w);
        }
        return l;
      }
      _getEntry(i, e, l) {
        try {
          let p = this._getStat(i);
          return this._makeEntry(p, e);
        } catch (p) {
          if (l.errorFilter(p)) return null;
          throw p;
        }
      }
      _getStat(i) {
        return this._statSync(i, this._fsStatSettings);
      }
    };
  dc.default = _c;
});
var fd = te((hc) => {
  "use strict";
  Object.defineProperty(hc, "__esModule", { value: !0 });
  var C0 = dd(),
    A0 = Wr(),
    fc = class extends A0.default {
      constructor() {
        super(...arguments), (this._reader = new C0.default(this._settings));
      }
      read(i) {
        let e = this._getRootDirectory(i),
          l = this._getReaderOptions(i);
        return this.api(e, i, l).map(l.transform);
      }
      api(i, e, l) {
        return e.dynamic
          ? this._reader.dynamic(i, l)
          : this._reader.static(e.patterns, l);
      }
    };
  hc.default = fc;
});
var hd = te((Qi) => {
  "use strict";
  Object.defineProperty(Qi, "__esModule", { value: !0 });
  Qi.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
  var zi = require("fs"),
    R0 = require("os"),
    O0 = Math.max(R0.cpus().length, 1);
  Qi.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: zi.lstat,
    lstatSync: zi.lstatSync,
    stat: zi.stat,
    statSync: zi.statSync,
    readdir: zi.readdir,
    readdirSync: zi.readdirSync,
  };
  var bc = class {
    constructor(i = {}) {
      (this._options = i),
        (this.absolute = this._getValue(this._options.absolute, !1)),
        (this.baseNameMatch = this._getValue(this._options.baseNameMatch, !1)),
        (this.braceExpansion = this._getValue(
          this._options.braceExpansion,
          !0
        )),
        (this.caseSensitiveMatch = this._getValue(
          this._options.caseSensitiveMatch,
          !0
        )),
        (this.concurrency = this._getValue(this._options.concurrency, O0)),
        (this.cwd = this._getValue(this._options.cwd, process.cwd())),
        (this.deep = this._getValue(this._options.deep, 1 / 0)),
        (this.dot = this._getValue(this._options.dot, !1)),
        (this.extglob = this._getValue(this._options.extglob, !0)),
        (this.followSymbolicLinks = this._getValue(
          this._options.followSymbolicLinks,
          !0
        )),
        (this.fs = this._getFileSystemMethods(this._options.fs)),
        (this.globstar = this._getValue(this._options.globstar, !0)),
        (this.ignore = this._getValue(this._options.ignore, [])),
        (this.markDirectories = this._getValue(
          this._options.markDirectories,
          !1
        )),
        (this.objectMode = this._getValue(this._options.objectMode, !1)),
        (this.onlyDirectories = this._getValue(
          this._options.onlyDirectories,
          !1
        )),
        (this.onlyFiles = this._getValue(this._options.onlyFiles, !0)),
        (this.stats = this._getValue(this._options.stats, !1)),
        (this.suppressErrors = this._getValue(
          this._options.suppressErrors,
          !1
        )),
        (this.throwErrorOnBrokenSymbolicLink = this._getValue(
          this._options.throwErrorOnBrokenSymbolicLink,
          !1
        )),
        (this.unique = this._getValue(this._options.unique, !0)),
        this.onlyDirectories && (this.onlyFiles = !1),
        this.stats && (this.objectMode = !0);
    }
    _getValue(i, e) {
      return i === void 0 ? e : i;
    }
    _getFileSystemMethods(i = {}) {
      return Object.assign(
        Object.assign({}, Qi.DEFAULT_FILE_SYSTEM_ADAPTER),
        i
      );
    }
  };
  Qi.default = bc;
});
var gd = te((mS, yd) => {
  "use strict";
  var bd = b_(),
    pd = y_(),
    T0 = ud(),
    P0 = _d(),
    D0 = fd(),
    pc = hd(),
    Oi = Zt();
  async function yc(r, i) {
    Xi(r);
    let e = gc(r, T0.default, i),
      l = await Promise.all(e);
    return Oi.array.flatten(l);
  }
  (function (r) {
    function i(w, O) {
      Xi(w);
      let P = gc(w, D0.default, O);
      return Oi.array.flatten(P);
    }
    r.sync = i;
    function e(w, O) {
      Xi(w);
      let P = gc(w, P0.default, O);
      return Oi.stream.merge(P);
    }
    r.stream = e;
    function l(w, O) {
      Xi(w);
      let P = pd.transform([].concat(w)),
        B = new pc.default(O);
      return bd.generate(P, B);
    }
    r.generateTasks = l;
    function p(w, O) {
      Xi(w);
      let P = new pc.default(O);
      return Oi.pattern.isDynamicPattern(w, P);
    }
    r.isDynamicPattern = p;
    function m(w) {
      return Xi(w), Oi.path.escape(w);
    }
    r.escapePath = m;
  })(yc || (yc = {}));
  function gc(r, i, e) {
    let l = pd.transform([].concat(r)),
      p = new pc.default(e),
      m = bd.generate(l, p),
      w = new i(p);
    return m.map(w.read, w);
  }
  function Xi(r) {
    if (
      ![].concat(r).every((l) => Oi.string.isString(l) && !Oi.string.isEmpty(l))
    )
      throw new TypeError(
        "Patterns must be a string (non empty) or an array of strings"
      );
  }
  yd.exports = yc;
});
var I0 = {};
Aj(I0, { registerWorker: () => jd });
module.exports = Rj(I0);
var ke = Pn(require("apache-arrow"));
function Hi(r) {
  switch (r.typeId) {
    case ke.Type.Binary:
      return { sqlType: "binary" };
    case ke.Type.Bool:
      return { sqlType: "bool" };
    case ke.Type.Date:
      return { sqlType: "date" };
    case ke.Type.DateDay:
      return { sqlType: "date32[d]" };
    case ke.Type.DateMillisecond:
      return { sqlType: "date64[ms]" };
    case ke.Type.Decimal: {
      let i = r;
      return { sqlType: "decimal", precision: i.precision, scale: i.scale };
    }
    case ke.Type.Float:
      return { sqlType: "float" };
    case ke.Type.Float16:
      return { sqlType: "float16" };
    case ke.Type.Float32:
      return { sqlType: "float32" };
    case ke.Type.Float64:
      return { sqlType: "float64" };
    case ke.Type.Int:
      return { sqlType: "int32" };
    case ke.Type.Int16:
      return { sqlType: "int16" };
    case ke.Type.Int32:
      return { sqlType: "int32" };
    case ke.Type.Int64:
      return { sqlType: "int64" };
    case ke.Type.Uint16:
      return { sqlType: "uint16" };
    case ke.Type.Uint32:
      return { sqlType: "uint32" };
    case ke.Type.Uint64:
      return { sqlType: "uint64" };
    case ke.Type.Uint8:
      return { sqlType: "uint8" };
    case ke.Type.IntervalDayTime:
      return { sqlType: "interval[dt]" };
    case ke.Type.IntervalYearMonth:
      return { sqlType: "interval[m]" };
    case ke.Type.List:
      return { sqlType: "list", valueType: Hi(r.valueType) };
    case ke.Type.FixedSizeBinary:
      return { sqlType: "fixedsizebinary", byteWidth: r.byteWidth };
    case ke.Type.Null:
      return { sqlType: "null" };
    case ke.Type.Utf8:
      return { sqlType: "utf8" };
    case ke.Type.Struct:
      return {
        sqlType: "struct",
        fields: r.children.map((e) => ur(e.name, e.type)),
      };
    case ke.Type.Map: {
      let i = r;
      return {
        sqlType: "map",
        keyType: Hi(i.keyType),
        valueType: Hi(i.valueType),
      };
    }
    case ke.Type.Time:
      return { sqlType: "time[s]" };
    case ke.Type.TimeMicrosecond:
      return { sqlType: "time[us]" };
    case ke.Type.TimeMillisecond:
      return { sqlType: "time[ms]" };
    case ke.Type.TimeNanosecond:
      return { sqlType: "time[ns]" };
    case ke.Type.TimeSecond:
      return { sqlType: "time[s]" };
    case ke.Type.Timestamp:
      return { sqlType: "timestamp", timezone: r.timezone || void 0 };
    case ke.Type.TimestampSecond:
      return { sqlType: "timestamp[s]", timezone: r.timezone || void 0 };
    case ke.Type.TimestampMicrosecond:
      return { sqlType: "timestamp[us]", timezone: r.timezone || void 0 };
    case ke.Type.TimestampNanosecond:
      return { sqlType: "timestamp[ns]", timezone: r.timezone || void 0 };
    case ke.Type.TimestampMillisecond:
      return { sqlType: "timestamp[ms]", timezone: r.timezone || void 0 };
  }
  throw new Error(`unsupported arrow type: ${r.toString()}`);
}
function ur(r, i) {
  let e = Hi(i);
  return (e.name = r), e;
}
var _r = class {
  constructor() {
    this._bindings = null;
    this._nextMessageId = 0;
  }
  log(i) {
    this.postMessage(
      { messageId: this._nextMessageId++, requestId: 0, type: "LOG", data: i },
      []
    );
  }
  sendOK(i) {
    this.postMessage(
      {
        messageId: this._nextMessageId++,
        requestId: i.messageId,
        type: "OK",
        data: null,
      },
      []
    );
  }
  failWith(i, e) {
    let l = { name: e.name, message: e.message, stack: e.stack || void 0 };
    this.postMessage(
      {
        messageId: this._nextMessageId++,
        requestId: i.messageId,
        type: "ERROR",
        data: l,
      },
      []
    );
  }
  async onMessage(i) {
    switch (i.type) {
      case "PING":
        this.sendOK(i);
        return;
      case "INSTANTIATE":
        this._bindings != null &&
          this.failWith(i, new Error("duckdb already initialized"));
        try {
          (this._bindings = await this.instantiate(
            i.data[0],
            i.data[1],
            (e) => {
              this.postMessage(
                {
                  messageId: this._nextMessageId++,
                  requestId: i.messageId,
                  type: "INSTANTIATE_PROGRESS",
                  data: e,
                },
                []
              );
            }
          )),
            this.sendOK(i);
        } catch (e) {
          (this._bindings = null), this.failWith(i, e);
        }
        return;
      default:
        break;
    }
    if (!this._bindings)
      return this.failWith(i, new Error("duckdb is not initialized"));
    try {
      switch (i.type) {
        case "GET_VERSION":
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "VERSION_STRING",
              data: this._bindings.getVersion(),
            },
            []
          );
          break;
        case "GET_FEATURE_FLAGS":
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "FEATURE_FLAGS",
              data: this._bindings.getFeatureFlags(),
            },
            []
          );
          break;
        case "RESET":
          this._bindings.reset(), this.sendOK(i);
          break;
        case "OPEN":
          this._bindings.open(i.data), this.sendOK(i);
          break;
        case "DROP_FILE":
          this._bindings.dropFile(i.data), this.sendOK(i);
          break;
        case "DROP_FILES":
          this._bindings.dropFiles(), this.sendOK(i);
          break;
        case "FLUSH_FILES":
          this._bindings.flushFiles(), this.sendOK(i);
          break;
        case "CONNECT": {
          let e = this._bindings.connect();
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "CONNECTION_INFO",
              data: e.useUnsafe((l, p) => p),
            },
            []
          );
          break;
        }
        case "DISCONNECT":
          this._bindings.disconnect(i.data), this.sendOK(i);
          break;
        case "CREATE_PREPARED": {
          let e = this._bindings.createPrepared(i.data[0], i.data[1]);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "PREPARED_STATEMENT_ID",
              data: e,
            },
            []
          );
          break;
        }
        case "CLOSE_PREPARED": {
          this._bindings.closePrepared(i.data[0], i.data[1]), this.sendOK(i);
          break;
        }
        case "RUN_PREPARED": {
          let e = this._bindings.runPrepared(i.data[0], i.data[1], i.data[2]);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "QUERY_RESULT",
              data: e,
            },
            [e.buffer]
          );
          break;
        }
        case "RUN_QUERY": {
          let e = this._bindings.runQuery(i.data[0], i.data[1]);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "QUERY_RESULT",
              data: e,
            },
            [e.buffer]
          );
          break;
        }
        case "SEND_PREPARED": {
          let e = this._bindings.sendPrepared(i.data[0], i.data[1], i.data[2]);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "QUERY_RESULT_HEADER",
              data: e,
            },
            [e.buffer]
          );
          break;
        }
        case "START_PENDING_QUERY": {
          let e = this._bindings.startPendingQuery(i.data[0], i.data[1]),
            l = [];
          e && l.push(e.buffer),
            this.postMessage(
              {
                messageId: this._nextMessageId++,
                requestId: i.messageId,
                type: "QUERY_RESULT_HEADER_OR_NULL",
                data: e,
              },
              l
            );
          break;
        }
        case "POLL_PENDING_QUERY": {
          let e = this._bindings.pollPendingQuery(i.data),
            l = [];
          e && l.push(e.buffer),
            this.postMessage(
              {
                messageId: this._nextMessageId++,
                requestId: i.messageId,
                type: "QUERY_RESULT_HEADER_OR_NULL",
                data: e,
              },
              l
            );
          break;
        }
        case "CANCEL_PENDING_QUERY": {
          let e = this._bindings.cancelPendingQuery(i.data);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "SUCCESS",
              data: e,
            },
            []
          );
          break;
        }
        case "FETCH_QUERY_RESULTS": {
          let e = this._bindings.fetchQueryResults(i.data);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "QUERY_RESULT_CHUNK",
              data: e,
            },
            [e.buffer]
          );
          break;
        }
        case "GET_TABLE_NAMES": {
          let e = this._bindings.getTableNames(i.data[0], i.data[1]);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "TABLE_NAMES",
              data: e,
            },
            []
          );
          break;
        }
        case "GLOB_FILE_INFOS": {
          let e = this._bindings.globFiles(i.data);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "FILE_INFOS",
              data: e,
            },
            []
          );
          break;
        }
        case "REGISTER_FILE_URL":
          this._bindings.registerFileURL(i.data[0], i.data[1]), this.sendOK(i);
          break;
        case "REGISTER_FILE_BUFFER":
          this._bindings.registerFileBuffer(i.data[0], i.data[1]),
            this.sendOK(i);
          break;
        case "REGISTER_FILE_HANDLE":
          this._bindings.registerFileHandle(i.data[0], i.data[1]),
            this.sendOK(i);
          break;
        case "COPY_FILE_TO_PATH":
          this._bindings.copyFileToPath(i.data[0], i.data[1]), this.sendOK(i);
          break;
        case "COPY_FILE_TO_BUFFER": {
          let e = this._bindings.copyFileToBuffer(i.data);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "FILE_BUFFER",
              data: e,
            },
            []
          );
          break;
        }
        case "COLLECT_FILE_STATISTICS":
          this._bindings.collectFileStatistics(i.data[0], i.data[1]),
            this.sendOK(i);
          break;
        case "EXPORT_FILE_STATISTICS": {
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "FILE_STATISTICS",
              data: this._bindings.exportFileStatistics(i.data),
            },
            []
          );
          break;
        }
        case "INSERT_ARROW_FROM_IPC_STREAM": {
          this._bindings.insertArrowFromIPCStream(
            i.data[0],
            i.data[1],
            i.data[2]
          ),
            this.sendOK(i);
          break;
        }
        case "IMPORT_CSV_FROM_PATH": {
          this._bindings.insertCSVFromPath(i.data[0], i.data[1], i.data[2]),
            this.sendOK(i);
          break;
        }
        case "IMPORT_JSON_FROM_PATH": {
          this._bindings.insertJSONFromPath(i.data[0], i.data[1], i.data[2]),
            this.sendOK(i);
          break;
        }
        case "TOKENIZE": {
          let e = this._bindings.tokenize(i.data);
          this.postMessage(
            {
              messageId: this._nextMessageId++,
              requestId: i.messageId,
              type: "SCRIPT_TOKENS",
              data: e,
            },
            []
          );
          break;
        }
      }
    } catch (e) {
      return this.failWith(i, e);
    }
  }
};
var kl = {},
  Oj = (() => {
    var r = kl.url;
    return function (i) {
      i = i || {};
      var e = typeof i < "u" ? i : {},
        l,
        p;
      (e.ready = new Promise(function (c, h) {
        (l = c), (p = h);
      })),
        Object.getOwnPropertyDescriptor(e.ready, "_main") ||
          (Object.defineProperty(e.ready, "_main", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_main", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_malloc") ||
          (Object.defineProperty(e.ready, "_malloc", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_malloc", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_free") ||
          (Object.defineProperty(e.ready, "_free", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_free", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_clear_response"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_clear_response", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_clear_response on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_clear_response", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_clear_response on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_collect_file_stats"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_collect_file_stats", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_collect_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_collect_file_stats", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_collect_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_connect") ||
          (Object.defineProperty(e.ready, "_duckdb_web_connect", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_connect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_connect", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_connect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_copy_file_to_buffer"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_buffer", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_copy_file_to_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_buffer", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_copy_file_to_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_copy_file_to_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_copy_file_to_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_copy_file_to_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_disconnect") ||
          (Object.defineProperty(e.ready, "_duckdb_web_disconnect", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_disconnect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_disconnect", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_disconnect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_export_file_stats"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_export_file_stats", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_export_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_export_file_stats", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_export_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fail_with") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fail_with", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fail_with on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fail_with", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fail_with on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_flush_file") ||
          (Object.defineProperty(e.ready, "_duckdb_web_flush_file", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_flush_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_flush_file", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_flush_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_flush_files") ||
          (Object.defineProperty(e.ready, "_duckdb_web_flush_files", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_flush_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_flush_files", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_flush_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fs_drop_file") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_drop_file", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_drop_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_drop_file", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_drop_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fs_drop_files") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_drop_files", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_drop_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_drop_files", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_drop_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_get_file_info_by_id"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_id",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_get_file_info_by_id on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(e.ready, "_duckdb_web_fs_get_file_info_by_id", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_get_file_info_by_id on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_get_file_info_by_name"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_name",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_get_file_info_by_name on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_name",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_fs_get_file_info_by_name on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_glob_add_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_glob_add_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_glob_add_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_glob_add_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_glob_add_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_glob_file_infos"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_glob_file_infos", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_glob_file_infos on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_glob_file_infos", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_glob_file_infos on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_register_file_buffer"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_register_file_buffer",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_register_file_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_register_file_buffer",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_fs_register_file_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_register_file_url"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_register_file_url", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_register_file_url on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_register_file_url", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_register_file_url on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_set_file_descriptor"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_set_file_descriptor",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_set_file_descriptor on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(e.ready, "_duckdb_web_fs_set_file_descriptor", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_set_file_descriptor on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_feature_flags"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_feature_flags", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_feature_flags on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_feature_flags", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_feature_flags on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_global_file_info"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_global_file_info", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_global_file_info on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_global_file_info", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_global_file_info on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_tablenames"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_tablenames", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_tablenames on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_tablenames", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_tablenames on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_get_version") ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_version", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_version on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_version", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_version on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_arrow_from_ipc_stream"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_insert_arrow_from_ipc_stream",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_insert_arrow_from_ipc_stream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_insert_arrow_from_ipc_stream",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_insert_arrow_from_ipc_stream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_csv_from_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_insert_csv_from_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_insert_csv_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_insert_csv_from_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_insert_csv_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_json_from_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_insert_json_from_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_insert_json_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_insert_json_from_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_insert_json_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_open") ||
          (Object.defineProperty(e.ready, "_duckdb_web_open", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_open on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_open", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_open on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_cancel"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_cancel", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_cancel on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_cancel", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_cancel on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_poll"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_poll", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_poll on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_poll", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_poll on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_start"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_start", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_start on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_start", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_start on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_prepared_close"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_close", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_close on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_close", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_close on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_prepared_create"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_create", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_create", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_prepared_run") ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_run", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_run", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_prepared_send") ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_send", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_send on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_send", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_send on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_query_fetch_results"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_query_fetch_results", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_query_fetch_results on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_query_fetch_results", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_query_fetch_results on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_query_run") ||
          (Object.defineProperty(e.ready, "_duckdb_web_query_run", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_query_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_query_run", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_query_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_reset") ||
          (Object.defineProperty(e.ready, "_duckdb_web_reset", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_reset on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_reset", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_reset on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_tokenize") ||
          (Object.defineProperty(e.ready, "_duckdb_web_tokenize", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_tokenize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_tokenize", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_tokenize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_udf_scalar_create"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_udf_scalar_create", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_udf_scalar_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_udf_scalar_create", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_udf_scalar_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "___stdio_exit") ||
          (Object.defineProperty(e.ready, "___stdio_exit", {
            configurable: !0,
            get: function () {
              k(
                "You are getting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "___stdio_exit", {
            configurable: !0,
            set: function () {
              k(
                "You are setting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "onRuntimeInitialized") ||
          (Object.defineProperty(e.ready, "onRuntimeInitialized", {
            configurable: !0,
            get: function () {
              k(
                "You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "onRuntimeInitialized", {
            configurable: !0,
            set: function () {
              k(
                "You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }));
      var m = Object.assign({}, e),
        w = [],
        O = "./this.program",
        P = (c, h) => {
          throw h;
        },
        B = typeof window == "object",
        D = typeof importScripts == "function",
        q =
          typeof process == "object" &&
          typeof process.versions == "object" &&
          typeof process.versions.node == "string",
        x = !B && !q && !D;
      if (e.ENVIRONMENT)
        throw new Error(
          "Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)"
        );
      var ie = "";
      function X(c) {
        return e.locateFile ? e.locateFile(c, ie) : ie + c;
      }
      var J, ce, le, Ae;
      function Ee(c) {
        if (c instanceof Yi) return;
        let h = c;
        c && typeof c == "object" && c.stack && (h = [c, c.stack]),
          Y("exiting due to exception: " + h);
      }
      var xe, _e, Se;
      if (q) {
        if (!(typeof process == "object" && typeof require == "function"))
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        D ? (ie = require("path").dirname(ie) + "/") : (ie = __dirname + "/"),
          (Se = () => {
            _e || ((xe = require("fs")), (_e = require("path")));
          }),
          (J = function (h, v) {
            return (
              Se(),
              (h = _e.normalize(h)),
              xe.readFileSync(h, v ? void 0 : "utf8")
            );
          }),
          (le = (c) => {
            var h = J(c, !0);
            return h.buffer || (h = new Uint8Array(h)), M(h.buffer), h;
          }),
          (ce = (c, h, v) => {
            Se(),
              (c = _e.normalize(c)),
              xe.readFile(c, function (R, U) {
                R ? v(R) : h(U.buffer);
              });
          }),
          process.argv.length > 1 && (O = process.argv[1].replace(/\\/g, "/")),
          (w = process.argv.slice(2)),
          process.on("uncaughtException", function (c) {
            if (!(c instanceof Yi)) throw c;
          }),
          process.on("unhandledRejection", function (c) {
            throw c;
          }),
          (P = (c, h) => {
            if (bi()) throw ((process.exitCode = c), h);
            Ee(h), process.exit(c);
          }),
          (e.inspect = function () {
            return "[Emscripten Module object]";
          });
      } else if (x) {
        if (
          (typeof process == "object" && typeof require == "function") ||
          typeof window == "object" ||
          typeof importScripts == "function"
        )
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        typeof read < "u" &&
          (J = function (h) {
            return read(h);
          }),
          (le = function (h) {
            let v;
            return typeof readbuffer == "function"
              ? new Uint8Array(readbuffer(h))
              : ((v = read(h, "binary")), M(typeof v == "object"), v);
          }),
          (ce = function (h, v, R) {
            setTimeout(() => v(le(h)), 0);
          }),
          typeof scriptArgs < "u"
            ? (w = scriptArgs)
            : typeof arguments < "u" && (w = arguments),
          typeof quit == "function" &&
            (P = (c, h) => {
              Ee(h), quit(c);
            }),
          typeof print < "u" &&
            (typeof console > "u" && (console = {}),
            (console.log = print),
            (console.warn = console.error =
              typeof printErr < "u" ? printErr : print));
      } else if (B || D) {
        if (
          (D
            ? (ie = self.location.href)
            : typeof document < "u" &&
              document.currentScript &&
              (ie = document.currentScript.src),
          r && (ie = r),
          ie.indexOf("blob:") !== 0
            ? (ie = ie.substr(0, ie.replace(/[?#].*/, "").lastIndexOf("/") + 1))
            : (ie = ""),
          !(typeof window == "object" || typeof importScripts == "function"))
        )
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        (J = (c) => {
          var h = new XMLHttpRequest();
          return h.open("GET", c, !1), h.send(null), h.responseText;
        }),
          D &&
            (le = (c) => {
              var h = new XMLHttpRequest();
              return (
                h.open("GET", c, !1),
                (h.responseType = "arraybuffer"),
                h.send(null),
                new Uint8Array(h.response)
              );
            }),
          (ce = (c, h, v) => {
            var R = new XMLHttpRequest();
            R.open("GET", c, !0),
              (R.responseType = "arraybuffer"),
              (R.onload = () => {
                if (R.status == 200 || (R.status == 0 && R.response)) {
                  h(R.response);
                  return;
                }
                v();
              }),
              (R.onerror = v),
              R.send(null);
          }),
          (Ae = (c) => (document.title = c));
      } else throw new Error("environment detection error");
      var de = e.print || console.log.bind(console),
        Y = e.printErr || console.warn.bind(console);
      Object.assign(e, m),
        (m = null),
        bs(),
        e.arguments && (w = e.arguments),
        se("arguments", "arguments_"),
        e.thisProgram && (O = e.thisProgram),
        se("thisProgram", "thisProgram"),
        e.quit && (P = e.quit),
        se("quit", "quit_"),
        M(
          typeof e.memoryInitializerPrefixURL > "u",
          "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.pthreadMainPrefixURL > "u",
          "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.cdInitializerPrefixURL > "u",
          "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.filePackagePrefixURL > "u",
          "Module.filePackagePrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.read > "u",
          "Module.read option was removed (modify read_ in JS)"
        ),
        M(
          typeof e.readAsync > "u",
          "Module.readAsync option was removed (modify readAsync in JS)"
        ),
        M(
          typeof e.readBinary > "u",
          "Module.readBinary option was removed (modify readBinary in JS)"
        ),
        M(
          typeof e.setWindowTitle > "u",
          "Module.setWindowTitle option was removed (modify setWindowTitle in JS)"
        ),
        M(
          typeof e.TOTAL_MEMORY > "u",
          "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"
        ),
        se("read", "read_"),
        se("readAsync", "readAsync"),
        se("readBinary", "readBinary"),
        se("setWindowTitle", "setWindowTitle");
      var ne = "IDBFS is no longer included by default; build with -lidbfs.js",
        Ce =
          "PROXYFS is no longer included by default; build with -lproxyfs.js",
        F =
          "WORKERFS is no longer included by default; build with -lworkerfs.js",
        je = "NODEFS is no longer included by default; build with -lnodefs.js";
      function ye() {
        k(
          "`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line"
        );
      }
      M(
        !x,
        "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable."
      );
      var Ue = 16,
        I = 4;
      function L(c) {
        switch (c) {
          case "i1":
          case "i8":
            return 1;
          case "i16":
            return 2;
          case "i32":
            return 4;
          case "i64":
            return 8;
          case "float":
            return 4;
          case "double":
            return 8;
          default: {
            if (c[c.length - 1] === "*") return I;
            if (c[0] === "i") {
              let h = Number(c.substr(1));
              return (
                M(
                  h % 8 === 0,
                  "getNativeTypeSize invalid bits " + h + ", type " + c
                ),
                h / 8
              );
            } else return 0;
          }
        }
      }
      function ge(c) {
        ge.shown || (ge.shown = {}), ge.shown[c] || ((ge.shown[c] = 1), Y(c));
      }
      function we(c) {
        return M(c < 16384), c < 128 ? [c] : [c % 128 | 128, c >> 7];
      }
      function lt(c, h) {
        if (typeof WebAssembly.Function == "function") {
          for (
            var v = { i: "i32", j: "i64", f: "f32", d: "f64" },
              R = { parameters: [], results: h[0] == "v" ? [] : [v[h[0]]] },
              U = 1;
            U < h.length;
            ++U
          )
            R.parameters.push(v[h[U]]);
          return new WebAssembly.Function(R, c);
        }
        var Z = [1, 96],
          H = h.slice(0, 1),
          $ = h.slice(1),
          ae = { i: 127, j: 126, f: 125, d: 124 };
        Z = Z.concat(we($.length));
        for (var U = 0; U < $.length; ++U) Z.push(ae[$[U]]);
        H == "v" ? Z.push(0) : (Z = Z.concat([1, ae[H]])),
          (Z = [1].concat(we(Z.length), Z));
        var fe = new Uint8Array(
            [0, 97, 115, 109, 1, 0, 0, 0].concat(
              Z,
              [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0]
            )
          ),
          ve = new WebAssembly.Module(fe),
          We = new WebAssembly.Instance(ve, { e: { f: c } }),
          Oe = We.exports.f;
        return Oe;
      }
      var Je = [],
        Te;
      function Gt() {
        if (Je.length) return Je.pop();
        try {
          Xe.grow(1);
        } catch (c) {
          throw c instanceof RangeError
            ? "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH."
            : c;
        }
        return Xe.length - 1;
      }
      function Ji(c, h) {
        for (var v = c; v < c + h; v++) {
          var R = re(v);
          R && Te.set(R, v);
        }
      }
      function Ti(c, h) {
        if (
          (M(typeof c < "u"),
          Te || ((Te = new WeakMap()), Ji(0, Xe.length)),
          Te.has(c))
        )
          return Te.get(c);
        var v = Gt();
        try {
          gn(v, c);
        } catch (U) {
          if (!(U instanceof TypeError)) throw U;
          M(typeof h < "u", "Missing signature argument to addFunction: " + c);
          var R = lt(c, h);
          gn(v, R);
        }
        return Te.set(c, v), v;
      }
      function Lt(c) {
        Te.delete(re(c)), Je.push(c);
      }
      function se(c, h) {
        Object.getOwnPropertyDescriptor(e, c) ||
          Object.defineProperty(e, c, {
            configurable: !0,
            get: function () {
              k(
                "Module." +
                  c +
                  " has been replaced with plain " +
                  h +
                  " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)"
              );
            },
          });
      }
      function Vt(c) {
        Object.getOwnPropertyDescriptor(e, c) &&
          k(
            "`Module." +
              c +
              "` was supplied but `" +
              c +
              "` not included in INCOMING_MODULE_JS_API"
          );
      }
      function si(c, h) {
        var v =
          "'" +
          c +
          "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        return (
          h &&
            (v +=
              ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),
          v
        );
      }
      function ee(c, h) {
        Object.getOwnPropertyDescriptor(e, c) ||
          Object.defineProperty(e, c, {
            configurable: !0,
            get: function () {
              k(si(c, h));
            },
          });
      }
      function b(c, h) {
        Object.getOwnPropertyDescriptor(e, c) || (e[c] = () => k(si(c, h)));
      }
      var z = 0,
        oe = (c) => {
          z = c;
        },
        Ne = () => z,
        Ie;
      e.wasmBinary && (Ie = e.wasmBinary), se("wasmBinary", "wasmBinary");
      var Ye = e.noExitRuntime || !0;
      se("noExitRuntime", "noExitRuntime"),
        typeof WebAssembly != "object" && k("no native wasm support detected");
      function oi(c, h, v = "i8", R) {
        if ((v.charAt(v.length - 1) === "*" && (v = "i32"), R))
          switch (v) {
            case "i1":
              Ge[c >>> 0] = h;
              break;
            case "i8":
              Ge[c >>> 0] = h;
              break;
            case "i16":
              li[c >>> 1] = h;
              break;
            case "i32":
              bt[c >>> 2] = h;
              break;
            case "i64":
              (yt = [
                h >>> 0,
                ((Le = h),
                +Math.abs(Le) >= 1
                  ? Le > 0
                    ? (Math.min(+Math.floor(Le / 4294967296), 4294967295) |
                        0) >>>
                      0
                    : ~~+Math.ceil((Le - +(~~Le >>> 0)) / 4294967296) >>> 0
                  : 0),
              ]),
                (bt[c >>> 2] = yt[0]),
                (bt[(c + 4) >>> 2] = yt[1]);
              break;
            case "float":
              ui[c >>> 2] = h;
              break;
            case "double":
              _i[c >>> 3] = h;
              break;
            default:
              k("invalid type for setValue: " + v);
          }
        else
          switch (v) {
            case "i1":
              N(c | 0, h | 0, 1);
              break;
            case "i8":
              N(c | 0, h | 0, 1);
              break;
            case "i16":
              N(c | 0, h | 0, 2);
              break;
            case "i32":
              N(c | 0, h | 0, 4);
              break;
            case "i64":
              (yt = [
                h >>> 0,
                ((Le = h),
                +Math.abs(Le) >= 1
                  ? Le > 0
                    ? (Math.min(+Math.floor(Le / 4294967296), 4294967295) |
                        0) >>>
                      0
                    : ~~+Math.ceil((Le - +(~~Le >>> 0)) / 4294967296) >>> 0
                  : 0),
              ]),
                N(c | 0, yt[0] | 0, 4),
                N((c + 4) | 0, yt[1] | 0, 4);
              break;
            case "float":
              tn(c | 0, Math.fround(h), 4);
              break;
            case "double":
              tn(c | 0, +h, 8);
              break;
            default:
              k("invalid type for setValue: " + v);
          }
      }
      function Kt(c, h = "i8", v) {
        if ((h.charAt(h.length - 1) === "*" && (h = "i32"), v))
          switch (h) {
            case "i1":
              return Ge[c >>> 0];
            case "i8":
              return Ge[c >>> 0];
            case "i16":
              return li[c >>> 1];
            case "i32":
              return bt[c >>> 2];
            case "i64":
              return bt[c >>> 2];
            case "float":
              return ui[c >>> 2];
            case "double":
              return Number(_i[c >>> 3]);
            default:
              k("invalid type for getValue: " + h);
          }
        else
          switch (h) {
            case "i1":
              return V(c | 0, 1, 0) | 0;
            case "i8":
              return V(c | 0, 1, 0) | 0;
            case "i16":
              return V(c | 0, 2, 0) | 0;
            case "i32":
              return V(c | 0, 4, 0) | 0;
            case "i64":
              return V(c | 0, 8, 0) | 0;
            case "float":
              return Math.fround(nn(c | 0, 4, 0));
            case "double":
              return +nn(c | 0, 8, 0);
            default:
              k("invalid type for getValue: " + h);
          }
        return null;
      }
      function en(c, h) {
        switch (c) {
          case 1:
            return "i8";
          case 2:
            return "i16";
          case 4:
            return h ? "float" : "i32";
          case 8:
            return h ? "double" : "i64";
          default:
            M(0);
        }
      }
      function N(c, h, v, R) {
        if (
          ((c >>>= 0),
          c <= 0 &&
            k("segmentation fault storing " + v + " bytes to address " + c),
          c % v !== 0 &&
            k(
              "alignment error storing to address " +
                c +
                ", which was expected to be aligned to a multiple of " +
                v
            ),
          Ct)
        ) {
          var U = js() >>> 0;
          c + v > U &&
            k(
              "segmentation fault, exceeded the top of the available dynamic heap when storing " +
                v +
                " bytes to address " +
                c +
                ". DYNAMICTOP=" +
                U
            ),
            M(U >= Jn()),
            M(U <= Ge.length);
        }
        return oi(c, h, en(v, R), 1), h;
      }
      function tn(c, h, v) {
        return N(c, h, v, !0);
      }
      function V(c, h, v, R) {
        if (
          ((c >>>= 0),
          c <= 0 &&
            k("segmentation fault loading " + h + " bytes from address " + c),
          c % h !== 0 &&
            k(
              "alignment error loading from address " +
                c +
                ", which was expected to be aligned to a multiple of " +
                h
            ),
          Ct)
        ) {
          var U = js() >>> 0;
          c + h > U &&
            k(
              "segmentation fault, exceeded the top of the available dynamic heap when loading " +
                h +
                " bytes from address " +
                c +
                ". DYNAMICTOP=" +
                U
            ),
            M(U >= Jn()),
            M(U <= Ge.length);
        }
        var Z = en(h, R),
          H = Kt(c, Z, 1);
        return v && (H = ha(H, parseInt(Z.substr(1), 10))), H;
      }
      function nn(c, h, v) {
        return V(c, h, v, !0);
      }
      function md(c, h) {
        var v = c & h;
        return (
          v !== c &&
            k(
              "Function table mask error: function pointer is " +
                c +
                " which is masked by " +
                h +
                ", the likely cause of this is that the function pointer is being called by the wrong type."
            ),
          v
        );
      }
      function Zr() {
        k("segmentation fault");
      }
      function $r() {
        k("alignment fault");
      }
      var kt,
        Et = !1,
        Ft;
      function M(c, h) {
        c || k("Assertion failed" + (h ? ": " + h : ""));
      }
      function Gr(c) {
        var h = e["_" + c];
        return (
          M(
            h,
            "Cannot call unknown function " + c + ", make sure it is exported"
          ),
          h
        );
      }
      function rn(c, h, v, R, U) {
        var Z = {
          string: function (Ze) {
            var nt = 0;
            if (Ze != null && Ze !== 0) {
              var Ht = (Ze.length << 2) + 1;
              (nt = Fi(Ht)), Nt(Ze, nt, Ht);
            }
            return nt;
          },
          array: function (Ze) {
            var nt = Fi(Ze.length);
            return ln(Ze, nt), nt;
          },
        };
        function H(Ze) {
          return h === "string" ? $e(Ze) : h === "boolean" ? Boolean(Ze) : Ze;
        }
        var $ = Gr(c),
          ae = [],
          fe = 0;
        if ((M(h !== "array", 'Return type should not be "array".'), R))
          for (var ve = 0; ve < R.length; ve++) {
            var We = Z[v[ve]];
            We
              ? (fe === 0 && (fe = ws()), (ae[ve] = We(R[ve])))
              : (ae[ve] = R[ve]);
          }
        var Oe = $.apply(null, ae);
        function ji(Ze) {
          return fe !== 0 && ks(fe), H(Ze);
        }
        return (Oe = ji(Oe)), Oe;
      }
      function wd(c, h, v, R) {
        return function () {
          return rn(c, h, v, arguments, R);
        };
      }
      var kd = 0,
        Vr = 1;
      function Ed(c, h) {
        var v;
        return (
          M(typeof h == "number", "allocate no longer takes a type argument"),
          M(typeof c != "number", "allocate no longer takes a number as arg0"),
          h == Vr ? (v = Fi(c.length)) : (v = Rn(c.length)),
          !c.subarray && !c.slice && (c = new Uint8Array(c)),
          Qe.set(c, v >>> 0),
          v
        );
      }
      var an = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
      function sn(c, h, v) {
        h >>>= 0;
        for (var R = h + v, U = h; c[U] && !(U >= R); ) ++U;
        if (U - h > 16 && c.buffer && an) return an.decode(c.subarray(h, U));
        for (var Z = ""; h < U; ) {
          var H = c[h++];
          if (!(H & 128)) {
            Z += String.fromCharCode(H);
            continue;
          }
          var $ = c[h++] & 63;
          if ((H & 224) == 192) {
            Z += String.fromCharCode(((H & 31) << 6) | $);
            continue;
          }
          var ae = c[h++] & 63;
          if (
            ((H & 240) == 224
              ? (H = ((H & 15) << 12) | ($ << 6) | ae)
              : ((H & 248) != 240 &&
                  ge(
                    "Invalid UTF-8 leading byte 0x" +
                      H.toString(16) +
                      " encountered when deserializing a UTF-8 string in wasm memory to a JS string!"
                  ),
                (H = ((H & 7) << 18) | ($ << 12) | (ae << 6) | (c[h++] & 63))),
            H < 65536)
          )
            Z += String.fromCharCode(H);
          else {
            var fe = H - 65536;
            Z += String.fromCharCode(55296 | (fe >> 10), 56320 | (fe & 1023));
          }
        }
        return Z;
      }
      function $e(c, h) {
        return (c >>>= 0), c ? sn(Qe, c, h) : "";
      }
      function xt(c, h, v, R) {
        if (((v >>>= 0), !(R > 0))) return 0;
        for (var U = v, Z = v + R - 1, H = 0; H < c.length; ++H) {
          var $ = c.charCodeAt(H);
          if ($ >= 55296 && $ <= 57343) {
            var ae = c.charCodeAt(++H);
            $ = (65536 + (($ & 1023) << 10)) | (ae & 1023);
          }
          if ($ <= 127) {
            if (v >= Z) break;
            h[v++ >>> 0] = $;
          } else if ($ <= 2047) {
            if (v + 1 >= Z) break;
            (h[v++ >>> 0] = 192 | ($ >> 6)), (h[v++ >>> 0] = 128 | ($ & 63));
          } else if ($ <= 65535) {
            if (v + 2 >= Z) break;
            (h[v++ >>> 0] = 224 | ($ >> 12)),
              (h[v++ >>> 0] = 128 | (($ >> 6) & 63)),
              (h[v++ >>> 0] = 128 | ($ & 63));
          } else {
            if (v + 3 >= Z) break;
            $ > 1114111 &&
              ge(
                "Invalid Unicode code point 0x" +
                  $.toString(16) +
                  " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."
              ),
              (h[v++ >>> 0] = 240 | ($ >> 18)),
              (h[v++ >>> 0] = 128 | (($ >> 12) & 63)),
              (h[v++ >>> 0] = 128 | (($ >> 6) & 63)),
              (h[v++ >>> 0] = 128 | ($ & 63));
          }
        }
        return (h[v >>> 0] = 0), v - U;
      }
      function Nt(c, h, v) {
        return (
          M(
            typeof v == "number",
            "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          xt(c, Qe, h, v)
        );
      }
      function Bt(c) {
        for (var h = 0, v = 0; v < c.length; ++v) {
          var R = c.charCodeAt(v);
          R >= 55296 &&
            R <= 57343 &&
            (R = (65536 + ((R & 1023) << 10)) | (c.charCodeAt(++v) & 1023)),
            R <= 127
              ? ++h
              : R <= 2047
              ? (h += 2)
              : R <= 65535
              ? (h += 3)
              : (h += 4);
        }
        return h;
      }
      function Sd(c) {
        c >>>= 0;
        for (var h = ""; ; ) {
          var v = V(c++ | 0, 1, 1) >>> 0;
          if (!v) return h;
          h += String.fromCharCode(v);
        }
      }
      function Cd(c, h) {
        return un(c, h, !1);
      }
      var on = typeof TextDecoder < "u" ? new TextDecoder("utf-16le") : void 0;
      function Ad(c, h) {
        M(
          c % 2 == 0,
          "Pointer passed to UTF16ToString must be aligned to two bytes!"
        );
        for (
          var v = c, R = v >> 1, U = R + h / 2;
          !(R >= U) && V((R >>> 0) * 2, 2, 1);

        )
          ++R;
        if (((v = R << 1), v - c > 32 && on))
          return on.decode(Qe.subarray(c >>> 0, v >>> 0));
        for (var Z = "", H = 0; !(H >= h / 2); ++H) {
          var $ = V((c + H * 2) | 0, 2, 0) | 0;
          if ($ == 0) break;
          Z += String.fromCharCode($);
        }
        return Z;
      }
      function Rd(c, h, v) {
        if (
          (M(
            h % 2 == 0,
            "Pointer passed to stringToUTF16 must be aligned to two bytes!"
          ),
          M(
            typeof v == "number",
            "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          v === void 0 && (v = 2147483647),
          v < 2)
        )
          return 0;
        v -= 2;
        for (
          var R = h, U = v < c.length * 2 ? v / 2 : c.length, Z = 0;
          Z < U;
          ++Z
        ) {
          var H = c.charCodeAt(Z);
          N(h | 0, H | 0, 2), (h += 2);
        }
        return N(h | 0, 0, 2), h - R;
      }
      function Od(c) {
        return c.length * 2;
      }
      function Td(c, h) {
        M(
          c % 4 == 0,
          "Pointer passed to UTF32ToString must be aligned to four bytes!"
        );
        for (var v = 0, R = ""; !(v >= h / 4); ) {
          var U = V((c + v * 4) | 0, 4, 0) | 0;
          if (U == 0) break;
          if ((++v, U >= 65536)) {
            var Z = U - 65536;
            R += String.fromCharCode(55296 | (Z >> 10), 56320 | (Z & 1023));
          } else R += String.fromCharCode(U);
        }
        return R;
      }
      function Pd(c, h, v) {
        if (
          ((h >>>= 0),
          M(
            h % 4 == 0,
            "Pointer passed to stringToUTF32 must be aligned to four bytes!"
          ),
          M(
            typeof v == "number",
            "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          v === void 0 && (v = 2147483647),
          v < 4)
        )
          return 0;
        for (var R = h, U = R + v - 4, Z = 0; Z < c.length; ++Z) {
          var H = c.charCodeAt(Z);
          if (H >= 55296 && H <= 57343) {
            var $ = c.charCodeAt(++Z);
            H = (65536 + ((H & 1023) << 10)) | ($ & 1023);
          }
          if ((N(h | 0, H | 0, 4), (h += 4), h + 4 > U)) break;
        }
        return N(h | 0, 0, 4), h - R;
      }
      function Dd(c) {
        for (var h = 0, v = 0; v < c.length; ++v) {
          var R = c.charCodeAt(v);
          R >= 55296 && R <= 57343 && ++v, (h += 4);
        }
        return h;
      }
      function Id(c) {
        var h = Bt(c) + 1,
          v = Rn(h);
        return v && xt(c, Ge, v, h), v;
      }
      function cn(c) {
        var h = Bt(c) + 1,
          v = Fi(h);
        return xt(c, Ge, v, h), v;
      }
      function Md(c, h, v) {
        ge(
          "writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!"
        );
        var R, U;
        v && ((U = h + Bt(c)), (R = V(U >>> 0, 1, 0))),
          Nt(c, h, 1 / 0),
          v && N(U >>> 0, R, 1);
      }
      function ln(c, h) {
        M(
          c.length >= 0,
          "writeArrayToMemory array must have a length (should be an array or typed array)"
        ),
          Ge.set(c, h >>> 0);
      }
      function un(c, h, v) {
        for (var R = 0; R < c.length; ++R)
          M(c.charCodeAt(R) === (c.charCodeAt(R) & 255)),
            N(h++ | 0, c.charCodeAt(R) | 0, 1);
        v || N(h | 0, 0, 1);
      }
      var Ud, ci, Ge, Qe, li, Kr, bt, zr, ui, _i;
      function _n(c) {
        (ci = c),
          (e.HEAP8 = Ge = new Int8Array(c)),
          (e.HEAP16 = li = new Int16Array(c)),
          (e.HEAP32 = bt = new Int32Array(c)),
          (e.HEAPU8 = Qe = new Uint8Array(c)),
          (e.HEAPU16 = Kr = new Uint16Array(c)),
          (e.HEAPU32 = zr = new Uint32Array(c)),
          (e.HEAPF32 = ui = new Float32Array(c)),
          (e.HEAPF64 = _i = new Float64Array(c));
      }
      var di = 5242880;
      e.TOTAL_STACK &&
        M(
          di === e.TOTAL_STACK,
          "the stack size can no longer be determined at runtime"
        );
      var fi = e.INITIAL_MEMORY || 16777216;
      se("INITIAL_MEMORY", "INITIAL_MEMORY"),
        M(
          fi >= di,
          "INITIAL_MEMORY should be larger than TOTAL_STACK, was " +
            fi +
            "! (TOTAL_STACK=" +
            di +
            ")"
        ),
        M(
          typeof Int32Array < "u" &&
            typeof Float64Array < "u" &&
            Int32Array.prototype.subarray != null &&
            Int32Array.prototype.set != null,
          "JS engine does not provide full typed array support"
        ),
        M(
          !e.wasmMemory,
          "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"
        ),
        M(
          fi == 16777216,
          "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically"
        );
      var Xe;
      function dn() {
        var c = er();
        M((c & 3) == 0), N(c | 0, 34821223, 4), N((c + 4) | 0, -1984246274, 4);
      }
      function St() {
        if (!Et) {
          var c = er(),
            h = V(c | 0, 4, 1) >>> 0,
            v = V((c + 4) | 0, 4, 1) >>> 0;
          (h != 34821223 || v != 2310721022) &&
            k(
              "Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" +
                v.toString(16) +
                " 0x" +
                h.toString(16)
            );
        }
      }
      (function () {
        var c = new Int16Array(1),
          h = new Int8Array(c.buffer);
        if (((c[0] = 25459), h[0] !== 115 || h[1] !== 99))
          throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
      })();
      var hi = [],
        fn = [],
        hn = [],
        Ld = [],
        bn = [],
        Ct = !1;
      function bi() {
        return Ye;
      }
      function Qr() {
        if (e.preRun)
          for (
            typeof e.preRun == "function" && (e.preRun = [e.preRun]);
            e.preRun.length;

          )
            ta(e.preRun.shift());
        Yt(hi);
      }
      function Xr() {
        St(), M(!Ct), (Ct = !0), Yt(fn);
      }
      function Jr() {
        St(), Yt(hn);
      }
      function ea() {
        if ((St(), e.postRun))
          for (
            typeof e.postRun == "function" && (e.postRun = [e.postRun]);
            e.postRun.length;

          )
            na(e.postRun.shift());
        Yt(bn);
      }
      function ta(c) {
        hi.unshift(c);
      }
      function ia(c) {
        fn.unshift(c);
      }
      function Fd(c) {
        hn.unshift(c);
      }
      function xd(c) {}
      function na(c) {
        bn.unshift(c);
      }
      M(
        Math.imul,
        "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
      ),
        M(
          Math.fround,
          "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        ),
        M(
          Math.clz32,
          "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        ),
        M(
          Math.trunc,
          "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
      var it = 0,
        ct = null,
        At = null,
        pt = {};
      function Nd(c) {
        for (var h = c; ; ) {
          if (!pt[c]) return c;
          c = h + Math.random();
        }
      }
      function ra(c) {
        it++,
          e.monitorRunDependencies && e.monitorRunDependencies(it),
          c
            ? (M(!pt[c]),
              (pt[c] = 1),
              ct === null &&
                typeof setInterval < "u" &&
                (ct = setInterval(function () {
                  if (Et) {
                    clearInterval(ct), (ct = null);
                    return;
                  }
                  var h = !1;
                  for (var v in pt)
                    h || ((h = !0), Y("still waiting on run dependencies:")),
                      Y("dependency: " + v);
                  h && Y("(end of list)");
                }, 1e4)))
            : Y("warning: run dependency added without ID");
      }
      function aa(c) {
        if (
          (it--,
          e.monitorRunDependencies && e.monitorRunDependencies(it),
          c
            ? (M(pt[c]), delete pt[c])
            : Y("warning: run dependency removed without ID"),
          it == 0 && (ct !== null && (clearInterval(ct), (ct = null)), At))
        ) {
          var h = At;
          (At = null), h();
        }
      }
      function k(c) {
        e.onAbort && e.onAbort(c),
          (c = "Aborted(" + c + ")"),
          Y(c),
          (Et = !0),
          (Ft = 1);
        var h = new WebAssembly.RuntimeError(c);
        throw (p(h), h);
      }
      var sa = "data:application/octet-stream;base64,";
      function pn(c) {
        return c.startsWith(sa);
      }
      function oa(c) {
        return c.startsWith("file://");
      }
      function g(c, h) {
        return function () {
          var v = c,
            R = h;
          return (
            h || (R = e.asm),
            M(
              Ct,
              "native function `" + v + "` called before runtime initialization"
            ),
            R[c] || M(R[c], "exported native function `" + v + "` not found"),
            R[c].apply(null, arguments)
          );
        };
      }
      var Pe;
      e.locateFile
        ? ((Pe = "./duckdb-eh.wasm"), pn(Pe) || (Pe = X(Pe)))
        : (Pe = new URL("./duckdb-eh.wasm", kl.url).toString());
      function yn(c) {
        try {
          if (c == Pe && Ie) return new Uint8Array(Ie);
          if (le) return le(c);
          throw "both async and sync fetching of the wasm failed";
        } catch (h) {
          k(h);
        }
      }
      function ca() {
        return !Ie && (B || D) && typeof fetch == "function"
          ? fetch(Pe, { credentials: "same-origin" })
              .then(function (c) {
                if (!c.ok)
                  throw "failed to load wasm binary file at '" + Pe + "'";
                return c.arrayBuffer();
              })
              .catch(function () {
                return yn(Pe);
              })
          : Promise.resolve().then(function () {
              return yn(Pe);
            });
      }
      function la() {
        var c = { env: zn, wasi_snapshot_preview1: zn };
        function h($, ae) {
          var fe = $.exports;
          (e.asm = fe),
            (kt = e.asm.memory),
            M(kt, "memory not found in wasm exports"),
            _n(kt.buffer),
            (Xe = e.asm.__indirect_function_table),
            M(Xe, "table not found in wasm exports"),
            ia(e.asm.__wasm_call_ctors),
            aa("wasm-instantiate");
        }
        ra("wasm-instantiate");
        var v = e;
        function R($) {
          M(
            e === v,
            "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"
          ),
            (v = null),
            h($.instance);
        }
        function U($) {
          return ca()
            .then(function (ae) {
              return WebAssembly.instantiate(ae, c);
            })
            .then(function (ae) {
              return ae;
            })
            .then($, function (ae) {
              Y("failed to asynchronously prepare wasm: " + ae),
                oa(Pe) &&
                  Y(
                    "warning: Loading from a file URI (" +
                      Pe +
                      ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"
                  ),
                k(ae);
            });
        }
        function Z() {
          return !Ie &&
            typeof WebAssembly.instantiateStreaming == "function" &&
            !pn(Pe) &&
            typeof fetch == "function"
            ? fetch(Pe, { credentials: "same-origin" }).then(function ($) {
                var ae = WebAssembly.instantiateStreaming($, c);
                return ae.then(R, function (fe) {
                  return (
                    Y("wasm streaming compile failed: " + fe),
                    Y("falling back to ArrayBuffer instantiation"),
                    U(R)
                  );
                });
              })
            : U(R);
        }
        if (e.instantiateWasm)
          try {
            var H = e.instantiateWasm(c, h);
            return H;
          } catch ($) {
            return (
              Y("Module.instantiateWasm callback failed with error: " + $), !1
            );
          }
        return Z().catch(p), {};
      }
      var Le,
        yt,
        Bd = {};
      function Yt(c) {
        for (; c.length > 0; ) {
          var h = c.shift();
          if (typeof h == "function") {
            h(e);
            continue;
          }
          var v = h.func;
          typeof v == "number"
            ? h.arg === void 0
              ? re(v)()
              : re(v)(h.arg)
            : v(h.arg === void 0 ? null : h.arg);
        }
      }
      function Yd(c) {
        var h = ws(),
          v = c();
        return ks(h), v;
      }
      function ua(c) {
        return (
          ge(
            "warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling"
          ),
          c
        );
      }
      function _a(c) {
        var h = /\b_Z[\w\d_]+/g;
        return c.replace(h, function (v) {
          var R = ua(v);
          return v === R ? v : R + " [" + v + "]";
        });
      }
      var Rt = [];
      function re(c) {
        var h = Rt[c];
        return (
          h || (c >= Rt.length && (Rt.length = c + 1), (Rt[c] = h = Xe.get(c))),
          M(
            Xe.get(c) == h,
            "JavaScript-side Wasm function table mirror is out of date!"
          ),
          h
        );
      }
      function da(c) {
        if (c instanceof Yi || c == "unwind") return Ft;
        P(1, c);
      }
      function fa() {
        var c = new Error();
        if (!c.stack) {
          try {
            throw new Error();
          } catch (h) {
            c = h;
          }
          if (!c.stack) return "(no stack trace available)";
        }
        return c.stack.toString();
      }
      function gn(c, h) {
        Xe.set(c, h), (Rt[c] = Xe.get(c));
      }
      function Hd() {
        var c = fa();
        return (
          e.extraStackTrace &&
            (c +=
              `
` + e.extraStackTrace()),
          _a(c)
        );
      }
      function ha(c, h) {
        return c >= 0
          ? c
          : h <= 32
          ? 2 * Math.abs(1 << (h - 1)) + c
          : Math.pow(2, h) + c;
      }
      function ba(c, h, v, R) {
        k(
          "Assertion failed: " +
            $e(c) +
            ", at: " +
            [h ? $e(h) : "unknown filename", v, R ? $e(R) : "unknown function"]
        );
      }
      var He = {
        buffers: [null, [], []],
        printChar: function (c, h) {
          var v = He.buffers[c];
          M(v),
            h === 0 || h === 10
              ? ((c === 1 ? de : Y)(sn(v, 0)), (v.length = 0))
              : v.push(h);
        },
        varargs: void 0,
        get: function () {
          M(He.varargs != null), (He.varargs += 4);
          var c = V((He.varargs - 4) | 0, 4, 0) | 0;
          return c;
        },
        getStr: function (c) {
          var h = $e(c);
          return h;
        },
      };
      function pi(c, h, v, R, U) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function pa() {
        Y("missing function: $SOCKFS"), k(-1);
      }
      function yi() {
        Y("missing function: $FS"), k(-1);
      }
      function gi(c) {
        var h = pa.getSocket(c);
        if (!h) throw new yi.ErrnoError(8);
        return h;
      }
      function Ot(c) {
        return N(Lc() | 0, c | 0, 4), c;
      }
      var zt = {
        BUFFER_SIZE: 10240,
        MAX_BUFFER_SIZE: 10485760,
        nextFd: 1,
        fds: {},
        nextport: 1,
        maxport: 65535,
        peer: null,
        connections: {},
        portmap: {},
        localAddr: 4261412874,
        addrPool: [
          33554442, 50331658, 67108874, 83886090, 100663306, 117440522,
          134217738, 150994954, 167772170, 184549386, 201326602, 218103818,
          234881034,
        ],
      };
      function Pi(c) {
        return (
          (c & 255) +
          "." +
          ((c >> 8) & 255) +
          "." +
          ((c >> 16) & 255) +
          "." +
          ((c >> 24) & 255)
        );
      }
      function Ln(c) {
        var h = "",
          v = 0,
          R = 0,
          U = 0,
          Z = 0,
          H = 0,
          $ = 0,
          ae = [
            c[0] & 65535,
            c[0] >> 16,
            c[1] & 65535,
            c[1] >> 16,
            c[2] & 65535,
            c[2] >> 16,
            c[3] & 65535,
            c[3] >> 16,
          ],
          fe = !0,
          ve = "";
        for ($ = 0; $ < 5; $++)
          if (ae[$] !== 0) {
            fe = !1;
            break;
          }
        if (fe) {
          if (((ve = Pi(ae[6] | (ae[7] << 16))), ae[5] === -1))
            return (h = "::ffff:"), (h += ve), h;
          if (ae[5] === 0)
            return (
              (h = "::"),
              ve === "0.0.0.0" && (ve = ""),
              ve === "0.0.0.1" && (ve = "1"),
              (h += ve),
              h
            );
        }
        for (v = 0; v < 8; v++)
          ae[v] === 0 && (v - U > 1 && (H = 0), (U = v), H++),
            H > R && ((R = H), (Z = v - R + 1));
        for (v = 0; v < 8; v++) {
          if (R > 1 && ae[v] === 0 && v >= Z && v < Z + R) {
            v === Z && ((h += ":"), Z === 0 && (h += ":"));
            continue;
          }
          (h += Number(vs(ae[v] & 65535)).toString(16)),
            (h += v < 7 ? ":" : "");
        }
        return h;
      }
      function Fn(c, h) {
        var v = V(c | 0, 2, 0) | 0,
          R = vs(V((c + 2) | 0, 2, 1) >>> 0),
          U;
        switch (v) {
          case 2:
            if (h !== 16) return { errno: 28 };
            (U = V((c + 4) | 0, 4, 0) | 0), (U = Pi(U));
            break;
          case 10:
            if (h !== 28) return { errno: 28 };
            (U = [
              V((c + 8) | 0, 4, 0) | 0,
              V((c + 12) | 0, 4, 0) | 0,
              V((c + 16) | 0, 4, 0) | 0,
              V((c + 20) | 0, 4, 0) | 0,
            ]),
              (U = Ln(U));
            break;
          default:
            return { errno: 5 };
        }
        return { family: v, addr: U, port: R };
      }
      function Di(c) {
        for (var h = c.split("."), v = 0; v < 4; v++) {
          var R = Number(h[v]);
          if (isNaN(R)) return null;
          h[v] = R;
        }
        return (h[0] | (h[1] << 8) | (h[2] << 16) | (h[3] << 24)) >>> 0;
      }
      function Ii(c) {
        return parseInt(c);
      }
      function vn(c) {
        var h,
          v,
          R,
          U,
          Z,
          H =
            /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,
          $ = [];
        if (!H.test(c)) return null;
        if (c === "::") return [0, 0, 0, 0, 0, 0, 0, 0];
        for (
          c.startsWith("::")
            ? (c = c.replace("::", "Z:"))
            : (c = c.replace("::", ":Z:")),
            c.indexOf(".") > 0
              ? ((c = c.replace(new RegExp("[.]", "g"), ":")),
                (h = c.split(":")),
                (h[h.length - 4] =
                  Ii(h[h.length - 4]) + Ii(h[h.length - 3]) * 256),
                (h[h.length - 3] =
                  Ii(h[h.length - 2]) + Ii(h[h.length - 1]) * 256),
                (h = h.slice(0, h.length - 2)))
              : (h = c.split(":")),
            R = 0,
            U = 0,
            v = 0;
          v < h.length;
          v++
        )
          if (typeof h[v] == "string")
            if (h[v] === "Z") {
              for (U = 0; U < 8 - h.length + 1; U++) $[v + U] = 0;
              R = U - 1;
            } else $[v + R] = Xn(parseInt(h[v], 16));
          else $[v + R] = h[v];
        return [
          ($[1] << 16) | $[0],
          ($[3] << 16) | $[2],
          ($[5] << 16) | $[4],
          ($[7] << 16) | $[6],
        ];
      }
      var ut = {
        address_map: { id: 1, addrs: {}, names: {} },
        lookup_name: function (c) {
          var h = Di(c);
          if (h !== null || ((h = vn(c)), h !== null)) return c;
          var v;
          if (ut.address_map.addrs[c]) v = ut.address_map.addrs[c];
          else {
            var R = ut.address_map.id++;
            M(R < 65535, "exceeded max address mappings of 65535"),
              (v = "172.29." + (R & 255) + "." + (R & 65280)),
              (ut.address_map.names[v] = c),
              (ut.address_map.addrs[c] = v);
          }
          return v;
        },
        lookup_addr: function (c) {
          return ut.address_map.names[c] ? ut.address_map.names[c] : null;
        },
      };
      function xn(c, h, v) {
        if (v && c === 0) return null;
        var R = Fn(c, h);
        if (R.errno) throw new yi.ErrnoError(R.errno);
        return (R.addr = ut.lookup_addr(R.addr) || R.addr), R;
      }
      function ya(c, h, v) {
        var R = gi(c),
          U = xn(h, v);
        return R.sock_ops.bind(R, U.addr, U.port), 0;
      }
      function ga(c, h, v) {
        var R = gi(c),
          U = xn(h, v);
        return R.sock_ops.connect(R, U.addr, U.port), 0;
      }
      function va(c, h, v, R) {
        return (
          (h = He.getStr(h)),
          M(R === 0),
          (h = He.calculateAt(c, h)),
          He.doAccess(h, v)
        );
      }
      function qe(c, h, v) {
        return (He.varargs = v), 0;
      }
      function ja(c, h) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function ma(c, h, v) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Nn(c, h, v) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Qt(c, h) {
        Qe.fill(0, c, c + h);
      }
      function Bn(c, h, v, R, U) {
        switch (h) {
          case 2:
            (v = Di(v)),
              Qt(c, 16),
              U && N(U | 0, 16, 4),
              N(c | 0, h | 0, 2),
              N((c + 4) | 0, v | 0, 4),
              N((c + 2) | 0, Xn(R) | 0, 2);
            break;
          case 10:
            (v = vn(v)),
              Qt(c, 28),
              U && N(U | 0, 28, 4),
              N(c | 0, h | 0, 4),
              N((c + 8) | 0, v[0] | 0, 4),
              N((c + 12) | 0, v[1] | 0, 4),
              N((c + 16) | 0, v[2] | 0, 4),
              N((c + 20) | 0, v[3] | 0, 4),
              N((c + 2) | 0, Xn(R) | 0, 2);
            break;
          default:
            return 5;
        }
        return 0;
      }
      function jc(c, h, v) {
        var R = gi(c);
        if (!R.daddr) return -53;
        var U = Bn(h, R.family, ut.lookup_name(R.daddr), R.dport, v);
        return M(!U), 0;
      }
      function jn(c, h, v, R, U) {
        var Z = gi(c);
        return h === 1 && v === 4
          ? (N(R | 0, Z.error | 0, 4), N(U | 0, 4, 4), (Z.error = null), 0)
          : -50;
      }
      function Yn(c, h, v) {
        return (He.varargs = v), 0;
      }
      function Hn(c, h) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Mi(c, h, v) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ui(c, h, v, R) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function mn(c, h, v, R) {
        (He.varargs = R),
          k(
            "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
          );
      }
      function _t(c, h, v, R, U, Z) {
        var H = gi(c),
          $ = H.sock_ops.recvmsg(H, v);
        if (!$) return 0;
        if (U) {
          var ae = Bn(U, H.family, ut.lookup_name($.addr), $.port, Z);
          M(!ae);
        }
        return Qe.set($.buffer, h >>> 0), $.buffer.byteLength;
      }
      function qn(c, h, v, R) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function wa(c) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function ka(c, h, v, R, U, Z) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ea(c, h, v) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Sa(c, h) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ca(c, h, v) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Aa(c) {}
      var Wn =
        "To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";
      function Zn(c, h) {
        k(Wn);
      }
      function wn(c, h) {
        k(Wn);
      }
      function Ra() {
        return Date.now();
      }
      var Oa = !0;
      function Ta() {
        return Oa;
      }
      function Pa() {
        k("native code called abort()");
      }
      function Da(c, h) {
        return globalThis.DUCKDB_RUNTIME.createDirectory(e, c, h);
      }
      function Ia(c, h) {
        return globalThis.DUCKDB_RUNTIME.checkDirectory(e, c, h);
      }
      function Ma(c, h) {
        return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e, c, h);
      }
      function Ua(c, h) {
        return globalThis.DUCKDB_RUNTIME.removeDirectory(e, c, h);
      }
      function La(c) {
        return globalThis.DUCKDB_RUNTIME.closeFile(e, c);
      }
      function Fa(c, h) {
        return globalThis.DUCKDB_RUNTIME.checkFile(e, c, h);
      }
      function xa(c) {
        return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e, c);
      }
      function Na(c, h, v, R) {
        return globalThis.DUCKDB_RUNTIME.moveFile(e, c, h, v, R);
      }
      function Ba(c, h) {
        return globalThis.DUCKDB_RUNTIME.openFile(e, c, h);
      }
      function Ya(c, h, v, R) {
        return globalThis.DUCKDB_RUNTIME.readFile(e, c, h, v, R);
      }
      function Ha(c, h) {
        return globalThis.DUCKDB_RUNTIME.truncateFile(e, c, h);
      }
      function $n(c, h, v, R) {
        return globalThis.DUCKDB_RUNTIME.writeFile(e, c, h, v, R);
      }
      function qa(c, h) {
        return globalThis.DUCKDB_RUNTIME.glob(e, c, h);
      }
      function Wa(c) {
        return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e, c);
      }
      function Za(c, h, v, R, U, Z) {
        return globalThis.DUCKDB_RUNTIME.callScalarUDF(e, c, h, v, R, U, Z);
      }
      function $a(c) {
        M(typeof c == "number"), console.error($e(c));
      }
      function Gn() {
        return 4294901760;
      }
      var kn;
      q
        ? (kn = () => {
            var c = process.hrtime();
            return c[0] * 1e3 + c[1] / 1e6;
          })
        : (kn = () => performance.now());
      function Ga(c, h, v) {
        Qe.copyWithin(c >>> 0, h >>> 0, (h + v) >>> 0);
      }
      function Va(c) {
        try {
          return kt.grow((c - ci.byteLength + 65535) >>> 16), _n(kt.buffer), 1;
        } catch (h) {
          Y(
            "emscripten_realloc_buffer: Attempted to grow heap from " +
              ci.byteLength +
              " bytes to " +
              c +
              " bytes, but got error: " +
              h
          );
        }
      }
      function Ka(c) {
        var h = Qe.length;
        (c = c >>> 0), M(c > h);
        var v = Gn();
        if (c > v)
          return (
            Y(
              "Cannot enlarge memory, asked to go up to " +
                c +
                " bytes, but the limit is " +
                v +
                " bytes!"
            ),
            !1
          );
        let R = (ae, fe) => ae + ((fe - (ae % fe)) % fe);
        for (var U = 1; U <= 4; U *= 2) {
          var Z = h * (1 + 0.2 / U);
          Z = Math.min(Z, c + 100663296);
          var H = Math.min(v, R(Math.max(c, Z), 65536)),
            $ = Va(H);
          if ($) return !0;
        }
        return (
          Y(
            "Failed to grow the heap from " +
              h +
              " bytes to " +
              H +
              " bytes, not enough memory!"
          ),
          !1
        );
      }
      var En = {};
      function za() {
        return O || "./this.program";
      }
      function vi() {
        if (!vi.strings) {
          var c =
              (
                (typeof navigator == "object" &&
                  navigator.languages &&
                  navigator.languages[0]) ||
                "C"
              ).replace("-", "_") + ".UTF-8",
            h = {
              USER: "web_user",
              LOGNAME: "web_user",
              PATH: "/",
              PWD: "/",
              HOME: "/home/web_user",
              LANG: c,
              _: za(),
            };
          for (var v in En) En[v] === void 0 ? delete h[v] : (h[v] = En[v]);
          var R = [];
          for (var v in h) R.push(v + "=" + h[v]);
          vi.strings = R;
        }
        return vi.strings;
      }
      function Qa(c, h) {
        var v = 0;
        return (
          vi().forEach(function (R, U) {
            var Z = h + v;
            N((c + U * 4) | 0, Z | 0, 4), un(R, Z), (v += R.length + 1);
          }),
          0
        );
      }
      function Xa(c, h) {
        var v = vi();
        N(c | 0, v.length | 0, 4);
        var R = 0;
        return (
          v.forEach(function (U) {
            R += U.length + 1;
          }),
          N(h | 0, R | 0, 4),
          0
        );
      }
      function Ja(c) {
        return (
          k(
            "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
          ),
          0
        );
      }
      function es(c, h, v, R, U, Z) {
        M(!U, "offsets over 2^32 not yet supported");
        var H = He.getStreamFromFD(c),
          $ = He.doReadv(H, h, v, R);
        return N(Z | 0, $ | 0, 4), 0;
      }
      function ts(c, h, v, R, U, Z) {
        var H = He.getStreamFromFD(c);
        M(!U, "offsets over 2^32 not yet supported");
        var $ = He.doWritev(H, h, v, R);
        return N(Z | 0, $ | 0, 4), 0;
      }
      function is(c, h, v, R) {
        var U = He.getStreamFromFD(c),
          Z = He.doReadv(U, h, v);
        return N(R | 0, Z | 0, 4), 0;
      }
      function ns(c, h, v, R, U) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function rs(c) {
        var h = He.getStreamFromFD(c);
        return h.stream_ops && h.stream_ops.fsync ? -h.stream_ops.fsync(h) : 0;
      }
      function as() {
        Fc();
        var c = He.buffers;
        c[1].length && He.printChar(1, 10), c[2].length && He.printChar(2, 10);
      }
      function ss(c, h, v, R) {
        for (var U = 0, Z = 0; Z < v; Z++) {
          var H = V(h | 0, 4, 0) | 0,
            $ = V((h + 4) | 0, 4, 0) | 0;
          h += 8;
          for (var ae = 0; ae < $; ae++)
            He.printChar(c, V((H + ae) >>> 0, 1, 1));
          U += $;
        }
        return N(R | 0, U | 0, 4), 0;
      }
      function Vn(c, h, v, R) {
        var U = [],
          Z = null,
          H = 0,
          $ = 0,
          ae = 0,
          fe = 0,
          ve = 0,
          We = 0,
          Oe,
          ji;
        function Ze(nt, Ht, mi, K, he, at) {
          var ze, qt, dt, sr;
          return (
            (qt = nt === 10 ? 28 : 16),
            (he = nt === 10 ? Ln(he) : Pi(he)),
            (ze = Rn(qt)),
            (sr = Bn(ze, nt, he, at)),
            M(!sr),
            (dt = Rn(32)),
            N((dt + 4) | 0, nt | 0, 4),
            N((dt + 8) | 0, Ht | 0, 4),
            N((dt + 12) | 0, mi | 0, 4),
            N((dt + 24) | 0, K | 0, 4),
            N((dt + 20) | 0, ze | 0, 4),
            nt === 10 ? N((dt + 16) | 0, 28, 4) : N((dt + 16) | 0, 16, 4),
            N((dt + 28) | 0, 0, 4),
            dt
          );
        }
        if (
          (v &&
            ((ae = V(v | 0, 4, 0) | 0),
            (fe = V((v + 4) | 0, 4, 0) | 0),
            (ve = V((v + 8) | 0, 4, 0) | 0),
            (We = V((v + 12) | 0, 4, 0) | 0)),
          ve && !We && (We = ve === 2 ? 17 : 6),
          !ve && We && (ve = We === 17 ? 2 : 1),
          We === 0 && (We = 6),
          ve === 0 && (ve = 1),
          !c && !h)
        )
          return -2;
        if (ae & -1088 || (v !== 0 && (V(v | 0, 4, 0) | 0) & 2 && !c))
          return -1;
        if (ae & 32) return -2;
        if (ve !== 0 && ve !== 1 && ve !== 2) return -7;
        if (fe !== 0 && fe !== 2 && fe !== 10) return -6;
        if (h && ((h = $e(h)), ($ = parseInt(h, 10)), isNaN($)))
          return ae & 1024 ? -2 : -8;
        if (!c)
          return (
            fe === 0 && (fe = 2),
            (ae & 1) === 0 &&
              (fe === 2 ? (H = Qn(2130706433)) : (H = [0, 0, 0, 1])),
            (Oe = Ze(fe, ve, We, null, H, $)),
            N(R | 0, Oe | 0, 4),
            0
          );
        if (((c = $e(c)), (H = Di(c)), H !== null))
          if (fe === 0 || fe === 2) fe = 2;
          else if (fe === 10 && ae & 8) (H = [0, 0, Qn(65535), H]), (fe = 10);
          else return -2;
        else if (((H = vn(c)), H !== null))
          if (fe === 0 || fe === 10) fe = 10;
          else return -2;
        return H != null
          ? ((Oe = Ze(fe, ve, We, c, H, $)), N(R | 0, Oe | 0, 4), 0)
          : ae & 4
          ? -2
          : ((c = ut.lookup_name(c)),
            (H = Di(c)),
            fe === 0 ? (fe = 2) : fe === 10 && (H = [0, 0, Qn(65535), H]),
            (Oe = Ze(fe, ve, We, null, H, $)),
            N(R | 0, Oe | 0, 4),
            0);
      }
      function Sn() {
        if (
          typeof crypto == "object" &&
          typeof crypto.getRandomValues == "function"
        ) {
          var c = new Uint8Array(1);
          return function () {
            return crypto.getRandomValues(c), c[0];
          };
        } else if (q)
          try {
            var h = require("crypto");
            return function () {
              return h.randomBytes(1)[0];
            };
          } catch {}
        return function () {
          k(
            "no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"
          );
        };
      }
      function Li(c, h) {
        Li.randomDevice || (Li.randomDevice = Sn());
        for (var v = 0; v < h; v++) N((c + v) | 0, Li.randomDevice() | 0, 1);
        return 0;
      }
      function os(c, h, v, R, U, Z, H) {
        var $ = Fn(c, h);
        if ($.errno) return -6;
        var ae = $.port,
          fe = $.addr,
          ve = !1;
        if (v && R) {
          var We;
          if (H & 1 || !(We = ut.lookup_addr(fe))) {
            if (H & 8) return -2;
          } else fe = We;
          var Oe = Nt(fe, v, R);
          Oe + 1 >= R && (ve = !0);
        }
        if (U && Z) {
          ae = "" + ae;
          var Oe = Nt(ae, U, Z);
          Oe + 1 >= Z && (ve = !0);
        }
        return ve ? -12 : 0;
      }
      function cs(c) {
        oe(c);
      }
      function Xt(c) {
        return c % 4 === 0 && (c % 100 !== 0 || c % 400 === 0);
      }
      function ls(c, h) {
        for (var v = 0, R = 0; R <= h; v += c[R++]);
        return v;
      }
      var Jt = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        Kn = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function us(c, h) {
        for (var v = new Date(c.getTime()); h > 0; ) {
          var R = Xt(v.getFullYear()),
            U = v.getMonth(),
            Z = (R ? Jt : Kn)[U];
          if (h > Z - v.getDate())
            (h -= Z - v.getDate() + 1),
              v.setDate(1),
              U < 11
                ? v.setMonth(U + 1)
                : (v.setMonth(0), v.setFullYear(v.getFullYear() + 1));
          else return v.setDate(v.getDate() + h), v;
        }
        return v;
      }
      function _s(c, h, v, R) {
        var U = V((R + 40) | 0, 4, 0) | 0,
          Z = {
            tm_sec: V(R | 0, 4, 0) | 0,
            tm_min: V((R + 4) | 0, 4, 0) | 0,
            tm_hour: V((R + 8) | 0, 4, 0) | 0,
            tm_mday: V((R + 12) | 0, 4, 0) | 0,
            tm_mon: V((R + 16) | 0, 4, 0) | 0,
            tm_year: V((R + 20) | 0, 4, 0) | 0,
            tm_wday: V((R + 24) | 0, 4, 0) | 0,
            tm_yday: V((R + 28) | 0, 4, 0) | 0,
            tm_isdst: V((R + 32) | 0, 4, 0) | 0,
            tm_gmtoff: V((R + 36) | 0, 4, 0) | 0,
            tm_zone: U ? $e(U) : "",
          },
          H = $e(v),
          $ = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y",
          };
        for (var ae in $) H = H.replace(new RegExp(ae, "g"), $[ae]);
        var fe = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          ve = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ];
        function We(K, he, at) {
          for (
            var ze = typeof K == "number" ? K.toString() : K || "";
            ze.length < he;

          )
            ze = at[0] + ze;
          return ze;
        }
        function Oe(K, he) {
          return We(K, he, "0");
        }
        function ji(K, he) {
          function at(qt) {
            return qt < 0 ? -1 : qt > 0 ? 1 : 0;
          }
          var ze;
          return (
            (ze = at(K.getFullYear() - he.getFullYear())) === 0 &&
              (ze = at(K.getMonth() - he.getMonth())) === 0 &&
              (ze = at(K.getDate() - he.getDate())),
            ze
          );
        }
        function Ze(K) {
          switch (K.getDay()) {
            case 0:
              return new Date(K.getFullYear() - 1, 11, 29);
            case 1:
              return K;
            case 2:
              return new Date(K.getFullYear(), 0, 3);
            case 3:
              return new Date(K.getFullYear(), 0, 2);
            case 4:
              return new Date(K.getFullYear(), 0, 1);
            case 5:
              return new Date(K.getFullYear() - 1, 11, 31);
            case 6:
              return new Date(K.getFullYear() - 1, 11, 30);
          }
        }
        function nt(K) {
          var he = us(new Date(K.tm_year + 1900, 0, 1), K.tm_yday),
            at = new Date(he.getFullYear(), 0, 4),
            ze = new Date(he.getFullYear() + 1, 0, 4),
            qt = Ze(at),
            dt = Ze(ze);
          return ji(qt, he) <= 0
            ? ji(dt, he) <= 0
              ? he.getFullYear() + 1
              : he.getFullYear()
            : he.getFullYear() - 1;
        }
        var Ht = {
          "%a": function (K) {
            return fe[K.tm_wday].substring(0, 3);
          },
          "%A": function (K) {
            return fe[K.tm_wday];
          },
          "%b": function (K) {
            return ve[K.tm_mon].substring(0, 3);
          },
          "%B": function (K) {
            return ve[K.tm_mon];
          },
          "%C": function (K) {
            var he = K.tm_year + 1900;
            return Oe((he / 100) | 0, 2);
          },
          "%d": function (K) {
            return Oe(K.tm_mday, 2);
          },
          "%e": function (K) {
            return We(K.tm_mday, 2, " ");
          },
          "%g": function (K) {
            return nt(K).toString().substring(2);
          },
          "%G": function (K) {
            return nt(K);
          },
          "%H": function (K) {
            return Oe(K.tm_hour, 2);
          },
          "%I": function (K) {
            var he = K.tm_hour;
            return he == 0 ? (he = 12) : he > 12 && (he -= 12), Oe(he, 2);
          },
          "%j": function (K) {
            return Oe(
              K.tm_mday + ls(Xt(K.tm_year + 1900) ? Jt : Kn, K.tm_mon - 1),
              3
            );
          },
          "%m": function (K) {
            return Oe(K.tm_mon + 1, 2);
          },
          "%M": function (K) {
            return Oe(K.tm_min, 2);
          },
          "%n": function () {
            return `
`;
          },
          "%p": function (K) {
            return K.tm_hour >= 0 && K.tm_hour < 12 ? "AM" : "PM";
          },
          "%S": function (K) {
            return Oe(K.tm_sec, 2);
          },
          "%t": function () {
            return "	";
          },
          "%u": function (K) {
            return K.tm_wday || 7;
          },
          "%U": function (K) {
            var he = K.tm_yday + 7 - K.tm_wday;
            return Oe(Math.floor(he / 7), 2);
          },
          "%V": function (K) {
            var he = Math.floor((K.tm_yday + 7 - ((K.tm_wday + 6) % 7)) / 7);
            if (((K.tm_wday + 371 - K.tm_yday - 2) % 7 <= 2 && he++, he)) {
              if (he == 53) {
                var ze = (K.tm_wday + 371 - K.tm_yday) % 7;
                ze != 4 && (ze != 3 || !Xt(K.tm_year)) && (he = 1);
              }
            } else {
              he = 52;
              var at = (K.tm_wday + 7 - K.tm_yday - 1) % 7;
              (at == 4 || (at == 5 && Xt((K.tm_year % 400) - 1))) && he++;
            }
            return Oe(he, 2);
          },
          "%w": function (K) {
            return K.tm_wday;
          },
          "%W": function (K) {
            var he = K.tm_yday + 7 - ((K.tm_wday + 6) % 7);
            return Oe(Math.floor(he / 7), 2);
          },
          "%y": function (K) {
            return (K.tm_year + 1900).toString().substring(2);
          },
          "%Y": function (K) {
            return K.tm_year + 1900;
          },
          "%z": function (K) {
            var he = K.tm_gmtoff,
              at = he >= 0;
            return (
              (he = Math.abs(he) / 60),
              (he = (he / 60) * 100 + (he % 60)),
              (at ? "+" : "-") + String("0000" + he).slice(-4)
            );
          },
          "%Z": function (K) {
            return K.tm_zone;
          },
          "%%": function () {
            return "%";
          },
        };
        H = H.replace(/%%/g, "\0\0");
        for (var ae in Ht)
          H.includes(ae) && (H = H.replace(new RegExp(ae, "g"), Ht[ae](Z)));
        H = H.replace(/\0\0/g, "%");
        var mi = hs(H, !1);
        return mi.length > h ? 0 : (ln(mi, c), mi.length - 1);
      }
      function ds(c, h, v, R) {
        return _s(c, h, v, R);
      }
      var fs = !0;
      function hs(c, h, v) {
        var R = v > 0 ? v : Bt(c) + 1,
          U = new Array(R),
          Z = xt(c, U, 0, U.length);
        return h && (U.length = Z), U;
      }
      function mc(c) {
        for (var h = [], v = 0; v < c.length; v++) {
          var R = c[v];
          R > 255 &&
            (fs &&
              M(
                !1,
                "Character code " +
                  R +
                  " (" +
                  String.fromCharCode(R) +
                  ")  at offset " +
                  v +
                  " not in 0x00-0xFF."
              ),
            (R &= 255)),
            h.push(String.fromCharCode(R));
        }
        return h.join("");
      }
      function bs() {
        Vt("fetchSettings");
      }
      var zn = {
          __assert_fail: ba,
          __syscall__newselect: pi,
          __syscall_bind: ya,
          __syscall_connect: ga,
          __syscall_faccessat: va,
          __syscall_fcntl64: qe,
          __syscall_fstat64: ja,
          __syscall_ftruncate64: ma,
          __syscall_getdents64: Nn,
          __syscall_getpeername: jc,
          __syscall_getsockopt: jn,
          __syscall_ioctl: Yn,
          __syscall_lstat64: Hn,
          __syscall_mkdirat: Mi,
          __syscall_newfstatat: Ui,
          __syscall_openat: mn,
          __syscall_recvfrom: _t,
          __syscall_renameat: qn,
          __syscall_rmdir: wa,
          __syscall_sendto: ka,
          __syscall_socket: Ea,
          __syscall_stat64: Sa,
          __syscall_unlinkat: Ca,
          _dlinit: Aa,
          _dlopen_js: Zn,
          _dlsym_js: wn,
          _emscripten_date_now: Ra,
          _emscripten_get_now_is_monotonic: Ta,
          abort: Pa,
          alignfault: $r,
          duckdb_web_fs_directory_create: Da,
          duckdb_web_fs_directory_exists: Ia,
          duckdb_web_fs_directory_list_files: Ma,
          duckdb_web_fs_directory_remove: Ua,
          duckdb_web_fs_file_close: La,
          duckdb_web_fs_file_exists: Fa,
          duckdb_web_fs_file_get_last_modified_time: xa,
          duckdb_web_fs_file_move: Na,
          duckdb_web_fs_file_open: Ba,
          duckdb_web_fs_file_read: Ya,
          duckdb_web_fs_file_truncate: Ha,
          duckdb_web_fs_file_write: $n,
          duckdb_web_fs_glob: qa,
          duckdb_web_test_platform_feature: Wa,
          duckdb_web_udf_scalar_call: Za,
          emscripten_console_error: $a,
          emscripten_get_heap_max: Gn,
          emscripten_get_now: kn,
          emscripten_memcpy_big: Ga,
          emscripten_resize_heap: Ka,
          environ_get: Qa,
          environ_sizes_get: Xa,
          fd_close: Ja,
          fd_pread: es,
          fd_pwrite: ts,
          fd_read: is,
          fd_seek: ns,
          fd_sync: rs,
          fd_write: ss,
          getaddrinfo: Vn,
          getentropy: Li,
          getnameinfo: os,
          segfault: Zr,
          setTempRet0: cs,
          strftime_l: ds,
        },
        wc = la(),
        kc = (e.___wasm_call_ctors = g("__wasm_call_ctors")),
        Ec = (e._main = g("main")),
        Sc = (e._duckdb_web_fs_glob_add_path = g(
          "duckdb_web_fs_glob_add_path"
        )),
        Cn = (e._duckdb_web_clear_response = g("duckdb_web_clear_response")),
        Cc = (e._duckdb_web_fail_with = g("duckdb_web_fail_with")),
        Ac = (e._duckdb_web_reset = g("duckdb_web_reset")),
        Rc = (e._duckdb_web_connect = g("duckdb_web_connect")),
        An = (e._duckdb_web_disconnect = g("duckdb_web_disconnect")),
        Oc = (e._duckdb_web_flush_files = g("duckdb_web_flush_files")),
        ps = (e._duckdb_web_flush_file = g("duckdb_web_flush_file")),
        ys = (e._duckdb_web_open = g("duckdb_web_open")),
        Tc = (e._duckdb_web_get_global_file_info = g(
          "duckdb_web_get_global_file_info"
        )),
        Pc = (e._duckdb_web_collect_file_stats = g(
          "duckdb_web_collect_file_stats"
        )),
        Dc = (e._duckdb_web_export_file_stats = g(
          "duckdb_web_export_file_stats"
        )),
        Ic = (e._duckdb_web_fs_drop_file = g("duckdb_web_fs_drop_file")),
        Mc = (e._duckdb_web_fs_drop_files = g("duckdb_web_fs_drop_files")),
        qd = (e._duckdb_web_fs_glob_file_infos = g(
          "duckdb_web_fs_glob_file_infos"
        )),
        Uc = (e._duckdb_web_fs_get_file_info_by_id = g(
          "duckdb_web_fs_get_file_info_by_id"
        )),
        gs = (e._duckdb_web_fs_get_file_info_by_name = g(
          "duckdb_web_fs_get_file_info_by_name"
        )),
        Wd = (e._duckdb_web_fs_set_file_descriptor = g(
          "duckdb_web_fs_set_file_descriptor"
        )),
        Zd = (e._duckdb_web_fs_register_file_url = g(
          "duckdb_web_fs_register_file_url"
        )),
        $d = (e._duckdb_web_fs_register_file_buffer = g(
          "duckdb_web_fs_register_file_buffer"
        )),
        Gd = (e._duckdb_web_copy_file_to_buffer = g(
          "duckdb_web_copy_file_to_buffer"
        )),
        Vd = (e._duckdb_web_copy_file_to_path = g(
          "duckdb_web_copy_file_to_path"
        )),
        Kd = (e._duckdb_web_get_version = g("duckdb_web_get_version")),
        zd = (e._duckdb_web_get_feature_flags = g(
          "duckdb_web_get_feature_flags"
        )),
        Qd = (e._duckdb_web_tokenize = g("duckdb_web_tokenize")),
        Xd = (e._duckdb_web_udf_scalar_create = g(
          "duckdb_web_udf_scalar_create"
        )),
        Jd = (e._duckdb_web_prepared_create = g("duckdb_web_prepared_create")),
        ef = (e._duckdb_web_prepared_close = g("duckdb_web_prepared_close")),
        tf = (e._duckdb_web_prepared_run = g("duckdb_web_prepared_run")),
        nf = (e._duckdb_web_prepared_send = g("duckdb_web_prepared_send")),
        rf = (e._duckdb_web_query_run = g("duckdb_web_query_run")),
        af = (e._duckdb_web_pending_query_start = g(
          "duckdb_web_pending_query_start"
        )),
        sf = (e._duckdb_web_pending_query_poll = g(
          "duckdb_web_pending_query_poll"
        )),
        of = (e._duckdb_web_pending_query_cancel = g(
          "duckdb_web_pending_query_cancel"
        )),
        cf = (e._duckdb_web_query_fetch_results = g(
          "duckdb_web_query_fetch_results"
        )),
        lf = (e._duckdb_web_get_tablenames = g("duckdb_web_get_tablenames")),
        uf = (e._duckdb_web_insert_arrow_from_ipc_stream = g(
          "duckdb_web_insert_arrow_from_ipc_stream"
        )),
        _f = (e._duckdb_web_insert_csv_from_path = g(
          "duckdb_web_insert_csv_from_path"
        )),
        df = (e._duckdb_web_insert_json_from_path = g(
          "duckdb_web_insert_json_from_path"
        )),
        Lc = (e.___errno_location = g("__errno_location")),
        Fc = (e.___stdio_exit = g("__stdio_exit")),
        ff = (e.___dl_seterr = g("__dl_seterr")),
        Qn = (e._htonl = g("htonl")),
        Xn = (e._htons = g("htons")),
        vs = (e._ntohs = g("ntohs")),
        Rn = (e._malloc = g("malloc")),
        hf = (e._free = g("free")),
        bf = (e._emscripten_get_sbrk_ptr = g("emscripten_get_sbrk_ptr")),
        js = (e._sbrk = g("sbrk")),
        pf = (e._setThrew = g("setThrew")),
        ms = (e._emscripten_stack_init = function () {
          return (ms = e._emscripten_stack_init =
            e.asm.emscripten_stack_init).apply(null, arguments);
        }),
        xc = (e._emscripten_stack_get_free = function () {
          return (xc = e._emscripten_stack_get_free =
            e.asm.emscripten_stack_get_free).apply(null, arguments);
        }),
        Jn = (e._emscripten_stack_get_base = function () {
          return (Jn = e._emscripten_stack_get_base =
            e.asm.emscripten_stack_get_base).apply(null, arguments);
        }),
        er = (e._emscripten_stack_get_end = function () {
          return (er = e._emscripten_stack_get_end =
            e.asm.emscripten_stack_get_end).apply(null, arguments);
        }),
        ws = (e.stackSave = g("stackSave")),
        ks = (e.stackRestore = g("stackRestore")),
        Fi = (e.stackAlloc = g("stackAlloc")),
        yf = (e.dynCall_jiji = g("dynCall_jiji")),
        gf = (e.dynCall_iiiiij = g("dynCall_iiiiij")),
        Nc = (e.dynCall_iiiiijj = g("dynCall_iiiiijj")),
        Bc = (e.dynCall_iiiiiijj = g("dynCall_iiiiiijj")),
        vf = (e.dynCall_viijii = g("dynCall_viijii")),
        tr = (e.dynCall_viij = g("dynCall_viij")),
        ir = (e.dynCall_viijji = g("dynCall_viijji")),
        Es = (e.dynCall_viijj = g("dynCall_viijj")),
        xi = (e.dynCall_viiijj = g("dynCall_viiijj")),
        Yc = (e.dynCall_viiij = g("dynCall_viiij")),
        jf = (e.dynCall_viijij = g("dynCall_viijij")),
        Ss = (e.dynCall_viiji = g("dynCall_viiji")),
        C = (e.dynCall_ji = g("dynCall_ji")),
        Cs = (e.dynCall_jiiiii = g("dynCall_jiiiii")),
        Hc = (e.dynCall_vij = g("dynCall_vij")),
        nr = (e.dynCall_j = g("dynCall_j")),
        rr = (e.dynCall_jii = g("dynCall_jii")),
        E = (e.dynCall_jiii = g("dynCall_jiii")),
        S = (e.dynCall_jij = g("dynCall_jij")),
        Ni = (e.dynCall_iij = g("dynCall_iij")),
        On = (e.dynCall_iiiiiji = g("dynCall_iiiiiji")),
        qc = (e.dynCall_jiiiij = g("dynCall_jiiiij")),
        mf = (e.dynCall_jijjij = g("dynCall_jijjij")),
        Wc = (e.dynCall_ijjj = g("dynCall_ijjj")),
        Zc = (e.dynCall_jjjd = g("dynCall_jjjd")),
        $c = (e.dynCall_jjjjjjd = g("dynCall_jjjjjjd")),
        wf = (e.dynCall_vjjijij = g("dynCall_vjjijij")),
        Gc = (e.dynCall_vijjji = g("dynCall_vijjji")),
        Vc = (e.dynCall_vjjii = g("dynCall_vjjii")),
        Kc = (e.dynCall_viiiiiji = g("dynCall_viiiiiji")),
        zc = (e.dynCall_jiiiji = g("dynCall_jiiiji")),
        Qc = (e.dynCall_jiiij = g("dynCall_jiiij")),
        Xc = (e.dynCall_iiij = g("dynCall_iiij")),
        Jc = (e.dynCall_vijjj = g("dynCall_vijjj")),
        el = (e.dynCall_jiijii = g("dynCall_jiijii")),
        tl = (e.dynCall_jijiii = g("dynCall_jijiii")),
        il = (e.dynCall_viijiiiii = g("dynCall_viijiiiii")),
        nl = (e.dynCall_viijiiij = g("dynCall_viijiiij")),
        rl = (e.dynCall_vijiiiji = g("dynCall_vijiiiji")),
        al = (e.dynCall_viiiij = g("dynCall_viiiij")),
        sl = (e.dynCall_jiiji = g("dynCall_jiiji")),
        ol = (e.dynCall_viiijij = g("dynCall_viiijij")),
        cl = (e.dynCall_viijiij = g("dynCall_viijiij")),
        ll = (e.dynCall_viiiiijj = g("dynCall_viiiiijj")),
        ul = (e.dynCall_viiijji = g("dynCall_viiijji")),
        _l = (e.dynCall_vijii = g("dynCall_vijii")),
        dl = (e.dynCall_jiiii = g("dynCall_jiiii")),
        fl = (e.dynCall_viiijiiiijj = g("dynCall_viiijiiiijj")),
        hl = (e.dynCall_jiiijj = g("dynCall_jiiijj")),
        bl = (e.dynCall_viiiji = g("dynCall_viiiji")),
        pl = (e.dynCall_viiiiji = g("dynCall_viiiiji")),
        yl = (e.dynCall_jiij = g("dynCall_jiij")),
        gl = (e.dynCall_jijiiii = g("dynCall_jijiiii")),
        vl = (e.dynCall_viiijiji = g("dynCall_viiijiji"));
      b("intArrayFromString", !1),
        b("intArrayToString", !1),
        (e.ccall = rn),
        b("cwrap", !1),
        b("setValue", !1),
        b("getValue", !1),
        b("allocate", !1),
        b("UTF8ArrayToString", !1),
        b("UTF8ToString", !1),
        b("stringToUTF8Array", !1),
        b("stringToUTF8", !1),
        b("lengthBytesUTF8", !1),
        b("stackTrace", !1),
        b("addOnPreRun", !1),
        b("addOnInit", !1),
        b("addOnPreMain", !1),
        b("addOnExit", !1),
        b("addOnPostRun", !1),
        b("writeStringToMemory", !1),
        b("writeArrayToMemory", !1),
        b("writeAsciiToMemory", !1),
        b("addRunDependency", !0),
        b("removeRunDependency", !0),
        b("FS_createFolder", !1),
        b("FS_createPath", !0),
        b("FS_createDataFile", !0),
        b("FS_createPreloadedFile", !0),
        b("FS_createLazyFile", !0),
        b("FS_createLink", !1),
        b("FS_createDevice", !0),
        b("FS_unlink", !0),
        b("getLEB", !1),
        b("getFunctionTables", !1),
        b("alignFunctionTables", !1),
        b("registerFunctions", !1),
        b("addFunction", !1),
        b("removeFunction", !1),
        b("prettyPrint", !1),
        b("dynCall", !1),
        b("getCompilerSetting", !1),
        b("print", !1),
        b("printErr", !1),
        b("getTempRet0", !1),
        b("setTempRet0", !1),
        b("callMain", !1),
        b("abort", !1),
        b("keepRuntimeAlive", !1),
        b("ptrToString", !1),
        b("zeroMemory", !1),
        b("stringToNewUTF8", !1),
        b("emscripten_realloc_buffer", !1),
        b("ENV", !1),
        b("ERRNO_CODES", !1),
        b("ERRNO_MESSAGES", !1),
        b("setErrNo", !1),
        b("inetPton4", !1),
        b("inetNtop4", !1),
        b("inetPton6", !1),
        b("inetNtop6", !1),
        b("readSockaddr", !1),
        b("writeSockaddr", !1),
        b("DNS", !1),
        b("getHostByName", !1),
        b("Protocols", !1),
        b("Sockets", !1),
        b("getRandomDevice", !1),
        b("traverseStack", !1),
        b("UNWIND_CACHE", !1),
        b("convertPCtoSourceLocation", !1),
        b("readAsmConstArgsArray", !1),
        b("readAsmConstArgs", !1),
        b("mainThreadEM_ASM", !1),
        b("jstoi_q", !1),
        b("jstoi_s", !1),
        b("getExecutableName", !1),
        b("listenOnce", !1),
        b("autoResumeAudioContext", !1),
        b("dynCallLegacy", !1),
        b("getDynCaller", !1),
        b("dynCall", !1),
        b("handleException", !1),
        b("runtimeKeepalivePush", !1),
        b("runtimeKeepalivePop", !1),
        b("callUserCallback", !1),
        b("maybeExit", !1),
        b("safeSetTimeout", !1),
        b("asmjsMangle", !1),
        b("asyncLoad", !1),
        b("alignMemory", !1),
        b("mmapAlloc", !1),
        b("reallyNegative", !1),
        b("unSign", !1),
        b("reSign", !1),
        b("formatString", !1),
        b("PATH", !1),
        b("PATH_FS", !1),
        b("SYSCALLS", !1),
        b("getSocketFromFD", !1),
        b("getSocketAddress", !1),
        b("JSEvents", !1),
        b("registerKeyEventCallback", !1),
        b("specialHTMLTargets", !1),
        b("maybeCStringToJsString", !1),
        b("findEventTarget", !1),
        b("findCanvasEventTarget", !1),
        b("getBoundingClientRect", !1),
        b("fillMouseEventData", !1),
        b("registerMouseEventCallback", !1),
        b("registerWheelEventCallback", !1),
        b("registerUiEventCallback", !1),
        b("registerFocusEventCallback", !1),
        b("fillDeviceOrientationEventData", !1),
        b("registerDeviceOrientationEventCallback", !1),
        b("fillDeviceMotionEventData", !1),
        b("registerDeviceMotionEventCallback", !1),
        b("screenOrientation", !1),
        b("fillOrientationChangeEventData", !1),
        b("registerOrientationChangeEventCallback", !1),
        b("fillFullscreenChangeEventData", !1),
        b("registerFullscreenChangeEventCallback", !1),
        b("registerRestoreOldStyle", !1),
        b("hideEverythingExceptGivenElement", !1),
        b("restoreHiddenElements", !1),
        b("setLetterbox", !1),
        b("currentFullscreenStrategy", !1),
        b("restoreOldWindowedStyle", !1),
        b("softFullscreenResizeWebGLRenderTarget", !1),
        b("doRequestFullscreen", !1),
        b("fillPointerlockChangeEventData", !1),
        b("registerPointerlockChangeEventCallback", !1),
        b("registerPointerlockErrorEventCallback", !1),
        b("requestPointerLock", !1),
        b("fillVisibilityChangeEventData", !1),
        b("registerVisibilityChangeEventCallback", !1),
        b("registerTouchEventCallback", !1),
        b("fillGamepadEventData", !1),
        b("registerGamepadEventCallback", !1),
        b("registerBeforeUnloadEventCallback", !1),
        b("fillBatteryEventData", !1),
        b("battery", !1),
        b("registerBatteryEventCallback", !1),
        b("setCanvasElementSize", !1),
        b("getCanvasElementSize", !1),
        b("demangle", !1),
        b("demangleAll", !1),
        b("jsStackTrace", !1),
        b("stackTrace", !1),
        b("getEnvStrings", !1),
        b("checkWasiClock", !1),
        b("flush_NO_FILESYSTEM", !1),
        b("writeI53ToI64", !1),
        b("writeI53ToI64Clamped", !1),
        b("writeI53ToI64Signaling", !1),
        b("writeI53ToU64Clamped", !1),
        b("writeI53ToU64Signaling", !1),
        b("readI53FromI64", !1),
        b("readI53FromU64", !1),
        b("convertI32PairToI53", !1),
        b("convertU32PairToI53", !1),
        b("dlopenMissingError", !1),
        b("setImmediateWrapped", !1),
        b("clearImmediateWrapped", !1),
        b("polyfillSetImmediate", !1),
        b("Browser", !1),
        b("setMainLoop", !1),
        b("wget", !1),
        b("tempFixedLengthArray", !1),
        b("miniTempWebGLFloatBuffers", !1),
        b("heapObjectForWebGLType", !1),
        b("heapAccessShiftForWebGLHeap", !1),
        b("GL", !1),
        b("emscriptenWebGLGet", !1),
        b("computeUnpackAlignedImageSize", !1),
        b("emscriptenWebGLGetTexPixelData", !1),
        b("emscriptenWebGLGetUniform", !1),
        b("webglGetUniformLocation", !1),
        b("webglPrepareUniformLocationsBeforeFirstUse", !1),
        b("webglGetLeftBracePos", !1),
        b("emscriptenWebGLGetVertexAttrib", !1),
        b("writeGLArray", !1),
        b("AL", !1),
        b("SDL_unicode", !1),
        b("SDL_ttfContext", !1),
        b("SDL_audio", !1),
        b("SDL", !1),
        b("SDL_gfx", !1),
        b("GLUT", !1),
        b("EGL", !1),
        b("GLFW_Window", !1),
        b("GLFW", !1),
        b("GLEW", !1),
        b("IDBStore", !1),
        b("runAndAbortIfError", !1),
        b("SOCKFS", !1),
        b("FS", !1),
        b("warnOnce", !1),
        b("stackSave", !1),
        b("stackRestore", !1),
        b("stackAlloc", !1),
        b("AsciiToString", !1),
        b("stringToAscii", !1),
        b("UTF16ToString", !1),
        b("stringToUTF16", !1),
        b("lengthBytesUTF16", !1),
        b("UTF32ToString", !1),
        b("stringToUTF32", !1),
        b("lengthBytesUTF32", !1),
        b("allocateUTF8", !1),
        b("allocateUTF8OnStack", !1),
        (e.writeStackCookie = dn),
        (e.checkStackCookie = St),
        ee("ALLOC_NORMAL", !1),
        ee("ALLOC_STACK", !1);
      var Bi;
      function Yi(c) {
        (this.name = "ExitStatus"),
          (this.message = "Program terminated with exit(" + c + ")"),
          (this.status = c);
      }
      var As = !1;
      At = function c() {
        Bi || Tn(), Bi || (At = c);
      };
      function Rs(c) {
        M(
          it == 0,
          'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'
        ),
          M(
            hi.length == 0,
            "cannot call main when preRun functions remain to be called"
          );
        var h = e._main;
        c = c || [];
        var v = c.length + 1,
          R = Fi((v + 1) * 4);
        N((R >>> 2) * 4, cn(O), 4);
        for (var U = 1; U < v; U++)
          N((((R >> 2) + U) >>> 0) * 4, cn(c[U - 1]), 4);
        N((((R >> 2) + v) >>> 0) * 4, 0, 4);
        try {
          var Z = h(v, R);
          return Ps(Z, !0), Z;
        } catch (H) {
          return da(H);
        } finally {
          As = !0;
        }
      }
      function Os() {
        ms(), dn();
      }
      function Tn(c) {
        if (((c = c || w), it > 0 || (Os(), Qr(), it > 0))) return;
        function h() {
          Bi ||
            ((Bi = !0),
            (e.calledRun = !0),
            !Et &&
              (Xr(),
              Jr(),
              l(e),
              e.onRuntimeInitialized && e.onRuntimeInitialized(),
              ar && Rs(c),
              ea()));
        }
        e.setStatus
          ? (e.setStatus("Running..."),
            setTimeout(function () {
              setTimeout(function () {
                e.setStatus("");
              }, 1),
                h();
            }, 1))
          : h(),
          St();
      }
      e.run = Tn;
      function Ts() {
        var c = de,
          h = Y,
          v = !1;
        de = Y = (U) => {
          v = !0;
        };
        try {
          var R = as;
          R && R();
        } catch {}
        (de = c),
          (Y = h),
          v &&
            (ge(
              "stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."
            ),
            ge(
              "(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"
            ));
      }
      function Ps(c, h) {
        if (((Ft = c), Ts(), bi() && !h)) {
          var v =
            "program exited (with status: " +
            c +
            "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
          p(v), Y(v);
        }
        Ds(c);
      }
      function Ds(c) {
        (Ft = c), bi() || (e.onExit && e.onExit(c), (Et = !0)), P(c, new Yi(c));
      }
      if (e.preInit)
        for (
          typeof e.preInit == "function" && (e.preInit = [e.preInit]);
          e.preInit.length > 0;

        )
          e.preInit.pop()();
      var ar = !0;
      return e.noInitialRun && (ar = !1), Tn(), i.ready;
    };
  })(),
  El = Oj;
var Sl = {},
  Tj = (() => {
    var r = Sl.url;
    return function (i) {
      i = i || {};
      var e = typeof i < "u" ? i : {},
        l,
        p;
      (e.ready = new Promise(function (t, n) {
        (l = t), (p = n);
      })),
        Object.getOwnPropertyDescriptor(e.ready, "_main") ||
          (Object.defineProperty(e.ready, "_main", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_main", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_malloc") ||
          (Object.defineProperty(e.ready, "_malloc", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_malloc", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_free") ||
          (Object.defineProperty(e.ready, "_free", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_free", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_clear_response"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_clear_response", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_clear_response on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_clear_response", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_clear_response on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_collect_file_stats"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_collect_file_stats", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_collect_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_collect_file_stats", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_collect_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_connect") ||
          (Object.defineProperty(e.ready, "_duckdb_web_connect", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_connect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_connect", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_connect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_copy_file_to_buffer"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_buffer", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_copy_file_to_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_buffer", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_copy_file_to_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_copy_file_to_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_copy_file_to_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_copy_file_to_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_copy_file_to_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_disconnect") ||
          (Object.defineProperty(e.ready, "_duckdb_web_disconnect", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_disconnect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_disconnect", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_disconnect on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_export_file_stats"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_export_file_stats", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_export_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_export_file_stats", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_export_file_stats on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fail_with") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fail_with", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fail_with on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fail_with", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fail_with on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_flush_file") ||
          (Object.defineProperty(e.ready, "_duckdb_web_flush_file", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_flush_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_flush_file", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_flush_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_flush_files") ||
          (Object.defineProperty(e.ready, "_duckdb_web_flush_files", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_flush_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_flush_files", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_flush_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fs_drop_file") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_drop_file", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_drop_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_drop_file", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_drop_file on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_fs_drop_files") ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_drop_files", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_drop_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_drop_files", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_drop_files on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_get_file_info_by_id"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_id",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_get_file_info_by_id on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(e.ready, "_duckdb_web_fs_get_file_info_by_id", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_get_file_info_by_id on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_get_file_info_by_name"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_name",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_get_file_info_by_name on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_get_file_info_by_name",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_fs_get_file_info_by_name on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_glob_add_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_glob_add_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_glob_add_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_glob_add_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_glob_add_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_glob_file_infos"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_glob_file_infos", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_glob_file_infos on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_glob_file_infos", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_glob_file_infos on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_register_file_buffer"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_register_file_buffer",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_register_file_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_register_file_buffer",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_fs_register_file_buffer on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_register_file_url"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_fs_register_file_url", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_fs_register_file_url on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_fs_register_file_url", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_register_file_url on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_fs_set_file_descriptor"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_fs_set_file_descriptor",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_fs_set_file_descriptor on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(e.ready, "_duckdb_web_fs_set_file_descriptor", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_fs_set_file_descriptor on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_feature_flags"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_feature_flags", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_feature_flags on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_feature_flags", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_feature_flags on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_global_file_info"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_global_file_info", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_global_file_info on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_global_file_info", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_global_file_info on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_get_tablenames"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_tablenames", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_tablenames on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_tablenames", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_tablenames on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_get_version") ||
          (Object.defineProperty(e.ready, "_duckdb_web_get_version", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_get_version on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_get_version", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_get_version on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_arrow_from_ipc_stream"
        ) ||
          (Object.defineProperty(
            e.ready,
            "_duckdb_web_insert_arrow_from_ipc_stream",
            {
              configurable: !0,
              get: function () {
                k(
                  "You are getting _duckdb_web_insert_arrow_from_ipc_stream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          ),
          Object.defineProperty(
            e.ready,
            "_duckdb_web_insert_arrow_from_ipc_stream",
            {
              configurable: !0,
              set: function () {
                k(
                  "You are setting _duckdb_web_insert_arrow_from_ipc_stream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
                );
              },
            }
          )),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_csv_from_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_insert_csv_from_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_insert_csv_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_insert_csv_from_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_insert_csv_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_insert_json_from_path"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_insert_json_from_path", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_insert_json_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_insert_json_from_path", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_insert_json_from_path on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_open") ||
          (Object.defineProperty(e.ready, "_duckdb_web_open", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_open on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_open", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_open on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_cancel"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_cancel", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_cancel on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_cancel", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_cancel on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_poll"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_poll", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_poll on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_poll", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_poll on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_pending_query_start"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_pending_query_start", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_pending_query_start on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_pending_query_start", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_pending_query_start on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_prepared_close"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_close", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_close on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_close", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_close on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_prepared_create"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_create", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_create", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_prepared_run") ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_run", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_run", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_prepared_send") ||
          (Object.defineProperty(e.ready, "_duckdb_web_prepared_send", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_prepared_send on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_prepared_send", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_prepared_send on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_query_fetch_results"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_query_fetch_results", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_query_fetch_results on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_query_fetch_results", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_query_fetch_results on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_query_run") ||
          (Object.defineProperty(e.ready, "_duckdb_web_query_run", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_query_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_query_run", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_query_run on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_reset") ||
          (Object.defineProperty(e.ready, "_duckdb_web_reset", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_reset on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_reset", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_reset on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "_duckdb_web_tokenize") ||
          (Object.defineProperty(e.ready, "_duckdb_web_tokenize", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_tokenize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_tokenize", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_tokenize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(
          e.ready,
          "_duckdb_web_udf_scalar_create"
        ) ||
          (Object.defineProperty(e.ready, "_duckdb_web_udf_scalar_create", {
            configurable: !0,
            get: function () {
              k(
                "You are getting _duckdb_web_udf_scalar_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "_duckdb_web_udf_scalar_create", {
            configurable: !0,
            set: function () {
              k(
                "You are setting _duckdb_web_udf_scalar_create on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "___stdio_exit") ||
          (Object.defineProperty(e.ready, "___stdio_exit", {
            configurable: !0,
            get: function () {
              k(
                "You are getting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "___stdio_exit", {
            configurable: !0,
            set: function () {
              k(
                "You are setting ___stdio_exit on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          })),
        Object.getOwnPropertyDescriptor(e.ready, "onRuntimeInitialized") ||
          (Object.defineProperty(e.ready, "onRuntimeInitialized", {
            configurable: !0,
            get: function () {
              k(
                "You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }),
          Object.defineProperty(e.ready, "onRuntimeInitialized", {
            configurable: !0,
            set: function () {
              k(
                "You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"
              );
            },
          }));
      var m = Object.assign({}, e),
        w = [],
        O = "./this.program",
        P = (t, n) => {
          throw n;
        },
        B = typeof window == "object",
        D = typeof importScripts == "function",
        q =
          typeof process == "object" &&
          typeof process.versions == "object" &&
          typeof process.versions.node == "string",
        x = !B && !q && !D;
      if (e.ENVIRONMENT)
        throw new Error(
          "Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)"
        );
      var ie = "";
      function X(t) {
        return e.locateFile ? e.locateFile(t, ie) : ie + t;
      }
      var J, ce, le, Ae;
      function Ee(t) {
        if (t instanceof cr) return;
        let n = t;
        t && typeof t == "object" && t.stack && (n = [t, t.stack]),
          Y("exiting due to exception: " + n);
      }
      var xe, _e, Se;
      if (q) {
        if (!(typeof process == "object" && typeof require == "function"))
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        D ? (ie = require("path").dirname(ie) + "/") : (ie = __dirname + "/"),
          (Se = () => {
            _e || ((xe = require("fs")), (_e = require("path")));
          }),
          (J = function (n, a) {
            return (
              Se(),
              (n = _e.normalize(n)),
              xe.readFileSync(n, a ? void 0 : "utf8")
            );
          }),
          (le = (t) => {
            var n = J(t, !0);
            return n.buffer || (n = new Uint8Array(n)), M(n.buffer), n;
          }),
          (ce = (t, n, a) => {
            Se(),
              (t = _e.normalize(t)),
              xe.readFile(t, function (s, o) {
                s ? a(s) : n(o.buffer);
              });
          }),
          process.argv.length > 1 && (O = process.argv[1].replace(/\\/g, "/")),
          (w = process.argv.slice(2)),
          process.on("uncaughtException", function (t) {
            if (!(t instanceof cr)) throw t;
          }),
          process.on("unhandledRejection", function (t) {
            throw t;
          }),
          (P = (t, n) => {
            if (bi()) throw ((process.exitCode = t), n);
            Ee(n), process.exit(t);
          }),
          (e.inspect = function () {
            return "[Emscripten Module object]";
          });
      } else if (x) {
        if (
          (typeof process == "object" && typeof require == "function") ||
          typeof window == "object" ||
          typeof importScripts == "function"
        )
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        typeof read < "u" &&
          (J = function (n) {
            return read(n);
          }),
          (le = function (n) {
            let a;
            return typeof readbuffer == "function"
              ? new Uint8Array(readbuffer(n))
              : ((a = read(n, "binary")), M(typeof a == "object"), a);
          }),
          (ce = function (n, a, s) {
            setTimeout(() => a(le(n)), 0);
          }),
          typeof scriptArgs < "u"
            ? (w = scriptArgs)
            : typeof arguments < "u" && (w = arguments),
          typeof quit == "function" &&
            (P = (t, n) => {
              Ee(n), quit(t);
            }),
          typeof print < "u" &&
            (typeof console > "u" && (console = {}),
            (console.log = print),
            (console.warn = console.error =
              typeof printErr < "u" ? printErr : print));
      } else if (B || D) {
        if (
          (D
            ? (ie = self.location.href)
            : typeof document < "u" &&
              document.currentScript &&
              (ie = document.currentScript.src),
          r && (ie = r),
          ie.indexOf("blob:") !== 0
            ? (ie = ie.substr(0, ie.replace(/[?#].*/, "").lastIndexOf("/") + 1))
            : (ie = ""),
          !(typeof window == "object" || typeof importScripts == "function"))
        )
          throw new Error(
            "not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)"
          );
        (J = (t) => {
          var n = new XMLHttpRequest();
          return n.open("GET", t, !1), n.send(null), n.responseText;
        }),
          D &&
            (le = (t) => {
              var n = new XMLHttpRequest();
              return (
                n.open("GET", t, !1),
                (n.responseType = "arraybuffer"),
                n.send(null),
                new Uint8Array(n.response)
              );
            }),
          (ce = (t, n, a) => {
            var s = new XMLHttpRequest();
            s.open("GET", t, !0),
              (s.responseType = "arraybuffer"),
              (s.onload = () => {
                if (s.status == 200 || (s.status == 0 && s.response)) {
                  n(s.response);
                  return;
                }
                a();
              }),
              (s.onerror = a),
              s.send(null);
          }),
          (Ae = (t) => (document.title = t));
      } else throw new Error("environment detection error");
      var de = e.print || console.log.bind(console),
        Y = e.printErr || console.warn.bind(console);
      Object.assign(e, m),
        (m = null),
        Uc(),
        e.arguments && (w = e.arguments),
        se("arguments", "arguments_"),
        e.thisProgram && (O = e.thisProgram),
        se("thisProgram", "thisProgram"),
        e.quit && (P = e.quit),
        se("quit", "quit_"),
        M(
          typeof e.memoryInitializerPrefixURL > "u",
          "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.pthreadMainPrefixURL > "u",
          "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.cdInitializerPrefixURL > "u",
          "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.filePackagePrefixURL > "u",
          "Module.filePackagePrefixURL option was removed, use Module.locateFile instead"
        ),
        M(
          typeof e.read > "u",
          "Module.read option was removed (modify read_ in JS)"
        ),
        M(
          typeof e.readAsync > "u",
          "Module.readAsync option was removed (modify readAsync in JS)"
        ),
        M(
          typeof e.readBinary > "u",
          "Module.readBinary option was removed (modify readBinary in JS)"
        ),
        M(
          typeof e.setWindowTitle > "u",
          "Module.setWindowTitle option was removed (modify setWindowTitle in JS)"
        ),
        M(
          typeof e.TOTAL_MEMORY > "u",
          "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"
        ),
        se("read", "read_"),
        se("readAsync", "readAsync"),
        se("readBinary", "readBinary"),
        se("setWindowTitle", "setWindowTitle");
      var ne = "IDBFS is no longer included by default; build with -lidbfs.js",
        Ce =
          "PROXYFS is no longer included by default; build with -lproxyfs.js",
        F =
          "WORKERFS is no longer included by default; build with -lworkerfs.js",
        je = "NODEFS is no longer included by default; build with -lnodefs.js";
      function ye() {
        k(
          "`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line"
        );
      }
      M(
        !x,
        "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable."
      );
      var Ue = 16,
        I = 4;
      function L(t) {
        switch (t) {
          case "i1":
          case "i8":
            return 1;
          case "i16":
            return 2;
          case "i32":
            return 4;
          case "i64":
            return 8;
          case "float":
            return 4;
          case "double":
            return 8;
          default: {
            if (t[t.length - 1] === "*") return I;
            if (t[0] === "i") {
              let n = Number(t.substr(1));
              return (
                M(
                  n % 8 === 0,
                  "getNativeTypeSize invalid bits " + n + ", type " + t
                ),
                n / 8
              );
            } else return 0;
          }
        }
      }
      function ge(t) {
        ge.shown || (ge.shown = {}), ge.shown[t] || ((ge.shown[t] = 1), Y(t));
      }
      function we(t) {
        return M(t < 16384), t < 128 ? [t] : [t % 128 | 128, t >> 7];
      }
      function lt(t, n) {
        if (typeof WebAssembly.Function == "function") {
          for (
            var a = { i: "i32", j: "i64", f: "f32", d: "f64" },
              s = { parameters: [], results: n[0] == "v" ? [] : [a[n[0]]] },
              o = 1;
            o < n.length;
            ++o
          )
            s.parameters.push(a[n[o]]);
          return new WebAssembly.Function(s, t);
        }
        var u = [1, 96],
          _ = n.slice(0, 1),
          d = n.slice(1),
          f = { i: 127, j: 126, f: 125, d: 124 };
        u = u.concat(we(d.length));
        for (var o = 0; o < d.length; ++o) u.push(f[d[o]]);
        _ == "v" ? u.push(0) : (u = u.concat([1, f[_]])),
          (u = [1].concat(we(u.length), u));
        var y = new Uint8Array(
            [0, 97, 115, 109, 1, 0, 0, 0].concat(
              u,
              [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0]
            )
          ),
          j = new WebAssembly.Module(y),
          A = new WebAssembly.Instance(j, { e: { f: t } }),
          T = A.exports.f;
        return T;
      }
      var Je = [],
        Te;
      function Gt() {
        if (Je.length) return Je.pop();
        try {
          Xe.grow(1);
        } catch (t) {
          throw t instanceof RangeError
            ? "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH."
            : t;
        }
        return Xe.length - 1;
      }
      function Ji(t, n) {
        for (var a = t; a < t + n; a++) {
          var s = re(a);
          s && Te.set(s, a);
        }
      }
      function Ti(t, n) {
        if (
          (M(typeof t < "u"),
          Te || ((Te = new WeakMap()), Ji(0, Xe.length)),
          Te.has(t))
        )
          return Te.get(t);
        var a = Gt();
        try {
          gn(a, t);
        } catch (o) {
          if (!(o instanceof TypeError)) throw o;
          M(typeof n < "u", "Missing signature argument to addFunction: " + t);
          var s = lt(t, n);
          gn(a, s);
        }
        return Te.set(t, a), a;
      }
      function Lt(t) {
        Te.delete(re(t)), Je.push(t);
      }
      function se(t, n) {
        Object.getOwnPropertyDescriptor(e, t) ||
          Object.defineProperty(e, t, {
            configurable: !0,
            get: function () {
              k(
                "Module." +
                  t +
                  " has been replaced with plain " +
                  n +
                  " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)"
              );
            },
          });
      }
      function Vt(t) {
        Object.getOwnPropertyDescriptor(e, t) &&
          k(
            "`Module." +
              t +
              "` was supplied but `" +
              t +
              "` not included in INCOMING_MODULE_JS_API"
          );
      }
      function si(t, n) {
        var a =
          "'" +
          t +
          "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        return (
          n &&
            (a +=
              ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),
          a
        );
      }
      function ee(t, n) {
        Object.getOwnPropertyDescriptor(e, t) ||
          Object.defineProperty(e, t, {
            configurable: !0,
            get: function () {
              k(si(t, n));
            },
          });
      }
      function b(t, n) {
        Object.getOwnPropertyDescriptor(e, t) || (e[t] = () => k(si(t, n)));
      }
      var z = 0,
        oe = (t) => {
          z = t;
        },
        Ne = () => z,
        Ie;
      e.wasmBinary && (Ie = e.wasmBinary), se("wasmBinary", "wasmBinary");
      var Ye = e.noExitRuntime || !0;
      se("noExitRuntime", "noExitRuntime"),
        typeof WebAssembly != "object" && k("no native wasm support detected");
      function oi(t, n, a = "i8", s) {
        if ((a.charAt(a.length - 1) === "*" && (a = "i32"), s))
          switch (a) {
            case "i1":
              Ge[t >>> 0] = n;
              break;
            case "i8":
              Ge[t >>> 0] = n;
              break;
            case "i16":
              li[t >>> 1] = n;
              break;
            case "i32":
              bt[t >>> 2] = n;
              break;
            case "i64":
              (yt = [
                n >>> 0,
                ((Le = n),
                +Math.abs(Le) >= 1
                  ? Le > 0
                    ? (Math.min(+Math.floor(Le / 4294967296), 4294967295) |
                        0) >>>
                      0
                    : ~~+Math.ceil((Le - +(~~Le >>> 0)) / 4294967296) >>> 0
                  : 0),
              ]),
                (bt[t >>> 2] = yt[0]),
                (bt[(t + 4) >>> 2] = yt[1]);
              break;
            case "float":
              ui[t >>> 2] = n;
              break;
            case "double":
              _i[t >>> 3] = n;
              break;
            default:
              k("invalid type for setValue: " + a);
          }
        else
          switch (a) {
            case "i1":
              N(t | 0, n | 0, 1);
              break;
            case "i8":
              N(t | 0, n | 0, 1);
              break;
            case "i16":
              N(t | 0, n | 0, 2);
              break;
            case "i32":
              N(t | 0, n | 0, 4);
              break;
            case "i64":
              (yt = [
                n >>> 0,
                ((Le = n),
                +Math.abs(Le) >= 1
                  ? Le > 0
                    ? (Math.min(+Math.floor(Le / 4294967296), 4294967295) |
                        0) >>>
                      0
                    : ~~+Math.ceil((Le - +(~~Le >>> 0)) / 4294967296) >>> 0
                  : 0),
              ]),
                N(t | 0, yt[0] | 0, 4),
                N((t + 4) | 0, yt[1] | 0, 4);
              break;
            case "float":
              tn(t | 0, Math.fround(n), 4);
              break;
            case "double":
              tn(t | 0, +n, 8);
              break;
            default:
              k("invalid type for setValue: " + a);
          }
      }
      function Kt(t, n = "i8", a) {
        if ((n.charAt(n.length - 1) === "*" && (n = "i32"), a))
          switch (n) {
            case "i1":
              return Ge[t >>> 0];
            case "i8":
              return Ge[t >>> 0];
            case "i16":
              return li[t >>> 1];
            case "i32":
              return bt[t >>> 2];
            case "i64":
              return bt[t >>> 2];
            case "float":
              return ui[t >>> 2];
            case "double":
              return Number(_i[t >>> 3]);
            default:
              k("invalid type for getValue: " + n);
          }
        else
          switch (n) {
            case "i1":
              return V(t | 0, 1, 0) | 0;
            case "i8":
              return V(t | 0, 1, 0) | 0;
            case "i16":
              return V(t | 0, 2, 0) | 0;
            case "i32":
              return V(t | 0, 4, 0) | 0;
            case "i64":
              return V(t | 0, 8, 0) | 0;
            case "float":
              return Math.fround(nn(t | 0, 4, 0));
            case "double":
              return +nn(t | 0, 8, 0);
            default:
              k("invalid type for getValue: " + n);
          }
        return null;
      }
      function en(t, n) {
        switch (t) {
          case 1:
            return "i8";
          case 2:
            return "i16";
          case 4:
            return n ? "float" : "i32";
          case 8:
            return n ? "double" : "i64";
          default:
            M(0);
        }
      }
      function N(t, n, a, s) {
        if (
          ((t >>>= 0),
          t <= 0 &&
            k("segmentation fault storing " + a + " bytes to address " + t),
          t % a !== 0 &&
            k(
              "alignment error storing to address " +
                t +
                ", which was expected to be aligned to a multiple of " +
                a
            ),
          Ct)
        ) {
          var o = Ss() >>> 0;
          t + a > o &&
            k(
              "segmentation fault, exceeded the top of the available dynamic heap when storing " +
                a +
                " bytes to address " +
                t +
                ". DYNAMICTOP=" +
                o
            ),
            M(o >= nr()),
            M(o <= Ge.length);
        }
        return oi(t, n, en(a, s), 1), n;
      }
      function tn(t, n, a) {
        return N(t, n, a, !0);
      }
      function V(t, n, a, s) {
        if (
          ((t >>>= 0),
          t <= 0 &&
            k("segmentation fault loading " + n + " bytes from address " + t),
          t % n !== 0 &&
            k(
              "alignment error loading from address " +
                t +
                ", which was expected to be aligned to a multiple of " +
                n
            ),
          Ct)
        ) {
          var o = Ss() >>> 0;
          t + n > o &&
            k(
              "segmentation fault, exceeded the top of the available dynamic heap when loading " +
                n +
                " bytes from address " +
                t +
                ". DYNAMICTOP=" +
                o
            ),
            M(o >= nr()),
            M(o <= Ge.length);
        }
        var u = en(n, s),
          _ = Kt(t, u, 1);
        return a && (_ = ha(_, parseInt(u.substr(1), 10))), _;
      }
      function nn(t, n, a) {
        return V(t, n, a, !0);
      }
      function md(t, n) {
        var a = t & n;
        return (
          a !== t &&
            k(
              "Function table mask error: function pointer is " +
                t +
                " which is masked by " +
                n +
                ", the likely cause of this is that the function pointer is being called by the wrong type."
            ),
          a
        );
      }
      function Zr() {
        k("segmentation fault");
      }
      function $r() {
        k("alignment fault");
      }
      var kt,
        Et = !1,
        Ft;
      function M(t, n) {
        t || k("Assertion failed" + (n ? ": " + n : ""));
      }
      function Gr(t) {
        var n = e["_" + t];
        return (
          M(
            n,
            "Cannot call unknown function " + t + ", make sure it is exported"
          ),
          n
        );
      }
      function rn(t, n, a, s, o) {
        var u = {
          string: function (Q) {
            var pe = 0;
            if (Q != null && Q !== 0) {
              var De = (Q.length << 2) + 1;
              (pe = Ni(De)), Nt(Q, pe, De);
            }
            return pe;
          },
          array: function (Q) {
            var pe = Ni(Q.length);
            return ln(Q, pe), pe;
          },
        };
        function _(Q) {
          return n === "string" ? $e(Q) : n === "boolean" ? Boolean(Q) : Q;
        }
        var d = Gr(t),
          f = [],
          y = 0;
        if ((M(n !== "array", 'Return type should not be "array".'), s))
          for (var j = 0; j < s.length; j++) {
            var A = u[a[j]];
            A ? (y === 0 && (y = E()), (f[j] = A(s[j]))) : (f[j] = s[j]);
          }
        var T = d.apply(null, f);
        function G(Q) {
          return y !== 0 && S(y), _(Q);
        }
        return (T = G(T)), T;
      }
      function wd(t, n, a, s) {
        return function () {
          return rn(t, n, a, arguments, s);
        };
      }
      var kd = 0,
        Vr = 1;
      function Ed(t, n) {
        var a;
        return (
          M(typeof n == "number", "allocate no longer takes a type argument"),
          M(typeof t != "number", "allocate no longer takes a number as arg0"),
          n == Vr ? (a = Ni(t.length)) : (a = xi(t.length)),
          !t.subarray && !t.slice && (t = new Uint8Array(t)),
          Qe.set(t, a >>> 0),
          a
        );
      }
      var an = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
      function sn(t, n, a) {
        n >>>= 0;
        for (var s = n + a, o = n; t[o] && !(o >= s); ) ++o;
        if (o - n > 16 && t.buffer && an) return an.decode(t.subarray(n, o));
        for (var u = ""; n < o; ) {
          var _ = t[n++];
          if (!(_ & 128)) {
            u += String.fromCharCode(_);
            continue;
          }
          var d = t[n++] & 63;
          if ((_ & 224) == 192) {
            u += String.fromCharCode(((_ & 31) << 6) | d);
            continue;
          }
          var f = t[n++] & 63;
          if (
            ((_ & 240) == 224
              ? (_ = ((_ & 15) << 12) | (d << 6) | f)
              : ((_ & 248) != 240 &&
                  ge(
                    "Invalid UTF-8 leading byte 0x" +
                      _.toString(16) +
                      " encountered when deserializing a UTF-8 string in wasm memory to a JS string!"
                  ),
                (_ = ((_ & 7) << 18) | (d << 12) | (f << 6) | (t[n++] & 63))),
            _ < 65536)
          )
            u += String.fromCharCode(_);
          else {
            var y = _ - 65536;
            u += String.fromCharCode(55296 | (y >> 10), 56320 | (y & 1023));
          }
        }
        return u;
      }
      function $e(t, n) {
        return (t >>>= 0), t ? sn(Qe, t, n) : "";
      }
      function xt(t, n, a, s) {
        if (((a >>>= 0), !(s > 0))) return 0;
        for (var o = a, u = a + s - 1, _ = 0; _ < t.length; ++_) {
          var d = t.charCodeAt(_);
          if (d >= 55296 && d <= 57343) {
            var f = t.charCodeAt(++_);
            d = (65536 + ((d & 1023) << 10)) | (f & 1023);
          }
          if (d <= 127) {
            if (a >= u) break;
            n[a++ >>> 0] = d;
          } else if (d <= 2047) {
            if (a + 1 >= u) break;
            (n[a++ >>> 0] = 192 | (d >> 6)), (n[a++ >>> 0] = 128 | (d & 63));
          } else if (d <= 65535) {
            if (a + 2 >= u) break;
            (n[a++ >>> 0] = 224 | (d >> 12)),
              (n[a++ >>> 0] = 128 | ((d >> 6) & 63)),
              (n[a++ >>> 0] = 128 | (d & 63));
          } else {
            if (a + 3 >= u) break;
            d > 1114111 &&
              ge(
                "Invalid Unicode code point 0x" +
                  d.toString(16) +
                  " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."
              ),
              (n[a++ >>> 0] = 240 | (d >> 18)),
              (n[a++ >>> 0] = 128 | ((d >> 12) & 63)),
              (n[a++ >>> 0] = 128 | ((d >> 6) & 63)),
              (n[a++ >>> 0] = 128 | (d & 63));
          }
        }
        return (n[a >>> 0] = 0), a - o;
      }
      function Nt(t, n, a) {
        return (
          M(
            typeof a == "number",
            "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          xt(t, Qe, n, a)
        );
      }
      function Bt(t) {
        for (var n = 0, a = 0; a < t.length; ++a) {
          var s = t.charCodeAt(a);
          s >= 55296 &&
            s <= 57343 &&
            (s = (65536 + ((s & 1023) << 10)) | (t.charCodeAt(++a) & 1023)),
            s <= 127
              ? ++n
              : s <= 2047
              ? (n += 2)
              : s <= 65535
              ? (n += 3)
              : (n += 4);
        }
        return n;
      }
      function Sd(t) {
        t >>>= 0;
        for (var n = ""; ; ) {
          var a = V(t++ | 0, 1, 1) >>> 0;
          if (!a) return n;
          n += String.fromCharCode(a);
        }
      }
      function Cd(t, n) {
        return un(t, n, !1);
      }
      var on = typeof TextDecoder < "u" ? new TextDecoder("utf-16le") : void 0;
      function Ad(t, n) {
        M(
          t % 2 == 0,
          "Pointer passed to UTF16ToString must be aligned to two bytes!"
        );
        for (
          var a = t, s = a >> 1, o = s + n / 2;
          !(s >= o) && V((s >>> 0) * 2, 2, 1);

        )
          ++s;
        if (((a = s << 1), a - t > 32 && on))
          return on.decode(Qe.subarray(t >>> 0, a >>> 0));
        for (var u = "", _ = 0; !(_ >= n / 2); ++_) {
          var d = V((t + _ * 2) | 0, 2, 0) | 0;
          if (d == 0) break;
          u += String.fromCharCode(d);
        }
        return u;
      }
      function Rd(t, n, a) {
        if (
          (M(
            n % 2 == 0,
            "Pointer passed to stringToUTF16 must be aligned to two bytes!"
          ),
          M(
            typeof a == "number",
            "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          a === void 0 && (a = 2147483647),
          a < 2)
        )
          return 0;
        a -= 2;
        for (
          var s = n, o = a < t.length * 2 ? a / 2 : t.length, u = 0;
          u < o;
          ++u
        ) {
          var _ = t.charCodeAt(u);
          N(n | 0, _ | 0, 2), (n += 2);
        }
        return N(n | 0, 0, 2), n - s;
      }
      function Od(t) {
        return t.length * 2;
      }
      function Td(t, n) {
        M(
          t % 4 == 0,
          "Pointer passed to UTF32ToString must be aligned to four bytes!"
        );
        for (var a = 0, s = ""; !(a >= n / 4); ) {
          var o = V((t + a * 4) | 0, 4, 0) | 0;
          if (o == 0) break;
          if ((++a, o >= 65536)) {
            var u = o - 65536;
            s += String.fromCharCode(55296 | (u >> 10), 56320 | (u & 1023));
          } else s += String.fromCharCode(o);
        }
        return s;
      }
      function Pd(t, n, a) {
        if (
          ((n >>>= 0),
          M(
            n % 4 == 0,
            "Pointer passed to stringToUTF32 must be aligned to four bytes!"
          ),
          M(
            typeof a == "number",
            "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"
          ),
          a === void 0 && (a = 2147483647),
          a < 4)
        )
          return 0;
        for (var s = n, o = s + a - 4, u = 0; u < t.length; ++u) {
          var _ = t.charCodeAt(u);
          if (_ >= 55296 && _ <= 57343) {
            var d = t.charCodeAt(++u);
            _ = (65536 + ((_ & 1023) << 10)) | (d & 1023);
          }
          if ((N(n | 0, _ | 0, 4), (n += 4), n + 4 > o)) break;
        }
        return N(n | 0, 0, 4), n - s;
      }
      function Dd(t) {
        for (var n = 0, a = 0; a < t.length; ++a) {
          var s = t.charCodeAt(a);
          s >= 55296 && s <= 57343 && ++a, (n += 4);
        }
        return n;
      }
      function Id(t) {
        var n = Bt(t) + 1,
          a = xi(n);
        return a && xt(t, Ge, a, n), a;
      }
      function cn(t) {
        var n = Bt(t) + 1,
          a = Ni(n);
        return xt(t, Ge, a, n), a;
      }
      function Md(t, n, a) {
        ge(
          "writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!"
        );
        var s, o;
        a && ((o = n + Bt(t)), (s = V(o >>> 0, 1, 0))),
          Nt(t, n, 1 / 0),
          a && N(o >>> 0, s, 1);
      }
      function ln(t, n) {
        M(
          t.length >= 0,
          "writeArrayToMemory array must have a length (should be an array or typed array)"
        ),
          Ge.set(t, n >>> 0);
      }
      function un(t, n, a) {
        for (var s = 0; s < t.length; ++s)
          M(t.charCodeAt(s) === (t.charCodeAt(s) & 255)),
            N(n++ | 0, t.charCodeAt(s) | 0, 1);
        a || N(n | 0, 0, 1);
      }
      var Ud, ci, Ge, Qe, li, Kr, bt, zr, ui, _i;
      function _n(t) {
        (ci = t),
          (e.HEAP8 = Ge = new Int8Array(t)),
          (e.HEAP16 = li = new Int16Array(t)),
          (e.HEAP32 = bt = new Int32Array(t)),
          (e.HEAPU8 = Qe = new Uint8Array(t)),
          (e.HEAPU16 = Kr = new Uint16Array(t)),
          (e.HEAPU32 = zr = new Uint32Array(t)),
          (e.HEAPF32 = ui = new Float32Array(t)),
          (e.HEAPF64 = _i = new Float64Array(t));
      }
      var di = 5242880;
      e.TOTAL_STACK &&
        M(
          di === e.TOTAL_STACK,
          "the stack size can no longer be determined at runtime"
        );
      var fi = e.INITIAL_MEMORY || 16777216;
      se("INITIAL_MEMORY", "INITIAL_MEMORY"),
        M(
          fi >= di,
          "INITIAL_MEMORY should be larger than TOTAL_STACK, was " +
            fi +
            "! (TOTAL_STACK=" +
            di +
            ")"
        ),
        M(
          typeof Int32Array < "u" &&
            typeof Float64Array < "u" &&
            Int32Array.prototype.subarray != null &&
            Int32Array.prototype.set != null,
          "JS engine does not provide full typed array support"
        ),
        M(
          !e.wasmMemory,
          "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"
        ),
        M(
          fi == 16777216,
          "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically"
        );
      var Xe;
      function dn() {
        var t = rr();
        M((t & 3) == 0), N(t | 0, 34821223, 4), N((t + 4) | 0, -1984246274, 4);
      }
      function St() {
        if (!Et) {
          var t = rr(),
            n = V(t | 0, 4, 1) >>> 0,
            a = V((t + 4) | 0, 4, 1) >>> 0;
          (n != 34821223 || a != 2310721022) &&
            k(
              "Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" +
                a.toString(16) +
                " 0x" +
                n.toString(16)
            );
        }
      }
      (function () {
        var t = new Int16Array(1),
          n = new Int8Array(t.buffer);
        if (((t[0] = 25459), n[0] !== 115 || n[1] !== 99))
          throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
      })();
      var hi = [],
        fn = [],
        hn = [],
        Ld = [],
        bn = [],
        Ct = !1;
      function bi() {
        return Ye;
      }
      function Qr() {
        if (e.preRun)
          for (
            typeof e.preRun == "function" && (e.preRun = [e.preRun]);
            e.preRun.length;

          )
            ta(e.preRun.shift());
        Yt(hi);
      }
      function Xr() {
        St(), M(!Ct), (Ct = !0), Yt(fn);
      }
      function Jr() {
        St(), Yt(hn);
      }
      function ea() {
        if ((St(), e.postRun))
          for (
            typeof e.postRun == "function" && (e.postRun = [e.postRun]);
            e.postRun.length;

          )
            na(e.postRun.shift());
        Yt(bn);
      }
      function ta(t) {
        hi.unshift(t);
      }
      function ia(t) {
        fn.unshift(t);
      }
      function Fd(t) {
        hn.unshift(t);
      }
      function xd(t) {}
      function na(t) {
        bn.unshift(t);
      }
      M(
        Math.imul,
        "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
      ),
        M(
          Math.fround,
          "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        ),
        M(
          Math.clz32,
          "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        ),
        M(
          Math.trunc,
          "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"
        );
      var it = 0,
        ct = null,
        At = null,
        pt = {};
      function Nd(t) {
        for (var n = t; ; ) {
          if (!pt[t]) return t;
          t = n + Math.random();
        }
      }
      function ra(t) {
        it++,
          e.monitorRunDependencies && e.monitorRunDependencies(it),
          t
            ? (M(!pt[t]),
              (pt[t] = 1),
              ct === null &&
                typeof setInterval < "u" &&
                (ct = setInterval(function () {
                  if (Et) {
                    clearInterval(ct), (ct = null);
                    return;
                  }
                  var n = !1;
                  for (var a in pt)
                    n || ((n = !0), Y("still waiting on run dependencies:")),
                      Y("dependency: " + a);
                  n && Y("(end of list)");
                }, 1e4)))
            : Y("warning: run dependency added without ID");
      }
      function aa(t) {
        if (
          (it--,
          e.monitorRunDependencies && e.monitorRunDependencies(it),
          t
            ? (M(pt[t]), delete pt[t])
            : Y("warning: run dependency removed without ID"),
          it == 0 && (ct !== null && (clearInterval(ct), (ct = null)), At))
        ) {
          var n = At;
          (At = null), n();
        }
      }
      function k(t) {
        e.onAbort && e.onAbort(t),
          (t = "Aborted(" + t + ")"),
          Y(t),
          (Et = !0),
          (Ft = 1);
        var n = new WebAssembly.RuntimeError(t);
        throw (p(n), n);
      }
      var sa = "data:application/octet-stream;base64,";
      function pn(t) {
        return t.startsWith(sa);
      }
      function oa(t) {
        return t.startsWith("file://");
      }
      function g(t, n) {
        return function () {
          var a = t,
            s = n;
          return (
            n || (s = e.asm),
            M(
              Ct,
              "native function `" + a + "` called before runtime initialization"
            ),
            s[t] || M(s[t], "exported native function `" + a + "` not found"),
            s[t].apply(null, arguments)
          );
        };
      }
      var Pe;
      e.locateFile
        ? ((Pe = "./duckdb-mvp.wasm"), pn(Pe) || (Pe = X(Pe)))
        : (Pe = new URL("./duckdb-mvp.wasm", Sl.url).toString());
      function yn(t) {
        try {
          if (t == Pe && Ie) return new Uint8Array(Ie);
          if (le) return le(t);
          throw "both async and sync fetching of the wasm failed";
        } catch (n) {
          k(n);
        }
      }
      function ca() {
        return !Ie && (B || D) && typeof fetch == "function"
          ? fetch(Pe, { credentials: "same-origin" })
              .then(function (t) {
                if (!t.ok)
                  throw "failed to load wasm binary file at '" + Pe + "'";
                return t.arrayBuffer();
              })
              .catch(function () {
                return yn(Pe);
              })
          : Promise.resolve().then(function () {
              return yn(Pe);
            });
      }
      function la() {
        var t = { env: gs, wasi_snapshot_preview1: gs };
        function n(d, f) {
          var y = d.exports;
          (e.asm = y),
            (kt = e.asm.memory),
            M(kt, "memory not found in wasm exports"),
            _n(kt.buffer),
            (Xe = e.asm.__indirect_function_table),
            M(Xe, "table not found in wasm exports"),
            ia(e.asm.__wasm_call_ctors),
            aa("wasm-instantiate");
        }
        ra("wasm-instantiate");
        var a = e;
        function s(d) {
          M(
            e === a,
            "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"
          ),
            (a = null),
            n(d.instance);
        }
        function o(d) {
          return ca()
            .then(function (f) {
              return WebAssembly.instantiate(f, t);
            })
            .then(function (f) {
              return f;
            })
            .then(d, function (f) {
              Y("failed to asynchronously prepare wasm: " + f),
                oa(Pe) &&
                  Y(
                    "warning: Loading from a file URI (" +
                      Pe +
                      ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"
                  ),
                k(f);
            });
        }
        function u() {
          return !Ie &&
            typeof WebAssembly.instantiateStreaming == "function" &&
            !pn(Pe) &&
            typeof fetch == "function"
            ? fetch(Pe, { credentials: "same-origin" }).then(function (d) {
                var f = WebAssembly.instantiateStreaming(d, t);
                return f.then(s, function (y) {
                  return (
                    Y("wasm streaming compile failed: " + y),
                    Y("falling back to ArrayBuffer instantiation"),
                    o(s)
                  );
                });
              })
            : o(s);
        }
        if (e.instantiateWasm)
          try {
            var _ = e.instantiateWasm(t, n);
            return _;
          } catch (d) {
            return (
              Y("Module.instantiateWasm callback failed with error: " + d), !1
            );
          }
        return u().catch(p), {};
      }
      var Le,
        yt,
        Bd = {};
      function Yt(t) {
        for (; t.length > 0; ) {
          var n = t.shift();
          if (typeof n == "function") {
            n(e);
            continue;
          }
          var a = n.func;
          typeof a == "number"
            ? n.arg === void 0
              ? re(a)()
              : re(a)(n.arg)
            : a(n.arg === void 0 ? null : n.arg);
        }
      }
      function Yd(t) {
        var n = E(),
          a = t();
        return S(n), a;
      }
      function ua(t) {
        return (
          ge(
            "warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling"
          ),
          t
        );
      }
      function _a(t) {
        var n = /\b_Z[\w\d_]+/g;
        return t.replace(n, function (a) {
          var s = ua(a);
          return a === s ? a : s + " [" + a + "]";
        });
      }
      var Rt = [];
      function re(t) {
        var n = Rt[t];
        return (
          n || (t >= Rt.length && (Rt.length = t + 1), (Rt[t] = n = Xe.get(t))),
          M(
            Xe.get(t) == n,
            "JavaScript-side Wasm function table mirror is out of date!"
          ),
          n
        );
      }
      function da(t) {
        if (t instanceof cr || t == "unwind") return Ft;
        P(1, t);
      }
      function fa() {
        var t = new Error();
        if (!t.stack) {
          try {
            throw new Error();
          } catch (n) {
            t = n;
          }
          if (!t.stack) return "(no stack trace available)";
        }
        return t.stack.toString();
      }
      function gn(t, n) {
        Xe.set(t, n), (Rt[t] = Xe.get(t));
      }
      function Hd() {
        var t = fa();
        return (
          e.extraStackTrace &&
            (t +=
              `
` + e.extraStackTrace()),
          _a(t)
        );
      }
      function ha(t, n) {
        return t >= 0
          ? t
          : n <= 32
          ? 2 * Math.abs(1 << (n - 1)) + t
          : Math.pow(2, n) + t;
      }
      function ba(t, n, a, s) {
        k(
          "Assertion failed: " +
            $e(t) +
            ", at: " +
            [n ? $e(n) : "unknown filename", a, s ? $e(s) : "unknown function"]
        );
      }
      function He(t) {
        return xi(t + 24) + 24;
      }
      var pi = [];
      function pa(t) {
        t.add_ref();
      }
      var yi = 0;
      function gi(t) {
        var n = new zt(t);
        return (
          n.get_caught() || (n.set_caught(!0), yi--),
          n.set_rethrown(!1),
          pi.push(n),
          pa(n),
          n.get_exception_ptr()
        );
      }
      var Ot = 0;
      function zt(t) {
        (this.excPtr = t),
          (this.ptr = t - 24),
          (this.set_type = function (n) {
            N((this.ptr + 4) | 0, n | 0, 4);
          }),
          (this.get_type = function () {
            return V((this.ptr + 4) | 0, 4, 0) | 0;
          }),
          (this.set_destructor = function (n) {
            N((this.ptr + 8) | 0, n | 0, 4);
          }),
          (this.get_destructor = function () {
            return V((this.ptr + 8) | 0, 4, 0) | 0;
          }),
          (this.set_refcount = function (n) {
            N(this.ptr | 0, n | 0, 4);
          }),
          (this.set_caught = function (n) {
            (n = n ? 1 : 0), N((this.ptr + 12) | 0, n | 0, 1);
          }),
          (this.get_caught = function () {
            return (V((this.ptr + 12) | 0, 1, 0) | 0) != 0;
          }),
          (this.set_rethrown = function (n) {
            (n = n ? 1 : 0), N((this.ptr + 13) | 0, n | 0, 1);
          }),
          (this.get_rethrown = function () {
            return (V((this.ptr + 13) | 0, 1, 0) | 0) != 0;
          }),
          (this.init = function (n, a) {
            this.set_adjusted_ptr(0),
              this.set_type(n),
              this.set_destructor(a),
              this.set_refcount(0),
              this.set_caught(!1),
              this.set_rethrown(!1);
          }),
          (this.add_ref = function () {
            var n = V(this.ptr | 0, 4, 0) | 0;
            N(this.ptr | 0, (n + 1) | 0, 4);
          }),
          (this.release_ref = function () {
            var n = V(this.ptr | 0, 4, 0) | 0;
            return N(this.ptr | 0, (n - 1) | 0, 4), M(n > 0), n === 1;
          }),
          (this.set_adjusted_ptr = function (n) {
            N((this.ptr + 16) | 0, n | 0, 4);
          }),
          (this.get_adjusted_ptr = function () {
            return V((this.ptr + 16) | 0, 4, 0) | 0;
          }),
          (this.get_exception_ptr = function () {
            var n = qc(this.get_type());
            if (n) return V(this.excPtr | 0, 4, 0) | 0;
            var a = this.get_adjusted_ptr();
            return a !== 0 ? a : this.excPtr;
          });
      }
      function Pi(t) {
        try {
          return Yc(new zt(t).ptr);
        } catch (n) {
          Y("exception during __cxa_free_exception: " + n);
        }
      }
      function Ln(t) {
        if (t.release_ref() && !t.get_rethrown()) {
          var n = t.get_destructor();
          n && re(n)(t.excPtr), Pi(t.excPtr);
        }
      }
      function Fn() {
        C(0), M(pi.length > 0);
        var t = pi.pop();
        Ln(t), (Ot = 0);
      }
      function Di(t) {
        throw (Ot || (Ot = t), t);
      }
      function Ii() {
        var t = Ot;
        if (!t) return oe(0), 0;
        var n = new zt(t);
        n.set_adjusted_ptr(t);
        var a = n.get_type();
        if (!a) return oe(0), t | 0;
        for (
          var s = Array.prototype.slice.call(arguments), o = 0;
          o < s.length;
          o++
        ) {
          var u = s[o];
          if (u === 0 || u === a) break;
          var _ = n.ptr + 16;
          if (On(u, a, _)) return oe(u), t | 0;
        }
        return oe(a), t | 0;
      }
      function vn() {
        var t = Ot;
        if (!t) return oe(0), 0;
        var n = new zt(t);
        n.set_adjusted_ptr(t);
        var a = n.get_type();
        if (!a) return oe(0), t | 0;
        for (
          var s = Array.prototype.slice.call(arguments), o = 0;
          o < s.length;
          o++
        ) {
          var u = s[o];
          if (u === 0 || u === a) break;
          var _ = n.ptr + 16;
          if (On(u, a, _)) return oe(u), t | 0;
        }
        return oe(a), t | 0;
      }
      function ut() {
        var t = Ot;
        if (!t) return oe(0), 0;
        var n = new zt(t);
        n.set_adjusted_ptr(t);
        var a = n.get_type();
        if (!a) return oe(0), t | 0;
        for (
          var s = Array.prototype.slice.call(arguments), o = 0;
          o < s.length;
          o++
        ) {
          var u = s[o];
          if (u === 0 || u === a) break;
          var _ = n.ptr + 16;
          if (On(u, a, _)) return oe(u), t | 0;
        }
        return oe(a), t | 0;
      }
      function xn() {
        var t = Ot;
        if (!t) return oe(0), 0;
        var n = new zt(t);
        n.set_adjusted_ptr(t);
        var a = n.get_type();
        if (!a) return oe(0), t | 0;
        for (
          var s = Array.prototype.slice.call(arguments), o = 0;
          o < s.length;
          o++
        ) {
          var u = s[o];
          if (u === 0 || u === a) break;
          var _ = n.ptr + 16;
          if (On(u, a, _)) return oe(u), t | 0;
        }
        return oe(a), t | 0;
      }
      function ya() {
        var t = pi.pop();
        t || k("no exception to throw");
        var n = t.excPtr;
        throw (
          (t.get_rethrown() ||
            (pi.push(t), t.set_rethrown(!0), t.set_caught(!1), yi++),
          (Ot = n),
          n)
        );
      }
      function ga(t, n, a) {
        var s = new zt(t);
        throw (s.init(n, a), (Ot = t), yi++, t);
      }
      function va() {
        return yi;
      }
      var qe = {
        buffers: [null, [], []],
        printChar: function (t, n) {
          var a = qe.buffers[t];
          M(a),
            n === 0 || n === 10
              ? ((t === 1 ? de : Y)(sn(a, 0)), (a.length = 0))
              : a.push(n);
        },
        varargs: void 0,
        get: function () {
          M(qe.varargs != null), (qe.varargs += 4);
          var t = V((qe.varargs - 4) | 0, 4, 0) | 0;
          return t;
        },
        getStr: function (t) {
          var n = $e(t);
          return n;
        },
      };
      function ja(t, n, a, s, o) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function ma() {
        Y("missing function: $SOCKFS"), k(-1);
      }
      function Nn() {
        Y("missing function: $FS"), k(-1);
      }
      function Qt(t) {
        var n = ma.getSocket(t);
        if (!n) throw new Nn.ErrnoError(8);
        return n;
      }
      function Bn(t) {
        return N(Nc() | 0, t | 0, 4), t;
      }
      var jc = {
        BUFFER_SIZE: 10240,
        MAX_BUFFER_SIZE: 10485760,
        nextFd: 1,
        fds: {},
        nextport: 1,
        maxport: 65535,
        peer: null,
        connections: {},
        portmap: {},
        localAddr: 4261412874,
        addrPool: [
          33554442, 50331658, 67108874, 83886090, 100663306, 117440522,
          134217738, 150994954, 167772170, 184549386, 201326602, 218103818,
          234881034,
        ],
      };
      function jn(t) {
        return (
          (t & 255) +
          "." +
          ((t >> 8) & 255) +
          "." +
          ((t >> 16) & 255) +
          "." +
          ((t >> 24) & 255)
        );
      }
      function Yn(t) {
        var n = "",
          a = 0,
          s = 0,
          o = 0,
          u = 0,
          _ = 0,
          d = 0,
          f = [
            t[0] & 65535,
            t[0] >> 16,
            t[1] & 65535,
            t[1] >> 16,
            t[2] & 65535,
            t[2] >> 16,
            t[3] & 65535,
            t[3] >> 16,
          ],
          y = !0,
          j = "";
        for (d = 0; d < 5; d++)
          if (f[d] !== 0) {
            y = !1;
            break;
          }
        if (y) {
          if (((j = jn(f[6] | (f[7] << 16))), f[5] === -1))
            return (n = "::ffff:"), (n += j), n;
          if (f[5] === 0)
            return (
              (n = "::"),
              j === "0.0.0.0" && (j = ""),
              j === "0.0.0.1" && (j = "1"),
              (n += j),
              n
            );
        }
        for (a = 0; a < 8; a++)
          f[a] === 0 && (a - o > 1 && (_ = 0), (o = a), _++),
            _ > s && ((s = _), (u = a - s + 1));
        for (a = 0; a < 8; a++) {
          if (s > 1 && f[a] === 0 && a >= u && a < u + s) {
            a === u && ((n += ":"), u === 0 && (n += ":"));
            continue;
          }
          (n += Number(Es(f[a] & 65535)).toString(16)), (n += a < 7 ? ":" : "");
        }
        return n;
      }
      function Hn(t, n) {
        var a = V(t | 0, 2, 0) | 0,
          s = Es(V((t + 2) | 0, 2, 1) >>> 0),
          o;
        switch (a) {
          case 2:
            if (n !== 16) return { errno: 28 };
            (o = V((t + 4) | 0, 4, 0) | 0), (o = jn(o));
            break;
          case 10:
            if (n !== 28) return { errno: 28 };
            (o = [
              V((t + 8) | 0, 4, 0) | 0,
              V((t + 12) | 0, 4, 0) | 0,
              V((t + 16) | 0, 4, 0) | 0,
              V((t + 20) | 0, 4, 0) | 0,
            ]),
              (o = Yn(o));
            break;
          default:
            return { errno: 5 };
        }
        return { family: a, addr: o, port: s };
      }
      function Mi(t) {
        for (var n = t.split("."), a = 0; a < 4; a++) {
          var s = Number(n[a]);
          if (isNaN(s)) return null;
          n[a] = s;
        }
        return (n[0] | (n[1] << 8) | (n[2] << 16) | (n[3] << 24)) >>> 0;
      }
      function Ui(t) {
        return parseInt(t);
      }
      function mn(t) {
        var n,
          a,
          s,
          o,
          u,
          _ =
            /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,
          d = [];
        if (!_.test(t)) return null;
        if (t === "::") return [0, 0, 0, 0, 0, 0, 0, 0];
        for (
          t.startsWith("::")
            ? (t = t.replace("::", "Z:"))
            : (t = t.replace("::", ":Z:")),
            t.indexOf(".") > 0
              ? ((t = t.replace(new RegExp("[.]", "g"), ":")),
                (n = t.split(":")),
                (n[n.length - 4] =
                  Ui(n[n.length - 4]) + Ui(n[n.length - 3]) * 256),
                (n[n.length - 3] =
                  Ui(n[n.length - 2]) + Ui(n[n.length - 1]) * 256),
                (n = n.slice(0, n.length - 2)))
              : (n = t.split(":")),
            s = 0,
            o = 0,
            a = 0;
          a < n.length;
          a++
        )
          if (typeof n[a] == "string")
            if (n[a] === "Z") {
              for (o = 0; o < 8 - n.length + 1; o++) d[a + o] = 0;
              s = o - 1;
            } else d[a + s] = ir(parseInt(n[a], 16));
          else d[a + s] = n[a];
        return [
          (d[1] << 16) | d[0],
          (d[3] << 16) | d[2],
          (d[5] << 16) | d[4],
          (d[7] << 16) | d[6],
        ];
      }
      var _t = {
        address_map: { id: 1, addrs: {}, names: {} },
        lookup_name: function (t) {
          var n = Mi(t);
          if (n !== null || ((n = mn(t)), n !== null)) return t;
          var a;
          if (_t.address_map.addrs[t]) a = _t.address_map.addrs[t];
          else {
            var s = _t.address_map.id++;
            M(s < 65535, "exceeded max address mappings of 65535"),
              (a = "172.29." + (s & 255) + "." + (s & 65280)),
              (_t.address_map.names[a] = t),
              (_t.address_map.addrs[t] = a);
          }
          return a;
        },
        lookup_addr: function (t) {
          return _t.address_map.names[t] ? _t.address_map.names[t] : null;
        },
      };
      function qn(t, n, a) {
        if (a && t === 0) return null;
        var s = Hn(t, n);
        if (s.errno) throw new Nn.ErrnoError(s.errno);
        return (s.addr = _t.lookup_addr(s.addr) || s.addr), s;
      }
      function wa(t, n, a) {
        var s = Qt(t),
          o = qn(n, a);
        return s.sock_ops.bind(s, o.addr, o.port), 0;
      }
      function ka(t, n, a) {
        var s = Qt(t),
          o = qn(n, a);
        return s.sock_ops.connect(s, o.addr, o.port), 0;
      }
      function Ea(t, n, a, s) {
        return (
          (n = qe.getStr(n)),
          M(s === 0),
          (n = qe.calculateAt(t, n)),
          qe.doAccess(n, a)
        );
      }
      function Sa(t, n, a) {
        return (qe.varargs = a), 0;
      }
      function Ca(t, n) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Aa(t, n, a) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Wn(t, n, a) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Zn(t, n) {
        Qe.fill(0, t, t + n);
      }
      function wn(t, n, a, s, o) {
        switch (n) {
          case 2:
            (a = Mi(a)),
              Zn(t, 16),
              o && N(o | 0, 16, 4),
              N(t | 0, n | 0, 2),
              N((t + 4) | 0, a | 0, 4),
              N((t + 2) | 0, ir(s) | 0, 2);
            break;
          case 10:
            (a = mn(a)),
              Zn(t, 28),
              o && N(o | 0, 28, 4),
              N(t | 0, n | 0, 4),
              N((t + 8) | 0, a[0] | 0, 4),
              N((t + 12) | 0, a[1] | 0, 4),
              N((t + 16) | 0, a[2] | 0, 4),
              N((t + 20) | 0, a[3] | 0, 4),
              N((t + 2) | 0, ir(s) | 0, 2);
            break;
          default:
            return 5;
        }
        return 0;
      }
      function Ra(t, n, a) {
        var s = Qt(t);
        if (!s.daddr) return -53;
        var o = wn(n, s.family, _t.lookup_name(s.daddr), s.dport, a);
        return M(!o), 0;
      }
      function Oa(t, n, a, s, o) {
        var u = Qt(t);
        return n === 1 && a === 4
          ? (N(s | 0, u.error | 0, 4), N(o | 0, 4, 4), (u.error = null), 0)
          : -50;
      }
      function Ta(t, n, a) {
        return (qe.varargs = a), 0;
      }
      function Pa(t, n) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Da(t, n, a) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ia(t, n, a, s) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ma(t, n, a, s) {
        (qe.varargs = s),
          k(
            "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
          );
      }
      function Ua(t, n, a, s, o, u) {
        var _ = Qt(t),
          d = _.sock_ops.recvmsg(_, a);
        if (!d) return 0;
        if (o) {
          var f = wn(o, _.family, _t.lookup_name(d.addr), d.port, u);
          M(!f);
        }
        return Qe.set(d.buffer, n >>> 0), d.buffer.byteLength;
      }
      function La(t, n, a, s) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Fa(t) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function xa(t, n, a, s, o, u) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Na(t, n, a) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ba(t, n) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ya(t, n, a) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function Ha(t) {}
      var $n =
        "To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";
      function qa(t, n) {
        k($n);
      }
      function Wa(t, n) {
        k($n);
      }
      function Za() {
        return Date.now();
      }
      var $a = !0;
      function Gn() {
        return $a;
      }
      function kn() {
        k("native code called abort()");
      }
      function Ga(t, n) {
        return globalThis.DUCKDB_RUNTIME.createDirectory(e, t, n);
      }
      function Va(t, n) {
        return globalThis.DUCKDB_RUNTIME.checkDirectory(e, t, n);
      }
      function Ka(t, n) {
        return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e, t, n);
      }
      function En(t, n) {
        return globalThis.DUCKDB_RUNTIME.removeDirectory(e, t, n);
      }
      function za(t) {
        return globalThis.DUCKDB_RUNTIME.closeFile(e, t);
      }
      function vi(t, n) {
        return globalThis.DUCKDB_RUNTIME.checkFile(e, t, n);
      }
      function Qa(t) {
        return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e, t);
      }
      function Xa(t, n, a, s) {
        return globalThis.DUCKDB_RUNTIME.moveFile(e, t, n, a, s);
      }
      function Ja(t, n) {
        return globalThis.DUCKDB_RUNTIME.openFile(e, t, n);
      }
      function es(t, n, a, s) {
        return globalThis.DUCKDB_RUNTIME.readFile(e, t, n, a, s);
      }
      function ts(t, n) {
        return globalThis.DUCKDB_RUNTIME.truncateFile(e, t, n);
      }
      function is(t, n, a, s) {
        return globalThis.DUCKDB_RUNTIME.writeFile(e, t, n, a, s);
      }
      function ns(t, n) {
        return globalThis.DUCKDB_RUNTIME.glob(e, t, n);
      }
      function rs(t) {
        return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e, t);
      }
      function as(t, n, a, s, o, u) {
        return globalThis.DUCKDB_RUNTIME.callScalarUDF(e, t, n, a, s, o, u);
      }
      function ss(t) {
        M(typeof t == "number"), console.error($e(t));
      }
      function Vn() {
        return 4294901760;
      }
      var Sn;
      q
        ? (Sn = () => {
            var t = process.hrtime();
            return t[0] * 1e3 + t[1] / 1e6;
          })
        : (Sn = () => performance.now());
      function Li(t, n, a) {
        Qe.copyWithin(t >>> 0, n >>> 0, (n + a) >>> 0);
      }
      function os(t) {
        try {
          return kt.grow((t - ci.byteLength + 65535) >>> 16), _n(kt.buffer), 1;
        } catch (n) {
          Y(
            "emscripten_realloc_buffer: Attempted to grow heap from " +
              ci.byteLength +
              " bytes to " +
              t +
              " bytes, but got error: " +
              n
          );
        }
      }
      function cs(t) {
        var n = Qe.length;
        (t = t >>> 0), M(t > n);
        var a = Vn();
        if (t > a)
          return (
            Y(
              "Cannot enlarge memory, asked to go up to " +
                t +
                " bytes, but the limit is " +
                a +
                " bytes!"
            ),
            !1
          );
        let s = (f, y) => f + ((y - (f % y)) % y);
        for (var o = 1; o <= 4; o *= 2) {
          var u = n * (1 + 0.2 / o);
          u = Math.min(u, t + 100663296);
          var _ = Math.min(a, s(Math.max(t, u), 65536)),
            d = os(_);
          if (d) return !0;
        }
        return (
          Y(
            "Failed to grow the heap from " +
              n +
              " bytes to " +
              _ +
              " bytes, not enough memory!"
          ),
          !1
        );
      }
      var Xt = {};
      function ls() {
        return O || "./this.program";
      }
      function Jt() {
        if (!Jt.strings) {
          var t =
              (
                (typeof navigator == "object" &&
                  navigator.languages &&
                  navigator.languages[0]) ||
                "C"
              ).replace("-", "_") + ".UTF-8",
            n = {
              USER: "web_user",
              LOGNAME: "web_user",
              PATH: "/",
              PWD: "/",
              HOME: "/home/web_user",
              LANG: t,
              _: ls(),
            };
          for (var a in Xt) Xt[a] === void 0 ? delete n[a] : (n[a] = Xt[a]);
          var s = [];
          for (var a in n) s.push(a + "=" + n[a]);
          Jt.strings = s;
        }
        return Jt.strings;
      }
      function Kn(t, n) {
        var a = 0;
        return (
          Jt().forEach(function (s, o) {
            var u = n + a;
            N((t + o * 4) | 0, u | 0, 4), un(s, u), (a += s.length + 1);
          }),
          0
        );
      }
      function us(t, n) {
        var a = Jt();
        N(t | 0, a.length | 0, 4);
        var s = 0;
        return (
          a.forEach(function (o) {
            s += o.length + 1;
          }),
          N(n | 0, s | 0, 4),
          0
        );
      }
      function _s(t) {
        return (
          k(
            "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
          ),
          0
        );
      }
      function ds(t, n, a, s, o, u) {
        M(!o, "offsets over 2^32 not yet supported");
        var _ = qe.getStreamFromFD(t),
          d = qe.doReadv(_, n, a, s);
        return N(u | 0, d | 0, 4), 0;
      }
      function fs(t, n, a, s, o, u) {
        var _ = qe.getStreamFromFD(t);
        M(!o, "offsets over 2^32 not yet supported");
        var d = qe.doWritev(_, n, a, s);
        return N(u | 0, d | 0, 4), 0;
      }
      function hs(t, n, a, s) {
        var o = qe.getStreamFromFD(t),
          u = qe.doReadv(o, n, a);
        return N(s | 0, u | 0, 4), 0;
      }
      function mc(t, n, a, s, o) {
        k(
          "it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM"
        );
      }
      function bs(t) {
        var n = qe.getStreamFromFD(t);
        return n.stream_ops && n.stream_ops.fsync ? -n.stream_ops.fsync(n) : 0;
      }
      function zn() {
        Bc();
        var t = qe.buffers;
        t[1].length && qe.printChar(1, 10), t[2].length && qe.printChar(2, 10);
      }
      function wc(t, n, a, s) {
        for (var o = 0, u = 0; u < a; u++) {
          var _ = V(n | 0, 4, 0) | 0,
            d = V((n + 4) | 0, 4, 0) | 0;
          n += 8;
          for (var f = 0; f < d; f++) qe.printChar(t, V((_ + f) >>> 0, 1, 1));
          o += d;
        }
        return N(s | 0, o | 0, 4), 0;
      }
      function kc() {
        return Ne();
      }
      function Ec(t, n, a, s) {
        var o = [],
          u = null,
          _ = 0,
          d = 0,
          f = 0,
          y = 0,
          j = 0,
          A = 0,
          T,
          G;
        function Q(pe, De, Ve, W, ue, ft) {
          var et, wi, jt, ml;
          return (
            (wi = pe === 10 ? 28 : 16),
            (ue = pe === 10 ? Yn(ue) : jn(ue)),
            (et = xi(wi)),
            (ml = wn(et, pe, ue, ft)),
            M(!ml),
            (jt = xi(32)),
            N((jt + 4) | 0, pe | 0, 4),
            N((jt + 8) | 0, De | 0, 4),
            N((jt + 12) | 0, Ve | 0, 4),
            N((jt + 24) | 0, W | 0, 4),
            N((jt + 20) | 0, et | 0, 4),
            pe === 10 ? N((jt + 16) | 0, 28, 4) : N((jt + 16) | 0, 16, 4),
            N((jt + 28) | 0, 0, 4),
            jt
          );
        }
        if (
          (a &&
            ((f = V(a | 0, 4, 0) | 0),
            (y = V((a + 4) | 0, 4, 0) | 0),
            (j = V((a + 8) | 0, 4, 0) | 0),
            (A = V((a + 12) | 0, 4, 0) | 0)),
          j && !A && (A = j === 2 ? 17 : 6),
          !j && A && (j = A === 17 ? 2 : 1),
          A === 0 && (A = 6),
          j === 0 && (j = 1),
          !t && !n)
        )
          return -2;
        if (f & -1088 || (a !== 0 && (V(a | 0, 4, 0) | 0) & 2 && !t)) return -1;
        if (f & 32) return -2;
        if (j !== 0 && j !== 1 && j !== 2) return -7;
        if (y !== 0 && y !== 2 && y !== 10) return -6;
        if (n && ((n = $e(n)), (d = parseInt(n, 10)), isNaN(d)))
          return f & 1024 ? -2 : -8;
        if (!t)
          return (
            y === 0 && (y = 2),
            (f & 1) === 0 &&
              (y === 2 ? (_ = tr(2130706433)) : (_ = [0, 0, 0, 1])),
            (T = Q(y, j, A, null, _, d)),
            N(s | 0, T | 0, 4),
            0
          );
        if (((t = $e(t)), (_ = Mi(t)), _ !== null))
          if (y === 0 || y === 2) y = 2;
          else if (y === 10 && f & 8) (_ = [0, 0, tr(65535), _]), (y = 10);
          else return -2;
        else if (((_ = mn(t)), _ !== null))
          if (y === 0 || y === 10) y = 10;
          else return -2;
        return _ != null
          ? ((T = Q(y, j, A, t, _, d)), N(s | 0, T | 0, 4), 0)
          : f & 4
          ? -2
          : ((t = _t.lookup_name(t)),
            (_ = Mi(t)),
            y === 0 ? (y = 2) : y === 10 && (_ = [0, 0, tr(65535), _]),
            (T = Q(y, j, A, null, _, d)),
            N(s | 0, T | 0, 4),
            0);
      }
      function Sc() {
        if (
          typeof crypto == "object" &&
          typeof crypto.getRandomValues == "function"
        ) {
          var t = new Uint8Array(1);
          return function () {
            return crypto.getRandomValues(t), t[0];
          };
        } else if (q)
          try {
            var n = require("crypto");
            return function () {
              return n.randomBytes(1)[0];
            };
          } catch {}
        return function () {
          k(
            "no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"
          );
        };
      }
      function Cn(t, n) {
        Cn.randomDevice || (Cn.randomDevice = Sc());
        for (var a = 0; a < n; a++) N((t + a) | 0, Cn.randomDevice() | 0, 1);
        return 0;
      }
      function Cc(t, n, a, s, o, u, _) {
        var d = Hn(t, n);
        if (d.errno) return -6;
        var f = d.port,
          y = d.addr,
          j = !1;
        if (a && s) {
          var A;
          if (_ & 1 || !(A = _t.lookup_addr(y))) {
            if (_ & 8) return -2;
          } else y = A;
          var T = Nt(y, a, s);
          T + 1 >= s && (j = !0);
        }
        if (o && u) {
          f = "" + f;
          var T = Nt(f, o, u);
          T + 1 >= u && (j = !0);
        }
        return j ? -12 : 0;
      }
      function Ac(t) {
        return t;
      }
      function Rc(t) {
        oe(t);
      }
      function An(t) {
        return t % 4 === 0 && (t % 100 !== 0 || t % 400 === 0);
      }
      function Oc(t, n) {
        for (var a = 0, s = 0; s <= n; a += t[s++]);
        return a;
      }
      var ps = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        ys = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function Tc(t, n) {
        for (var a = new Date(t.getTime()); n > 0; ) {
          var s = An(a.getFullYear()),
            o = a.getMonth(),
            u = (s ? ps : ys)[o];
          if (n > u - a.getDate())
            (n -= u - a.getDate() + 1),
              a.setDate(1),
              o < 11
                ? a.setMonth(o + 1)
                : (a.setMonth(0), a.setFullYear(a.getFullYear() + 1));
          else return a.setDate(a.getDate() + n), a;
        }
        return a;
      }
      function Pc(t, n, a, s) {
        var o = V((s + 40) | 0, 4, 0) | 0,
          u = {
            tm_sec: V(s | 0, 4, 0) | 0,
            tm_min: V((s + 4) | 0, 4, 0) | 0,
            tm_hour: V((s + 8) | 0, 4, 0) | 0,
            tm_mday: V((s + 12) | 0, 4, 0) | 0,
            tm_mon: V((s + 16) | 0, 4, 0) | 0,
            tm_year: V((s + 20) | 0, 4, 0) | 0,
            tm_wday: V((s + 24) | 0, 4, 0) | 0,
            tm_yday: V((s + 28) | 0, 4, 0) | 0,
            tm_isdst: V((s + 32) | 0, 4, 0) | 0,
            tm_gmtoff: V((s + 36) | 0, 4, 0) | 0,
            tm_zone: o ? $e(o) : "",
          },
          _ = $e(a),
          d = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y",
          };
        for (var f in d) _ = _.replace(new RegExp(f, "g"), d[f]);
        var y = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          j = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ];
        function A(W, ue, ft) {
          for (
            var et = typeof W == "number" ? W.toString() : W || "";
            et.length < ue;

          )
            et = ft[0] + et;
          return et;
        }
        function T(W, ue) {
          return A(W, ue, "0");
        }
        function G(W, ue) {
          function ft(wi) {
            return wi < 0 ? -1 : wi > 0 ? 1 : 0;
          }
          var et;
          return (
            (et = ft(W.getFullYear() - ue.getFullYear())) === 0 &&
              (et = ft(W.getMonth() - ue.getMonth())) === 0 &&
              (et = ft(W.getDate() - ue.getDate())),
            et
          );
        }
        function Q(W) {
          switch (W.getDay()) {
            case 0:
              return new Date(W.getFullYear() - 1, 11, 29);
            case 1:
              return W;
            case 2:
              return new Date(W.getFullYear(), 0, 3);
            case 3:
              return new Date(W.getFullYear(), 0, 2);
            case 4:
              return new Date(W.getFullYear(), 0, 1);
            case 5:
              return new Date(W.getFullYear() - 1, 11, 31);
            case 6:
              return new Date(W.getFullYear() - 1, 11, 30);
          }
        }
        function pe(W) {
          var ue = Tc(new Date(W.tm_year + 1900, 0, 1), W.tm_yday),
            ft = new Date(ue.getFullYear(), 0, 4),
            et = new Date(ue.getFullYear() + 1, 0, 4),
            wi = Q(ft),
            jt = Q(et);
          return G(wi, ue) <= 0
            ? G(jt, ue) <= 0
              ? ue.getFullYear() + 1
              : ue.getFullYear()
            : ue.getFullYear() - 1;
        }
        var De = {
          "%a": function (W) {
            return y[W.tm_wday].substring(0, 3);
          },
          "%A": function (W) {
            return y[W.tm_wday];
          },
          "%b": function (W) {
            return j[W.tm_mon].substring(0, 3);
          },
          "%B": function (W) {
            return j[W.tm_mon];
          },
          "%C": function (W) {
            var ue = W.tm_year + 1900;
            return T((ue / 100) | 0, 2);
          },
          "%d": function (W) {
            return T(W.tm_mday, 2);
          },
          "%e": function (W) {
            return A(W.tm_mday, 2, " ");
          },
          "%g": function (W) {
            return pe(W).toString().substring(2);
          },
          "%G": function (W) {
            return pe(W);
          },
          "%H": function (W) {
            return T(W.tm_hour, 2);
          },
          "%I": function (W) {
            var ue = W.tm_hour;
            return ue == 0 ? (ue = 12) : ue > 12 && (ue -= 12), T(ue, 2);
          },
          "%j": function (W) {
            return T(
              W.tm_mday + Oc(An(W.tm_year + 1900) ? ps : ys, W.tm_mon - 1),
              3
            );
          },
          "%m": function (W) {
            return T(W.tm_mon + 1, 2);
          },
          "%M": function (W) {
            return T(W.tm_min, 2);
          },
          "%n": function () {
            return `
`;
          },
          "%p": function (W) {
            return W.tm_hour >= 0 && W.tm_hour < 12 ? "AM" : "PM";
          },
          "%S": function (W) {
            return T(W.tm_sec, 2);
          },
          "%t": function () {
            return "	";
          },
          "%u": function (W) {
            return W.tm_wday || 7;
          },
          "%U": function (W) {
            var ue = W.tm_yday + 7 - W.tm_wday;
            return T(Math.floor(ue / 7), 2);
          },
          "%V": function (W) {
            var ue = Math.floor((W.tm_yday + 7 - ((W.tm_wday + 6) % 7)) / 7);
            if (((W.tm_wday + 371 - W.tm_yday - 2) % 7 <= 2 && ue++, ue)) {
              if (ue == 53) {
                var et = (W.tm_wday + 371 - W.tm_yday) % 7;
                et != 4 && (et != 3 || !An(W.tm_year)) && (ue = 1);
              }
            } else {
              ue = 52;
              var ft = (W.tm_wday + 7 - W.tm_yday - 1) % 7;
              (ft == 4 || (ft == 5 && An((W.tm_year % 400) - 1))) && ue++;
            }
            return T(ue, 2);
          },
          "%w": function (W) {
            return W.tm_wday;
          },
          "%W": function (W) {
            var ue = W.tm_yday + 7 - ((W.tm_wday + 6) % 7);
            return T(Math.floor(ue / 7), 2);
          },
          "%y": function (W) {
            return (W.tm_year + 1900).toString().substring(2);
          },
          "%Y": function (W) {
            return W.tm_year + 1900;
          },
          "%z": function (W) {
            var ue = W.tm_gmtoff,
              ft = ue >= 0;
            return (
              (ue = Math.abs(ue) / 60),
              (ue = (ue / 60) * 100 + (ue % 60)),
              (ft ? "+" : "-") + String("0000" + ue).slice(-4)
            );
          },
          "%Z": function (W) {
            return W.tm_zone;
          },
          "%%": function () {
            return "%";
          },
        };
        _ = _.replace(/%%/g, "\0\0");
        for (var f in De)
          _.includes(f) && (_ = _.replace(new RegExp(f, "g"), De[f](u)));
        _ = _.replace(/\0\0/g, "%");
        var Ve = Mc(_, !1);
        return Ve.length > n ? 0 : (ln(Ve, t), Ve.length - 1);
      }
      function Dc(t, n, a, s) {
        return Pc(t, n, a, s);
      }
      var Ic = !0;
      function Mc(t, n, a) {
        var s = a > 0 ? a : Bt(t) + 1,
          o = new Array(s),
          u = xt(t, o, 0, o.length);
        return n && (o.length = u), o;
      }
      function qd(t) {
        for (var n = [], a = 0; a < t.length; a++) {
          var s = t[a];
          s > 255 &&
            (Ic &&
              M(
                !1,
                "Character code " +
                  s +
                  " (" +
                  String.fromCharCode(s) +
                  ")  at offset " +
                  a +
                  " not in 0x00-0xFF."
              ),
            (s &= 255)),
            n.push(String.fromCharCode(s));
        }
        return n.join("");
      }
      function Uc() {
        Vt("fetchSettings");
      }
      var gs = {
          __assert_fail: ba,
          __cxa_allocate_exception: He,
          __cxa_begin_catch: gi,
          __cxa_end_catch: Fn,
          __cxa_find_matching_catch_2: Ii,
          __cxa_find_matching_catch_3: vn,
          __cxa_find_matching_catch_4: ut,
          __cxa_find_matching_catch_5: xn,
          __cxa_free_exception: Pi,
          __cxa_rethrow: ya,
          __cxa_throw: ga,
          __cxa_uncaught_exceptions: va,
          __resumeException: Di,
          __syscall__newselect: ja,
          __syscall_bind: wa,
          __syscall_connect: ka,
          __syscall_faccessat: Ea,
          __syscall_fcntl64: Sa,
          __syscall_fstat64: Ca,
          __syscall_ftruncate64: Aa,
          __syscall_getdents64: Wn,
          __syscall_getpeername: Ra,
          __syscall_getsockopt: Oa,
          __syscall_ioctl: Ta,
          __syscall_lstat64: Pa,
          __syscall_mkdirat: Da,
          __syscall_newfstatat: Ia,
          __syscall_openat: Ma,
          __syscall_recvfrom: Ua,
          __syscall_renameat: La,
          __syscall_rmdir: Fa,
          __syscall_sendto: xa,
          __syscall_socket: Na,
          __syscall_stat64: Ba,
          __syscall_unlinkat: Ya,
          _dlinit: Ha,
          _dlopen_js: qa,
          _dlsym_js: Wa,
          _emscripten_date_now: Za,
          _emscripten_get_now_is_monotonic: Gn,
          abort: kn,
          alignfault: $r,
          duckdb_web_fs_directory_create: Ga,
          duckdb_web_fs_directory_exists: Va,
          duckdb_web_fs_directory_list_files: Ka,
          duckdb_web_fs_directory_remove: En,
          duckdb_web_fs_file_close: za,
          duckdb_web_fs_file_exists: vi,
          duckdb_web_fs_file_get_last_modified_time: Qa,
          duckdb_web_fs_file_move: Xa,
          duckdb_web_fs_file_open: Ja,
          duckdb_web_fs_file_read: es,
          duckdb_web_fs_file_truncate: ts,
          duckdb_web_fs_file_write: is,
          duckdb_web_fs_glob: ns,
          duckdb_web_test_platform_feature: rs,
          duckdb_web_udf_scalar_call: as,
          emscripten_console_error: ss,
          emscripten_get_heap_max: Vn,
          emscripten_get_now: Sn,
          emscripten_memcpy_big: Li,
          emscripten_resize_heap: cs,
          environ_get: Kn,
          environ_sizes_get: us,
          fd_close: _s,
          fd_pread: ds,
          fd_pwrite: fs,
          fd_read: hs,
          fd_seek: mc,
          fd_sync: bs,
          fd_write: wc,
          getTempRet0: kc,
          getaddrinfo: Ec,
          getentropy: Cn,
          getnameinfo: Cc,
          invoke_d: Bp,
          invoke_di: Ep,
          invoke_dii: Lp,
          invoke_diii: Qb,
          invoke_diijii: By,
          invoke_f: Np,
          invoke_fi: kp,
          invoke_fiii: zb,
          invoke_fiijii: Ny,
          invoke_i: rp,
          invoke_id: jp,
          invoke_idd: bp,
          invoke_idiii: gp,
          invoke_if: vp,
          invoke_iff: hp,
          invoke_ii: Zb,
          invoke_iid: Tp,
          invoke_iidii: Rp,
          invoke_iidj: ev,
          invoke_iii: Wb,
          invoke_iiid: Op,
          invoke_iiidi: xp,
          invoke_iiii: Yb,
          invoke_iiiid: Fp,
          invoke_iiiidjj: rv,
          invoke_iiiii: Kb,
          invoke_iiiiid: _p,
          invoke_iiiiii: Gb,
          invoke_iiiiiii: sp,
          invoke_iiiiiiii: tp,
          invoke_iiiiiiiii: yp,
          invoke_iiiiiiiiii: pp,
          invoke_iiiiiiiiiii: ip,
          invoke_iiiiiiiiiiii: op,
          invoke_iiiiiiiiiiiii: np,
          invoke_iiiiiiiiiiiiiii: Dp,
          invoke_iiiiiiiiiiiiiiii: Ap,
          invoke_iiiiiiiiiiiij: Rg,
          invoke_iiiiiiiiiiji: yg,
          invoke_iiiiiiiij: hg,
          invoke_iiiiiiiiji: lg,
          invoke_iiiiiiij: Ag,
          invoke_iiiiiiiji: nv,
          invoke_iiiiiiijii: Yy,
          invoke_iiiiiij: pg,
          invoke_iiiiiiji: cg,
          invoke_iiiiiijji: uj,
          invoke_iiiiij: $p,
          invoke_iiiiiji: ky,
          invoke_iiiiijii: cv,
          invoke_iiiiijij: Eg,
          invoke_iiiiijj: Gp,
          invoke_iiiiijji: Vg,
          invoke_iiiiijjiijj: Sv,
          invoke_iiiiijjj: hj,
          invoke_iiiiijjji: bj,
          invoke_iiiij: wy,
          invoke_iiiiji: Ey,
          invoke_iiiijii: qv,
          invoke_iiiijiii: yv,
          invoke_iiiijj: _y,
          invoke_iiiijji: tg,
          invoke_iiiijjii: Gg,
          invoke_iiiijjj: av,
          invoke_iiij: ry,
          invoke_iiiji: gy,
          invoke_iiijii: Uy,
          invoke_iiijiii: ov,
          invoke_iiijiiii: jv,
          invoke_iiijiij: vy,
          invoke_iiijiijj: zv,
          invoke_iiijij: yy,
          invoke_iiijj: Jp,
          invoke_iiijji: my,
          invoke_iiijjii: Cv,
          invoke_iiijjiij: iv,
          invoke_iiijjiiji: tv,
          invoke_iiijjj: Yv,
          invoke_iiijjji: tj,
          invoke_iiijjjii: _j,
          invoke_iij: Vp,
          invoke_iiji: dy,
          invoke_iijii: hv,
          invoke_iijiii: Wv,
          invoke_iijiiii: fv,
          invoke_iijiijj: ej,
          invoke_iijiji: Bv,
          invoke_iijj: jy,
          invoke_iijji: dv,
          invoke_iijjii: lv,
          invoke_iijjiii: uv,
          invoke_iijjiiii: _v,
          invoke_iijjijj: gg,
          invoke_iijjj: _g,
          invoke_ij: Lg,
          invoke_iji: oy,
          invoke_ijii: Ng,
          invoke_ijji: og,
          invoke_ijjiii: fy,
          invoke_j: Qp,
          invoke_jd: ng,
          invoke_jf: rg,
          invoke_ji: qp,
          invoke_jii: Wp,
          invoke_jiii: Ay,
          invoke_jiiii: Yp,
          invoke_jiiiii: Xy,
          invoke_jiiiiii: ag,
          invoke_jiiiiiii: Cg,
          invoke_jiiiiiijii: eg,
          invoke_jiiiiijiiii: Wy,
          invoke_jiiiij: Qg,
          invoke_jiiiiji: kg,
          invoke_jiiiijii: My,
          invoke_jiiij: Dg,
          invoke_jiiiji: Ev,
          invoke_jiiijii: qy,
          invoke_jiiijiii: Zy,
          invoke_jiiijj: Ug,
          invoke_jiiijjj: mg,
          invoke_jiij: Zg,
          invoke_jiiji: Tg,
          invoke_jiijii: Ly,
          invoke_jiijiii: Hy,
          invoke_jiijijjii: lj,
          invoke_jij: xg,
          invoke_jijiii: Ov,
          invoke_jijiiii: fj,
          invoke_jijij: Ig,
          invoke_jijj: Mg,
          invoke_jijjij: Pv,
          invoke_jj: ig,
          invoke_jji: Nv,
          invoke_jjiji: Pg,
          invoke_jjj: qg,
          invoke_jjjii: xv,
          invoke_jjjji: Fv,
          invoke_jjjjjjd: Wg,
          invoke_v: Hb,
          invoke_vi: $b,
          invoke_vid: wp,
          invoke_vidiijj: Gv,
          invoke_vif: mp,
          invoke_vifiijj: $v,
          invoke_vii: qb,
          invoke_viid: Jb,
          invoke_viidii: Ip,
          invoke_viif: Xb,
          invoke_viii: ep,
          invoke_viiii: Vb,
          invoke_viiiidiiii: Mp,
          invoke_viiiii: fp,
          invoke_viiiiii: up,
          invoke_viiiiiidiii: Pp,
          invoke_viiiiiii: ap,
          invoke_viiiiiiii: dp,
          invoke_viiiiiiiii: Cp,
          invoke_viiiiiiiiii: cp,
          invoke_viiiiiiiiiii: Up,
          invoke_viiiiiiiiiiiii: Sp,
          invoke_viiiiiiiiiiiiiii: lp,
          invoke_viiiiiij: Jy,
          invoke_viiiiij: Vv,
          invoke_viiiiiji: Sg,
          invoke_viiiiijiii: Yg,
          invoke_viiiiijiiii: $y,
          invoke_viiiiijj: ug,
          invoke_viiiiijji: Jg,
          invoke_viiiiijjji: Xv,
          invoke_viiiij: iy,
          invoke_viiiiji: Iy,
          invoke_viiiijii: pv,
          invoke_viiiijiii: nj,
          invoke_viiiijiiii: jg,
          invoke_viiiijiiiii: vg,
          invoke_viiiijiiiiiiii: Hg,
          invoke_viiiijij: vv,
          invoke_viiiijj: Iv,
          invoke_viiiijji: zg,
          invoke_viiiijjii: Xg,
          invoke_viiiijjjj: Gy,
          invoke_viiij: ny,
          invoke_viiiji: sg,
          invoke_viiijii: Fy,
          invoke_viiijiii: gv,
          invoke_viiijiiiijjj: Ky,
          invoke_viiijij: py,
          invoke_viiijiji: dj,
          invoke_viiijijiji: by,
          invoke_viiijijjj: Jv,
          invoke_viiijj: ly,
          invoke_viiijji: hy,
          invoke_viiijjii: Kg,
          invoke_viiijjiij: Qy,
          invoke_viiijjij: Oy,
          invoke_viiijjj: sy,
          invoke_viiijjjji: ij,
          invoke_viij: zp,
          invoke_viiji: Kp,
          invoke_viijii: Zp,
          invoke_viijiii: Ty,
          invoke_viijiiii: rj,
          invoke_viijiiiii: Dy,
          invoke_viijiiiiii: Lv,
          invoke_viijiiiiij: Vy,
          invoke_viijiiij: Rv,
          invoke_viijiij: Dv,
          invoke_viijiiji: kv,
          invoke_viijiijj: Qv,
          invoke_viijij: Ry,
          invoke_viijiji: aj,
          invoke_viijijiiiijjj: zy,
          invoke_viijijj: wg,
          invoke_viijj: Hp,
          invoke_viijji: ey,
          invoke_viijjii: Av,
          invoke_viijjj: uy,
          invoke_viijjji: bg,
          invoke_vij: ty,
          invoke_viji: cy,
          invoke_vijii: sv,
          invoke_vijiii: Sy,
          invoke_vijiiii: Cy,
          invoke_vijiiiji: Tv,
          invoke_vijiijj: Zv,
          invoke_vijij: Mv,
          invoke_vijiji: Og,
          invoke_vijijiiiijjj: dg,
          invoke_vijijj: ay,
          invoke_vijijjiiiii: sj,
          invoke_vijijjiij: Py,
          invoke_vijijjji: Kv,
          invoke_vijj: xy,
          invoke_vijji: $g,
          invoke_vijjiiii: cj,
          invoke_vijjiiiii: oj,
          invoke_vijjij: fg,
          invoke_vijjj: Xp,
          invoke_vijjji: mv,
          invoke_vj: Hv,
          invoke_vjii: Bg,
          invoke_vjiiii: Fg,
          invoke_vjiiiji: Uv,
          invoke_vjjii: bv,
          invoke_vjjijij: wv,
          llvm_eh_typeid_for: Ac,
          segfault: Zr,
          setTempRet0: Rc,
          strftime_l: Dc,
        },
        Wd = la(),
        Zd = (e.___wasm_call_ctors = g("__wasm_call_ctors")),
        $d = (e._main = g("main")),
        Gd = (e._duckdb_web_fs_glob_add_path = g(
          "duckdb_web_fs_glob_add_path"
        )),
        Vd = (e._duckdb_web_clear_response = g("duckdb_web_clear_response")),
        Kd = (e._duckdb_web_fail_with = g("duckdb_web_fail_with")),
        zd = (e._duckdb_web_reset = g("duckdb_web_reset")),
        Qd = (e._duckdb_web_connect = g("duckdb_web_connect")),
        Xd = (e._duckdb_web_disconnect = g("duckdb_web_disconnect")),
        Jd = (e._duckdb_web_flush_files = g("duckdb_web_flush_files")),
        ef = (e._duckdb_web_flush_file = g("duckdb_web_flush_file")),
        tf = (e._duckdb_web_open = g("duckdb_web_open")),
        nf = (e._duckdb_web_get_global_file_info = g(
          "duckdb_web_get_global_file_info"
        )),
        rf = (e._duckdb_web_collect_file_stats = g(
          "duckdb_web_collect_file_stats"
        )),
        af = (e._duckdb_web_export_file_stats = g(
          "duckdb_web_export_file_stats"
        )),
        sf = (e._duckdb_web_fs_drop_file = g("duckdb_web_fs_drop_file")),
        of = (e._duckdb_web_fs_drop_files = g("duckdb_web_fs_drop_files")),
        cf = (e._duckdb_web_fs_glob_file_infos = g(
          "duckdb_web_fs_glob_file_infos"
        )),
        lf = (e._duckdb_web_fs_get_file_info_by_id = g(
          "duckdb_web_fs_get_file_info_by_id"
        )),
        uf = (e._duckdb_web_fs_get_file_info_by_name = g(
          "duckdb_web_fs_get_file_info_by_name"
        )),
        _f = (e._duckdb_web_fs_set_file_descriptor = g(
          "duckdb_web_fs_set_file_descriptor"
        )),
        df = (e._duckdb_web_fs_register_file_url = g(
          "duckdb_web_fs_register_file_url"
        )),
        Lc = (e._duckdb_web_fs_register_file_buffer = g(
          "duckdb_web_fs_register_file_buffer"
        )),
        Fc = (e._duckdb_web_copy_file_to_buffer = g(
          "duckdb_web_copy_file_to_buffer"
        )),
        ff = (e._duckdb_web_copy_file_to_path = g(
          "duckdb_web_copy_file_to_path"
        )),
        Qn = (e._duckdb_web_get_version = g("duckdb_web_get_version")),
        Xn = (e._duckdb_web_get_feature_flags = g(
          "duckdb_web_get_feature_flags"
        )),
        vs = (e._duckdb_web_tokenize = g("duckdb_web_tokenize")),
        Rn = (e._duckdb_web_udf_scalar_create = g(
          "duckdb_web_udf_scalar_create"
        )),
        hf = (e._duckdb_web_prepared_create = g("duckdb_web_prepared_create")),
        bf = (e._duckdb_web_prepared_close = g("duckdb_web_prepared_close")),
        js = (e._duckdb_web_prepared_run = g("duckdb_web_prepared_run")),
        pf = (e._duckdb_web_prepared_send = g("duckdb_web_prepared_send")),
        ms = (e._duckdb_web_query_run = g("duckdb_web_query_run")),
        xc = (e._duckdb_web_pending_query_start = g(
          "duckdb_web_pending_query_start"
        )),
        Jn = (e._duckdb_web_pending_query_poll = g(
          "duckdb_web_pending_query_poll"
        )),
        er = (e._duckdb_web_pending_query_cancel = g(
          "duckdb_web_pending_query_cancel"
        )),
        ws = (e._duckdb_web_query_fetch_results = g(
          "duckdb_web_query_fetch_results"
        )),
        ks = (e._duckdb_web_get_tablenames = g("duckdb_web_get_tablenames")),
        Fi = (e._duckdb_web_insert_arrow_from_ipc_stream = g(
          "duckdb_web_insert_arrow_from_ipc_stream"
        )),
        yf = (e._duckdb_web_insert_csv_from_path = g(
          "duckdb_web_insert_csv_from_path"
        )),
        gf = (e._duckdb_web_insert_json_from_path = g(
          "duckdb_web_insert_json_from_path"
        )),
        Nc = (e.___errno_location = g("__errno_location")),
        Bc = (e.___stdio_exit = g("__stdio_exit")),
        vf = (e.___dl_seterr = g("__dl_seterr")),
        tr = (e._htonl = g("htonl")),
        ir = (e._htons = g("htons")),
        Es = (e._ntohs = g("ntohs")),
        xi = (e._malloc = g("malloc")),
        Yc = (e._free = g("free")),
        jf = (e._emscripten_get_sbrk_ptr = g("emscripten_get_sbrk_ptr")),
        Ss = (e._sbrk = g("sbrk")),
        C = (e._setThrew = g("setThrew")),
        Cs = (e._emscripten_stack_init = function () {
          return (Cs = e._emscripten_stack_init =
            e.asm.emscripten_stack_init).apply(null, arguments);
        }),
        Hc = (e._emscripten_stack_get_free = function () {
          return (Hc = e._emscripten_stack_get_free =
            e.asm.emscripten_stack_get_free).apply(null, arguments);
        }),
        nr = (e._emscripten_stack_get_base = function () {
          return (nr = e._emscripten_stack_get_base =
            e.asm.emscripten_stack_get_base).apply(null, arguments);
        }),
        rr = (e._emscripten_stack_get_end = function () {
          return (rr = e._emscripten_stack_get_end =
            e.asm.emscripten_stack_get_end).apply(null, arguments);
        }),
        E = (e.stackSave = g("stackSave")),
        S = (e.stackRestore = g("stackRestore")),
        Ni = (e.stackAlloc = g("stackAlloc")),
        On = (e.___cxa_can_catch = g("__cxa_can_catch")),
        qc = (e.___cxa_is_pointer_type = g("__cxa_is_pointer_type")),
        mf = (e.dynCall_jiji = g("dynCall_jiji")),
        Wc = (e.dynCall_jiiii = g("dynCall_jiiii")),
        Zc = (e.dynCall_iiiiij = g("dynCall_iiiiij")),
        $c = (e.dynCall_iiiiijj = g("dynCall_iiiiijj")),
        wf = (e.dynCall_iiiiiijj = g("dynCall_iiiiiijj")),
        Gc = (e.dynCall_viijii = g("dynCall_viijii")),
        Vc = (e.dynCall_j = g("dynCall_j")),
        Kc = (e.dynCall_ji = g("dynCall_ji")),
        zc = (e.dynCall_iij = g("dynCall_iij")),
        Qc = (e.dynCall_viij = g("dynCall_viij")),
        Xc = (e.dynCall_viijji = g("dynCall_viijji")),
        Jc = (e.dynCall_viijj = g("dynCall_viijj")),
        el = (e.dynCall_viiijj = g("dynCall_viiijj")),
        tl = (e.dynCall_viiji = g("dynCall_viiji")),
        il = (e.dynCall_vijjj = g("dynCall_vijjj")),
        nl = (e.dynCall_iiijj = g("dynCall_iiijj")),
        rl = (e.dynCall_viiij = g("dynCall_viiij")),
        al = (e.dynCall_viijij = g("dynCall_viijij")),
        sl = (e.dynCall_iiij = g("dynCall_iiij")),
        ol = (e.dynCall_vijijj = g("dynCall_vijijj")),
        cl = (e.dynCall_viiijjj = g("dynCall_viiijjj")),
        ll = (e.dynCall_iji = g("dynCall_iji")),
        ul = (e.dynCall_viji = g("dynCall_viji")),
        _l = (e.dynCall_vij = g("dynCall_vij")),
        dl = (e.dynCall_viiiij = g("dynCall_viiiij")),
        fl = (e.dynCall_jii = g("dynCall_jii")),
        hl = (e.dynCall_iiji = g("dynCall_iiji")),
        bl = (e.dynCall_iiiij = g("dynCall_iiiij")),
        pl = (e.dynCall_iiiiiji = g("dynCall_iiiiiji")),
        yl = (e.dynCall_iiiji = g("dynCall_iiiji")),
        gl = (e.dynCall_iiiiji = g("dynCall_iiiiji")),
        vl = (e.dynCall_jiii = g("dynCall_jiii")),
        Bi = (e.dynCall_jij = g("dynCall_jij")),
        Yi = (e.dynCall_viijiiiii = g("dynCall_viijiiiii")),
        As = (e.dynCall_iiijii = g("dynCall_iiijii")),
        Rs = (e.dynCall_jiijii = g("dynCall_jiijii")),
        Os = (e.dynCall_viiijii = g("dynCall_viiijii")),
        Tn = (e.dynCall_fiijii = g("dynCall_fiijii")),
        Ts = (e.dynCall_diijii = g("dynCall_diijii")),
        Ps = (e.dynCall_iiiiiiijii = g("dynCall_iiiiiiijii")),
        Ds = (e.dynCall_vijj = g("dynCall_vijj")),
        ar = (e.dynCall_jiiijii = g("dynCall_jiiijii")),
        c = (e.dynCall_jiijiii = g("dynCall_jiijiii")),
        h = (e.dynCall_viiiiji = g("dynCall_viiiiji")),
        v = (e.dynCall_jiiiijii = g("dynCall_jiiiijii")),
        R = (e.dynCall_jiiiiijiiii = g("dynCall_jiiiiijiiii")),
        U = (e.dynCall_jiiijiii = g("dynCall_jiiijiii")),
        Z = (e.dynCall_viiiiijiiii = g("dynCall_viiiiijiiii")),
        H = (e.dynCall_viiijjij = g("dynCall_viiijjij")),
        $ = (e.dynCall_viijiii = g("dynCall_viijiii")),
        ae = (e.dynCall_vijijjiij = g("dynCall_vijijjiij")),
        fe = (e.dynCall_viiijjiij = g("dynCall_viiijjiij")),
        ve = (e.dynCall_viiiijjjj = g("dynCall_viiiijjjj")),
        We = (e.dynCall_viijiiiiij = g("dynCall_viijiiiiij")),
        Oe = (e.dynCall_viiijiiiijjj = g("dynCall_viiijiiiijjj")),
        ji = (e.dynCall_viijijiiiijjj = g("dynCall_viijijiiiijjj")),
        Ze = (e.dynCall_jj = g("dynCall_jj")),
        nt = (e.dynCall_jd = g("dynCall_jd")),
        Ht = (e.dynCall_jf = g("dynCall_jf")),
        mi = (e.dynCall_iijjj = g("dynCall_iijjj")),
        K = (e.dynCall_iiijji = g("dynCall_iiijji")),
        he = (e.dynCall_vijijiiiijjj = g("dynCall_vijijiiiijjj")),
        at = (e.dynCall_viiiiiij = g("dynCall_viiiiiij")),
        ze = (e.dynCall_iiiiiiji = g("dynCall_iiiiiiji")),
        qt = (e.dynCall_iiiiiiiiji = g("dynCall_iiiiiiiiji")),
        dt = (e.dynCall_viiiiijj = g("dynCall_viiiiijj")),
        sr = (e.dynCall_vijiii = g("dynCall_vijiii")),
        kf = (e.dynCall_viijjj = g("dynCall_viijjj")),
        Ef = (e.dynCall_vijjij = g("dynCall_vijjij")),
        Sf = (e.dynCall_jiiiii = g("dynCall_jiiiii")),
        Cf = (e.dynCall_viijjji = g("dynCall_viijjji")),
        Af = (e.dynCall_vijiiii = g("dynCall_vijiiii")),
        Rf = (e.dynCall_iijjijj = g("dynCall_iijjijj")),
        Of = (e.dynCall_viiiijiiiii = g("dynCall_viiiijiiiii")),
        Tf = (e.dynCall_viiiijiiii = g("dynCall_viiiijiiii")),
        Pf = (e.dynCall_iiiiiij = g("dynCall_iiiiiij")),
        Df = (e.dynCall_iiiiiiiiiiji = g("dynCall_iiiiiiiiiiji")),
        If = (e.dynCall_iiiiiiiij = g("dynCall_iiiiiiiij")),
        Mf = (e.dynCall_jiiijjj = g("dynCall_jiiijjj")),
        Uf = (e.dynCall_viijijj = g("dynCall_viijijj")),
        Lf = (e.dynCall_jiiiiji = g("dynCall_jiiiiji")),
        Ff = (e.dynCall_iiiiijij = g("dynCall_iiiiijij")),
        xf = (e.dynCall_viiiiiji = g("dynCall_viiiiiji")),
        Nf = (e.dynCall_jiiiiiii = g("dynCall_jiiiiiii")),
        Bf = (e.dynCall_vijiji = g("dynCall_vijiji")),
        Yf = (e.dynCall_jiiiij = g("dynCall_jiiiij")),
        Hf = (e.dynCall_jijjij = g("dynCall_jijjij")),
        qf = (e.dynCall_viiiijiiiiiiii = g("dynCall_viiiijiiiiiiii")),
        Wf = (e.dynCall_ij = g("dynCall_ij")),
        Zf = (e.dynCall_jjj = g("dynCall_jjj")),
        $f = (e.dynCall_jiiji = g("dynCall_jiiji")),
        Gf = (e.dynCall_jjiji = g("dynCall_jjiji")),
        Vf = (e.dynCall_jiiij = g("dynCall_jiiij")),
        Kf = (e.dynCall_jijij = g("dynCall_jijij")),
        zf = (e.dynCall_jijj = g("dynCall_jijj")),
        Qf = (e.dynCall_jiiijj = g("dynCall_jiiijj")),
        Xf = (e.dynCall_vjii = g("dynCall_vjii")),
        M0 = (e.dynCall_ijjj = g("dynCall_ijjj")),
        U0 = (e.dynCall_jjjd = g("dynCall_jjjd")),
        Jf = (e.dynCall_jjjjjjd = g("dynCall_jjjjjjd")),
        eh = (e.dynCall_viiiji = g("dynCall_viiiji")),
        th = (e.dynCall_ijii = g("dynCall_ijii")),
        ih = (e.dynCall_vjiiii = g("dynCall_vjiiii")),
        nh = (e.dynCall_viiiiijiii = g("dynCall_viiiiijiii")),
        rh = (e.dynCall_jiij = g("dynCall_jiij")),
        ah = (e.dynCall_vijji = g("dynCall_vijji")),
        sh = (e.dynCall_iiiijjii = g("dynCall_iiiijjii")),
        oh = (e.dynCall_iiiiijji = g("dynCall_iiiiijji")),
        ch = (e.dynCall_viiijjii = g("dynCall_viiijjii")),
        lh = (e.dynCall_viiiijji = g("dynCall_viiiijji")),
        uh = (e.dynCall_viiiijjii = g("dynCall_viiiijjii")),
        _h = (e.dynCall_viiiiijji = g("dynCall_viiiiijji")),
        dh = (e.dynCall_iidj = g("dynCall_iidj")),
        fh = (e.dynCall_ijji = g("dynCall_ijji")),
        hh = (e.dynCall_iiiiiiij = g("dynCall_iiiiiiij")),
        bh = (e.dynCall_iiiiiiiiiiiij = g("dynCall_iiiiiiiiiiiij")),
        ph = (e.dynCall_iiijjiiji = g("dynCall_iiijjiiji")),
        yh = (e.dynCall_iiijjiij = g("dynCall_iiijjiij")),
        gh = (e.dynCall_iiiiiiiji = g("dynCall_iiiiiiiji")),
        vh = (e.dynCall_iiiidjj = g("dynCall_iiiidjj")),
        jh = (e.dynCall_iiiijjj = g("dynCall_iiiijjj")),
        mh = (e.dynCall_vijii = g("dynCall_vijii")),
        wh = (e.dynCall_jiiiiiijii = g("dynCall_jiiiiiijii")),
        kh = (e.dynCall_iiiijji = g("dynCall_iiiijji")),
        Eh = (e.dynCall_viiijji = g("dynCall_viiijji")),
        Sh = (e.dynCall_jiiiiii = g("dynCall_jiiiiii")),
        Ch = (e.dynCall_iiijiii = g("dynCall_iiijiii")),
        Ah = (e.dynCall_iiiiijii = g("dynCall_iiiiijii")),
        Rh = (e.dynCall_iiijiij = g("dynCall_iiijiij")),
        Oh = (e.dynCall_iijjii = g("dynCall_iijjii")),
        Th = (e.dynCall_iijjiii = g("dynCall_iijjiii")),
        Ph = (e.dynCall_iijjiiii = g("dynCall_iijjiiii")),
        Dh = (e.dynCall_iijji = g("dynCall_iijji")),
        Ih = (e.dynCall_iijiiii = g("dynCall_iijiiii")),
        Mh = (e.dynCall_iijii = g("dynCall_iijii")),
        Uh = (e.dynCall_vjjii = g("dynCall_vjjii")),
        Lh = (e.dynCall_viiiijii = g("dynCall_viiiijii")),
        Fh = (e.dynCall_iiiijiii = g("dynCall_iiiijiii")),
        xh = (e.dynCall_iiijij = g("dynCall_iiijij")),
        Nh = (e.dynCall_iijj = g("dynCall_iijj")),
        Bh = (e.dynCall_iiiijj = g("dynCall_iiiijj")),
        Yh = (e.dynCall_viiijiii = g("dynCall_viiijiii")),
        Hh = (e.dynCall_viiiijij = g("dynCall_viiiijij")),
        qh = (e.dynCall_iiijiiii = g("dynCall_iiijiiii")),
        Wh = (e.dynCall_iiiiijjiijj = g("dynCall_iiiiijjiijj")),
        Zh = (e.dynCall_viijiiji = g("dynCall_viijiiji")),
        $h = (e.dynCall_iiijjii = g("dynCall_iiijjii")),
        Gh = (e.dynCall_vjjijij = g("dynCall_vjjijij")),
        Vh = (e.dynCall_vijjji = g("dynCall_vijjji")),
        Kh = (e.dynCall_jiiiji = g("dynCall_jiiiji")),
        zh = (e.dynCall_viijjii = g("dynCall_viijjii")),
        Qh = (e.dynCall_viiiijj = g("dynCall_viiiijj")),
        Xh = (e.dynCall_jijiii = g("dynCall_jijiii")),
        Jh = (e.dynCall_viijiiij = g("dynCall_viijiiij")),
        eb = (e.dynCall_vijiiiji = g("dynCall_vijiiiji")),
        tb = (e.dynCall_viiijij = g("dynCall_viiijij")),
        ib = (e.dynCall_viijiij = g("dynCall_viijiij")),
        nb = (e.dynCall_vijij = g("dynCall_vijij")),
        rb = (e.dynCall_vjiiiji = g("dynCall_vjiiiji")),
        ab = (e.dynCall_viijiiiiii = g("dynCall_viijiiiiii")),
        sb = (e.dynCall_jjjji = g("dynCall_jjjji")),
        ob = (e.dynCall_jjjii = g("dynCall_jjjii")),
        cb = (e.dynCall_jji = g("dynCall_jji")),
        lb = (e.dynCall_iijiji = g("dynCall_iijiji")),
        ub = (e.dynCall_viiijijiji = g("dynCall_viiijijiji")),
        L0 = (e.dynCall_viiijiiiijj = g("dynCall_viiijiiiijj")),
        _b = (e.dynCall_iiijjj = g("dynCall_iiijjj")),
        db = (e.dynCall_vj = g("dynCall_vj")),
        fb = (e.dynCall_iiiijii = g("dynCall_iiiijii")),
        hb = (e.dynCall_iijiii = g("dynCall_iijiii")),
        bb = (e.dynCall_vijiijj = g("dynCall_vijiijj")),
        pb = (e.dynCall_vifiijj = g("dynCall_vifiijj")),
        yb = (e.dynCall_vidiijj = g("dynCall_vidiijj")),
        gb = (e.dynCall_viiiiij = g("dynCall_viiiiij")),
        vb = (e.dynCall_ijjiii = g("dynCall_ijjiii")),
        jb = (e.dynCall_vijijjji = g("dynCall_vijijjji")),
        mb = (e.dynCall_viijiijj = g("dynCall_viijiijj")),
        wb = (e.dynCall_viiiiijjji = g("dynCall_viiiiijjji")),
        kb = (e.dynCall_iiijiijj = g("dynCall_iiijiijj")),
        Eb = (e.dynCall_viiijijjj = g("dynCall_viiijijjj")),
        Sb = (e.dynCall_iijiijj = g("dynCall_iijiijj")),
        Cb = (e.dynCall_viiijjjji = g("dynCall_viiijjjji")),
        Ab = (e.dynCall_viiiijiii = g("dynCall_viiiijiii")),
        Rb = (e.dynCall_viijiiii = g("dynCall_viijiiii")),
        Ob = (e.dynCall_vijjiiii = g("dynCall_vijjiiii")),
        Tb = (e.dynCall_vijijjiiiii = g("dynCall_vijijjiiiii")),
        Pb = (e.dynCall_vijjiiiii = g("dynCall_vijjiiiii")),
        Db = (e.dynCall_iiijjji = g("dynCall_iiijjji")),
        Ib = (e.dynCall_jiijijjii = g("dynCall_jiijijjii")),
        Mb = (e.dynCall_iiiiiijji = g("dynCall_iiiiiijji")),
        Ub = (e.dynCall_iiiiijjj = g("dynCall_iiiiijjj")),
        Lb = (e.dynCall_jijiiii = g("dynCall_jijiiii")),
        Fb = (e.dynCall_viiijiji = g("dynCall_viiijiji")),
        xb = (e.dynCall_iiijjjii = g("dynCall_iiijjjii")),
        Nb = (e.dynCall_iiiiijjji = g("dynCall_iiiiijjji")),
        Bb = (e.dynCall_viijiji = g("dynCall_viijiji"));
      function Yb(t, n, a, s) {
        var o = E();
        try {
          return re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Hb(t) {
        var n = E();
        try {
          re(t)();
        } catch (a) {
          if ((S(n), a !== a + 0)) throw a;
          C(1, 0);
        }
      }
      function qb(t, n, a) {
        var s = E();
        try {
          re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Wb(t, n, a) {
        var s = E();
        try {
          return re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Zb(t, n) {
        var a = E();
        try {
          return re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function $b(t, n) {
        var a = E();
        try {
          re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function Gb(t, n, a, s, o, u) {
        var _ = E();
        try {
          return re(t)(n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Vb(t, n, a, s, o) {
        var u = E();
        try {
          re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Kb(t, n, a, s, o) {
        var u = E();
        try {
          return re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function zb(t, n, a, s) {
        var o = E();
        try {
          return re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Qb(t, n, a, s) {
        var o = E();
        try {
          return re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Xb(t, n, a, s) {
        var o = E();
        try {
          re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Jb(t, n, a, s) {
        var o = E();
        try {
          re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function ep(t, n, a, s) {
        var o = E();
        try {
          re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function tp(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return re(t)(n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function ip(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function np(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function rp(t) {
        var n = E();
        try {
          return re(t)();
        } catch (a) {
          if ((S(n), a !== a + 0)) throw a;
          C(1, 0);
        }
      }
      function ap(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          re(t)(n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function sp(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return re(t)(n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function op(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function cp(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function lp(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe) {
        var De = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe);
        } catch (Ve) {
          if ((S(De), Ve !== Ve + 0)) throw Ve;
          C(1, 0);
        }
      }
      function up(t, n, a, s, o, u, _) {
        var d = E();
        try {
          re(t)(n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function _p(t, n, a, s, o, u) {
        var _ = E();
        try {
          return re(t)(n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function dp(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          re(t)(n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function fp(t, n, a, s, o, u) {
        var _ = E();
        try {
          re(t)(n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function hp(t, n, a) {
        var s = E();
        try {
          return re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function bp(t, n, a) {
        var s = E();
        try {
          return re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function pp(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function yp(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function gp(t, n, a, s, o) {
        var u = E();
        try {
          return re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function vp(t, n) {
        var a = E();
        try {
          return re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function jp(t, n) {
        var a = E();
        try {
          return re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function mp(t, n, a) {
        var s = E();
        try {
          re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function wp(t, n, a) {
        var s = E();
        try {
          re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function kp(t, n) {
        var a = E();
        try {
          return re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function Ep(t, n) {
        var a = E();
        try {
          return re(t)(n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function Sp(t, n, a, s, o, u, _, d, f, y, j, A, T, G) {
        var Q = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y, j, A, T, G);
        } catch (pe) {
          if ((S(Q), pe !== pe + 0)) throw pe;
          C(1, 0);
        }
      }
      function Cp(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Ap(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe) {
        var De = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe);
        } catch (Ve) {
          if ((S(De), Ve !== Ve + 0)) throw Ve;
          C(1, 0);
        }
      }
      function Rp(t, n, a, s, o) {
        var u = E();
        try {
          return re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Op(t, n, a, s) {
        var o = E();
        try {
          return re(t)(n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Tp(t, n, a) {
        var s = E();
        try {
          return re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Pp(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Dp(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q) {
        var pe = E();
        try {
          return re(t)(n, a, s, o, u, _, d, f, y, j, A, T, G, Q);
        } catch (De) {
          if ((S(pe), De !== De + 0)) throw De;
          C(1, 0);
        }
      }
      function Ip(t, n, a, s, o, u) {
        var _ = E();
        try {
          re(t)(n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Mp(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Up(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          re(t)(n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Lp(t, n, a) {
        var s = E();
        try {
          return re(t)(n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Fp(t, n, a, s, o) {
        var u = E();
        try {
          return re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function xp(t, n, a, s, o) {
        var u = E();
        try {
          return re(t)(n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Np(t) {
        var n = E();
        try {
          return re(t)();
        } catch (a) {
          if ((S(n), a !== a + 0)) throw a;
          C(1, 0);
        }
      }
      function Bp(t) {
        var n = E();
        try {
          return re(t)();
        } catch (a) {
          if ((S(n), a !== a + 0)) throw a;
          C(1, 0);
        }
      }
      function Yp(t, n, a, s, o) {
        var u = E();
        try {
          return Wc(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Hp(t, n, a, s, o, u, _) {
        var d = E();
        try {
          Jc(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function qp(t, n) {
        var a = E();
        try {
          return Kc(t, n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function Wp(t, n, a) {
        var s = E();
        try {
          return fl(t, n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Zp(t, n, a, s, o, u, _) {
        var d = E();
        try {
          Gc(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function $p(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Zc(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Gp(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return $c(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Vp(t, n, a, s) {
        var o = E();
        try {
          return zc(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Kp(t, n, a, s, o, u) {
        var _ = E();
        try {
          tl(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function zp(t, n, a, s, o) {
        var u = E();
        try {
          Qc(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Qp(t) {
        var n = E();
        try {
          return Vc(t);
        } catch (a) {
          if ((S(n), a !== a + 0)) throw a;
          C(1, 0);
        }
      }
      function Xp(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          il(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Jp(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return nl(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function ey(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          Xc(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function ty(t, n, a, s) {
        var o = E();
        try {
          _l(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function iy(t, n, a, s, o, u, _) {
        var d = E();
        try {
          dl(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function ny(t, n, a, s, o, u) {
        var _ = E();
        try {
          rl(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function ry(t, n, a, s, o) {
        var u = E();
        try {
          return sl(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function ay(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          ol(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function sy(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          cl(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function oy(t, n, a, s) {
        var o = E();
        try {
          return ll(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function cy(t, n, a, s, o) {
        var u = E();
        try {
          ul(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function ly(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          el(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function uy(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          kf(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function _y(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Bh(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function dy(t, n, a, s, o) {
        var u = E();
        try {
          return hl(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function fy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return vb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function hy(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Eh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function by(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          ub(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function py(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          tb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function yy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return xh(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function gy(t, n, a, s, o, u) {
        var _ = E();
        try {
          return yl(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function vy(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return Rh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function jy(t, n, a, s, o, u) {
        var _ = E();
        try {
          return Nh(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function my(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return K(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function wy(t, n, a, s, o, u) {
        var _ = E();
        try {
          return bl(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function ky(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return pl(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Ey(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return gl(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Sy(t, n, a, s, o, u, _) {
        var d = E();
        try {
          sr(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Cy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          Af(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Ay(t, n, a, s) {
        var o = E();
        try {
          return vl(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Ry(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          al(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Oy(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          H(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Ty(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          $(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Py(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          ae(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function Dy(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Yi(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Iy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          h(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function My(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return v(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Uy(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return As(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Ly(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Rs(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Fy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          Os(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function xy(t, n, a, s, o, u) {
        var _ = E();
        try {
          Ds(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Ny(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Tn(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function By(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Ts(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Yy(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return Ps(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Hy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return c(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function qy(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return ar(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Wy(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return R(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Zy(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return U(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function $y(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          Z(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Gy(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          ve(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function Vy(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          We(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Ky(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe) {
        var De = E();
        try {
          Oe(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe);
        } catch (Ve) {
          if ((S(De), Ve !== Ve + 0)) throw Ve;
          C(1, 0);
        }
      }
      function zy(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe, De, Ve) {
        var W = E();
        try {
          ji(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe, De, Ve);
        } catch (ue) {
          if ((S(W), ue !== ue + 0)) throw ue;
          C(1, 0);
        }
      }
      function Qy(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          fe(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Xy(t, n, a, s, o, u) {
        var _ = E();
        try {
          return Sf(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Jy(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          at(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function eg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return wh(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function tg(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return kh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function ig(t, n, a) {
        var s = E();
        try {
          return Ze(t, n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function ng(t, n) {
        var a = E();
        try {
          return nt(t, n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function rg(t, n) {
        var a = E();
        try {
          return Ht(t, n);
        } catch (s) {
          if ((S(a), s !== s + 0)) throw s;
          C(1, 0);
        }
      }
      function ag(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Sh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function sg(t, n, a, s, o, u, _) {
        var d = E();
        try {
          eh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function og(t, n, a, s, o, u) {
        var _ = E();
        try {
          return fh(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function cg(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return ze(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function lg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return qt(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function ug(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          dt(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function _g(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return mi(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function dg(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe, De) {
        var Ve = E();
        try {
          he(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q, pe, De);
        } catch (W) {
          if ((S(Ve), W !== W + 0)) throw W;
          C(1, 0);
        }
      }
      function fg(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Ef(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function hg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return If(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function bg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Cf(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function pg(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Pf(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function yg(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          return Df(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function gg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return Rf(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function vg(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          Of(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function jg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          Tf(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function mg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return Mf(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function wg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Uf(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function kg(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Lf(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Eg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return Ff(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Sg(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          xf(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Cg(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Nf(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Ag(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return hh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Rg(t, n, a, s, o, u, _, d, f, y, j, A, T, G) {
        var Q = E();
        try {
          return bh(t, n, a, s, o, u, _, d, f, y, j, A, T, G);
        } catch (pe) {
          if ((S(Q), pe !== pe + 0)) throw pe;
          C(1, 0);
        }
      }
      function Og(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          Bf(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Tg(t, n, a, s, o, u) {
        var _ = E();
        try {
          return $f(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Pg(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Gf(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Dg(t, n, a, s, o, u) {
        var _ = E();
        try {
          return Vf(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Ig(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Kf(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Mg(t, n, a, s, o, u) {
        var _ = E();
        try {
          return zf(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function Ug(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Qf(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Lg(t, n, a) {
        var s = E();
        try {
          return Wf(t, n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function Fg(t, n, a, s, o, u, _) {
        var d = E();
        try {
          ih(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function xg(t, n, a, s) {
        var o = E();
        try {
          return Bi(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Ng(t, n, a, s, o) {
        var u = E();
        try {
          return th(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Bg(t, n, a, s, o) {
        var u = E();
        try {
          Xf(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Yg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          nh(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Hg(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q) {
        var pe = E();
        try {
          qf(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q);
        } catch (De) {
          if ((S(pe), De !== De + 0)) throw De;
          C(1, 0);
        }
      }
      function qg(t, n, a, s, o) {
        var u = E();
        try {
          return Zf(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function Wg(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return Jf(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function Zg(t, n, a, s, o) {
        var u = E();
        try {
          return rh(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function $g(t, n, a, s, o, u, _) {
        var d = E();
        try {
          ah(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Gg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return sh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Vg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return oh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Kg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          ch(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function zg(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          lh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Qg(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Yf(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Xg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          uh(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Jg(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          _h(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function ev(t, n, a, s, o) {
        var u = E();
        try {
          return dh(t, n, a, s, o);
        } catch (_) {
          if ((S(u), _ !== _ + 0)) throw _;
          C(1, 0);
        }
      }
      function tv(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return ph(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function iv(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return yh(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function nv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return gh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function rv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return vh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function av(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return jh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function sv(t, n, a, s, o, u) {
        var _ = E();
        try {
          mh(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function ov(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Ch(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function cv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return Ah(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function lv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Oh(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function uv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return Th(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function _v(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return Ph(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function dv(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Dh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function fv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Ih(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function hv(t, n, a, s, o, u) {
        var _ = E();
        try {
          return Mh(t, n, a, s, o, u);
        } catch (d) {
          if ((S(_), d !== d + 0)) throw d;
          C(1, 0);
        }
      }
      function bv(t, n, a, s, o, u, _) {
        var d = E();
        try {
          Uh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function pv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Lh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function yv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return Fh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function gv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Yh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function vv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Hh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function jv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return qh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function mv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Vh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function wv(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          Gh(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function kv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Zh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Ev(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Kh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Sv(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q) {
        var pe = E();
        try {
          return Wh(t, n, a, s, o, u, _, d, f, y, j, A, T, G, Q);
        } catch (De) {
          if ((S(pe), De !== De + 0)) throw De;
          C(1, 0);
        }
      }
      function Cv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return $h(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Av(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          zh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Rv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Jh(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Ov(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return Xh(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Tv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          eb(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function Pv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return Hf(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Dv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          ib(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Iv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Qh(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Mv(t, n, a, s, o, u, _) {
        var d = E();
        try {
          nb(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Uv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          rb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Lv(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          ab(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Fv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return sb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function xv(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return ob(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Nv(t, n, a, s) {
        var o = E();
        try {
          return cb(t, n, a, s);
        } catch (u) {
          if ((S(o), u !== u + 0)) throw u;
          C(1, 0);
        }
      }
      function Bv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return lb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Yv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          return _b(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Hv(t, n, a) {
        var s = E();
        try {
          db(t, n, a);
        } catch (o) {
          if ((S(s), o !== o + 0)) throw o;
          C(1, 0);
        }
      }
      function qv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return fb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Wv(t, n, a, s, o, u, _) {
        var d = E();
        try {
          return hb(t, n, a, s, o, u, _);
        } catch (f) {
          if ((S(d), f !== f + 0)) throw f;
          C(1, 0);
        }
      }
      function Zv(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          bb(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function $v(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          pb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Gv(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          yb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function Vv(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          gb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function Kv(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          jb(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function zv(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return kb(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Qv(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          mb(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function Xv(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          wb(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function Jv(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          Eb(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function ej(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return Sb(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function tj(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          return Db(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function ij(t, n, a, s, o, u, _, d, f, y, j, A, T) {
        var G = E();
        try {
          Cb(t, n, a, s, o, u, _, d, f, y, j, A, T);
        } catch (Q) {
          if ((S(G), Q !== Q + 0)) throw Q;
          C(1, 0);
        }
      }
      function nj(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Ab(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function rj(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Rb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function aj(t, n, a, s, o, u, _, d, f) {
        var y = E();
        try {
          Bb(t, n, a, s, o, u, _, d, f);
        } catch (j) {
          if ((S(y), j !== j + 0)) throw j;
          C(1, 0);
        }
      }
      function sj(t, n, a, s, o, u, _, d, f, y, j, A, T, G) {
        var Q = E();
        try {
          Tb(t, n, a, s, o, u, _, d, f, y, j, A, T, G);
        } catch (pe) {
          if ((S(Q), pe !== pe + 0)) throw pe;
          C(1, 0);
        }
      }
      function oj(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          Pb(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function cj(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Ob(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function lj(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return Ib(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      function uj(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return Mb(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function _j(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return xb(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function dj(t, n, a, s, o, u, _, d, f, y) {
        var j = E();
        try {
          Fb(t, n, a, s, o, u, _, d, f, y);
        } catch (A) {
          if ((S(j), A !== A + 0)) throw A;
          C(1, 0);
        }
      }
      function fj(t, n, a, s, o, u, _, d) {
        var f = E();
        try {
          return Lb(t, n, a, s, o, u, _, d);
        } catch (y) {
          if ((S(f), y !== y + 0)) throw y;
          C(1, 0);
        }
      }
      function hj(t, n, a, s, o, u, _, d, f, y, j) {
        var A = E();
        try {
          return Ub(t, n, a, s, o, u, _, d, f, y, j);
        } catch (T) {
          if ((S(A), T !== T + 0)) throw T;
          C(1, 0);
        }
      }
      function bj(t, n, a, s, o, u, _, d, f, y, j, A) {
        var T = E();
        try {
          return Nb(t, n, a, s, o, u, _, d, f, y, j, A);
        } catch (G) {
          if ((S(T), G !== G + 0)) throw G;
          C(1, 0);
        }
      }
      b("intArrayFromString", !1),
        b("intArrayToString", !1),
        (e.ccall = rn),
        b("cwrap", !1),
        b("setValue", !1),
        b("getValue", !1),
        b("allocate", !1),
        b("UTF8ArrayToString", !1),
        b("UTF8ToString", !1),
        b("stringToUTF8Array", !1),
        b("stringToUTF8", !1),
        b("lengthBytesUTF8", !1),
        b("stackTrace", !1),
        b("addOnPreRun", !1),
        b("addOnInit", !1),
        b("addOnPreMain", !1),
        b("addOnExit", !1),
        b("addOnPostRun", !1),
        b("writeStringToMemory", !1),
        b("writeArrayToMemory", !1),
        b("writeAsciiToMemory", !1),
        b("addRunDependency", !0),
        b("removeRunDependency", !0),
        b("FS_createFolder", !1),
        b("FS_createPath", !0),
        b("FS_createDataFile", !0),
        b("FS_createPreloadedFile", !0),
        b("FS_createLazyFile", !0),
        b("FS_createLink", !1),
        b("FS_createDevice", !0),
        b("FS_unlink", !0),
        b("getLEB", !1),
        b("getFunctionTables", !1),
        b("alignFunctionTables", !1),
        b("registerFunctions", !1),
        b("addFunction", !1),
        b("removeFunction", !1),
        b("prettyPrint", !1),
        b("dynCall", !1),
        b("getCompilerSetting", !1),
        b("print", !1),
        b("printErr", !1),
        b("getTempRet0", !1),
        b("setTempRet0", !1),
        b("callMain", !1),
        b("abort", !1),
        b("keepRuntimeAlive", !1),
        b("ptrToString", !1),
        b("zeroMemory", !1),
        b("stringToNewUTF8", !1),
        b("emscripten_realloc_buffer", !1),
        b("ENV", !1),
        b("ERRNO_CODES", !1),
        b("ERRNO_MESSAGES", !1),
        b("setErrNo", !1),
        b("inetPton4", !1),
        b("inetNtop4", !1),
        b("inetPton6", !1),
        b("inetNtop6", !1),
        b("readSockaddr", !1),
        b("writeSockaddr", !1),
        b("DNS", !1),
        b("getHostByName", !1),
        b("Protocols", !1),
        b("Sockets", !1),
        b("getRandomDevice", !1),
        b("traverseStack", !1),
        b("UNWIND_CACHE", !1),
        b("convertPCtoSourceLocation", !1),
        b("readAsmConstArgsArray", !1),
        b("readAsmConstArgs", !1),
        b("mainThreadEM_ASM", !1),
        b("jstoi_q", !1),
        b("jstoi_s", !1),
        b("getExecutableName", !1),
        b("listenOnce", !1),
        b("autoResumeAudioContext", !1),
        b("dynCallLegacy", !1),
        b("getDynCaller", !1),
        b("dynCall", !1),
        b("handleException", !1),
        b("runtimeKeepalivePush", !1),
        b("runtimeKeepalivePop", !1),
        b("callUserCallback", !1),
        b("maybeExit", !1),
        b("safeSetTimeout", !1),
        b("asmjsMangle", !1),
        b("asyncLoad", !1),
        b("alignMemory", !1),
        b("mmapAlloc", !1),
        b("reallyNegative", !1),
        b("unSign", !1),
        b("reSign", !1),
        b("formatString", !1),
        b("PATH", !1),
        b("PATH_FS", !1),
        b("SYSCALLS", !1),
        b("getSocketFromFD", !1),
        b("getSocketAddress", !1),
        b("JSEvents", !1),
        b("registerKeyEventCallback", !1),
        b("specialHTMLTargets", !1),
        b("maybeCStringToJsString", !1),
        b("findEventTarget", !1),
        b("findCanvasEventTarget", !1),
        b("getBoundingClientRect", !1),
        b("fillMouseEventData", !1),
        b("registerMouseEventCallback", !1),
        b("registerWheelEventCallback", !1),
        b("registerUiEventCallback", !1),
        b("registerFocusEventCallback", !1),
        b("fillDeviceOrientationEventData", !1),
        b("registerDeviceOrientationEventCallback", !1),
        b("fillDeviceMotionEventData", !1),
        b("registerDeviceMotionEventCallback", !1),
        b("screenOrientation", !1),
        b("fillOrientationChangeEventData", !1),
        b("registerOrientationChangeEventCallback", !1),
        b("fillFullscreenChangeEventData", !1),
        b("registerFullscreenChangeEventCallback", !1),
        b("registerRestoreOldStyle", !1),
        b("hideEverythingExceptGivenElement", !1),
        b("restoreHiddenElements", !1),
        b("setLetterbox", !1),
        b("currentFullscreenStrategy", !1),
        b("restoreOldWindowedStyle", !1),
        b("softFullscreenResizeWebGLRenderTarget", !1),
        b("doRequestFullscreen", !1),
        b("fillPointerlockChangeEventData", !1),
        b("registerPointerlockChangeEventCallback", !1),
        b("registerPointerlockErrorEventCallback", !1),
        b("requestPointerLock", !1),
        b("fillVisibilityChangeEventData", !1),
        b("registerVisibilityChangeEventCallback", !1),
        b("registerTouchEventCallback", !1),
        b("fillGamepadEventData", !1),
        b("registerGamepadEventCallback", !1),
        b("registerBeforeUnloadEventCallback", !1),
        b("fillBatteryEventData", !1),
        b("battery", !1),
        b("registerBatteryEventCallback", !1),
        b("setCanvasElementSize", !1),
        b("getCanvasElementSize", !1),
        b("demangle", !1),
        b("demangleAll", !1),
        b("jsStackTrace", !1),
        b("stackTrace", !1),
        b("getEnvStrings", !1),
        b("checkWasiClock", !1),
        b("flush_NO_FILESYSTEM", !1),
        b("writeI53ToI64", !1),
        b("writeI53ToI64Clamped", !1),
        b("writeI53ToI64Signaling", !1),
        b("writeI53ToU64Clamped", !1),
        b("writeI53ToU64Signaling", !1),
        b("readI53FromI64", !1),
        b("readI53FromU64", !1),
        b("convertI32PairToI53", !1),
        b("convertU32PairToI53", !1),
        b("dlopenMissingError", !1),
        b("setImmediateWrapped", !1),
        b("clearImmediateWrapped", !1),
        b("polyfillSetImmediate", !1),
        b("uncaughtExceptionCount", !1),
        b("exceptionLast", !1),
        b("exceptionCaught", !1),
        b("ExceptionInfo", !1),
        b("exception_addRef", !1),
        b("exception_decRef", !1),
        b("formatException", !1),
        b("Browser", !1),
        b("setMainLoop", !1),
        b("wget", !1),
        b("tempFixedLengthArray", !1),
        b("miniTempWebGLFloatBuffers", !1),
        b("heapObjectForWebGLType", !1),
        b("heapAccessShiftForWebGLHeap", !1),
        b("GL", !1),
        b("emscriptenWebGLGet", !1),
        b("computeUnpackAlignedImageSize", !1),
        b("emscriptenWebGLGetTexPixelData", !1),
        b("emscriptenWebGLGetUniform", !1),
        b("webglGetUniformLocation", !1),
        b("webglPrepareUniformLocationsBeforeFirstUse", !1),
        b("webglGetLeftBracePos", !1),
        b("emscriptenWebGLGetVertexAttrib", !1),
        b("writeGLArray", !1),
        b("AL", !1),
        b("SDL_unicode", !1),
        b("SDL_ttfContext", !1),
        b("SDL_audio", !1),
        b("SDL", !1),
        b("SDL_gfx", !1),
        b("GLUT", !1),
        b("EGL", !1),
        b("GLFW_Window", !1),
        b("GLFW", !1),
        b("GLEW", !1),
        b("IDBStore", !1),
        b("runAndAbortIfError", !1),
        b("SOCKFS", !1),
        b("FS", !1),
        b("warnOnce", !1),
        b("stackSave", !1),
        b("stackRestore", !1),
        b("stackAlloc", !1),
        b("AsciiToString", !1),
        b("stringToAscii", !1),
        b("UTF16ToString", !1),
        b("stringToUTF16", !1),
        b("lengthBytesUTF16", !1),
        b("UTF32ToString", !1),
        b("stringToUTF32", !1),
        b("lengthBytesUTF32", !1),
        b("allocateUTF8", !1),
        b("allocateUTF8OnStack", !1),
        (e.writeStackCookie = dn),
        (e.checkStackCookie = St),
        ee("ALLOC_NORMAL", !1),
        ee("ALLOC_STACK", !1);
      var or;
      function cr(t) {
        (this.name = "ExitStatus"),
          (this.message = "Program terminated with exit(" + t + ")"),
          (this.status = t);
      }
      var pj = !1;
      At = function t() {
        or || Is(), or || (At = t);
      };
      function yj(t) {
        M(
          it == 0,
          'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'
        ),
          M(
            hi.length == 0,
            "cannot call main when preRun functions remain to be called"
          );
        var n = e._main;
        t = t || [];
        var a = t.length + 1,
          s = Ni((a + 1) * 4);
        N((s >>> 2) * 4, cn(O), 4);
        for (var o = 1; o < a; o++)
          N((((s >> 2) + o) >>> 0) * 4, cn(t[o - 1]), 4);
        N((((s >> 2) + a) >>> 0) * 4, 0, 4);
        try {
          var u = n(a, s);
          return jj(u, !0), u;
        } catch (_) {
          return da(_);
        } finally {
          pj = !0;
        }
      }
      function gj() {
        Cs(), dn();
      }
      function Is(t) {
        if (((t = t || w), it > 0 || (gj(), Qr(), it > 0))) return;
        function n() {
          or ||
            ((or = !0),
            (e.calledRun = !0),
            !Et &&
              (Xr(),
              Jr(),
              l(e),
              e.onRuntimeInitialized && e.onRuntimeInitialized(),
              jl && yj(t),
              ea()));
        }
        e.setStatus
          ? (e.setStatus("Running..."),
            setTimeout(function () {
              setTimeout(function () {
                e.setStatus("");
              }, 1),
                n();
            }, 1))
          : n(),
          St();
      }
      e.run = Is;
      function vj() {
        var t = de,
          n = Y,
          a = !1;
        de = Y = (o) => {
          a = !0;
        };
        try {
          var s = zn;
          s && s();
        } catch {}
        (de = t),
          (Y = n),
          a &&
            (ge(
              "stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."
            ),
            ge(
              "(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"
            ));
      }
      function jj(t, n) {
        if (((Ft = t), vj(), bi() && !n)) {
          var a =
            "program exited (with status: " +
            t +
            "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
          p(a), Y(a);
        }
        mj(t);
      }
      function mj(t) {
        (Ft = t), bi() || (e.onExit && e.onExit(t), (Et = !0)), P(t, new cr(t));
      }
      if (e.preInit)
        for (
          typeof e.preInit == "function" && (e.preInit = [e.preInit]);
          e.preInit.length > 0;

        )
          e.preInit.pop()();
      var jl = !0;
      return e.noInitialRun && (jl = !1), Is(), i.ready;
    };
  })(),
  Cl = Tj;
var Tt = Pn(require("apache-arrow")),
  dr = class {
    constructor(i, e) {
      (this._bindings = i), (this._conn = e);
    }
    close() {
      this._bindings.disconnect(this._conn);
    }
    useUnsafe(i) {
      return i(this._bindings, this._conn);
    }
    query(i) {
      let e = this._bindings.runQuery(this._conn, i),
        l = Tt.RecordBatchReader.from(e);
      return (
        console.assert(l.isSync()), console.assert(l.isFile()), new Tt.Table(l)
      );
    }
    async send(i) {
      let e = this._bindings.startPendingQuery(this._conn, i);
      for (; e == null; )
        e = await new Promise((m, w) => {
          try {
            m(this._bindings.pollPendingQuery(this._conn));
          } catch (O) {
            w(O);
          }
        });
      let l = new fr(this._bindings, this._conn, e),
        p = Tt.RecordBatchReader.from(l);
      return console.assert(p.isSync()), console.assert(p.isStream()), p;
    }
    cancelSent() {
      return this._bindings.cancelPendingQuery(this._conn);
    }
    getTableNames(i) {
      return this._bindings.getTableNames(this._conn, i);
    }
    prepare(i) {
      let e = this._bindings.createPrepared(this._conn, i);
      return new Ms(this._bindings, this._conn, e);
    }
    createScalarFunction(i, e, l) {
      this._bindings.createScalarFunction(this._conn, i, e, l);
    }
    insertArrowTable(i, e) {
      let l = Tt.tableToIPC(i, "stream");
      this.insertArrowFromIPCStream(l, e);
    }
    insertArrowFromIPCStream(i, e) {
      this._bindings.insertArrowFromIPCStream(this._conn, i, e);
    }
    insertCSVFromPath(i, e) {
      this._bindings.insertCSVFromPath(this._conn, i, e);
    }
    insertJSONFromPath(i, e) {
      this._bindings.insertJSONFromPath(this._conn, i, e);
    }
  },
  fr = class {
    constructor(i, e, l) {
      this.bindings = i;
      this.conn = e;
      this.header = l;
      (this._first = !0), (this._depleted = !1);
    }
    next() {
      if (this._first)
        return (this._first = !1), { done: !1, value: this.header };
      if (this._depleted) return { done: !0, value: null };
      let i = this.bindings.fetchQueryResults(this.conn);
      return (
        (this._depleted = i.length == 0), { done: this._depleted, value: i }
      );
    }
    [Symbol.iterator]() {
      return this;
    }
  },
  Ms = class {
    constructor(i, e, l) {
      (this.bindings = i), (this.connectionId = e), (this.statementId = l);
    }
    close() {
      this.bindings.closePrepared(this.connectionId, this.statementId);
    }
    query(...i) {
      let e = this.bindings.runPrepared(this.connectionId, this.statementId, i),
        l = Tt.RecordBatchReader.from(e);
      return (
        console.assert(l.isSync()), console.assert(l.isFile()), new Tt.Table(l)
      );
    }
    send(...i) {
      let e = this.bindings.sendPrepared(
          this.connectionId,
          this.statementId,
          i
        ),
        l = new fr(this.bindings, this.connectionId, e),
        p = Tt.RecordBatchReader.from(l);
      return console.assert(p.isSync()), console.assert(p.isStream()), p;
    }
  };
var Ol = new TextEncoder(),
  Al = new TextDecoder("utf-8");
function Us(r, i, e) {
  let l = Ol.encode(e),
    p = r._malloc(l.byteLength),
    m = r.HEAPU8.subarray(p, p + l.byteLength);
  m.set(l),
    (r.HEAPF64[(i >> 3) + 0] = 1),
    (r.HEAPF64[(i >> 3) + 1] = p),
    (r.HEAPF64[(i >> 3) + 2] = m.byteLength);
}
function Fs(r) {
  switch (r) {
    case "UINT8":
    case "INT8":
      return 1;
    case "INT32":
    case "FLOAT":
      return 4;
    case "INT64":
    case "UINT64":
    case "DOUBLE":
    case "VARCHAR":
      return 8;
    default:
      return 0;
  }
}
function Ls(r, i, e, l) {
  let p = r.HEAPU8.subarray(i, i + l * Fs(e));
  switch (e) {
    case "UINT8":
      return new Uint8Array(p.buffer, p.byteOffset, l);
    case "INT8":
      return new Int8Array(p.buffer, p.byteOffset, l);
    case "INT32":
      return new Int32Array(p.buffer, p.byteOffset, l);
    case "FLOAT":
      return new Float32Array(p.buffer, p.byteOffset, l);
    case "DOUBLE":
      return new Float64Array(p.buffer, p.byteOffset, l);
    case "VARCHAR":
      return new Float64Array(p.buffer, p.byteOffset, l);
    default:
      return new Array(0);
  }
}
function Rl(r, i, e) {
  let l = r.HEAPU8.subarray(i, i + e);
  return new Uint8Array(l.buffer, l.byteOffset, e);
}
function hr(r, i, e) {
  let l = r.HEAPU8.subarray(i, i + e * 8);
  return new Float64Array(l.buffer, l.byteOffset, e);
}
function Tl(r, i, e, l, p, m, w, O) {
  try {
    let P = r._udfFunctions.get(l);
    if (!P) {
      Us(i, e, "Unknown UDF with id: " + l);
      return;
    }
    let B = Al.decode(i.HEAPU8.subarray(p, p + m)),
      D = JSON.parse(B),
      q = hr(i, w, O / 8),
      x = (ne) => {
        var F;
        let Ce = null;
        switch (
          (ne.validityBuffer !== void 0 &&
            (Ce = Rl(i, q[ne.validityBuffer], D.rows)),
          ne.physicalType)
        ) {
          case "VARCHAR": {
            if (ne.dataBuffer === null || ne.dataBuffer === void 0)
              throw new Error(
                "malformed data view, expected data buffer for VARCHAR argument"
              );
            if (ne.lengthBuffer === null || ne.lengthBuffer === void 0)
              throw new Error(
                "malformed data view, expected data length buffer for VARCHAR argument"
              );
            let je = Ls(i, q[ne.dataBuffer], ne.physicalType, D.rows),
              ye = [],
              Ue = hr(i, q[ne.lengthBuffer], D.rows);
            for (let I = 0; I < D.rows; ++I) {
              if (Ce != null && !Ce[I]) {
                ye.push(null);
                continue;
              }
              let L = i.HEAPU8.subarray(je[I], je[I] + Ue[I]),
                ge = Al.decode(L);
              ye.push(ge);
            }
            return (I) => ye[I];
          }
          case "STRUCT": {
            let je = {},
              ye = [];
            for (
              let Ue = 0;
              Ue < (((F = ne.children) == null ? void 0 : F.length) || 0);
              ++Ue
            ) {
              let I = ne.children[Ue],
                L = x(I);
              ye.push((ge) => {
                je[I.name] = L(ge);
              });
            }
            return Ce != null
              ? (Ue) => {
                  if (!Ce[Ue]) return null;
                  for (let I of ye) I(Ue);
                  return je;
                }
              : (Ue) => {
                  for (let I of ye) I(Ue);
                  return je;
                };
          }
          default: {
            if (ne.dataBuffer === void 0)
              throw new Error(
                "malformed data view, expected data buffer for argument of type: " +
                  ne.physicalType
              );
            let je = Ls(i, q[ne.dataBuffer], ne.physicalType, D.rows);
            return Ce != null
              ? (ye) => (Ce[ye] ? je[ye] : null)
              : (ye) => je[ye];
          }
        }
      },
      ie = [];
    for (let ne = 0; ne < D.args.length; ++ne) ie.push(x(D.args[ne]));
    let X = D.rows * Fs(D.ret.physicalType),
      J = i._malloc(X),
      ce = Ls(i, J, D.ret.physicalType, D.rows),
      le = i._malloc(D.rows),
      Ae = Rl(i, le, D.rows);
    if (ce.length == 0 || Ae.length == 0) {
      Us(i, e, "Can't create physical arrays for result");
      return;
    }
    let Ee = ce;
    D.ret.physicalType == "VARCHAR" && (Ee = new Array(D.rows));
    let xe = [];
    for (let ne = 0; ne < D.args.length; ++ne) xe.push(null);
    for (let ne = 0; ne < D.rows; ++ne) {
      for (let F = 0; F < D.args.length; ++F) xe[F] = ie[F](ne);
      let Ce = P.func(...xe);
      (Ee[ne] = Ce), (Ae[ne] = Ce == null ? 0 : 1);
    }
    let _e = 0;
    switch (D.ret.physicalType) {
      case "VARCHAR": {
        let ne = new Array(0);
        _e = i._malloc(D.rows * Fs("DOUBLE"));
        let Ce = hr(i, _e, D.rows),
          F = 0;
        for (let I = 0; I < D.rows; ++I) {
          let L = Ol.encode(Ee[I] || "");
          ne.push(L), (Ce[I] = L.length), (F += L.length);
        }
        let je = i._malloc(F),
          ye = i.HEAPU8.subarray(je, je + F),
          Ue = 0;
        for (let I = 0; I < D.rows; ++I) {
          ce[I] = Ue;
          let L = ne[I];
          ye.subarray(Ue, Ue + L.length).set(L), (Ue += L.length);
        }
      }
    }
    let Se = 3 * 8,
      de = i._malloc(Se),
      Y = hr(i, de, 3);
    (Y[0] = J),
      (Y[1] = le),
      (Y[2] = _e),
      (i.HEAPF64[(e >> 3) + 0] = 0),
      (i.HEAPF64[(e >> 3) + 1] = de),
      (i.HEAPF64[(e >> 3) + 2] = 0);
  } catch (P) {
    Us(i, e, P.toString());
  }
}
function Dj() {
  let r = new TextDecoder();
  return (i) => (
    typeof SharedArrayBuffer < "u" &&
      i.buffer instanceof SharedArrayBuffer &&
      (i = new Uint8Array(i)),
    r.decode(i)
  );
}
var ki = Dj();
function Me(r, i) {
  r.ccall("duckdb_web_fail_with", null, ["string"], [i]);
}
function Ei(r, i, e) {
  let l = r.HEAPU8.subarray(i, i + e),
    p = new Uint8Array(new ArrayBuffer(l.byteLength));
  return p.set(l), p;
}
function me(r, i, e) {
  return ki(r.HEAPU8.subarray(i, i + e));
}
function Re(r, i, e, l) {
  let p = r.stackSave(),
    m = r.stackAlloc(3 * 8);
  e.unshift("number"), l.unshift(m), r.ccall(i, null, e, l);
  let w = r.HEAPF64[(m >> 3) + 0],
    O = r.HEAPF64[(m >> 3) + 1],
    P = r.HEAPF64[(m >> 3) + 2];
  return r.stackRestore(p), [w, O, P];
}
function Fe(r) {
  r.ccall("duckdb_web_clear_response", null, [], []);
}
var br = class {
  constructor(i) {
    let e = new Float64Array(i.buffer, i.byteOffset, i.byteLength / 8),
      l = new Uint8Array(new ArrayBuffer(i.byteLength));
    l.set(i.subarray(7 * 8)),
      (this.totalFileReadsCold = e[0]),
      (this.totalFileReadsAhead = e[1]),
      (this.totalFileReadsCached = e[2]),
      (this.totalFileWrites = e[3]),
      (this.totalPageAccesses = e[4]),
      (this.totalPageLoads = e[5]),
      (this.blockSize = e[6]),
      (this.blockStats = l);
  }
  getBlockStats(i, e) {
    return (
      (e = e || {
        file_reads_cold: 0,
        file_reads_ahead: 0,
        file_reads_cached: 0,
        file_writes: 0,
        page_accesses: 0,
        page_loads: 0,
      }),
      (e.file_writes = this.blockStats[i * 3 + 0] & 15),
      (e.file_reads_cold = this.blockStats[i * 3 + 0] >> 4),
      (e.file_reads_ahead = this.blockStats[i * 3 + 1] & 15),
      (e.file_reads_cached = this.blockStats[i * 3 + 1] >> 4),
      (e.page_accesses = this.blockStats[i * 3 + 1] & 15),
      (e.page_loads = this.blockStats[i * 3 + 1] >> 4),
      e
    );
  }
};
var Ij = new TextEncoder();
var pr = class {
  constructor(i, e) {
    this._instance = null;
    this._initPromise = null;
    this._initPromiseResolver = () => {};
    this.onInstantiationProgress = [];
    (this._logger = i), (this._runtime = e), (this._nextUDFId = 1);
  }
  get logger() {
    return this._logger;
  }
  get mod() {
    return this._instance;
  }
  get pthread() {
    return this.mod.PThread || null;
  }
  async instantiate(i = (e) => {}) {
    return this._instance != null
      ? this
      : (this._initPromise != null &&
          (this.onInstantiationProgress.push(i), await this._initPromise),
        (this._initPromise = new Promise((e) => {
          this._initPromiseResolver = e;
        })),
        (this.onInstantiationProgress = [i]),
        (this._instance = await this.instantiateImpl({
          print: console.log.bind(console),
          printErr: console.log.bind(console),
          onRuntimeInitialized: this._initPromiseResolver,
        })),
        await this._initPromise,
        (this._initPromise = null),
        (this.onInstantiationProgress = this.onInstantiationProgress.filter(
          (e) => e != i
        )),
        this);
  }
  open(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_open",
      ["string"],
      [JSON.stringify(i)]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    Fe(this.mod);
  }
  reset() {
    let [i, e, l] = Re(this.mod, "duckdb_web_reset", [], []);
    if (i !== 0) throw new Error(me(this.mod, e, l));
    Fe(this.mod);
  }
  getVersion() {
    let [i, e, l] = Re(this.mod, "duckdb_web_get_version", [], []);
    if (i !== 0) throw new Error(me(this.mod, e, l));
    let p = me(this.mod, e, l);
    return Fe(this.mod), p;
  }
  getFeatureFlags() {
    return this.mod.ccall("duckdb_web_get_feature_flags", "number", [], []);
  }
  tokenize(i) {
    let [e, l, p] = Re(this.mod, "duckdb_web_tokenize", ["string"], [i]);
    if (e !== 0) throw new Error(me(this.mod, l, p));
    let m = me(this.mod, l, p);
    return Fe(this.mod), JSON.parse(m);
  }
  connect() {
    let i = this.mod.ccall("duckdb_web_connect", "number", [], []);
    return new dr(this, i);
  }
  disconnect(i) {
    if (
      (this.mod.ccall("duckdb_web_disconnect", null, ["number"], [i]),
      this.pthread)
    )
      for (let e of [
        ...this.pthread.runningWorkers,
        ...this.pthread.unusedWorkers,
      ])
        e.postMessage({ cmd: "dropUDFFunctions", connectionId: i });
  }
  runQuery(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_query_run",
      ["number", "string"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    let w = Ei(this.mod, p, m);
    return Fe(this.mod), w;
  }
  startPendingQuery(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_pending_query_start",
      ["number", "string"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    if (p == 0) return null;
    let w = Ei(this.mod, p, m);
    return Fe(this.mod), w;
  }
  pollPendingQuery(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_pending_query_poll",
      ["number"],
      [i]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    if (l == 0) return null;
    let m = Ei(this.mod, l, p);
    return Fe(this.mod), m;
  }
  cancelPendingQuery(i) {
    return this.mod.ccall(
      "duckdb_web_pending_query_cancel",
      "boolean",
      ["number"],
      [i]
    );
  }
  fetchQueryResults(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_query_fetch_results",
      ["number"],
      [i]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    let m = Ei(this.mod, l, p);
    return Fe(this.mod), m;
  }
  getTableNames(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_get_tablenames",
      ["number", "string"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    let w = me(this.mod, p, m);
    return Fe(this.mod), JSON.parse(w);
  }
  createScalarFunction(i, e, l, p) {
    let m = { functionId: this._nextUDFId, name: e, returnType: Hi(l) },
      w = {
        functionId: m.functionId,
        connectionId: i,
        name: e,
        returnType: l,
        func: p,
      };
    this._nextUDFId += 1;
    let [O, P, B] = Re(
      this.mod,
      "duckdb_web_udf_scalar_create",
      ["number", "string"],
      [i, JSON.stringify(m)]
    );
    if (O !== 0) throw new Error(me(this.mod, P, B));
    if (
      (Fe(this.mod),
      (globalThis.DUCKDB_RUNTIME._udfFunctions = (
        globalThis.DUCKDB_RUNTIME._udfFunctions || new Map()
      ).set(w.functionId, w)),
      this.pthread)
    )
      for (let D of [
        ...this.pthread.runningWorkers,
        ...this.pthread.unusedWorkers,
      ])
        D.postMessage({ cmd: "registerUDFFunction", udf: w });
  }
  createPrepared(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_prepared_create",
      ["number", "string"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    return Fe(this.mod), p;
  }
  closePrepared(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_prepared_close",
      ["number", "number"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    Fe(this.mod);
  }
  runPrepared(i, e, l) {
    let [p, m, w] = Re(
      this.mod,
      "duckdb_web_prepared_run",
      ["number", "number", "string"],
      [i, e, JSON.stringify(l)]
    );
    if (p !== 0) throw new Error(me(this.mod, m, w));
    let O = Ei(this.mod, m, w);
    return Fe(this.mod), O;
  }
  sendPrepared(i, e, l) {
    let [p, m, w] = Re(
      this.mod,
      "duckdb_web_prepared_send",
      ["number", "number", "string"],
      [i, e, JSON.stringify(l)]
    );
    if (p !== 0) throw new Error(me(this.mod, m, w));
    let O = Ei(this.mod, m, w);
    return Fe(this.mod), O;
  }
  insertArrowFromIPCStream(i, e, l) {
    if (e.length == 0) return;
    let p = this.mod._malloc(e.length);
    this.mod.HEAPU8.subarray(p, p + e.length).set(e);
    let w = l ? JSON.stringify(l) : "",
      [O, P, B] = Re(
        this.mod,
        "duckdb_web_insert_arrow_from_ipc_stream",
        ["number", "number", "number", "string"],
        [i, p, e.length, w]
      );
    if (O !== 0) throw new Error(me(this.mod, P, B));
  }
  insertCSVFromPath(i, e, l) {
    if (l.columns !== void 0) {
      l.columnsFlat = [];
      for (let B in l.columns) l.columnsFlat.push(ur(B, l.columns[B]));
    }
    let p = { ...l };
    (p.columns = p.columnsFlat), delete p.columnsFlat;
    let m = JSON.stringify(p),
      [w, O, P] = Re(
        this.mod,
        "duckdb_web_insert_csv_from_path",
        ["number", "string", "string"],
        [i, e, m]
      );
    if (w !== 0) throw new Error(me(this.mod, O, P));
  }
  insertJSONFromPath(i, e, l) {
    if (l.columns !== void 0) {
      l.columnsFlat = [];
      for (let B in l.columns) l.columnsFlat.push(ur(B, l.columns[B]));
    }
    let p = { ...l };
    (p.columns = p.columnsFlat), delete p.columnsFlat;
    let m = JSON.stringify(p),
      [w, O, P] = Re(
        this.mod,
        "duckdb_web_insert_json_from_path",
        ["number", "string", "string"],
        [i, e, m]
      );
    if (w !== 0) throw new Error(me(this.mod, O, P));
  }
  globFiles(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_fs_glob_file_infos",
      ["string"],
      [i]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    let m = me(this.mod, l, p);
    Fe(this.mod);
    let w = JSON.parse(m);
    return w ?? [];
  }
  registerFileURL(i, e) {
    e === void 0 && (e = i);
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_fs_register_file_url",
      ["string", "string", "number"],
      [i, e, -1]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    Fe(this.mod);
  }
  registerFileText(i, e) {
    let l = Ij.encode(e);
    this.registerFileBuffer(i, l);
  }
  registerFileBuffer(i, e) {
    let l = this.mod._malloc(e.length);
    this.mod.HEAPU8.subarray(l, l + e.length).set(e);
    let [m, w, O] = Re(
      this.mod,
      "duckdb_web_fs_register_file_buffer",
      ["string", "number", "number"],
      [i, l, e.length]
    );
    if (m !== 0) throw new Error(me(this.mod, w, O));
    Fe(this.mod);
  }
  registerFileHandle(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_fs_register_file_url",
      ["string", "string", "number"],
      [i, i, -1]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    if (
      (Fe(this.mod),
      (globalThis.DUCKDB_RUNTIME._files = (
        globalThis.DUCKDB_RUNTIME._files || new Map()
      ).set(i, e)),
      this.pthread)
    ) {
      for (let w of this.pthread.runningWorkers)
        w.postMessage({
          cmd: "registerFileHandle",
          fileName: i,
          fileHandle: e,
        });
      for (let w of this.pthread.unusedWorkers)
        w.postMessage({ cmd: "dropFileHandle", fileName: i });
    }
  }
  dropFile(i) {
    let [e, l, p] = Re(this.mod, "duckdb_web_fs_drop_file", ["string"], [i]);
    if (e !== 0) throw new Error(me(this.mod, l, p));
    Fe(this.mod);
  }
  dropFiles() {
    let [i, e, l] = Re(this.mod, "duckdb_web_fs_drop_files", [], []);
    if (i !== 0) throw new Error(me(this.mod, e, l));
    Fe(this.mod);
  }
  flushFiles() {
    this.mod.ccall("duckdb_web_flush_files", null, [], []);
  }
  copyFileToPath(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_copy_file_to_path",
      ["string", "string"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
    Fe(this.mod);
  }
  copyFileToBuffer(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_copy_file_to_buffer",
      ["string"],
      [i]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    let m = this.mod.HEAPU8.subarray(l, l + p),
      w = new Uint8Array(m.length);
    return w.set(m), Fe(this.mod), w;
  }
  collectFileStatistics(i, e) {
    let [l, p, m] = Re(
      this.mod,
      "duckdb_web_collect_file_stats",
      ["string", "boolean"],
      [i, e]
    );
    if (l !== 0) throw new Error(me(this.mod, p, m));
  }
  exportFileStatistics(i) {
    let [e, l, p] = Re(
      this.mod,
      "duckdb_web_export_file_stats",
      ["string"],
      [i]
    );
    if (e !== 0) throw new Error(me(this.mod, l, p));
    return new br(this.mod.HEAPU8.subarray(l, l + p));
  }
};
var Pl = Pn(require("fs")),
  yr = class extends pr {
    constructor(e, l, p, m) {
      super(e, l);
      (this.mainModulePath = p), (this.pthreadWorkerPath = m);
    }
    locateFile(e, l) {
      if (e.endsWith(".wasm")) return this.mainModulePath;
      if (e.endsWith(".worker.js")) {
        if (!this.pthreadWorkerPath)
          throw new Error("Missing DuckDB worker path!");
        return this.pthreadWorkerPath;
      }
      throw new Error(
        `WASM instantiation requested unexpected file: prefix=${l} path=${e}`
      );
    }
    instantiateWasm(e, l) {
      globalThis.DUCKDB_RUNTIME = {};
      for (let m of Object.getOwnPropertyNames(this._runtime))
        m != "constructor" &&
          (globalThis.DUCKDB_RUNTIME[m] = Object.getOwnPropertyDescriptor(
            this._runtime,
            m
          ).value);
      let p = Pl.default.readFileSync(this.mainModulePath);
      return (
        WebAssembly.instantiate(p, e).then((m) => {
          l(m.instance, m.module);
        }),
        []
      );
    }
    instantiateImpl(e) {
      return Cl({ ...e, instantiateWasm: this.instantiateWasm.bind(this) });
    }
  };
var gr = class extends yr {
  constructor(i, e, l, p = null) {
    super(i, e, l, p);
  }
  instantiateImpl(i) {
    return El({
      ...i,
      instantiateWasm: this.instantiateWasm.bind(this),
      locateFile: this.locateFile.bind(this),
    });
  }
};
var rt = Pn(require("fs"));
var vd = Pn(gd());
var tt = {
  _files: new Map(),
  _fileInfoCache: new Map(),
  _udfFunctions: new Map(),
  resolveFileInfo(r, i) {
    try {
      let e = tt._fileInfoCache.get(i),
        [l, p, m] = Re(
          r,
          "duckdb_web_fs_get_file_info_by_id",
          ["number", "number"],
          [i, (e == null ? void 0 : e.cacheEpoch) || 0]
        );
      if (l !== 0) return Me(r, me(r, p, m)), null;
      if (m === 0) return e;
      let w = me(r, p, m);
      Fe(r);
      let O = JSON.parse(w);
      return O == null ? null : (tt._fileInfoCache.set(i, O), O);
    } catch (e) {
      return Me(r, e.toString()), null;
    }
  },
  testPlatformFeature: (r, i) => {
    switch (i) {
      case 1:
        return typeof BigInt64Array < "u";
      default:
        return console.warn(`test for unknown feature: ${i}`), !1;
    }
  },
  openFile(r, i, e) {
    try {
      tt._fileInfoCache.delete(i);
      let l = tt.resolveFileInfo(r, i);
      switch (l == null ? void 0 : l.dataProtocol) {
        case 1: {
          l.dataNativeFd = rt.default.openSync(
            l.dataUrl,
            rt.default.constants.O_CREAT | rt.default.constants.O_RDWR,
            rt.default.constants.S_IRUSR | rt.default.constants.S_IWUSR
          );
          let [p, m, w] = Re(
            r,
            "duckdb_web_fs_set_file_descriptor",
            ["number", "number"],
            [i, l.dataNativeFd]
          );
          p !== 0 && Me(r, me(r, m, w));
          let O = rt.default.fstatSync(l.dataNativeFd).size,
            P = r._malloc(2 * 8);
          return (
            (r.HEAPF64[(P >> 3) + 0] = +O), (r.HEAPF64[(P >> 3) + 1] = 0), P
          );
        }
        case 3:
        case 4:
          Me(r, "Not implemented");
      }
    } catch (l) {
      Me(r, l.toString());
    }
    return 0;
  },
  syncFile: (r, i) => {},
  closeFile: (r, i) => {
    try {
      let e = tt.resolveFileInfo(r, i);
      switch (
        (tt._fileInfoCache.delete(i), e == null ? void 0 : e.dataProtocol)
      ) {
        case 1: {
          if (!e.dataNativeFd)
            return Me(r, `File ${i} is missing a file descriptor`), 0;
          rt.default.closeSync(e.dataNativeFd), (e.dataNativeFd = null);
          break;
        }
        case 3:
        case 4:
          Me(r, "Not implemented");
      }
    } catch (e) {
      Me(r, e.toString());
    }
    return 0;
  },
  truncateFile: (r, i, e) => {
    try {
      let l = tt.resolveFileInfo(r, i);
      switch (l == null ? void 0 : l.dataProtocol) {
        case 1: {
          if (!l.dataNativeFd)
            return Me(r, `File ${i} is missing a file descriptor`), 0;
          rt.default.truncateSync(l.dataUrl, e);
          break;
        }
        case 3:
        case 4:
          Me(r, "Not implemented");
      }
    } catch (l) {
      Me(r, l.toString());
    }
    return 0;
  },
  readFile: (r, i, e, l, p) => {
    try {
      let m = tt.resolveFileInfo(r, i);
      switch (m == null ? void 0 : m.dataProtocol) {
        case 1:
          return m.dataNativeFd
            ? rt.default.readSync(m.dataNativeFd, r.HEAPU8, e, l, p)
            : (Me(r, `File ${i} is missing a file descriptor`), 0);
        case 3:
        case 4:
          Me(r, "Not implemented");
      }
    } catch (m) {
      Me(r, m.toString());
    }
    return 0;
  },
  writeFile: (r, i, e, l, p) => {
    try {
      let m = tt.resolveFileInfo(r, i);
      switch (m == null ? void 0 : m.dataProtocol) {
        case 1: {
          if (!m.dataNativeFd)
            return Me(r, `File ${i} is missing a file descriptor`), 0;
          let w = r.HEAPU8.subarray(e, e + l);
          return rt.default.writeSync(m.dataNativeFd, w, 0, w.length, p);
        }
      }
    } catch (m) {
      Me(r, m.toString());
    }
    return 0;
  },
  getLastFileModificationTime: (r, i) => {
    try {
      let e = tt.resolveFileInfo(r, i);
      switch (e == null ? void 0 : e.dataProtocol) {
        case 1:
          return e.dataNativeFd
            ? rt.default.fstatSync(e.dataNativeFd).mtime.getTime()
            : (Me(r, `File ${i} is missing a file descriptor`), 0);
        case 3:
        case 4:
          Me(r, "Not implemented");
      }
    } catch (e) {
      Me(r, e.toString());
    }
    return 0;
  },
  checkDirectory: (r, i, e) => {
    try {
      let l = ki(r.HEAPU8.subarray(i, i + e));
      return rt.default.existsSync(l);
    } catch (l) {
      return Me(r, l.toString()), !1;
    }
  },
  createDirectory: (r, i, e) => {
    try {
      let l = ki(r.HEAPU8.subarray(i, i + e));
      return rt.default.mkdirSync(l);
    } catch (l) {
      return Me(r, l.toString()), 0;
    }
  },
  removeDirectory: (r, i, e) => {
    try {
      let l = ki(r.HEAPU8.subarray(i, i + e));
      return rt.default.rmdirSync(l);
    } catch (l) {
      return Me(r, l.toString()), 0;
    }
  },
  listDirectoryEntries: (r, i, e) => (Me(r, "Not Implemented"), !1),
  glob: (r, i, e) => {
    try {
      let l = me(r, i, e),
        p = vd.sync([l], { dot: !0 });
      for (let m of p)
        r.ccall("duckdb_web_fs_glob_add_path", null, ["string"], [m]);
    } catch (l) {
      return Me(r, l.toString()), 0;
    }
  },
  moveFile: (r, i, e, l, p) => {
    var P, B;
    let m = me(r, i, e),
      w = me(r, l, p),
      O = (P = tt._files) == null ? void 0 : P.get(m);
    O !== void 0 && (tt._files.delete(O), tt._files.set(w, O));
    for (let [D, q] of ((B = tt._fileInfoCache) == null
      ? void 0
      : B.entries()) || [])
      if (q.dataUrl == m) {
        tt._fileInfoCache.delete(D);
        break;
      }
    return !0;
  },
  checkFile: (r, i, e) => {
    try {
      let l = ki(r.HEAPU8.subarray(i, i + e));
      return rt.default.existsSync(l);
    } catch (l) {
      return Me(r, l.toString()), !1;
    }
  },
  removeFile: (r, i, e) => {
    try {
      let l = ki(r.HEAPU8.subarray(i, i + e));
      return rt.default.rmSync(l);
    } catch (l) {
      return Me(r, l.toString()), 0;
    }
  },
  callScalarUDF: (r, i, e, l, p, m, w) => {
    Tl(tt, r, i, e, l, p, m, w);
  },
};
var vc = class extends _r {
  postMessage(i, e) {
    globalThis.postMessage(i, e);
  }
  async instantiate(i, e, l) {
    return await new gr(this, tt, i, e).instantiate(l);
  }
};
function jd() {
  let r = new vc();
  globalThis.onmessage = async (i) => {
    await r.onMessage(i.data);
  };
}
jd();
0 && (module.exports = { registerWorker });
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvYXJyYXkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvZXJybm8uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvZnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvcGF0aC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaXMtZXh0Z2xvYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaXMtZ2xvYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2xvYi1wYXJlbnQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvdXRpbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvc3RyaW5naWZ5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9pcy1udW1iZXIvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RvLXJlZ2V4LXJhbmdlL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9maWxsLXJhbmdlL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbXBpbGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvZXhwYW5kLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi9wYXJzZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJhY2VzL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi91dGlscy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9zY2FuLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3BhcnNlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3BpY29tYXRjaC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9taWNyb21hdGNoL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3V0aWxzL3BhdHRlcm4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21lcmdlMi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9zdHJlYW0uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvc3RyaW5nLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3V0aWxzL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L21hbmFnZXJzL3Rhc2tzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L21hbmFnZXJzL3BhdHRlcm5zLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9wcm92aWRlcnMvYXN5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnN0YXQvb3V0L3Byb3ZpZGVycy9zeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9hZGFwdGVycy9mcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc3RhdC9vdXQvc2V0dGluZ3MuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnN0YXQvb3V0L2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWV1ZS1taWNyb3Rhc2svaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J1bi1wYXJhbGxlbC9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC91dGlscy9mcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvdXRpbHMvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3Byb3ZpZGVycy9jb21tb24uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvcHJvdmlkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L2FkYXB0ZXJzL2ZzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9zZXR0aW5ncy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JldXNpZnkvcmV1c2lmeS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdHEvcXVldWUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLndhbGsvb3V0L3JlYWRlcnMvY29tbW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9yZWFkZXJzL3JlYWRlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcmVhZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcHJvdmlkZXJzL2FzeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9wcm92aWRlcnMvc3RyZWFtLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9yZWFkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLndhbGsvb3V0L3Byb3ZpZGVycy9zeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9zZXR0aW5ncy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcmVhZGVycy9yZWFkZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcmVhZGVycy9zdHJlYW0uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL21hdGNoZXJzL21hdGNoZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL21hdGNoZXJzL3BhcnRpYWwuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL2ZpbHRlcnMvZGVlcC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvZmlsdGVycy9lbnRyeS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvZmlsdGVycy9lcnJvci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvdHJhbnNmb3JtZXJzL2VudHJ5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9wcm92aWRlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvYXN5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL3N0cmVhbS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9yZWFkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvc2V0dGluZ3MuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvaW5kZXguanMiLCAiLi4vc3JjL3RhcmdldHMvZHVja2RiLW5vZGUtZWgud29ya2VyLnRzIiwgIi4uL3NyYy9qc29uX3R5cGVkZWYudHMiLCAiLi4vc3JjL3BhcmFsbGVsL3dvcmtlcl9kaXNwYXRjaGVyLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9kdWNrZGItZWguanMiLCAiLi4vc3JjL2JpbmRpbmdzL2R1Y2tkYi1tdnAuanMiLCAiLi4vc3JjL2JpbmRpbmdzL2Nvbm5lY3Rpb24udHMiLCAiLi4vc3JjL2JpbmRpbmdzL3VkZl9ydW50aW1lLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9ydW50aW1lLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9maWxlX3N0YXRzLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9iaW5kaW5nc19iYXNlLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9iaW5kaW5nc19ub2RlX2Jhc2UudHMiLCAiLi4vc3JjL2JpbmRpbmdzL2JpbmRpbmdzX25vZGVfZWgudHMiLCAiLi4vc3JjL2JpbmRpbmdzL3J1bnRpbWVfbm9kZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNwbGl0V2hlbiA9IGV4cG9ydHMuZmxhdHRlbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGZsYXR0ZW4oaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKChjb2xsZWN0aW9uLCBpdGVtKSA9PiBbXS5jb25jYXQoY29sbGVjdGlvbiwgaXRlbSksIFtdKTtcbn1cbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG5mdW5jdGlvbiBzcGxpdFdoZW4oaXRlbXMsIHByZWRpY2F0ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtbXV07XG4gICAgbGV0IGdyb3VwSW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICBpZiAocHJlZGljYXRlKGl0ZW0pKSB7XG4gICAgICAgICAgICBncm91cEluZGV4Kys7XG4gICAgICAgICAgICByZXN1bHRbZ3JvdXBJbmRleF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFtncm91cEluZGV4XS5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnNwbGl0V2hlbiA9IHNwbGl0V2hlbjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNFbm9lbnRDb2RlRXJyb3IgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0Vub2VudENvZGVFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvci5jb2RlID09PSAnRU5PRU5UJztcbn1cbmV4cG9ydHMuaXNFbm9lbnRDb2RlRXJyb3IgPSBpc0Vub2VudENvZGVFcnJvcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRGlyZW50RnJvbVN0YXRzID0gdm9pZCAwO1xuY2xhc3MgRGlyZW50RnJvbVN0YXRzIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBzdGF0cykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmlzQmxvY2tEZXZpY2UgPSBzdGF0cy5pc0Jsb2NrRGV2aWNlLmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzQ2hhcmFjdGVyRGV2aWNlID0gc3RhdHMuaXNDaGFyYWN0ZXJEZXZpY2UuYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNEaXJlY3RvcnkgPSBzdGF0cy5pc0RpcmVjdG9yeS5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc0ZJRk8gPSBzdGF0cy5pc0ZJRk8uYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNGaWxlID0gc3RhdHMuaXNGaWxlLmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzU29ja2V0ID0gc3RhdHMuaXNTb2NrZXQuYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNTeW1ib2xpY0xpbmsgPSBzdGF0cy5pc1N5bWJvbGljTGluay5iaW5kKHN0YXRzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpIHtcbiAgICByZXR1cm4gbmV3IERpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cyk7XG59XG5leHBvcnRzLmNyZWF0ZURpcmVudEZyb21TdGF0cyA9IGNyZWF0ZURpcmVudEZyb21TdGF0cztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVtb3ZlTGVhZGluZ0RvdFNlZ21lbnQgPSBleHBvcnRzLmVzY2FwZSA9IGV4cG9ydHMubWFrZUFic29sdXRlID0gZXhwb3J0cy51bml4aWZ5ID0gdm9pZCAwO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgTEVBRElOR19ET1RfU0VHTUVOVF9DSEFSQUNURVJTX0NPVU5UID0gMjsgLy8gLi8gb3IgLlxcXFxcbmNvbnN0IFVORVNDQVBFRF9HTE9CX1NZTUJPTFNfUkUgPSAvKFxcXFw/KShbKCkqP1tcXF17fH1dfF4hfFshK0BdKD89XFwoKSkvZztcbi8qKlxuICogRGVzaWduZWQgdG8gd29yayBvbmx5IHdpdGggc2ltcGxlIHBhdGhzOiBgZGlyXFxcXGZpbGVgLlxuICovXG5mdW5jdGlvbiB1bml4aWZ5KGZpbGVwYXRoKSB7XG4gICAgcmV0dXJuIGZpbGVwYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbn1cbmV4cG9ydHMudW5peGlmeSA9IHVuaXhpZnk7XG5mdW5jdGlvbiBtYWtlQWJzb2x1dGUoY3dkLCBmaWxlcGF0aCkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUoY3dkLCBmaWxlcGF0aCk7XG59XG5leHBvcnRzLm1ha2VBYnNvbHV0ZSA9IG1ha2VBYnNvbHV0ZTtcbmZ1bmN0aW9uIGVzY2FwZShwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZShVTkVTQ0FQRURfR0xPQl9TWU1CT0xTX1JFLCAnXFxcXCQyJyk7XG59XG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcbmZ1bmN0aW9uIHJlbW92ZUxlYWRpbmdEb3RTZWdtZW50KGVudHJ5KSB7XG4gICAgLy8gV2UgZG8gbm90IHVzZSBgc3RhcnRzV2l0aGAgYmVjYXVzZSB0aGlzIGlzIDEweCBzbG93ZXIgdGhhbiBjdXJyZW50IGltcGxlbWVudGF0aW9uIGZvciBzb21lIGNhc2VzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXN0cmluZy1zdGFydHMtZW5kcy13aXRoXG4gICAgaWYgKGVudHJ5LmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgIGNvbnN0IHNlY29uZENoYXJhY3RlcnkgPSBlbnRyeS5jaGFyQXQoMSk7XG4gICAgICAgIGlmIChzZWNvbmRDaGFyYWN0ZXJ5ID09PSAnLycgfHwgc2Vjb25kQ2hhcmFjdGVyeSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICByZXR1cm4gZW50cnkuc2xpY2UoTEVBRElOR19ET1RfU0VHTUVOVF9DSEFSQUNURVJTX0NPVU5UKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW50cnk7XG59XG5leHBvcnRzLnJlbW92ZUxlYWRpbmdEb3RTZWdtZW50ID0gcmVtb3ZlTGVhZGluZ0RvdFNlZ21lbnQ7XG4iLCAiLyohXG4gKiBpcy1leHRnbG9iIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pcy1leHRnbG9iPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE2LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRXh0Z2xvYihzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IHN0ciA9PT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSAvKFxcXFwpLnwoW0A/ISsqXVxcKC4qXFwpKS9nLmV4ZWMoc3RyKSkpIHtcbiAgICBpZiAobWF0Y2hbMl0pIHJldHVybiB0cnVlO1xuICAgIHN0ciA9IHN0ci5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwgIi8qIVxuICogaXMtZ2xvYiA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtZ2xvYj5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxudmFyIGlzRXh0Z2xvYiA9IHJlcXVpcmUoJ2lzLWV4dGdsb2InKTtcbnZhciBjaGFycyA9IHsgJ3snOiAnfScsICcoJzogJyknLCAnWyc6ICddJ307XG52YXIgc3RyaWN0Q2hlY2sgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKHN0clswXSA9PT0gJyEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBpcGVJbmRleCA9IC0yO1xuICB2YXIgY2xvc2VTcXVhcmVJbmRleCA9IC0yO1xuICB2YXIgY2xvc2VDdXJseUluZGV4ID0gLTI7XG4gIHZhciBjbG9zZVBhcmVuSW5kZXggPSAtMjtcbiAgdmFyIGJhY2tTbGFzaEluZGV4ID0gLTI7XG4gIHdoaWxlIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBpZiAoc3RyW2luZGV4XSA9PT0gJyonKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RyW2luZGV4ICsgMV0gPT09ICc/JyAmJiAvW1xcXS4rKV0vLnRlc3Qoc3RyW2luZGV4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChjbG9zZVNxdWFyZUluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAnWycgJiYgc3RyW2luZGV4ICsgMV0gIT09ICddJykge1xuICAgICAgaWYgKGNsb3NlU3F1YXJlSW5kZXggPCBpbmRleCkge1xuICAgICAgICBjbG9zZVNxdWFyZUluZGV4ID0gc3RyLmluZGV4T2YoJ10nLCBpbmRleCk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvc2VTcXVhcmVJbmRleCA+IGluZGV4KSB7XG4gICAgICAgIGlmIChiYWNrU2xhc2hJbmRleCA9PT0gLTEgfHwgYmFja1NsYXNoSW5kZXggPiBjbG9zZVNxdWFyZUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYmFja1NsYXNoSW5kZXggPSBzdHIuaW5kZXhPZignXFxcXCcsIGluZGV4KTtcbiAgICAgICAgaWYgKGJhY2tTbGFzaEluZGV4ID09PSAtMSB8fCBiYWNrU2xhc2hJbmRleCA+IGNsb3NlU3F1YXJlSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbG9zZUN1cmx5SW5kZXggIT09IC0xICYmIHN0cltpbmRleF0gPT09ICd7JyAmJiBzdHJbaW5kZXggKyAxXSAhPT0gJ30nKSB7XG4gICAgICBjbG9zZUN1cmx5SW5kZXggPSBzdHIuaW5kZXhPZignfScsIGluZGV4KTtcbiAgICAgIGlmIChjbG9zZUN1cmx5SW5kZXggPiBpbmRleCkge1xuICAgICAgICBiYWNrU2xhc2hJbmRleCA9IHN0ci5pbmRleE9mKCdcXFxcJywgaW5kZXgpO1xuICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VDdXJseUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xvc2VQYXJlbkluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAnKCcgJiYgc3RyW2luZGV4ICsgMV0gPT09ICc/JyAmJiAvWzohPV0vLnRlc3Qoc3RyW2luZGV4ICsgMl0pICYmIHN0cltpbmRleCArIDNdICE9PSAnKScpIHtcbiAgICAgIGNsb3NlUGFyZW5JbmRleCA9IHN0ci5pbmRleE9mKCcpJywgaW5kZXgpO1xuICAgICAgaWYgKGNsb3NlUGFyZW5JbmRleCA+IGluZGV4KSB7XG4gICAgICAgIGJhY2tTbGFzaEluZGV4ID0gc3RyLmluZGV4T2YoJ1xcXFwnLCBpbmRleCk7XG4gICAgICAgIGlmIChiYWNrU2xhc2hJbmRleCA9PT0gLTEgfHwgYmFja1NsYXNoSW5kZXggPiBjbG9zZVBhcmVuSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwaXBlSW5kZXggIT09IC0xICYmIHN0cltpbmRleF0gPT09ICcoJyAmJiBzdHJbaW5kZXggKyAxXSAhPT0gJ3wnKSB7XG4gICAgICBpZiAocGlwZUluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgcGlwZUluZGV4ID0gc3RyLmluZGV4T2YoJ3wnLCBpbmRleCk7XG4gICAgICB9XG4gICAgICBpZiAocGlwZUluZGV4ICE9PSAtMSAmJiBzdHJbcGlwZUluZGV4ICsgMV0gIT09ICcpJykge1xuICAgICAgICBjbG9zZVBhcmVuSW5kZXggPSBzdHIuaW5kZXhPZignKScsIHBpcGVJbmRleCk7XG4gICAgICAgIGlmIChjbG9zZVBhcmVuSW5kZXggPiBwaXBlSW5kZXgpIHtcbiAgICAgICAgICBiYWNrU2xhc2hJbmRleCA9IHN0ci5pbmRleE9mKCdcXFxcJywgcGlwZUluZGV4KTtcbiAgICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VQYXJlbkluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyW2luZGV4XSA9PT0gJ1xcXFwnKSB7XG4gICAgICB2YXIgb3BlbiA9IHN0cltpbmRleCArIDFdO1xuICAgICAgaW5kZXggKz0gMjtcbiAgICAgIHZhciBjbG9zZSA9IGNoYXJzW29wZW5dO1xuXG4gICAgICBpZiAoY2xvc2UpIHtcbiAgICAgICAgdmFyIG4gPSBzdHIuaW5kZXhPZihjbG9zZSwgaW5kZXgpO1xuICAgICAgICBpZiAobiAhPT0gLTEpIHtcbiAgICAgICAgICBpbmRleCA9IG4gKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHJbaW5kZXhdID09PSAnIScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnZhciByZWxheGVkQ2hlY2sgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKHN0clswXSA9PT0gJyEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIGlmICgvWyo/e30oKVtcXF1dLy50ZXN0KHN0cltpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RyW2luZGV4XSA9PT0gJ1xcXFwnKSB7XG4gICAgICB2YXIgb3BlbiA9IHN0cltpbmRleCArIDFdO1xuICAgICAgaW5kZXggKz0gMjtcbiAgICAgIHZhciBjbG9zZSA9IGNoYXJzW29wZW5dO1xuXG4gICAgICBpZiAoY2xvc2UpIHtcbiAgICAgICAgdmFyIG4gPSBzdHIuaW5kZXhPZihjbG9zZSwgaW5kZXgpO1xuICAgICAgICBpZiAobiAhPT0gLTEpIHtcbiAgICAgICAgICBpbmRleCA9IG4gKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHJbaW5kZXhdID09PSAnIScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNHbG9iKHN0ciwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0V4dGdsb2Ioc3RyKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGNoZWNrID0gc3RyaWN0Q2hlY2s7XG5cbiAgLy8gb3B0aW9uYWxseSByZWxheCBjaGVja1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA9PT0gZmFsc2UpIHtcbiAgICBjaGVjayA9IHJlbGF4ZWRDaGVjaztcbiAgfVxuXG4gIHJldHVybiBjaGVjayhzdHIpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBpc0dsb2IgPSByZXF1aXJlKCdpcy1nbG9iJyk7XG52YXIgcGF0aFBvc2l4RGlybmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5wb3NpeC5kaXJuYW1lO1xudmFyIGlzV2luMzIgPSByZXF1aXJlKCdvcycpLnBsYXRmb3JtKCkgPT09ICd3aW4zMic7XG5cbnZhciBzbGFzaCA9ICcvJztcbnZhciBiYWNrc2xhc2ggPSAvXFxcXC9nO1xudmFyIGVuY2xvc3VyZSA9IC9bXFx7XFxbXS4qW1xcfVxcXV0kLztcbnZhciBnbG9iYnkgPSAvKF58W15cXFxcXSkoW1xce1xcW118XFwoW15cXCldKyQpLztcbnZhciBlc2NhcGVkID0gL1xcXFwoW1xcIVxcKlxcP1xcfFxcW1xcXVxcKFxcKVxce1xcfV0pL2c7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmxpcEJhY2tzbGFzaGVzPXRydWVdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdsb2JQYXJlbnQoc3RyLCBvcHRzKSB7XG4gIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IGZsaXBCYWNrc2xhc2hlczogdHJ1ZSB9LCBvcHRzKTtcblxuICAvLyBmbGlwIHdpbmRvd3MgcGF0aCBzZXBhcmF0b3JzXG4gIGlmIChvcHRpb25zLmZsaXBCYWNrc2xhc2hlcyAmJiBpc1dpbjMyICYmIHN0ci5pbmRleE9mKHNsYXNoKSA8IDApIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShiYWNrc2xhc2gsIHNsYXNoKTtcbiAgfVxuXG4gIC8vIHNwZWNpYWwgY2FzZSBmb3Igc3RyaW5ncyBlbmRpbmcgaW4gZW5jbG9zdXJlIGNvbnRhaW5pbmcgcGF0aCBzZXBhcmF0b3JcbiAgaWYgKGVuY2xvc3VyZS50ZXN0KHN0cikpIHtcbiAgICBzdHIgKz0gc2xhc2g7XG4gIH1cblxuICAvLyBwcmVzZXJ2ZXMgZnVsbCBwYXRoIGluIGNhc2Ugb2YgdHJhaWxpbmcgcGF0aCBzZXBhcmF0b3JcbiAgc3RyICs9ICdhJztcblxuICAvLyByZW1vdmUgcGF0aCBwYXJ0cyB0aGF0IGFyZSBnbG9iYnlcbiAgZG8ge1xuICAgIHN0ciA9IHBhdGhQb3NpeERpcm5hbWUoc3RyKTtcbiAgfSB3aGlsZSAoaXNHbG9iKHN0cikgfHwgZ2xvYmJ5LnRlc3Qoc3RyKSk7XG5cbiAgLy8gcmVtb3ZlIGVzY2FwZSBjaGFycyBhbmQgcmV0dXJuIHJlc3VsdFxuICByZXR1cm4gc3RyLnJlcGxhY2UoZXNjYXBlZCwgJyQxJyk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5pc0ludGVnZXIgPSBudW0gPT4ge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihudW0pO1xuICB9XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJyAmJiBudW0udHJpbSgpICE9PSAnJykge1xuICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcihudW0pKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEZpbmQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlXG4gKi9cblxuZXhwb3J0cy5maW5kID0gKG5vZGUsIHR5cGUpID0+IG5vZGUubm9kZXMuZmluZChub2RlID0+IG5vZGUudHlwZSA9PT0gdHlwZSk7XG5cbi8qKlxuICogRmluZCBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGVcbiAqL1xuXG5leHBvcnRzLmV4Y2VlZHNMaW1pdCA9IChtaW4sIG1heCwgc3RlcCA9IDEsIGxpbWl0KSA9PiB7XG4gIGlmIChsaW1pdCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFleHBvcnRzLmlzSW50ZWdlcihtaW4pIHx8ICFleHBvcnRzLmlzSW50ZWdlcihtYXgpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKE51bWJlcihtYXgpIC0gTnVtYmVyKG1pbikpIC8gTnVtYmVyKHN0ZXApKSA+PSBsaW1pdDtcbn07XG5cbi8qKlxuICogRXNjYXBlIHRoZSBnaXZlbiBub2RlIHdpdGggJ1xcXFwnIGJlZm9yZSBub2RlLnZhbHVlXG4gKi9cblxuZXhwb3J0cy5lc2NhcGVOb2RlID0gKGJsb2NrLCBuID0gMCwgdHlwZSkgPT4ge1xuICBsZXQgbm9kZSA9IGJsb2NrLm5vZGVzW25dO1xuICBpZiAoIW5vZGUpIHJldHVybjtcblxuICBpZiAoKHR5cGUgJiYgbm9kZS50eXBlID09PSB0eXBlKSB8fCBub2RlLnR5cGUgPT09ICdvcGVuJyB8fCBub2RlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICBpZiAobm9kZS5lc2NhcGVkICE9PSB0cnVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gJ1xcXFwnICsgbm9kZS52YWx1ZTtcbiAgICAgIG5vZGUuZXNjYXBlZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYnJhY2Ugbm9kZSBzaG91bGQgYmUgZW5jbG9zZWQgaW4gbGl0ZXJhbCBicmFjZXNcbiAqL1xuXG5leHBvcnRzLmVuY2xvc2VCcmFjZSA9IG5vZGUgPT4ge1xuICBpZiAobm9kZS50eXBlICE9PSAnYnJhY2UnKSByZXR1cm4gZmFsc2U7XG4gIGlmICgobm9kZS5jb21tYXMgPj4gMCArIG5vZGUucmFuZ2VzID4+IDApID09PSAwKSB7XG4gICAgbm9kZS5pbnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGJyYWNlIG5vZGUgaXMgaW52YWxpZC5cbiAqL1xuXG5leHBvcnRzLmlzSW52YWxpZEJyYWNlID0gYmxvY2sgPT4ge1xuICBpZiAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoYmxvY2suaW52YWxpZCA9PT0gdHJ1ZSB8fCBibG9jay5kb2xsYXIpIHJldHVybiB0cnVlO1xuICBpZiAoKGJsb2NrLmNvbW1hcyA+PiAwICsgYmxvY2sucmFuZ2VzID4+IDApID09PSAwKSB7XG4gICAgYmxvY2suaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGJsb2NrLm9wZW4gIT09IHRydWUgfHwgYmxvY2suY2xvc2UgIT09IHRydWUpIHtcbiAgICBibG9jay5pbnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIG5vZGUgaXMgYW4gb3BlbiBvciBjbG9zZSBub2RlXG4gKi9cblxuZXhwb3J0cy5pc09wZW5PckNsb3NlID0gbm9kZSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09ICdvcGVuJyB8fCBub2RlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbm9kZS5vcGVuID09PSB0cnVlIHx8IG5vZGUuY2xvc2UgPT09IHRydWU7XG59O1xuXG4vKipcbiAqIFJlZHVjZSBhbiBhcnJheSBvZiB0ZXh0IG5vZGVzLlxuICovXG5cbmV4cG9ydHMucmVkdWNlID0gbm9kZXMgPT4gbm9kZXMucmVkdWNlKChhY2MsIG5vZGUpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ3RleHQnKSBhY2MucHVzaChub2RlLnZhbHVlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ3JhbmdlJykgbm9kZS50eXBlID0gJ3RleHQnO1xuICByZXR1cm4gYWNjO1xufSwgW10pO1xuXG4vKipcbiAqIEZsYXR0ZW4gYW4gYXJyYXlcbiAqL1xuXG5leHBvcnRzLmZsYXR0ZW4gPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgZmxhdCA9IGFyciA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlbGUgPSBhcnJbaV07XG4gICAgICBBcnJheS5pc0FycmF5KGVsZSkgPyBmbGF0KGVsZSwgcmVzdWx0KSA6IGVsZSAhPT0gdm9pZCAwICYmIHJlc3VsdC5wdXNoKGVsZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGZsYXQoYXJncyk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGFzdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBzdHJpbmdpZnkgPSAobm9kZSwgcGFyZW50ID0ge30pID0+IHtcbiAgICBsZXQgaW52YWxpZEJsb2NrID0gb3B0aW9ucy5lc2NhcGVJbnZhbGlkICYmIHV0aWxzLmlzSW52YWxpZEJyYWNlKHBhcmVudCk7XG4gICAgbGV0IGludmFsaWROb2RlID0gbm9kZS5pbnZhbGlkID09PSB0cnVlICYmIG9wdGlvbnMuZXNjYXBlSW52YWxpZCA9PT0gdHJ1ZTtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgaWYgKChpbnZhbGlkQmxvY2sgfHwgaW52YWxpZE5vZGUpICYmIHV0aWxzLmlzT3Blbk9yQ2xvc2Uobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICdcXFxcJyArIG5vZGUudmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkIG9mIG5vZGUubm9kZXMpIHtcbiAgICAgICAgb3V0cHV0ICs9IHN0cmluZ2lmeShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShhc3QpO1xufTtcblxuIiwgIi8qIVxuICogaXMtbnVtYmVyIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pcy1udW1iZXI+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihudW0pIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG51bSAtIG51bSA9PT0gMDtcbiAgfVxuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycgJiYgbnVtLnRyaW0oKSAhPT0gJycpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlID8gTnVtYmVyLmlzRmluaXRlKCtudW0pIDogaXNGaW5pdGUoK251bSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsICIvKiFcbiAqIHRvLXJlZ2V4LXJhbmdlIDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXRjaC90by1yZWdleC1yYW5nZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc051bWJlciA9IHJlcXVpcmUoJ2lzLW51bWJlcicpO1xuXG5jb25zdCB0b1JlZ2V4UmFuZ2UgPSAobWluLCBtYXgsIG9wdGlvbnMpID0+IHtcbiAgaWYgKGlzTnVtYmVyKG1pbikgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9SZWdleFJhbmdlOiBleHBlY3RlZCB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBudW1iZXInKTtcbiAgfVxuXG4gIGlmIChtYXggPT09IHZvaWQgMCB8fCBtaW4gPT09IG1heCkge1xuICAgIHJldHVybiBTdHJpbmcobWluKTtcbiAgfVxuXG4gIGlmIChpc051bWJlcihtYXgpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvUmVnZXhSYW5nZTogZXhwZWN0ZWQgdGhlIHNlY29uZCBhcmd1bWVudCB0byBiZSBhIG51bWJlci4nKTtcbiAgfVxuXG4gIGxldCBvcHRzID0geyByZWxheFplcm9zOiB0cnVlLCAuLi5vcHRpb25zIH07XG4gIGlmICh0eXBlb2Ygb3B0cy5zdHJpY3RaZXJvcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0cy5yZWxheFplcm9zID0gb3B0cy5zdHJpY3RaZXJvcyA9PT0gZmFsc2U7XG4gIH1cblxuICBsZXQgcmVsYXggPSBTdHJpbmcob3B0cy5yZWxheFplcm9zKTtcbiAgbGV0IHNob3J0aGFuZCA9IFN0cmluZyhvcHRzLnNob3J0aGFuZCk7XG4gIGxldCBjYXB0dXJlID0gU3RyaW5nKG9wdHMuY2FwdHVyZSk7XG4gIGxldCB3cmFwID0gU3RyaW5nKG9wdHMud3JhcCk7XG4gIGxldCBjYWNoZUtleSA9IG1pbiArICc6JyArIG1heCArICc9JyArIHJlbGF4ICsgc2hvcnRoYW5kICsgY2FwdHVyZSArIHdyYXA7XG5cbiAgaWYgKHRvUmVnZXhSYW5nZS5jYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICByZXR1cm4gdG9SZWdleFJhbmdlLmNhY2hlW2NhY2hlS2V5XS5yZXN1bHQ7XG4gIH1cblxuICBsZXQgYSA9IE1hdGgubWluKG1pbiwgbWF4KTtcbiAgbGV0IGIgPSBNYXRoLm1heChtaW4sIG1heCk7XG5cbiAgaWYgKE1hdGguYWJzKGEgLSBiKSA9PT0gMSkge1xuICAgIGxldCByZXN1bHQgPSBtaW4gKyAnfCcgKyBtYXg7XG4gICAgaWYgKG9wdHMuY2FwdHVyZSkge1xuICAgICAgcmV0dXJuIGAoJHtyZXN1bHR9KWA7XG4gICAgfVxuICAgIGlmIChvcHRzLndyYXAgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gYCg/OiR7cmVzdWx0fSlgO1xuICB9XG5cbiAgbGV0IGlzUGFkZGVkID0gaGFzUGFkZGluZyhtaW4pIHx8IGhhc1BhZGRpbmcobWF4KTtcbiAgbGV0IHN0YXRlID0geyBtaW4sIG1heCwgYSwgYiB9O1xuICBsZXQgcG9zaXRpdmVzID0gW107XG4gIGxldCBuZWdhdGl2ZXMgPSBbXTtcblxuICBpZiAoaXNQYWRkZWQpIHtcbiAgICBzdGF0ZS5pc1BhZGRlZCA9IGlzUGFkZGVkO1xuICAgIHN0YXRlLm1heExlbiA9IFN0cmluZyhzdGF0ZS5tYXgpLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChhIDwgMCkge1xuICAgIGxldCBuZXdNaW4gPSBiIDwgMCA/IE1hdGguYWJzKGIpIDogMTtcbiAgICBuZWdhdGl2ZXMgPSBzcGxpdFRvUGF0dGVybnMobmV3TWluLCBNYXRoLmFicyhhKSwgc3RhdGUsIG9wdHMpO1xuICAgIGEgPSBzdGF0ZS5hID0gMDtcbiAgfVxuXG4gIGlmIChiID49IDApIHtcbiAgICBwb3NpdGl2ZXMgPSBzcGxpdFRvUGF0dGVybnMoYSwgYiwgc3RhdGUsIG9wdHMpO1xuICB9XG5cbiAgc3RhdGUubmVnYXRpdmVzID0gbmVnYXRpdmVzO1xuICBzdGF0ZS5wb3NpdGl2ZXMgPSBwb3NpdGl2ZXM7XG4gIHN0YXRlLnJlc3VsdCA9IGNvbGxhdGVQYXR0ZXJucyhuZWdhdGl2ZXMsIHBvc2l0aXZlcywgb3B0cyk7XG5cbiAgaWYgKG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLnJlc3VsdCA9IGAoJHtzdGF0ZS5yZXN1bHR9KWA7XG4gIH0gZWxzZSBpZiAob3B0cy53cmFwICE9PSBmYWxzZSAmJiAocG9zaXRpdmVzLmxlbmd0aCArIG5lZ2F0aXZlcy5sZW5ndGgpID4gMSkge1xuICAgIHN0YXRlLnJlc3VsdCA9IGAoPzoke3N0YXRlLnJlc3VsdH0pYDtcbiAgfVxuXG4gIHRvUmVnZXhSYW5nZS5jYWNoZVtjYWNoZUtleV0gPSBzdGF0ZTtcbiAgcmV0dXJuIHN0YXRlLnJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIGNvbGxhdGVQYXR0ZXJucyhuZWcsIHBvcywgb3B0aW9ucykge1xuICBsZXQgb25seU5lZ2F0aXZlID0gZmlsdGVyUGF0dGVybnMobmVnLCBwb3MsICctJywgZmFsc2UsIG9wdGlvbnMpIHx8IFtdO1xuICBsZXQgb25seVBvc2l0aXZlID0gZmlsdGVyUGF0dGVybnMocG9zLCBuZWcsICcnLCBmYWxzZSwgb3B0aW9ucykgfHwgW107XG4gIGxldCBpbnRlcnNlY3RlZCA9IGZpbHRlclBhdHRlcm5zKG5lZywgcG9zLCAnLT8nLCB0cnVlLCBvcHRpb25zKSB8fCBbXTtcbiAgbGV0IHN1YnBhdHRlcm5zID0gb25seU5lZ2F0aXZlLmNvbmNhdChpbnRlcnNlY3RlZCkuY29uY2F0KG9ubHlQb3NpdGl2ZSk7XG4gIHJldHVybiBzdWJwYXR0ZXJucy5qb2luKCd8Jyk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0VG9SYW5nZXMobWluLCBtYXgpIHtcbiAgbGV0IG5pbmVzID0gMTtcbiAgbGV0IHplcm9zID0gMTtcblxuICBsZXQgc3RvcCA9IGNvdW50TmluZXMobWluLCBuaW5lcyk7XG4gIGxldCBzdG9wcyA9IG5ldyBTZXQoW21heF0pO1xuXG4gIHdoaWxlIChtaW4gPD0gc3RvcCAmJiBzdG9wIDw9IG1heCkge1xuICAgIHN0b3BzLmFkZChzdG9wKTtcbiAgICBuaW5lcyArPSAxO1xuICAgIHN0b3AgPSBjb3VudE5pbmVzKG1pbiwgbmluZXMpO1xuICB9XG5cbiAgc3RvcCA9IGNvdW50WmVyb3MobWF4ICsgMSwgemVyb3MpIC0gMTtcblxuICB3aGlsZSAobWluIDwgc3RvcCAmJiBzdG9wIDw9IG1heCkge1xuICAgIHN0b3BzLmFkZChzdG9wKTtcbiAgICB6ZXJvcyArPSAxO1xuICAgIHN0b3AgPSBjb3VudFplcm9zKG1heCArIDEsIHplcm9zKSAtIDE7XG4gIH1cblxuICBzdG9wcyA9IFsuLi5zdG9wc107XG4gIHN0b3BzLnNvcnQoY29tcGFyZSk7XG4gIHJldHVybiBzdG9wcztcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgcmFuZ2UgdG8gYSByZWdleCBwYXR0ZXJuXG4gKiBAcGFyYW0ge051bWJlcn0gYHN0YXJ0YFxuICogQHBhcmFtIHtOdW1iZXJ9IGBzdG9wYFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHJhbmdlVG9QYXR0ZXJuKHN0YXJ0LCBzdG9wLCBvcHRpb25zKSB7XG4gIGlmIChzdGFydCA9PT0gc3RvcCkge1xuICAgIHJldHVybiB7IHBhdHRlcm46IHN0YXJ0LCBjb3VudDogW10sIGRpZ2l0czogMCB9O1xuICB9XG5cbiAgbGV0IHppcHBlZCA9IHppcChzdGFydCwgc3RvcCk7XG4gIGxldCBkaWdpdHMgPSB6aXBwZWQubGVuZ3RoO1xuICBsZXQgcGF0dGVybiA9ICcnO1xuICBsZXQgY291bnQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzOyBpKyspIHtcbiAgICBsZXQgW3N0YXJ0RGlnaXQsIHN0b3BEaWdpdF0gPSB6aXBwZWRbaV07XG5cbiAgICBpZiAoc3RhcnREaWdpdCA9PT0gc3RvcERpZ2l0KSB7XG4gICAgICBwYXR0ZXJuICs9IHN0YXJ0RGlnaXQ7XG5cbiAgICB9IGVsc2UgaWYgKHN0YXJ0RGlnaXQgIT09ICcwJyB8fCBzdG9wRGlnaXQgIT09ICc5Jykge1xuICAgICAgcGF0dGVybiArPSB0b0NoYXJhY3RlckNsYXNzKHN0YXJ0RGlnaXQsIHN0b3BEaWdpdCwgb3B0aW9ucyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cblxuICBpZiAoY291bnQpIHtcbiAgICBwYXR0ZXJuICs9IG9wdGlvbnMuc2hvcnRoYW5kID09PSB0cnVlID8gJ1xcXFxkJyA6ICdbMC05XSc7XG4gIH1cblxuICByZXR1cm4geyBwYXR0ZXJuLCBjb3VudDogW2NvdW50XSwgZGlnaXRzIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0VG9QYXR0ZXJucyhtaW4sIG1heCwgdG9rLCBvcHRpb25zKSB7XG4gIGxldCByYW5nZXMgPSBzcGxpdFRvUmFuZ2VzKG1pbiwgbWF4KTtcbiAgbGV0IHRva2VucyA9IFtdO1xuICBsZXQgc3RhcnQgPSBtaW47XG4gIGxldCBwcmV2O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG1heCA9IHJhbmdlc1tpXTtcbiAgICBsZXQgb2JqID0gcmFuZ2VUb1BhdHRlcm4oU3RyaW5nKHN0YXJ0KSwgU3RyaW5nKG1heCksIG9wdGlvbnMpO1xuICAgIGxldCB6ZXJvcyA9ICcnO1xuXG4gICAgaWYgKCF0b2suaXNQYWRkZWQgJiYgcHJldiAmJiBwcmV2LnBhdHRlcm4gPT09IG9iai5wYXR0ZXJuKSB7XG4gICAgICBpZiAocHJldi5jb3VudC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHByZXYuY291bnQucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHByZXYuY291bnQucHVzaChvYmouY291bnRbMF0pO1xuICAgICAgcHJldi5zdHJpbmcgPSBwcmV2LnBhdHRlcm4gKyB0b1F1YW50aWZpZXIocHJldi5jb3VudCk7XG4gICAgICBzdGFydCA9IG1heCArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rLmlzUGFkZGVkKSB7XG4gICAgICB6ZXJvcyA9IHBhZFplcm9zKG1heCwgdG9rLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBvYmouc3RyaW5nID0gemVyb3MgKyBvYmoucGF0dGVybiArIHRvUXVhbnRpZmllcihvYmouY291bnQpO1xuICAgIHRva2Vucy5wdXNoKG9iaik7XG4gICAgc3RhcnQgPSBtYXggKyAxO1xuICAgIHByZXYgPSBvYmo7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJQYXR0ZXJucyhhcnIsIGNvbXBhcmlzb24sIHByZWZpeCwgaW50ZXJzZWN0aW9uLCBvcHRpb25zKSB7XG4gIGxldCByZXN1bHQgPSBbXTtcblxuICBmb3IgKGxldCBlbGUgb2YgYXJyKSB7XG4gICAgbGV0IHsgc3RyaW5nIH0gPSBlbGU7XG5cbiAgICAvLyBvbmx5IHB1c2ggaWYgX2JvdGhfIGFyZSBuZWdhdGl2ZS4uLlxuICAgIGlmICghaW50ZXJzZWN0aW9uICYmICFjb250YWlucyhjb21wYXJpc29uLCAnc3RyaW5nJywgc3RyaW5nKSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJlZml4ICsgc3RyaW5nKTtcbiAgICB9XG5cbiAgICAvLyBvciBfYm90aF8gYXJlIHBvc2l0aXZlXG4gICAgaWYgKGludGVyc2VjdGlvbiAmJiBjb250YWlucyhjb21wYXJpc29uLCAnc3RyaW5nJywgc3RyaW5nKSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJlZml4ICsgc3RyaW5nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBaaXAgc3RyaW5nc1xuICovXG5cbmZ1bmN0aW9uIHppcChhLCBiKSB7XG4gIGxldCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSBhcnIucHVzaChbYVtpXSwgYltpXV0pO1xuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPiBiID8gMSA6IGIgPiBhID8gLTEgOiAwO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhhcnIsIGtleSwgdmFsKSB7XG4gIHJldHVybiBhcnIuc29tZShlbGUgPT4gZWxlW2tleV0gPT09IHZhbCk7XG59XG5cbmZ1bmN0aW9uIGNvdW50TmluZXMobWluLCBsZW4pIHtcbiAgcmV0dXJuIE51bWJlcihTdHJpbmcobWluKS5zbGljZSgwLCAtbGVuKSArICc5Jy5yZXBlYXQobGVuKSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50WmVyb3MoaW50ZWdlciwgemVyb3MpIHtcbiAgcmV0dXJuIGludGVnZXIgLSAoaW50ZWdlciAlIE1hdGgucG93KDEwLCB6ZXJvcykpO1xufVxuXG5mdW5jdGlvbiB0b1F1YW50aWZpZXIoZGlnaXRzKSB7XG4gIGxldCBbc3RhcnQgPSAwLCBzdG9wID0gJyddID0gZGlnaXRzO1xuICBpZiAoc3RvcCB8fCBzdGFydCA+IDEpIHtcbiAgICByZXR1cm4gYHske3N0YXJ0ICsgKHN0b3AgPyAnLCcgKyBzdG9wIDogJycpfX1gO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gdG9DaGFyYWN0ZXJDbGFzcyhhLCBiLCBvcHRpb25zKSB7XG4gIHJldHVybiBgWyR7YX0keyhiIC0gYSA9PT0gMSkgPyAnJyA6ICctJ30ke2J9XWA7XG59XG5cbmZ1bmN0aW9uIGhhc1BhZGRpbmcoc3RyKSB7XG4gIHJldHVybiAvXi0/KDArKVxcZC8udGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiBwYWRaZXJvcyh2YWx1ZSwgdG9rLCBvcHRpb25zKSB7XG4gIGlmICghdG9rLmlzUGFkZGVkKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbGV0IGRpZmYgPSBNYXRoLmFicyh0b2subWF4TGVuIC0gU3RyaW5nKHZhbHVlKS5sZW5ndGgpO1xuICBsZXQgcmVsYXggPSBvcHRpb25zLnJlbGF4WmVyb3MgIT09IGZhbHNlO1xuXG4gIHN3aXRjaCAoZGlmZikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAnJztcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gcmVsYXggPyAnMD8nIDogJzAnO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiByZWxheCA/ICcwezAsMn0nIDogJzAwJztcbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gcmVsYXggPyBgMHswLCR7ZGlmZn19YCA6IGAweyR7ZGlmZn19YDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDYWNoZVxuICovXG5cbnRvUmVnZXhSYW5nZS5jYWNoZSA9IHt9O1xudG9SZWdleFJhbmdlLmNsZWFyQ2FjaGUgPSAoKSA9PiAodG9SZWdleFJhbmdlLmNhY2hlID0ge30pO1xuXG4vKipcbiAqIEV4cG9zZSBgdG9SZWdleFJhbmdlYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdG9SZWdleFJhbmdlO1xuIiwgIi8qIVxuICogZmlsbC1yYW5nZSA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvZmlsbC1yYW5nZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgdG9SZWdleFJhbmdlID0gcmVxdWlyZSgndG8tcmVnZXgtcmFuZ2UnKTtcblxuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG5cbmNvbnN0IHRyYW5zZm9ybSA9IHRvTnVtYmVyID0+IHtcbiAgcmV0dXJuIHZhbHVlID0+IHRvTnVtYmVyID09PSB0cnVlID8gTnVtYmVyKHZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59O1xuXG5jb25zdCBpc1ZhbGlkVmFsdWUgPSB2YWx1ZSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlICE9PSAnJyk7XG59O1xuXG5jb25zdCBpc051bWJlciA9IG51bSA9PiBOdW1iZXIuaXNJbnRlZ2VyKCtudW0pO1xuXG5jb25zdCB6ZXJvcyA9IGlucHV0ID0+IHtcbiAgbGV0IHZhbHVlID0gYCR7aW5wdXR9YDtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGlmICh2YWx1ZVswXSA9PT0gJy0nKSB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIGZhbHNlO1xuICB3aGlsZSAodmFsdWVbKytpbmRleF0gPT09ICcwJyk7XG4gIHJldHVybiBpbmRleCA+IDA7XG59O1xuXG5jb25zdCBzdHJpbmdpZnkgPSAoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvcHRpb25zLnN0cmluZ2lmeSA9PT0gdHJ1ZTtcbn07XG5cbmNvbnN0IHBhZCA9IChpbnB1dCwgbWF4TGVuZ3RoLCB0b051bWJlcikgPT4ge1xuICBpZiAobWF4TGVuZ3RoID4gMCkge1xuICAgIGxldCBkYXNoID0gaW5wdXRbMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICAgIGlmIChkYXNoKSBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIGlucHV0ID0gKGRhc2ggKyBpbnB1dC5wYWRTdGFydChkYXNoID8gbWF4TGVuZ3RoIC0gMSA6IG1heExlbmd0aCwgJzAnKSk7XG4gIH1cbiAgaWYgKHRvTnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBTdHJpbmcoaW5wdXQpO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG5cbmNvbnN0IHRvTWF4TGVuID0gKGlucHV0LCBtYXhMZW5ndGgpID0+IHtcbiAgbGV0IG5lZ2F0aXZlID0gaW5wdXRbMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICBpZiAobmVnYXRpdmUpIHtcbiAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIG1heExlbmd0aC0tO1xuICB9XG4gIHdoaWxlIChpbnB1dC5sZW5ndGggPCBtYXhMZW5ndGgpIGlucHV0ID0gJzAnICsgaW5wdXQ7XG4gIHJldHVybiBuZWdhdGl2ZSA/ICgnLScgKyBpbnB1dCkgOiBpbnB1dDtcbn07XG5cbmNvbnN0IHRvU2VxdWVuY2UgPSAocGFydHMsIG9wdGlvbnMpID0+IHtcbiAgcGFydHMubmVnYXRpdmVzLnNvcnQoKGEsIGIpID0+IGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwKTtcbiAgcGFydHMucG9zaXRpdmVzLnNvcnQoKGEsIGIpID0+IGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwKTtcblxuICBsZXQgcHJlZml4ID0gb3B0aW9ucy5jYXB0dXJlID8gJycgOiAnPzonO1xuICBsZXQgcG9zaXRpdmVzID0gJyc7XG4gIGxldCBuZWdhdGl2ZXMgPSAnJztcbiAgbGV0IHJlc3VsdDtcblxuICBpZiAocGFydHMucG9zaXRpdmVzLmxlbmd0aCkge1xuICAgIHBvc2l0aXZlcyA9IHBhcnRzLnBvc2l0aXZlcy5qb2luKCd8Jyk7XG4gIH1cblxuICBpZiAocGFydHMubmVnYXRpdmVzLmxlbmd0aCkge1xuICAgIG5lZ2F0aXZlcyA9IGAtKCR7cHJlZml4fSR7cGFydHMubmVnYXRpdmVzLmpvaW4oJ3wnKX0pYDtcbiAgfVxuXG4gIGlmIChwb3NpdGl2ZXMgJiYgbmVnYXRpdmVzKSB7XG4gICAgcmVzdWx0ID0gYCR7cG9zaXRpdmVzfXwke25lZ2F0aXZlc31gO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHBvc2l0aXZlcyB8fCBuZWdhdGl2ZXM7XG4gIH1cblxuICBpZiAob3B0aW9ucy53cmFwKSB7XG4gICAgcmV0dXJuIGAoJHtwcmVmaXh9JHtyZXN1bHR9KWA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgdG9SYW5nZSA9IChhLCBiLCBpc051bWJlcnMsIG9wdGlvbnMpID0+IHtcbiAgaWYgKGlzTnVtYmVycykge1xuICAgIHJldHVybiB0b1JlZ2V4UmFuZ2UoYSwgYiwgeyB3cmFwOiBmYWxzZSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIGxldCBzdGFydCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYSk7XG4gIGlmIChhID09PSBiKSByZXR1cm4gc3RhcnQ7XG5cbiAgbGV0IHN0b3AgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGIpO1xuICByZXR1cm4gYFske3N0YXJ0fS0ke3N0b3B9XWA7XG59O1xuXG5jb25zdCB0b1JlZ2V4ID0gKHN0YXJ0LCBlbmQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RhcnQpKSB7XG4gICAgbGV0IHdyYXAgPSBvcHRpb25zLndyYXAgPT09IHRydWU7XG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgICByZXR1cm4gd3JhcCA/IGAoJHtwcmVmaXh9JHtzdGFydC5qb2luKCd8Jyl9KWAgOiBzdGFydC5qb2luKCd8Jyk7XG4gIH1cbiAgcmV0dXJuIHRvUmVnZXhSYW5nZShzdGFydCwgZW5kLCBvcHRpb25zKTtcbn07XG5cbmNvbnN0IHJhbmdlRXJyb3IgPSAoLi4uYXJncykgPT4ge1xuICByZXR1cm4gbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgcmFuZ2UgYXJndW1lbnRzOiAnICsgdXRpbC5pbnNwZWN0KC4uLmFyZ3MpKTtcbn07XG5cbmNvbnN0IGludmFsaWRSYW5nZSA9IChzdGFydCwgZW5kLCBvcHRpb25zKSA9PiB7XG4gIGlmIChvcHRpb25zLnN0cmljdFJhbmdlcyA9PT0gdHJ1ZSkgdGhyb3cgcmFuZ2VFcnJvcihbc3RhcnQsIGVuZF0pO1xuICByZXR1cm4gW107XG59O1xuXG5jb25zdCBpbnZhbGlkU3RlcCA9IChzdGVwLCBvcHRpb25zKSA9PiB7XG4gIGlmIChvcHRpb25zLnN0cmljdFJhbmdlcyA9PT0gdHJ1ZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHN0ZXAgXCIke3N0ZXB9XCIgdG8gYmUgYSBudW1iZXJgKTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5jb25zdCBmaWxsTnVtYmVycyA9IChzdGFydCwgZW5kLCBzdGVwID0gMSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBhID0gTnVtYmVyKHN0YXJ0KTtcbiAgbGV0IGIgPSBOdW1iZXIoZW5kKTtcblxuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYSkgfHwgIU51bWJlci5pc0ludGVnZXIoYikpIHtcbiAgICBpZiAob3B0aW9ucy5zdHJpY3RSYW5nZXMgPT09IHRydWUpIHRocm93IHJhbmdlRXJyb3IoW3N0YXJ0LCBlbmRdKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBmaXggbmVnYXRpdmUgemVyb1xuICBpZiAoYSA9PT0gMCkgYSA9IDA7XG4gIGlmIChiID09PSAwKSBiID0gMDtcblxuICBsZXQgZGVzY2VuZGluZyA9IGEgPiBiO1xuICBsZXQgc3RhcnRTdHJpbmcgPSBTdHJpbmcoc3RhcnQpO1xuICBsZXQgZW5kU3RyaW5nID0gU3RyaW5nKGVuZCk7XG4gIGxldCBzdGVwU3RyaW5nID0gU3RyaW5nKHN0ZXApO1xuICBzdGVwID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RlcCksIDEpO1xuXG4gIGxldCBwYWRkZWQgPSB6ZXJvcyhzdGFydFN0cmluZykgfHwgemVyb3MoZW5kU3RyaW5nKSB8fCB6ZXJvcyhzdGVwU3RyaW5nKTtcbiAgbGV0IG1heExlbiA9IHBhZGRlZCA/IE1hdGgubWF4KHN0YXJ0U3RyaW5nLmxlbmd0aCwgZW5kU3RyaW5nLmxlbmd0aCwgc3RlcFN0cmluZy5sZW5ndGgpIDogMDtcbiAgbGV0IHRvTnVtYmVyID0gcGFkZGVkID09PSBmYWxzZSAmJiBzdHJpbmdpZnkoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT09IGZhbHNlO1xuICBsZXQgZm9ybWF0ID0gb3B0aW9ucy50cmFuc2Zvcm0gfHwgdHJhbnNmb3JtKHRvTnVtYmVyKTtcblxuICBpZiAob3B0aW9ucy50b1JlZ2V4ICYmIHN0ZXAgPT09IDEpIHtcbiAgICByZXR1cm4gdG9SYW5nZSh0b01heExlbihzdGFydCwgbWF4TGVuKSwgdG9NYXhMZW4oZW5kLCBtYXhMZW4pLCB0cnVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCBwYXJ0cyA9IHsgbmVnYXRpdmVzOiBbXSwgcG9zaXRpdmVzOiBbXSB9O1xuICBsZXQgcHVzaCA9IG51bSA9PiBwYXJ0c1tudW0gPCAwID8gJ25lZ2F0aXZlcycgOiAncG9zaXRpdmVzJ10ucHVzaChNYXRoLmFicyhudW0pKTtcbiAgbGV0IHJhbmdlID0gW107XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGRlc2NlbmRpbmcgPyBhID49IGIgOiBhIDw9IGIpIHtcbiAgICBpZiAob3B0aW9ucy50b1JlZ2V4ID09PSB0cnVlICYmIHN0ZXAgPiAxKSB7XG4gICAgICBwdXNoKGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5wdXNoKHBhZChmb3JtYXQoYSwgaW5kZXgpLCBtYXhMZW4sIHRvTnVtYmVyKSk7XG4gICAgfVxuICAgIGEgPSBkZXNjZW5kaW5nID8gYSAtIHN0ZXAgOiBhICsgc3RlcDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBzdGVwID4gMVxuICAgICAgPyB0b1NlcXVlbmNlKHBhcnRzLCBvcHRpb25zKVxuICAgICAgOiB0b1JlZ2V4KHJhbmdlLCBudWxsLCB7IHdyYXA6IGZhbHNlLCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufTtcblxuY29uc3QgZmlsbExldHRlcnMgPSAoc3RhcnQsIGVuZCwgc3RlcCA9IDEsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoKCFpc051bWJlcihzdGFydCkgJiYgc3RhcnQubGVuZ3RoID4gMSkgfHwgKCFpc051bWJlcihlbmQpICYmIGVuZC5sZW5ndGggPiAxKSkge1xuICAgIHJldHVybiBpbnZhbGlkUmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9ucyk7XG4gIH1cblxuXG4gIGxldCBmb3JtYXQgPSBvcHRpb25zLnRyYW5zZm9ybSB8fCAodmFsID0+IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsKSk7XG4gIGxldCBhID0gYCR7c3RhcnR9YC5jaGFyQ29kZUF0KDApO1xuICBsZXQgYiA9IGAke2VuZH1gLmNoYXJDb2RlQXQoMCk7XG5cbiAgbGV0IGRlc2NlbmRpbmcgPSBhID4gYjtcbiAgbGV0IG1pbiA9IE1hdGgubWluKGEsIGIpO1xuICBsZXQgbWF4ID0gTWF0aC5tYXgoYSwgYik7XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCAmJiBzdGVwID09PSAxKSB7XG4gICAgcmV0dXJuIHRvUmFuZ2UobWluLCBtYXgsIGZhbHNlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxldCByYW5nZSA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChkZXNjZW5kaW5nID8gYSA+PSBiIDogYSA8PSBiKSB7XG4gICAgcmFuZ2UucHVzaChmb3JtYXQoYSwgaW5kZXgpKTtcbiAgICBhID0gZGVzY2VuZGluZyA/IGEgLSBzdGVwIDogYSArIHN0ZXA7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRvUmVnZXggPT09IHRydWUpIHtcbiAgICByZXR1cm4gdG9SZWdleChyYW5nZSwgbnVsbCwgeyB3cmFwOiBmYWxzZSwgb3B0aW9ucyB9KTtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn07XG5cbmNvbnN0IGZpbGwgPSAoc3RhcnQsIGVuZCwgc3RlcCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmIChlbmQgPT0gbnVsbCAmJiBpc1ZhbGlkVmFsdWUoc3RhcnQpKSB7XG4gICAgcmV0dXJuIFtzdGFydF07XG4gIH1cblxuICBpZiAoIWlzVmFsaWRWYWx1ZShzdGFydCkgfHwgIWlzVmFsaWRWYWx1ZShlbmQpKSB7XG4gICAgcmV0dXJuIGludmFsaWRSYW5nZShzdGFydCwgZW5kLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RlcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmaWxsKHN0YXJ0LCBlbmQsIDEsIHsgdHJhbnNmb3JtOiBzdGVwIH0pO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KHN0ZXApKSB7XG4gICAgcmV0dXJuIGZpbGwoc3RhcnQsIGVuZCwgMCwgc3RlcCk7XG4gIH1cblxuICBsZXQgb3B0cyA9IHsgLi4ub3B0aW9ucyB9O1xuICBpZiAob3B0cy5jYXB0dXJlID09PSB0cnVlKSBvcHRzLndyYXAgPSB0cnVlO1xuICBzdGVwID0gc3RlcCB8fCBvcHRzLnN0ZXAgfHwgMTtcblxuICBpZiAoIWlzTnVtYmVyKHN0ZXApKSB7XG4gICAgaWYgKHN0ZXAgIT0gbnVsbCAmJiAhaXNPYmplY3Qoc3RlcCkpIHJldHVybiBpbnZhbGlkU3RlcChzdGVwLCBvcHRzKTtcbiAgICByZXR1cm4gZmlsbChzdGFydCwgZW5kLCAxLCBzdGVwKTtcbiAgfVxuXG4gIGlmIChpc051bWJlcihzdGFydCkgJiYgaXNOdW1iZXIoZW5kKSkge1xuICAgIHJldHVybiBmaWxsTnVtYmVycyhzdGFydCwgZW5kLCBzdGVwLCBvcHRzKTtcbiAgfVxuXG4gIHJldHVybiBmaWxsTGV0dGVycyhzdGFydCwgZW5kLCBNYXRoLm1heChNYXRoLmFicyhzdGVwKSwgMSksIG9wdHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxsO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZmlsbCA9IHJlcXVpcmUoJ2ZpbGwtcmFuZ2UnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5jb25zdCBjb21waWxlID0gKGFzdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCB3YWxrID0gKG5vZGUsIHBhcmVudCA9IHt9KSA9PiB7XG4gICAgbGV0IGludmFsaWRCbG9jayA9IHV0aWxzLmlzSW52YWxpZEJyYWNlKHBhcmVudCk7XG4gICAgbGV0IGludmFsaWROb2RlID0gbm9kZS5pbnZhbGlkID09PSB0cnVlICYmIG9wdGlvbnMuZXNjYXBlSW52YWxpZCA9PT0gdHJ1ZTtcbiAgICBsZXQgaW52YWxpZCA9IGludmFsaWRCbG9jayA9PT0gdHJ1ZSB8fCBpbnZhbGlkTm9kZSA9PT0gdHJ1ZTtcbiAgICBsZXQgcHJlZml4ID0gb3B0aW9ucy5lc2NhcGVJbnZhbGlkID09PSB0cnVlID8gJ1xcXFwnIDogJyc7XG4gICAgbGV0IG91dHB1dCA9ICcnO1xuXG4gICAgaWYgKG5vZGUuaXNPcGVuID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgbm9kZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuaXNDbG9zZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIG5vZGUudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm4gaW52YWxpZCA/IChwcmVmaXggKyBub2RlLnZhbHVlKSA6ICcoJztcbiAgICB9XG5cbiAgICBpZiAobm9kZS50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgICByZXR1cm4gaW52YWxpZCA/IChwcmVmaXggKyBub2RlLnZhbHVlKSA6ICcpJztcbiAgICB9XG5cbiAgICBpZiAobm9kZS50eXBlID09PSAnY29tbWEnKSB7XG4gICAgICByZXR1cm4gbm9kZS5wcmV2LnR5cGUgPT09ICdjb21tYScgPyAnJyA6IChpbnZhbGlkID8gbm9kZS52YWx1ZSA6ICd8Jyk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzICYmIG5vZGUucmFuZ2VzID4gMCkge1xuICAgICAgbGV0IGFyZ3MgPSB1dGlscy5yZWR1Y2Uobm9kZS5ub2Rlcyk7XG4gICAgICBsZXQgcmFuZ2UgPSBmaWxsKC4uLmFyZ3MsIHsgLi4ub3B0aW9ucywgd3JhcDogZmFsc2UsIHRvUmVnZXg6IHRydWUgfSk7XG5cbiAgICAgIGlmIChyYW5nZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoID4gMSAmJiByYW5nZS5sZW5ndGggPiAxID8gYCgke3JhbmdlfSlgIDogcmFuZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkIG9mIG5vZGUubm9kZXMpIHtcbiAgICAgICAgb3V0cHV0ICs9IHdhbGsoY2hpbGQsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiB3YWxrKGFzdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBpbGU7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmaWxsID0gcmVxdWlyZSgnZmlsbC1yYW5nZScpO1xuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5jb25zdCBhcHBlbmQgPSAocXVldWUgPSAnJywgc3Rhc2ggPSAnJywgZW5jbG9zZSA9IGZhbHNlKSA9PiB7XG4gIGxldCByZXN1bHQgPSBbXTtcblxuICBxdWV1ZSA9IFtdLmNvbmNhdChxdWV1ZSk7XG4gIHN0YXNoID0gW10uY29uY2F0KHN0YXNoKTtcblxuICBpZiAoIXN0YXNoLmxlbmd0aCkgcmV0dXJuIHF1ZXVlO1xuICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgIHJldHVybiBlbmNsb3NlID8gdXRpbHMuZmxhdHRlbihzdGFzaCkubWFwKGVsZSA9PiBgeyR7ZWxlfX1gKSA6IHN0YXNoO1xuICB9XG5cbiAgZm9yIChsZXQgaXRlbSBvZiBxdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBpdGVtKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFwcGVuZCh2YWx1ZSwgc3Rhc2gsIGVuY2xvc2UpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZWxlIG9mIHN0YXNoKSB7XG4gICAgICAgIGlmIChlbmNsb3NlID09PSB0cnVlICYmIHR5cGVvZiBlbGUgPT09ICdzdHJpbmcnKSBlbGUgPSBgeyR7ZWxlfX1gO1xuICAgICAgICByZXN1bHQucHVzaChBcnJheS5pc0FycmF5KGVsZSkgPyBhcHBlbmQoaXRlbSwgZWxlLCBlbmNsb3NlKSA6IChpdGVtICsgZWxlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB1dGlscy5mbGF0dGVuKHJlc3VsdCk7XG59O1xuXG5jb25zdCBleHBhbmQgPSAoYXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IHJhbmdlTGltaXQgPSBvcHRpb25zLnJhbmdlTGltaXQgPT09IHZvaWQgMCA/IDEwMDAgOiBvcHRpb25zLnJhbmdlTGltaXQ7XG5cbiAgbGV0IHdhbGsgPSAobm9kZSwgcGFyZW50ID0ge30pID0+IHtcbiAgICBub2RlLnF1ZXVlID0gW107XG5cbiAgICBsZXQgcCA9IHBhcmVudDtcbiAgICBsZXQgcSA9IHBhcmVudC5xdWV1ZTtcblxuICAgIHdoaWxlIChwLnR5cGUgIT09ICdicmFjZScgJiYgcC50eXBlICE9PSAncm9vdCcgJiYgcC5wYXJlbnQpIHtcbiAgICAgIHAgPSBwLnBhcmVudDtcbiAgICAgIHEgPSBwLnF1ZXVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLmludmFsaWQgfHwgbm9kZS5kb2xsYXIpIHtcbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgc3RyaW5naWZ5KG5vZGUsIG9wdGlvbnMpKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2JyYWNlJyAmJiBub2RlLmludmFsaWQgIT09IHRydWUgJiYgbm9kZS5ub2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgWyd7fSddKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMgJiYgbm9kZS5yYW5nZXMgPiAwKSB7XG4gICAgICBsZXQgYXJncyA9IHV0aWxzLnJlZHVjZShub2RlLm5vZGVzKTtcblxuICAgICAgaWYgKHV0aWxzLmV4Y2VlZHNMaW1pdCguLi5hcmdzLCBvcHRpb25zLnN0ZXAsIHJhbmdlTGltaXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdleHBhbmRlZCBhcnJheSBsZW5ndGggZXhjZWVkcyByYW5nZSBsaW1pdC4gVXNlIG9wdGlvbnMucmFuZ2VMaW1pdCB0byBpbmNyZWFzZSBvciBkaXNhYmxlIHRoZSBsaW1pdC4nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJhbmdlID0gZmlsbCguLi5hcmdzLCBvcHRpb25zKTtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmFuZ2UgPSBzdHJpbmdpZnkobm9kZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgcmFuZ2UpKTtcbiAgICAgIG5vZGUubm9kZXMgPSBbXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZW5jbG9zZSA9IHV0aWxzLmVuY2xvc2VCcmFjZShub2RlKTtcbiAgICBsZXQgcXVldWUgPSBub2RlLnF1ZXVlO1xuICAgIGxldCBibG9jayA9IG5vZGU7XG5cbiAgICB3aGlsZSAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJyAmJiBibG9jay50eXBlICE9PSAncm9vdCcgJiYgYmxvY2sucGFyZW50KSB7XG4gICAgICBibG9jayA9IGJsb2NrLnBhcmVudDtcbiAgICAgIHF1ZXVlID0gYmxvY2sucXVldWU7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSBub2RlLm5vZGVzW2ldO1xuXG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2NvbW1hJyAmJiBub2RlLnR5cGUgPT09ICdicmFjZScpIHtcbiAgICAgICAgaWYgKGkgPT09IDEpIHF1ZXVlLnB1c2goJycpO1xuICAgICAgICBxdWV1ZS5wdXNoKCcnKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgcXVldWUsIGVuY2xvc2UpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC52YWx1ZSAmJiBjaGlsZC50eXBlICE9PSAnb3BlbicpIHtcbiAgICAgICAgcXVldWUucHVzaChhcHBlbmQocXVldWUucG9wKCksIGNoaWxkLnZhbHVlKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQubm9kZXMpIHtcbiAgICAgICAgd2FsayhjaGlsZCwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXVlO1xuICB9O1xuXG4gIHJldHVybiB1dGlscy5mbGF0dGVuKHdhbGsoYXN0KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cGFuZDtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNQVhfTEVOR1RIOiAxMDI0ICogNjQsXG5cbiAgLy8gRGlnaXRzXG4gIENIQVJfMDogJzAnLCAvKiAwICovXG4gIENIQVJfOTogJzknLCAvKiA5ICovXG5cbiAgLy8gQWxwaGFiZXQgY2hhcnMuXG4gIENIQVJfVVBQRVJDQVNFX0E6ICdBJywgLyogQSAqL1xuICBDSEFSX0xPV0VSQ0FTRV9BOiAnYScsIC8qIGEgKi9cbiAgQ0hBUl9VUFBFUkNBU0VfWjogJ1onLCAvKiBaICovXG4gIENIQVJfTE9XRVJDQVNFX1o6ICd6JywgLyogeiAqL1xuXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUzogJygnLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVM6ICcpJywgLyogKSAqL1xuXG4gIENIQVJfQVNURVJJU0s6ICcqJywgLyogKiAqL1xuXG4gIC8vIE5vbi1hbHBoYWJldGljIGNoYXJzLlxuICBDSEFSX0FNUEVSU0FORDogJyYnLCAvKiAmICovXG4gIENIQVJfQVQ6ICdAJywgLyogQCAqL1xuICBDSEFSX0JBQ0tTTEFTSDogJ1xcXFwnLCAvKiBcXCAqL1xuICBDSEFSX0JBQ0tUSUNLOiAnYCcsIC8qIGAgKi9cbiAgQ0hBUl9DQVJSSUFHRV9SRVRVUk46ICdcXHInLCAvKiBcXHIgKi9cbiAgQ0hBUl9DSVJDVU1GTEVYX0FDQ0VOVDogJ14nLCAvKiBeICovXG4gIENIQVJfQ09MT046ICc6JywgLyogOiAqL1xuICBDSEFSX0NPTU1BOiAnLCcsIC8qICwgKi9cbiAgQ0hBUl9ET0xMQVI6ICckJywgLyogLiAqL1xuICBDSEFSX0RPVDogJy4nLCAvKiAuICovXG4gIENIQVJfRE9VQkxFX1FVT1RFOiAnXCInLCAvKiBcIiAqL1xuICBDSEFSX0VRVUFMOiAnPScsIC8qID0gKi9cbiAgQ0hBUl9FWENMQU1BVElPTl9NQVJLOiAnIScsIC8qICEgKi9cbiAgQ0hBUl9GT1JNX0ZFRUQ6ICdcXGYnLCAvKiBcXGYgKi9cbiAgQ0hBUl9GT1JXQVJEX1NMQVNIOiAnLycsIC8qIC8gKi9cbiAgQ0hBUl9IQVNIOiAnIycsIC8qICMgKi9cbiAgQ0hBUl9IWVBIRU5fTUlOVVM6ICctJywgLyogLSAqL1xuICBDSEFSX0xFRlRfQU5HTEVfQlJBQ0tFVDogJzwnLCAvKiA8ICovXG4gIENIQVJfTEVGVF9DVVJMWV9CUkFDRTogJ3snLCAvKiB7ICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVDogJ1snLCAvKiBbICovXG4gIENIQVJfTElORV9GRUVEOiAnXFxuJywgLyogXFxuICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0U6ICdcXHUwMEEwJywgLyogXFx1MDBBMCAqL1xuICBDSEFSX1BFUkNFTlQ6ICclJywgLyogJSAqL1xuICBDSEFSX1BMVVM6ICcrJywgLyogKyAqL1xuICBDSEFSX1FVRVNUSU9OX01BUks6ICc/JywgLyogPyAqL1xuICBDSEFSX1JJR0hUX0FOR0xFX0JSQUNLRVQ6ICc+JywgLyogPiAqL1xuICBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFOiAnfScsIC8qIH0gKi9cbiAgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVDogJ10nLCAvKiBdICovXG4gIENIQVJfU0VNSUNPTE9OOiAnOycsIC8qIDsgKi9cbiAgQ0hBUl9TSU5HTEVfUVVPVEU6ICdcXCcnLCAvKiAnICovXG4gIENIQVJfU1BBQ0U6ICcgJywgLyogICAqL1xuICBDSEFSX1RBQjogJ1xcdCcsIC8qIFxcdCAqL1xuICBDSEFSX1VOREVSU0NPUkU6ICdfJywgLyogXyAqL1xuICBDSEFSX1ZFUlRJQ0FMX0xJTkU6ICd8JywgLyogfCAqL1xuICBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRTogJ1xcdUZFRkYnIC8qIFxcdUZFRkYgKi9cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IHtcbiAgTUFYX0xFTkdUSCxcbiAgQ0hBUl9CQUNLU0xBU0gsIC8qIFxcICovXG4gIENIQVJfQkFDS1RJQ0ssIC8qIGAgKi9cbiAgQ0hBUl9DT01NQSwgLyogLCAqL1xuICBDSEFSX0RPVCwgLyogLiAqL1xuICBDSEFSX0xFRlRfUEFSRU5USEVTRVMsIC8qICggKi9cbiAgQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUywgLyogKSAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UsIC8qIHsgKi9cbiAgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSwgLyogfSAqL1xuICBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQsIC8qIFsgKi9cbiAgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCwgLyogXSAqL1xuICBDSEFSX0RPVUJMRV9RVU9URSwgLyogXCIgKi9cbiAgQ0hBUl9TSU5HTEVfUVVPVEUsIC8qICcgKi9cbiAgQ0hBUl9OT19CUkVBS19TUEFDRSxcbiAgQ0hBUl9aRVJPX1dJRFRIX05PQlJFQUtfU1BBQ0Vcbn0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIHBhcnNlXG4gKi9cblxuY29uc3QgcGFyc2UgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIH1cblxuICBsZXQgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGxldCBtYXggPSB0eXBlb2Ygb3B0cy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4oTUFYX0xFTkdUSCwgb3B0cy5tYXhMZW5ndGgpIDogTUFYX0xFTkdUSDtcbiAgaWYgKGlucHV0Lmxlbmd0aCA+IG1heCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgSW5wdXQgbGVuZ3RoICgke2lucHV0Lmxlbmd0aH0pLCBleGNlZWRzIG1heCBjaGFyYWN0ZXJzICgke21heH0pYCk7XG4gIH1cblxuICBsZXQgYXN0ID0geyB0eXBlOiAncm9vdCcsIGlucHV0LCBub2RlczogW10gfTtcbiAgbGV0IHN0YWNrID0gW2FzdF07XG4gIGxldCBibG9jayA9IGFzdDtcbiAgbGV0IHByZXYgPSBhc3Q7XG4gIGxldCBicmFja2V0cyA9IDA7XG4gIGxldCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCBkZXB0aCA9IDA7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IG1lbW8gPSB7fTtcblxuICAvKipcbiAgICogSGVscGVyc1xuICAgKi9cblxuICBjb25zdCBhZHZhbmNlID0gKCkgPT4gaW5wdXRbaW5kZXgrK107XG4gIGNvbnN0IHB1c2ggPSBub2RlID0+IHtcbiAgICBpZiAobm9kZS50eXBlID09PSAndGV4dCcgJiYgcHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgcHJldi50eXBlID0gJ3RleHQnO1xuICAgIH1cblxuICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ3RleHQnICYmIG5vZGUudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICBwcmV2LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYmxvY2subm9kZXMucHVzaChub2RlKTtcbiAgICBub2RlLnBhcmVudCA9IGJsb2NrO1xuICAgIG5vZGUucHJldiA9IHByZXY7XG4gICAgcHJldiA9IG5vZGU7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgcHVzaCh7IHR5cGU6ICdib3MnIH0pO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGJsb2NrID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgdmFsdWUgPSBhZHZhbmNlKCk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZhbGlkIGNoYXJzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFIHx8IHZhbHVlID09PSBDSEFSX05PX0JSRUFLX1NQQUNFKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVkIGNoYXJzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfQkFDS1NMQVNIKSB7XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogKG9wdGlvbnMua2VlcEVzY2FwaW5nID8gdmFsdWUgOiAnJykgKyBhZHZhbmNlKCkgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSaWdodCBzcXVhcmUgYnJhY2tldCAobGl0ZXJhbCk6ICddJ1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcXFwnICsgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWZ0IHNxdWFyZSBicmFja2V0OiAnWydcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICBicmFja2V0cysrO1xuXG4gICAgICBsZXQgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGxldCBuZXh0O1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGggJiYgKG5leHQgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgIHZhbHVlICs9IG5leHQ7XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgICAgIGJyYWNrZXRzKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9CQUNLU0xBU0gpIHtcbiAgICAgICAgICB2YWx1ZSArPSBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgICAgIGJyYWNrZXRzLS07XG5cbiAgICAgICAgICBpZiAoYnJhY2tldHMgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcmVudGhlc2VzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfTEVGVF9QQVJFTlRIRVNFUykge1xuICAgICAgYmxvY2sgPSBwdXNoKHsgdHlwZTogJ3BhcmVuJywgbm9kZXM6IFtdIH0pO1xuICAgICAgc3RhY2sucHVzaChibG9jayk7XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUykge1xuICAgICAgaWYgKGJsb2NrLnR5cGUgIT09ICdwYXJlbicpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYmxvY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgYmxvY2sgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFF1b3RlczogJ3xcInxgXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfRE9VQkxFX1FVT1RFIHx8IHZhbHVlID09PSBDSEFSX1NJTkdMRV9RVU9URSB8fCB2YWx1ZSA9PT0gQ0hBUl9CQUNLVElDSykge1xuICAgICAgbGV0IG9wZW4gPSB2YWx1ZTtcbiAgICAgIGxldCBuZXh0O1xuXG4gICAgICBpZiAob3B0aW9ucy5rZWVwUXVvdGVzICE9PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAmJiAobmV4dCA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgdmFsdWUgKz0gbmV4dCArIGFkdmFuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSBvcGVuKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcFF1b3RlcyA9PT0gdHJ1ZSkgdmFsdWUgKz0gbmV4dDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlICs9IG5leHQ7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVmdCBjdXJseSBicmFjZTogJ3snXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfTEVGVF9DVVJMWV9CUkFDRSkge1xuICAgICAgZGVwdGgrKztcblxuICAgICAgbGV0IGRvbGxhciA9IHByZXYudmFsdWUgJiYgcHJldi52YWx1ZS5zbGljZSgtMSkgPT09ICckJyB8fCBibG9jay5kb2xsYXIgPT09IHRydWU7XG4gICAgICBsZXQgYnJhY2UgPSB7XG4gICAgICAgIHR5cGU6ICdicmFjZScsXG4gICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgIGNsb3NlOiBmYWxzZSxcbiAgICAgICAgZG9sbGFyLFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgY29tbWFzOiAwLFxuICAgICAgICByYW5nZXM6IDAsXG4gICAgICAgIG5vZGVzOiBbXVxuICAgICAgfTtcblxuICAgICAgYmxvY2sgPSBwdXNoKGJyYWNlKTtcbiAgICAgIHN0YWNrLnB1c2goYmxvY2spO1xuICAgICAgcHVzaCh7IHR5cGU6ICdvcGVuJywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSaWdodCBjdXJseSBicmFjZTogJ30nXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgIGlmIChibG9jay50eXBlICE9PSAnYnJhY2UnKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IHR5cGUgPSAnY2xvc2UnO1xuICAgICAgYmxvY2sgPSBzdGFjay5wb3AoKTtcbiAgICAgIGJsb2NrLmNsb3NlID0gdHJ1ZTtcblxuICAgICAgcHVzaCh7IHR5cGUsIHZhbHVlIH0pO1xuICAgICAgZGVwdGgtLTtcblxuICAgICAgYmxvY2sgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbW1hOiAnLCdcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9DT01NQSAmJiBkZXB0aCA+IDApIHtcbiAgICAgIGlmIChibG9jay5yYW5nZXMgPiAwKSB7XG4gICAgICAgIGJsb2NrLnJhbmdlcyA9IDA7XG4gICAgICAgIGxldCBvcGVuID0gYmxvY2subm9kZXMuc2hpZnQoKTtcbiAgICAgICAgYmxvY2subm9kZXMgPSBbb3BlbiwgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiBzdHJpbmdpZnkoYmxvY2spIH1dO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2NvbW1hJywgdmFsdWUgfSk7XG4gICAgICBibG9jay5jb21tYXMrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvdDogJy4nXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfRE9UICYmIGRlcHRoID4gMCAmJiBibG9jay5jb21tYXMgPT09IDApIHtcbiAgICAgIGxldCBzaWJsaW5ncyA9IGJsb2NrLm5vZGVzO1xuXG4gICAgICBpZiAoZGVwdGggPT09IDAgfHwgc2libGluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgICAgYmxvY2sucmFuZ2UgPSBbXTtcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgcHJldi50eXBlID0gJ3JhbmdlJztcblxuICAgICAgICBpZiAoYmxvY2subm9kZXMubGVuZ3RoICE9PSAzICYmIGJsb2NrLm5vZGVzLmxlbmd0aCAhPT0gNSkge1xuICAgICAgICAgIGJsb2NrLmludmFsaWQgPSB0cnVlO1xuICAgICAgICAgIGJsb2NrLnJhbmdlcyA9IDA7XG4gICAgICAgICAgcHJldi50eXBlID0gJ3RleHQnO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYmxvY2sucmFuZ2VzKys7XG4gICAgICAgIGJsb2NrLmFyZ3MgPSBbXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdyYW5nZScpIHtcbiAgICAgICAgc2libGluZ3MucG9wKCk7XG5cbiAgICAgICAgbGV0IGJlZm9yZSA9IHNpYmxpbmdzW3NpYmxpbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICBiZWZvcmUudmFsdWUgKz0gcHJldi52YWx1ZSArIHZhbHVlO1xuICAgICAgICBwcmV2ID0gYmVmb3JlO1xuICAgICAgICBibG9jay5yYW5nZXMtLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnZG90JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXh0XG4gICAgICovXG5cbiAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgfVxuXG4gIC8vIE1hcmsgaW1iYWxhbmNlZCBicmFjZXMgYW5kIGJyYWNrZXRzIGFzIGludmFsaWRcbiAgZG8ge1xuICAgIGJsb2NrID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ3Jvb3QnKSB7XG4gICAgICBibG9jay5ub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICBpZiAoIW5vZGUubm9kZXMpIHtcbiAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnb3BlbicpIG5vZGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnY2xvc2UnKSBub2RlLmlzQ2xvc2UgPSB0cnVlO1xuICAgICAgICAgIGlmICghbm9kZS5ub2Rlcykgbm9kZS50eXBlID0gJ3RleHQnO1xuICAgICAgICAgIG5vZGUuaW52YWxpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBnZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBibG9jayBvbiBwYXJlbnQubm9kZXMgKGJsb2NrJ3Mgc2libGluZ3MpXG4gICAgICBsZXQgcGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBsZXQgaW5kZXggPSBwYXJlbnQubm9kZXMuaW5kZXhPZihibG9jayk7XG4gICAgICAvLyByZXBsYWNlIHRoZSAoaW52YWxpZCkgYmxvY2sgd2l0aCBpdCdzIG5vZGVzXG4gICAgICBwYXJlbnQubm9kZXMuc3BsaWNlKGluZGV4LCAxLCAuLi5ibG9jay5ub2Rlcyk7XG4gICAgfVxuICB9IHdoaWxlIChzdGFjay5sZW5ndGggPiAwKTtcblxuICBwdXNoKHsgdHlwZTogJ2VvcycgfSk7XG4gIHJldHVybiBhc3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9saWIvc3RyaW5naWZ5Jyk7XG5jb25zdCBjb21waWxlID0gcmVxdWlyZSgnLi9saWIvY29tcGlsZScpO1xuY29uc3QgZXhwYW5kID0gcmVxdWlyZSgnLi9saWIvZXhwYW5kJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vbGliL3BhcnNlJyk7XG5cbi8qKlxuICogRXhwYW5kIHRoZSBnaXZlbiBwYXR0ZXJuIG9yIGNyZWF0ZSBhIHJlZ2V4LWNvbXBhdGlibGUgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcygne2EsYixjfScsIHsgY29tcGlsZTogdHJ1ZSB9KSk7IC8vPT4gWycoYXxifGMpJ11cbiAqIGNvbnNvbGUubG9nKGJyYWNlcygne2EsYixjfScpKTsgLy89PiBbJ2EnLCAnYicsICdjJ11cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IGJyYWNlcyA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBvdXRwdXQgPSBbXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBmb3IgKGxldCBwYXR0ZXJuIG9mIGlucHV0KSB7XG4gICAgICBsZXQgcmVzdWx0ID0gYnJhY2VzLmNyZWF0ZShwYXR0ZXJuLCBvcHRpb25zKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goLi4ucmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtdLmNvbmNhdChicmFjZXMuY3JlYXRlKGlucHV0LCBvcHRpb25zKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmV4cGFuZCA9PT0gdHJ1ZSAmJiBvcHRpb25zLm5vZHVwZXMgPT09IHRydWUpIHtcbiAgICBvdXRwdXQgPSBbLi4ubmV3IFNldChvdXRwdXQpXTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgd2l0aCB0aGUgZ2l2ZW4gYG9wdGlvbnNgLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBicmFjZXMucGFyc2UocGF0dGVybiwgWywgb3B0aW9uc10pO1xuICogY29uc3QgYXN0ID0gYnJhY2VzLnBhcnNlKCdhL3tiLGN9L2QnKTtcbiAqIGNvbnNvbGUubG9nKGFzdCk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIEJyYWNlIHBhdHRlcm4gdG8gcGFyc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gQVNUXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmJyYWNlcy5wYXJzZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiBwYXJzZShpbnB1dCwgb3B0aW9ucyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJyYWNlcyBzdHJpbmcgZnJvbSBhbiBBU1QsIG9yIGFuIEFTVCBub2RlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGxldCBhc3QgPSBicmFjZXMucGFyc2UoJ2Zvby97YSxifS9iYXInKTtcbiAqIGNvbnNvbGUubG9nKHN0cmluZ2lmeShhc3Qubm9kZXNbMl0pKTsgLy89PiAne2EsYn0nXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEJyYWNlIHBhdHRlcm4gb3IgQVNULlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuc3RyaW5naWZ5ID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KGJyYWNlcy5wYXJzZShpbnB1dCwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBzdHJpbmdpZnkoaW5wdXQsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb21waWxlcyBhIGJyYWNlIHBhdHRlcm4gaW50byBhIHJlZ2V4LWNvbXBhdGlibGUsIG9wdGltaXplZCBzdHJpbmcuXG4gKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24gYnkgZGVmYXVsdC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMuY29tcGlsZSgnYS97YixjfS9kJykpO1xuICogLy89PiBbJ2EvKGJ8YykvZCddXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEJyYWNlIHBhdHRlcm4gb3IgQVNULlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuY29tcGlsZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXQgPSBicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBjb21waWxlKGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRXhwYW5kcyBhIGJyYWNlIHBhdHRlcm4gaW50byBhbiBhcnJheS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZVxuICogbWFpbiBbYnJhY2VzXSgjYnJhY2VzKSBmdW5jdGlvbiB3aGVuIGBvcHRpb25zLmV4cGFuZGAgaXMgdHJ1ZS4gQmVmb3JlXG4gKiB1c2luZyB0aGlzIG1ldGhvZCBpdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IHJlYWQgdGhlIFtwZXJmb3JtYW5jZSBub3Rlc10oI3BlcmZvcm1hbmNlKSlcbiAqIGFuZCBhZHZhbnRhZ2VzIG9mIHVzaW5nIFsuY29tcGlsZV0oI2NvbXBpbGUpIGluc3RlYWQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmV4cGFuZCgnYS97YixjfS9kJykpO1xuICogLy89PiBbJ2EvYi9kJywgJ2EvYy9kJ107XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQnJhY2UgcGF0dGVyblxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuZXhwYW5kID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbnB1dCA9IGJyYWNlcy5wYXJzZShpbnB1dCwgb3B0aW9ucyk7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gZXhwYW5kKGlucHV0LCBvcHRpb25zKTtcblxuICAvLyBmaWx0ZXIgb3V0IGVtcHR5IHN0cmluZ3MgaWYgc3BlY2lmaWVkXG4gIGlmIChvcHRpb25zLm5vZW1wdHkgPT09IHRydWUpIHtcbiAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKEJvb2xlYW4pO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBkdXBsaWNhdGVzIGlmIHNwZWNpZmllZFxuICBpZiAob3B0aW9ucy5ub2R1cGVzID09PSB0cnVlKSB7XG4gICAgcmVzdWx0ID0gWy4uLm5ldyBTZXQocmVzdWx0KV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgYSBicmFjZSBwYXR0ZXJuIGFuZCByZXR1cm5zIGVpdGhlciBhbiBleHBhbmRlZCBhcnJheVxuICogKGlmIGBvcHRpb25zLmV4cGFuZGAgaXMgdHJ1ZSksIGEgaGlnaGx5IG9wdGltaXplZCByZWdleC1jb21wYXRpYmxlIHN0cmluZy5cbiAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgbWFpbiBbYnJhY2VzXSgjYnJhY2VzKSBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMuY3JlYXRlKCd1c2VyLXsyMDAuLjMwMH0vcHJvamVjdC17YSxiLGN9LXsxLi4xMH0nKSlcbiAqIC8vPT4gJ3VzZXItKDIwWzAtOV18MlsxLTldWzAtOV18MzAwKS9wcm9qZWN0LShhfGJ8YyktKFsxLTldfDEwKSdcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBCcmFjZSBwYXR0ZXJuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBleHBhbmRlZCB2YWx1ZXMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmJyYWNlcy5jcmVhdGUgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoaW5wdXQgPT09ICcnIHx8IGlucHV0Lmxlbmd0aCA8IDMpIHtcbiAgICByZXR1cm4gW2lucHV0XTtcbiAgfVxuXG4gcmV0dXJuIG9wdGlvbnMuZXhwYW5kICE9PSB0cnVlXG4gICAgPyBicmFjZXMuY29tcGlsZShpbnB1dCwgb3B0aW9ucylcbiAgICA6IGJyYWNlcy5leHBhbmQoaW5wdXQsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgXCJicmFjZXNcIlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gYnJhY2VzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFdJTl9TTEFTSCA9ICdcXFxcXFxcXC8nO1xuY29uc3QgV0lOX05PX1NMQVNIID0gYFteJHtXSU5fU0xBU0h9XWA7XG5cbi8qKlxuICogUG9zaXggZ2xvYiByZWdleFxuICovXG5cbmNvbnN0IERPVF9MSVRFUkFMID0gJ1xcXFwuJztcbmNvbnN0IFBMVVNfTElURVJBTCA9ICdcXFxcKyc7XG5jb25zdCBRTUFSS19MSVRFUkFMID0gJ1xcXFw/JztcbmNvbnN0IFNMQVNIX0xJVEVSQUwgPSAnXFxcXC8nO1xuY29uc3QgT05FX0NIQVIgPSAnKD89LiknO1xuY29uc3QgUU1BUksgPSAnW14vXSc7XG5jb25zdCBFTkRfQU5DSE9SID0gYCg/OiR7U0xBU0hfTElURVJBTH18JClgO1xuY29uc3QgU1RBUlRfQU5DSE9SID0gYCg/Ol58JHtTTEFTSF9MSVRFUkFMfSlgO1xuY29uc3QgRE9UU19TTEFTSCA9IGAke0RPVF9MSVRFUkFMfXsxLDJ9JHtFTkRfQU5DSE9SfWA7XG5jb25zdCBOT19ET1QgPSBgKD8hJHtET1RfTElURVJBTH0pYDtcbmNvbnN0IE5PX0RPVFMgPSBgKD8hJHtTVEFSVF9BTkNIT1J9JHtET1RTX1NMQVNIfSlgO1xuY29uc3QgTk9fRE9UX1NMQVNIID0gYCg/ISR7RE9UX0xJVEVSQUx9ezAsMX0ke0VORF9BTkNIT1J9KWA7XG5jb25zdCBOT19ET1RTX1NMQVNIID0gYCg/ISR7RE9UU19TTEFTSH0pYDtcbmNvbnN0IFFNQVJLX05PX0RPVCA9IGBbXi4ke1NMQVNIX0xJVEVSQUx9XWA7XG5jb25zdCBTVEFSID0gYCR7UU1BUkt9Kj9gO1xuXG5jb25zdCBQT1NJWF9DSEFSUyA9IHtcbiAgRE9UX0xJVEVSQUwsXG4gIFBMVVNfTElURVJBTCxcbiAgUU1BUktfTElURVJBTCxcbiAgU0xBU0hfTElURVJBTCxcbiAgT05FX0NIQVIsXG4gIFFNQVJLLFxuICBFTkRfQU5DSE9SLFxuICBET1RTX1NMQVNILFxuICBOT19ET1QsXG4gIE5PX0RPVFMsXG4gIE5PX0RPVF9TTEFTSCxcbiAgTk9fRE9UU19TTEFTSCxcbiAgUU1BUktfTk9fRE9ULFxuICBTVEFSLFxuICBTVEFSVF9BTkNIT1Jcbn07XG5cbi8qKlxuICogV2luZG93cyBnbG9iIHJlZ2V4XG4gKi9cblxuY29uc3QgV0lORE9XU19DSEFSUyA9IHtcbiAgLi4uUE9TSVhfQ0hBUlMsXG5cbiAgU0xBU0hfTElURVJBTDogYFske1dJTl9TTEFTSH1dYCxcbiAgUU1BUks6IFdJTl9OT19TTEFTSCxcbiAgU1RBUjogYCR7V0lOX05PX1NMQVNIfSo/YCxcbiAgRE9UU19TTEFTSDogYCR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKWAsXG4gIE5PX0RPVDogYCg/ISR7RE9UX0xJVEVSQUx9KWAsXG4gIE5PX0RPVFM6IGAoPyEoPzpefFske1dJTl9TTEFTSH1dKSR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKSlgLFxuICBOT19ET1RfU0xBU0g6IGAoPyEke0RPVF9MSVRFUkFMfXswLDF9KD86WyR7V0lOX1NMQVNIfV18JCkpYCxcbiAgTk9fRE9UU19TTEFTSDogYCg/ISR7RE9UX0xJVEVSQUx9ezEsMn0oPzpbJHtXSU5fU0xBU0h9XXwkKSlgLFxuICBRTUFSS19OT19ET1Q6IGBbXi4ke1dJTl9TTEFTSH1dYCxcbiAgU1RBUlRfQU5DSE9SOiBgKD86XnxbJHtXSU5fU0xBU0h9XSlgLFxuICBFTkRfQU5DSE9SOiBgKD86WyR7V0lOX1NMQVNIfV18JClgXG59O1xuXG4vKipcbiAqIFBPU0lYIEJyYWNrZXQgUmVnZXhcbiAqL1xuXG5jb25zdCBQT1NJWF9SRUdFWF9TT1VSQ0UgPSB7XG4gIGFsbnVtOiAnYS16QS1aMC05JyxcbiAgYWxwaGE6ICdhLXpBLVonLFxuICBhc2NpaTogJ1xcXFx4MDAtXFxcXHg3RicsXG4gIGJsYW5rOiAnIFxcXFx0JyxcbiAgY250cmw6ICdcXFxceDAwLVxcXFx4MUZcXFxceDdGJyxcbiAgZGlnaXQ6ICcwLTknLFxuICBncmFwaDogJ1xcXFx4MjEtXFxcXHg3RScsXG4gIGxvd2VyOiAnYS16JyxcbiAgcHJpbnQ6ICdcXFxceDIwLVxcXFx4N0UgJyxcbiAgcHVuY3Q6ICdcXFxcLSFcIiMkJSZcXCcoKVxcXFwqKywuLzo7PD0+P0BbXFxcXF1eX2B7fH1+JyxcbiAgc3BhY2U6ICcgXFxcXHRcXFxcclxcXFxuXFxcXHZcXFxcZicsXG4gIHVwcGVyOiAnQS1aJyxcbiAgd29yZDogJ0EtWmEtejAtOV8nLFxuICB4ZGlnaXQ6ICdBLUZhLWYwLTknXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTUFYX0xFTkdUSDogMTAyNCAqIDY0LFxuICBQT1NJWF9SRUdFWF9TT1VSQ0UsXG5cbiAgLy8gcmVndWxhciBleHByZXNzaW9uc1xuICBSRUdFWF9CQUNLU0xBU0g6IC9cXFxcKD8hWyorP14ke30ofClbXFxdXSkvZyxcbiAgUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlM6IC9eW15AIVtcXF0uLCQqKz9ee30oKXxcXFxcL10rLyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSUzogL1stKis/Ll4ke30ofClbXFxdXS8sXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRjogLyhcXFxcPykoKFxcVykoXFwzKikpL2csXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfR0xPQkFMOiAvKFstKis/Ll4ke30ofClbXFxdXSkvZyxcbiAgUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSDogLyg/OlxcWy4qP1teXFxcXF1cXF18XFxcXCg/PS4pKS9nLFxuXG4gIC8vIFJlcGxhY2UgZ2xvYnMgd2l0aCBlcXVpdmFsZW50IHBhdHRlcm5zIHRvIHJlZHVjZSBwYXJzaW5nIHRpbWUuXG4gIFJFUExBQ0VNRU5UUzoge1xuICAgICcqKionOiAnKicsXG4gICAgJyoqLyoqJzogJyoqJyxcbiAgICAnKiovKiovKionOiAnKionXG4gIH0sXG5cbiAgLy8gRGlnaXRzXG4gIENIQVJfMDogNDgsIC8qIDAgKi9cbiAgQ0hBUl85OiA1NywgLyogOSAqL1xuXG4gIC8vIEFscGhhYmV0IGNoYXJzLlxuICBDSEFSX1VQUEVSQ0FTRV9BOiA2NSwgLyogQSAqL1xuICBDSEFSX0xPV0VSQ0FTRV9BOiA5NywgLyogYSAqL1xuICBDSEFSX1VQUEVSQ0FTRV9aOiA5MCwgLyogWiAqL1xuICBDSEFSX0xPV0VSQ0FTRV9aOiAxMjIsIC8qIHogKi9cblxuICBDSEFSX0xFRlRfUEFSRU5USEVTRVM6IDQwLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVM6IDQxLCAvKiApICovXG5cbiAgQ0hBUl9BU1RFUklTSzogNDIsIC8qICogKi9cblxuICAvLyBOb24tYWxwaGFiZXRpYyBjaGFycy5cbiAgQ0hBUl9BTVBFUlNBTkQ6IDM4LCAvKiAmICovXG4gIENIQVJfQVQ6IDY0LCAvKiBAICovXG4gIENIQVJfQkFDS1dBUkRfU0xBU0g6IDkyLCAvKiBcXCAqL1xuICBDSEFSX0NBUlJJQUdFX1JFVFVSTjogMTMsIC8qIFxcciAqL1xuICBDSEFSX0NJUkNVTUZMRVhfQUNDRU5UOiA5NCwgLyogXiAqL1xuICBDSEFSX0NPTE9OOiA1OCwgLyogOiAqL1xuICBDSEFSX0NPTU1BOiA0NCwgLyogLCAqL1xuICBDSEFSX0RPVDogNDYsIC8qIC4gKi9cbiAgQ0hBUl9ET1VCTEVfUVVPVEU6IDM0LCAvKiBcIiAqL1xuICBDSEFSX0VRVUFMOiA2MSwgLyogPSAqL1xuICBDSEFSX0VYQ0xBTUFUSU9OX01BUks6IDMzLCAvKiAhICovXG4gIENIQVJfRk9STV9GRUVEOiAxMiwgLyogXFxmICovXG4gIENIQVJfRk9SV0FSRF9TTEFTSDogNDcsIC8qIC8gKi9cbiAgQ0hBUl9HUkFWRV9BQ0NFTlQ6IDk2LCAvKiBgICovXG4gIENIQVJfSEFTSDogMzUsIC8qICMgKi9cbiAgQ0hBUl9IWVBIRU5fTUlOVVM6IDQ1LCAvKiAtICovXG4gIENIQVJfTEVGVF9BTkdMRV9CUkFDS0VUOiA2MCwgLyogPCAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0U6IDEyMywgLyogeyAqL1xuICBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQ6IDkxLCAvKiBbICovXG4gIENIQVJfTElORV9GRUVEOiAxMCwgLyogXFxuICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0U6IDE2MCwgLyogXFx1MDBBMCAqL1xuICBDSEFSX1BFUkNFTlQ6IDM3LCAvKiAlICovXG4gIENIQVJfUExVUzogNDMsIC8qICsgKi9cbiAgQ0hBUl9RVUVTVElPTl9NQVJLOiA2MywgLyogPyAqL1xuICBDSEFSX1JJR0hUX0FOR0xFX0JSQUNLRVQ6IDYyLCAvKiA+ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0U6IDEyNSwgLyogfSAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUOiA5MywgLyogXSAqL1xuICBDSEFSX1NFTUlDT0xPTjogNTksIC8qIDsgKi9cbiAgQ0hBUl9TSU5HTEVfUVVPVEU6IDM5LCAvKiAnICovXG4gIENIQVJfU1BBQ0U6IDMyLCAvKiAgICovXG4gIENIQVJfVEFCOiA5LCAvKiBcXHQgKi9cbiAgQ0hBUl9VTkRFUlNDT1JFOiA5NSwgLyogXyAqL1xuICBDSEFSX1ZFUlRJQ0FMX0xJTkU6IDEyNCwgLyogfCAqL1xuICBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRTogNjUyNzksIC8qIFxcdUZFRkYgKi9cblxuICBTRVA6IHBhdGguc2VwLFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgRVhUR0xPQl9DSEFSU1xuICAgKi9cblxuICBleHRnbG9iQ2hhcnMoY2hhcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJyEnOiB7IHR5cGU6ICduZWdhdGUnLCBvcGVuOiAnKD86KD8hKD86JywgY2xvc2U6IGApKSR7Y2hhcnMuU1RBUn0pYCB9LFxuICAgICAgJz8nOiB7IHR5cGU6ICdxbWFyaycsIG9wZW46ICcoPzonLCBjbG9zZTogJyk/JyB9LFxuICAgICAgJysnOiB7IHR5cGU6ICdwbHVzJywgb3BlbjogJyg/OicsIGNsb3NlOiAnKSsnIH0sXG4gICAgICAnKic6IHsgdHlwZTogJ3N0YXInLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpKicgfSxcbiAgICAgICdAJzogeyB0eXBlOiAnYXQnLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpJyB9XG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlIEdMT0JfQ0hBUlNcbiAgICovXG5cbiAgZ2xvYkNoYXJzKHdpbjMyKSB7XG4gICAgcmV0dXJuIHdpbjMyID09PSB0cnVlID8gV0lORE9XU19DSEFSUyA6IFBPU0lYX0NIQVJTO1xuICB9XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHdpbjMyID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbmNvbnN0IHtcbiAgUkVHRVhfQkFDS1NMQVNILFxuICBSRUdFWF9SRU1PVkVfQkFDS1NMQVNILFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTLFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTX0dMT0JBTFxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbmV4cG9ydHMuaXNPYmplY3QgPSB2YWwgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG5leHBvcnRzLmhhc1JlZ2V4Q2hhcnMgPSBzdHIgPT4gUkVHRVhfU1BFQ0lBTF9DSEFSUy50ZXN0KHN0cik7XG5leHBvcnRzLmlzUmVnZXhDaGFyID0gc3RyID0+IHN0ci5sZW5ndGggPT09IDEgJiYgZXhwb3J0cy5oYXNSZWdleENoYXJzKHN0cik7XG5leHBvcnRzLmVzY2FwZVJlZ2V4ID0gc3RyID0+IHN0ci5yZXBsYWNlKFJFR0VYX1NQRUNJQUxfQ0hBUlNfR0xPQkFMLCAnXFxcXCQxJyk7XG5leHBvcnRzLnRvUG9zaXhTbGFzaGVzID0gc3RyID0+IHN0ci5yZXBsYWNlKFJFR0VYX0JBQ0tTTEFTSCwgJy8nKTtcblxuZXhwb3J0cy5yZW1vdmVCYWNrc2xhc2hlcyA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZShSRUdFWF9SRU1PVkVfQkFDS1NMQVNILCBtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoID09PSAnXFxcXCcgPyAnJyA6IG1hdGNoO1xuICB9KTtcbn07XG5cbmV4cG9ydHMuc3VwcG9ydHNMb29rYmVoaW5kcyA9ICgpID0+IHtcbiAgY29uc3Qgc2VncyA9IHByb2Nlc3MudmVyc2lvbi5zbGljZSgxKS5zcGxpdCgnLicpLm1hcChOdW1iZXIpO1xuICBpZiAoc2Vncy5sZW5ndGggPT09IDMgJiYgc2Vnc1swXSA+PSA5IHx8IChzZWdzWzBdID09PSA4ICYmIHNlZ3NbMV0gPj0gMTApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0cy5pc1dpbmRvd3MgPSBvcHRpb25zID0+IHtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMud2luZG93cyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMud2luZG93cztcbiAgfVxuICByZXR1cm4gd2luMzIgPT09IHRydWUgfHwgcGF0aC5zZXAgPT09ICdcXFxcJztcbn07XG5cbmV4cG9ydHMuZXNjYXBlTGFzdCA9IChpbnB1dCwgY2hhciwgbGFzdElkeCkgPT4ge1xuICBjb25zdCBpZHggPSBpbnB1dC5sYXN0SW5kZXhPZihjaGFyLCBsYXN0SWR4KTtcbiAgaWYgKGlkeCA9PT0gLTEpIHJldHVybiBpbnB1dDtcbiAgaWYgKGlucHV0W2lkeCAtIDFdID09PSAnXFxcXCcpIHJldHVybiBleHBvcnRzLmVzY2FwZUxhc3QoaW5wdXQsIGNoYXIsIGlkeCAtIDEpO1xuICByZXR1cm4gYCR7aW5wdXQuc2xpY2UoMCwgaWR4KX1cXFxcJHtpbnB1dC5zbGljZShpZHgpfWA7XG59O1xuXG5leHBvcnRzLnJlbW92ZVByZWZpeCA9IChpbnB1dCwgc3RhdGUgPSB7fSkgPT4ge1xuICBsZXQgb3V0cHV0ID0gaW5wdXQ7XG4gIGlmIChvdXRwdXQuc3RhcnRzV2l0aCgnLi8nKSkge1xuICAgIG91dHB1dCA9IG91dHB1dC5zbGljZSgyKTtcbiAgICBzdGF0ZS5wcmVmaXggPSAnLi8nO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG5leHBvcnRzLndyYXBPdXRwdXQgPSAoaW5wdXQsIHN0YXRlID0ge30sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBwcmVwZW5kID0gb3B0aW9ucy5jb250YWlucyA/ICcnIDogJ14nO1xuICBjb25zdCBhcHBlbmQgPSBvcHRpb25zLmNvbnRhaW5zID8gJycgOiAnJCc7XG5cbiAgbGV0IG91dHB1dCA9IGAke3ByZXBlbmR9KD86JHtpbnB1dH0pJHthcHBlbmR9YDtcbiAgaWYgKHN0YXRlLm5lZ2F0ZWQgPT09IHRydWUpIHtcbiAgICBvdXRwdXQgPSBgKD86Xig/ISR7b3V0cHV0fSkuKiQpYDtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3Qge1xuICBDSEFSX0FTVEVSSVNLLCAgICAgICAgICAgICAvKiAqICovXG4gIENIQVJfQVQsICAgICAgICAgICAgICAgICAgIC8qIEAgKi9cbiAgQ0hBUl9CQUNLV0FSRF9TTEFTSCwgICAgICAgLyogXFwgKi9cbiAgQ0hBUl9DT01NQSwgICAgICAgICAgICAgICAgLyogLCAqL1xuICBDSEFSX0RPVCwgICAgICAgICAgICAgICAgICAvKiAuICovXG4gIENIQVJfRVhDTEFNQVRJT05fTUFSSywgICAgIC8qICEgKi9cbiAgQ0hBUl9GT1JXQVJEX1NMQVNILCAgICAgICAgLyogLyAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UsICAgICAvKiB7ICovXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUywgICAgIC8qICggKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VULCAgLyogWyAqL1xuICBDSEFSX1BMVVMsICAgICAgICAgICAgICAgICAvKiArICovXG4gIENIQVJfUVVFU1RJT05fTUFSSywgICAgICAgIC8qID8gKi9cbiAgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSwgICAgLyogfSAqL1xuICBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTLCAgICAvKiApICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQgIC8qIF0gKi9cbn0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5jb25zdCBpc1BhdGhTZXBhcmF0b3IgPSBjb2RlID0+IHtcbiAgcmV0dXJuIGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCB8fCBjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIO1xufTtcblxuY29uc3QgZGVwdGggPSB0b2tlbiA9PiB7XG4gIGlmICh0b2tlbi5pc1ByZWZpeCAhPT0gdHJ1ZSkge1xuICAgIHRva2VuLmRlcHRoID0gdG9rZW4uaXNHbG9ic3RhciA/IEluZmluaXR5IDogMTtcbiAgfVxufTtcblxuLyoqXG4gKiBRdWlja2x5IHNjYW5zIGEgZ2xvYiBwYXR0ZXJuIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgaGFuZGZ1bCBvZlxuICogdXNlZnVsIHByb3BlcnRpZXMsIGxpa2UgYGlzR2xvYmAsIGBwYXRoYCAodGhlIGxlYWRpbmcgbm9uLWdsb2IsIGlmIGl0IGV4aXN0cyksXG4gKiBgZ2xvYmAgKHRoZSBhY3R1YWwgcGF0dGVybiksIGBuZWdhdGVkYCAodHJ1ZSBpZiB0aGUgcGF0aCBzdGFydHMgd2l0aCBgIWAgYnV0IG5vdFxuICogd2l0aCBgIShgKSBhbmQgYG5lZ2F0ZWRFeHRnbG9iYCAodHJ1ZSBpZiB0aGUgcGF0aCBzdGFydHMgd2l0aCBgIShgKS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcG0gPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIGNvbnNvbGUubG9nKHBtLnNjYW4oJ2Zvby9iYXIvKi5qcycpKTtcbiAqIHsgaXNHbG9iOiB0cnVlLCBpbnB1dDogJ2Zvby9iYXIvKi5qcycsIGJhc2U6ICdmb28vYmFyJywgZ2xvYjogJyouanMnIH1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdG9rZW5zIGFuZCByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5jb25zdCBzY2FuID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IGxlbmd0aCA9IGlucHV0Lmxlbmd0aCAtIDE7XG4gIGNvbnN0IHNjYW5Ub0VuZCA9IG9wdHMucGFydHMgPT09IHRydWUgfHwgb3B0cy5zY2FuVG9FbmQgPT09IHRydWU7XG4gIGNvbnN0IHNsYXNoZXMgPSBbXTtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGNvbnN0IHBhcnRzID0gW107XG5cbiAgbGV0IHN0ciA9IGlucHV0O1xuICBsZXQgaW5kZXggPSAtMTtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIGxldCBpc0JyYWNlID0gZmFsc2U7XG4gIGxldCBpc0JyYWNrZXQgPSBmYWxzZTtcbiAgbGV0IGlzR2xvYiA9IGZhbHNlO1xuICBsZXQgaXNFeHRnbG9iID0gZmFsc2U7XG4gIGxldCBpc0dsb2JzdGFyID0gZmFsc2U7XG4gIGxldCBicmFjZUVzY2FwZWQgPSBmYWxzZTtcbiAgbGV0IGJhY2tzbGFzaGVzID0gZmFsc2U7XG4gIGxldCBuZWdhdGVkID0gZmFsc2U7XG4gIGxldCBuZWdhdGVkRXh0Z2xvYiA9IGZhbHNlO1xuICBsZXQgZmluaXNoZWQgPSBmYWxzZTtcbiAgbGV0IGJyYWNlcyA9IDA7XG4gIGxldCBwcmV2O1xuICBsZXQgY29kZTtcbiAgbGV0IHRva2VuID0geyB2YWx1ZTogJycsIGRlcHRoOiAwLCBpc0dsb2I6IGZhbHNlIH07XG5cbiAgY29uc3QgZW9zID0gKCkgPT4gaW5kZXggPj0gbGVuZ3RoO1xuICBjb25zdCBwZWVrID0gKCkgPT4gc3RyLmNoYXJDb2RlQXQoaW5kZXggKyAxKTtcbiAgY29uc3QgYWR2YW5jZSA9ICgpID0+IHtcbiAgICBwcmV2ID0gY29kZTtcbiAgICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCk7XG4gIH07XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY29kZSA9IGFkdmFuY2UoKTtcbiAgICBsZXQgbmV4dDtcblxuICAgIGlmIChjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgIGNvZGUgPSBhZHZhbmNlKCk7XG5cbiAgICAgIGlmIChjb2RlID09PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgICAgYnJhY2VFc2NhcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChicmFjZUVzY2FwZWQgPT09IHRydWUgfHwgY29kZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICBicmFjZXMrKztcblxuICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChjb2RlID0gYWR2YW5jZSgpKSkge1xuICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgIGFkdmFuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgICAgICBicmFjZXMrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChicmFjZUVzY2FwZWQgIT09IHRydWUgJiYgY29kZSA9PT0gQ0hBUl9ET1QgJiYgKGNvZGUgPSBhZHZhbmNlKCkpID09PSBDSEFSX0RPVCkge1xuICAgICAgICAgIGlzQnJhY2UgPSB0b2tlbi5pc0JyYWNlID0gdHJ1ZTtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJyYWNlRXNjYXBlZCAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0NPTU1BKSB7XG4gICAgICAgICAgaXNCcmFjZSA9IHRva2VuLmlzQnJhY2UgPSB0cnVlO1xuICAgICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSkge1xuICAgICAgICAgIGJyYWNlcy0tO1xuXG4gICAgICAgICAgaWYgKGJyYWNlcyA9PT0gMCkge1xuICAgICAgICAgICAgYnJhY2VFc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpc0JyYWNlID0gdG9rZW4uaXNCcmFjZSA9IHRydWU7XG4gICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgc2xhc2hlcy5wdXNoKGluZGV4KTtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgIHRva2VuID0geyB2YWx1ZTogJycsIGRlcHRoOiAwLCBpc0dsb2I6IGZhbHNlIH07XG5cbiAgICAgIGlmIChmaW5pc2hlZCA9PT0gdHJ1ZSkgY29udGludWU7XG4gICAgICBpZiAocHJldiA9PT0gQ0hBUl9ET1QgJiYgaW5kZXggPT09IChzdGFydCArIDEpKSB7XG4gICAgICAgIHN0YXJ0ICs9IDI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5ub2V4dCAhPT0gdHJ1ZSkge1xuICAgICAgY29uc3QgaXNFeHRnbG9iQ2hhciA9IGNvZGUgPT09IENIQVJfUExVU1xuICAgICAgICB8fCBjb2RlID09PSBDSEFSX0FUXG4gICAgICAgIHx8IGNvZGUgPT09IENIQVJfQVNURVJJU0tcbiAgICAgICAgfHwgY29kZSA9PT0gQ0hBUl9RVUVTVElPTl9NQVJLXG4gICAgICAgIHx8IGNvZGUgPT09IENIQVJfRVhDTEFNQVRJT05fTUFSSztcblxuICAgICAgaWYgKGlzRXh0Z2xvYkNoYXIgPT09IHRydWUgJiYgcGVlaygpID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgaXNFeHRnbG9iID0gdG9rZW4uaXNFeHRnbG9iID0gdHJ1ZTtcbiAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9FWENMQU1BVElPTl9NQVJLICYmIGluZGV4ID09PSBzdGFydCkge1xuICAgICAgICAgIG5lZ2F0ZWRFeHRnbG9iID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgICB3aGlsZSAoZW9zKCkgIT09IHRydWUgJiYgKGNvZGUgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29kZSA9IGFkdmFuY2UoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTKSB7XG4gICAgICAgICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBDSEFSX0FTVEVSSVNLKSB7XG4gICAgICBpZiAocHJldiA9PT0gQ0hBUl9BU1RFUklTSykgaXNHbG9ic3RhciA9IHRva2VuLmlzR2xvYnN0YXIgPSB0cnVlO1xuICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBDSEFSX1FVRVNUSU9OX01BUkspIHtcbiAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICB3aGlsZSAoZW9zKCkgIT09IHRydWUgJiYgKG5leHQgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgICAgYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgICAgICBpc0JyYWNrZXQgPSB0b2tlbi5pc0JyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChvcHRzLm5vbmVnYXRlICE9PSB0cnVlICYmIGNvZGUgPT09IENIQVJfRVhDTEFNQVRJT05fTUFSSyAmJiBpbmRleCA9PT0gc3RhcnQpIHtcbiAgICAgIG5lZ2F0ZWQgPSB0b2tlbi5uZWdhdGVkID0gdHJ1ZTtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5ub3BhcmVuICE9PSB0cnVlICYmIGNvZGUgPT09IENIQVJfTEVGVF9QQVJFTlRIRVNFUykge1xuICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICB3aGlsZSAoZW9zKCkgIT09IHRydWUgJiYgKGNvZGUgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfTEVGVF9QQVJFTlRIRVNFUykge1xuICAgICAgICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgICAgICBjb2RlID0gYWR2YW5jZSgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfUklHSFRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpc0dsb2IgPT09IHRydWUpIHtcbiAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMubm9leHQgPT09IHRydWUpIHtcbiAgICBpc0V4dGdsb2IgPSBmYWxzZTtcbiAgICBpc0dsb2IgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBiYXNlID0gc3RyO1xuICBsZXQgcHJlZml4ID0gJyc7XG4gIGxldCBnbG9iID0gJyc7XG5cbiAgaWYgKHN0YXJ0ID4gMCkge1xuICAgIHByZWZpeCA9IHN0ci5zbGljZSgwLCBzdGFydCk7XG4gICAgc3RyID0gc3RyLnNsaWNlKHN0YXJ0KTtcbiAgICBsYXN0SW5kZXggLT0gc3RhcnQ7XG4gIH1cblxuICBpZiAoYmFzZSAmJiBpc0dsb2IgPT09IHRydWUgJiYgbGFzdEluZGV4ID4gMCkge1xuICAgIGJhc2UgPSBzdHIuc2xpY2UoMCwgbGFzdEluZGV4KTtcbiAgICBnbG9iID0gc3RyLnNsaWNlKGxhc3RJbmRleCk7XG4gIH0gZWxzZSBpZiAoaXNHbG9iID09PSB0cnVlKSB7XG4gICAgYmFzZSA9ICcnO1xuICAgIGdsb2IgPSBzdHI7XG4gIH0gZWxzZSB7XG4gICAgYmFzZSA9IHN0cjtcbiAgfVxuXG4gIGlmIChiYXNlICYmIGJhc2UgIT09ICcnICYmIGJhc2UgIT09ICcvJyAmJiBiYXNlICE9PSBzdHIpIHtcbiAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGJhc2UuY2hhckNvZGVBdChiYXNlLmxlbmd0aCAtIDEpKSkge1xuICAgICAgYmFzZSA9IGJhc2Uuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgaWYgKGdsb2IpIGdsb2IgPSB1dGlscy5yZW1vdmVCYWNrc2xhc2hlcyhnbG9iKTtcblxuICAgIGlmIChiYXNlICYmIGJhY2tzbGFzaGVzID09PSB0cnVlKSB7XG4gICAgICBiYXNlID0gdXRpbHMucmVtb3ZlQmFja3NsYXNoZXMoYmFzZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgcHJlZml4LFxuICAgIGlucHV0LFxuICAgIHN0YXJ0LFxuICAgIGJhc2UsXG4gICAgZ2xvYixcbiAgICBpc0JyYWNlLFxuICAgIGlzQnJhY2tldCxcbiAgICBpc0dsb2IsXG4gICAgaXNFeHRnbG9iLFxuICAgIGlzR2xvYnN0YXIsXG4gICAgbmVnYXRlZCxcbiAgICBuZWdhdGVkRXh0Z2xvYlxuICB9O1xuXG4gIGlmIChvcHRzLnRva2VucyA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLm1heERlcHRoID0gMDtcbiAgICBpZiAoIWlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgIH1cbiAgICBzdGF0ZS50b2tlbnMgPSB0b2tlbnM7XG4gIH1cblxuICBpZiAob3B0cy5wYXJ0cyA9PT0gdHJ1ZSB8fCBvcHRzLnRva2VucyA9PT0gdHJ1ZSkge1xuICAgIGxldCBwcmV2SW5kZXg7XG5cbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzbGFzaGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGNvbnN0IG4gPSBwcmV2SW5kZXggPyBwcmV2SW5kZXggKyAxIDogc3RhcnQ7XG4gICAgICBjb25zdCBpID0gc2xhc2hlc1tpZHhdO1xuICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dC5zbGljZShuLCBpKTtcbiAgICAgIGlmIChvcHRzLnRva2Vucykge1xuICAgICAgICBpZiAoaWR4ID09PSAwICYmIHN0YXJ0ICE9PSAwKSB7XG4gICAgICAgICAgdG9rZW5zW2lkeF0uaXNQcmVmaXggPSB0cnVlO1xuICAgICAgICAgIHRva2Vuc1tpZHhdLnZhbHVlID0gcHJlZml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vuc1tpZHhdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZGVwdGgodG9rZW5zW2lkeF0pO1xuICAgICAgICBzdGF0ZS5tYXhEZXB0aCArPSB0b2tlbnNbaWR4XS5kZXB0aDtcbiAgICAgIH1cbiAgICAgIGlmIChpZHggIT09IDAgfHwgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHBhcnRzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgICAgcHJldkluZGV4ID0gaTtcbiAgICB9XG5cbiAgICBpZiAocHJldkluZGV4ICYmIHByZXZJbmRleCArIDEgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXQuc2xpY2UocHJldkluZGV4ICsgMSk7XG4gICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcblxuICAgICAgaWYgKG9wdHMudG9rZW5zKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZGVwdGgodG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSk7XG4gICAgICAgIHN0YXRlLm1heERlcHRoICs9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0uZGVwdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGUuc2xhc2hlcyA9IHNsYXNoZXM7XG4gICAgc3RhdGUucGFydHMgPSBwYXJ0cztcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc2NhbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCB7XG4gIE1BWF9MRU5HVEgsXG4gIFBPU0lYX1JFR0VYX1NPVVJDRSxcbiAgUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlMsXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRixcbiAgUkVQTEFDRU1FTlRTXG59ID0gY29uc3RhbnRzO1xuXG4vKipcbiAqIEhlbHBlcnNcbiAqL1xuXG5jb25zdCBleHBhbmRSYW5nZSA9IChhcmdzLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5leHBhbmRSYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLmV4cGFuZFJhbmdlKC4uLmFyZ3MsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXJncy5zb3J0KCk7XG4gIGNvbnN0IHZhbHVlID0gYFske2FyZ3Muam9pbignLScpfV1gO1xuXG4gIHRyeSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAqL1xuICAgIG5ldyBSZWdFeHAodmFsdWUpO1xuICB9IGNhdGNoIChleCkge1xuICAgIHJldHVybiBhcmdzLm1hcCh2ID0+IHV0aWxzLmVzY2FwZVJlZ2V4KHYpKS5qb2luKCcuLicpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIG1lc3NhZ2UgZm9yIGEgc3ludGF4IGVycm9yXG4gKi9cblxuY29uc3Qgc3ludGF4RXJyb3IgPSAodHlwZSwgY2hhcikgPT4ge1xuICByZXR1cm4gYE1pc3NpbmcgJHt0eXBlfTogXCIke2NoYXJ9XCIgLSB1c2UgXCJcXFxcXFxcXCR7Y2hhcn1cIiB0byBtYXRjaCBsaXRlcmFsIGNoYXJhY3RlcnNgO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gaW5wdXQgc3RyaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmNvbnN0IHBhcnNlID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGlucHV0ID0gUkVQTEFDRU1FTlRTW2lucHV0XSB8fCBpbnB1dDtcblxuICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGNvbnN0IG1heCA9IHR5cGVvZiBvcHRzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihNQVhfTEVOR1RILCBvcHRzLm1heExlbmd0aCkgOiBNQVhfTEVOR1RIO1xuXG4gIGxldCBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gIGlmIChsZW4gPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aDogJHtsZW59LCBleGNlZWRzIG1heGltdW0gYWxsb3dlZCBsZW5ndGg6ICR7bWF4fWApO1xuICB9XG5cbiAgY29uc3QgYm9zID0geyB0eXBlOiAnYm9zJywgdmFsdWU6ICcnLCBvdXRwdXQ6IG9wdHMucHJlcGVuZCB8fCAnJyB9O1xuICBjb25zdCB0b2tlbnMgPSBbYm9zXTtcblxuICBjb25zdCBjYXB0dXJlID0gb3B0cy5jYXB0dXJlID8gJycgOiAnPzonO1xuICBjb25zdCB3aW4zMiA9IHV0aWxzLmlzV2luZG93cyhvcHRpb25zKTtcblxuICAvLyBjcmVhdGUgY29uc3RhbnRzIGJhc2VkIG9uIHBsYXRmb3JtLCBmb3Igd2luZG93cyBvciBwb3NpeFxuICBjb25zdCBQTEFURk9STV9DSEFSUyA9IGNvbnN0YW50cy5nbG9iQ2hhcnMod2luMzIpO1xuICBjb25zdCBFWFRHTE9CX0NIQVJTID0gY29uc3RhbnRzLmV4dGdsb2JDaGFycyhQTEFURk9STV9DSEFSUyk7XG5cbiAgY29uc3Qge1xuICAgIERPVF9MSVRFUkFMLFxuICAgIFBMVVNfTElURVJBTCxcbiAgICBTTEFTSF9MSVRFUkFMLFxuICAgIE9ORV9DSEFSLFxuICAgIERPVFNfU0xBU0gsXG4gICAgTk9fRE9ULFxuICAgIE5PX0RPVF9TTEFTSCxcbiAgICBOT19ET1RTX1NMQVNILFxuICAgIFFNQVJLLFxuICAgIFFNQVJLX05PX0RPVCxcbiAgICBTVEFSLFxuICAgIFNUQVJUX0FOQ0hPUlxuICB9ID0gUExBVEZPUk1fQ0hBUlM7XG5cbiAgY29uc3QgZ2xvYnN0YXIgPSBvcHRzID0+IHtcbiAgICByZXR1cm4gYCgke2NhcHR1cmV9KD86KD8hJHtTVEFSVF9BTkNIT1J9JHtvcHRzLmRvdCA/IERPVFNfU0xBU0ggOiBET1RfTElURVJBTH0pLikqPylgO1xuICB9O1xuXG4gIGNvbnN0IG5vZG90ID0gb3B0cy5kb3QgPyAnJyA6IE5PX0RPVDtcbiAgY29uc3QgcW1hcmtOb0RvdCA9IG9wdHMuZG90ID8gUU1BUksgOiBRTUFSS19OT19ET1Q7XG4gIGxldCBzdGFyID0gb3B0cy5iYXNoID09PSB0cnVlID8gZ2xvYnN0YXIob3B0cykgOiBTVEFSO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICBzdGFyID0gYCgke3N0YXJ9KWA7XG4gIH1cblxuICAvLyBtaW5pbWF0Y2ggb3B0aW9ucyBzdXBwb3J0XG4gIGlmICh0eXBlb2Ygb3B0cy5ub2V4dCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0cy5ub2V4dGdsb2IgPSBvcHRzLm5vZXh0O1xuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgaW5wdXQsXG4gICAgaW5kZXg6IC0xLFxuICAgIHN0YXJ0OiAwLFxuICAgIGRvdDogb3B0cy5kb3QgPT09IHRydWUsXG4gICAgY29uc3VtZWQ6ICcnLFxuICAgIG91dHB1dDogJycsXG4gICAgcHJlZml4OiAnJyxcbiAgICBiYWNrdHJhY2s6IGZhbHNlLFxuICAgIG5lZ2F0ZWQ6IGZhbHNlLFxuICAgIGJyYWNrZXRzOiAwLFxuICAgIGJyYWNlczogMCxcbiAgICBwYXJlbnM6IDAsXG4gICAgcXVvdGVzOiAwLFxuICAgIGdsb2JzdGFyOiBmYWxzZSxcbiAgICB0b2tlbnNcbiAgfTtcblxuICBpbnB1dCA9IHV0aWxzLnJlbW92ZVByZWZpeChpbnB1dCwgc3RhdGUpO1xuICBsZW4gPSBpbnB1dC5sZW5ndGg7XG5cbiAgY29uc3QgZXh0Z2xvYnMgPSBbXTtcbiAgY29uc3QgYnJhY2VzID0gW107XG4gIGNvbnN0IHN0YWNrID0gW107XG4gIGxldCBwcmV2ID0gYm9zO1xuICBsZXQgdmFsdWU7XG5cbiAgLyoqXG4gICAqIFRva2VuaXppbmcgaGVscGVyc1xuICAgKi9cblxuICBjb25zdCBlb3MgPSAoKSA9PiBzdGF0ZS5pbmRleCA9PT0gbGVuIC0gMTtcbiAgY29uc3QgcGVlayA9IHN0YXRlLnBlZWsgPSAobiA9IDEpID0+IGlucHV0W3N0YXRlLmluZGV4ICsgbl07XG4gIGNvbnN0IGFkdmFuY2UgPSBzdGF0ZS5hZHZhbmNlID0gKCkgPT4gaW5wdXRbKytzdGF0ZS5pbmRleF0gfHwgJyc7XG4gIGNvbnN0IHJlbWFpbmluZyA9ICgpID0+IGlucHV0LnNsaWNlKHN0YXRlLmluZGV4ICsgMSk7XG4gIGNvbnN0IGNvbnN1bWUgPSAodmFsdWUgPSAnJywgbnVtID0gMCkgPT4ge1xuICAgIHN0YXRlLmNvbnN1bWVkICs9IHZhbHVlO1xuICAgIHN0YXRlLmluZGV4ICs9IG51bTtcbiAgfTtcblxuICBjb25zdCBhcHBlbmQgPSB0b2tlbiA9PiB7XG4gICAgc3RhdGUub3V0cHV0ICs9IHRva2VuLm91dHB1dCAhPSBudWxsID8gdG9rZW4ub3V0cHV0IDogdG9rZW4udmFsdWU7XG4gICAgY29uc3VtZSh0b2tlbi52YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgbmVnYXRlID0gKCkgPT4ge1xuICAgIGxldCBjb3VudCA9IDE7XG5cbiAgICB3aGlsZSAocGVlaygpID09PSAnIScgJiYgKHBlZWsoMikgIT09ICcoJyB8fCBwZWVrKDMpID09PSAnPycpKSB7XG4gICAgICBhZHZhbmNlKCk7XG4gICAgICBzdGF0ZS5zdGFydCsrO1xuICAgICAgY291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY291bnQgJSAyID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGUubmVnYXRlZCA9IHRydWU7XG4gICAgc3RhdGUuc3RhcnQrKztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBpbmNyZW1lbnQgPSB0eXBlID0+IHtcbiAgICBzdGF0ZVt0eXBlXSsrO1xuICAgIHN0YWNrLnB1c2godHlwZSk7XG4gIH07XG5cbiAgY29uc3QgZGVjcmVtZW50ID0gdHlwZSA9PiB7XG4gICAgc3RhdGVbdHlwZV0tLTtcbiAgICBzdGFjay5wb3AoKTtcbiAgfTtcblxuICAvKipcbiAgICogUHVzaCB0b2tlbnMgb250byB0aGUgdG9rZW5zIGFycmF5LiBUaGlzIGhlbHBlciBzcGVlZHMgdXBcbiAgICogdG9rZW5pemluZyBieSAxKSBoZWxwaW5nIHVzIGF2b2lkIGJhY2t0cmFja2luZyBhcyBtdWNoIGFzIHBvc3NpYmxlLFxuICAgKiBhbmQgMikgaGVscGluZyB1cyBhdm9pZCBjcmVhdGluZyBleHRyYSB0b2tlbnMgd2hlbiBjb25zZWN1dGl2ZVxuICAgKiBjaGFyYWN0ZXJzIGFyZSBwbGFpbiB0ZXh0LiBUaGlzIGltcHJvdmVzIHBlcmZvcm1hbmNlIGFuZCBzaW1wbGlmaWVzXG4gICAqIGxvb2tiZWhpbmRzLlxuICAgKi9cblxuICBjb25zdCBwdXNoID0gdG9rID0+IHtcbiAgICBpZiAocHJldi50eXBlID09PSAnZ2xvYnN0YXInKSB7XG4gICAgICBjb25zdCBpc0JyYWNlID0gc3RhdGUuYnJhY2VzID4gMCAmJiAodG9rLnR5cGUgPT09ICdjb21tYScgfHwgdG9rLnR5cGUgPT09ICdicmFjZScpO1xuICAgICAgY29uc3QgaXNFeHRnbG9iID0gdG9rLmV4dGdsb2IgPT09IHRydWUgfHwgKGV4dGdsb2JzLmxlbmd0aCAmJiAodG9rLnR5cGUgPT09ICdwaXBlJyB8fCB0b2sudHlwZSA9PT0gJ3BhcmVuJykpO1xuXG4gICAgICBpZiAodG9rLnR5cGUgIT09ICdzbGFzaCcgJiYgdG9rLnR5cGUgIT09ICdwYXJlbicgJiYgIWlzQnJhY2UgJiYgIWlzRXh0Z2xvYikge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLXByZXYub3V0cHV0Lmxlbmd0aCk7XG4gICAgICAgIHByZXYudHlwZSA9ICdzdGFyJztcbiAgICAgICAgcHJldi52YWx1ZSA9ICcqJztcbiAgICAgICAgcHJldi5vdXRwdXQgPSBzdGFyO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi5vdXRwdXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dGdsb2JzLmxlbmd0aCAmJiB0b2sudHlwZSAhPT0gJ3BhcmVuJykge1xuICAgICAgZXh0Z2xvYnNbZXh0Z2xvYnMubGVuZ3RoIC0gMV0uaW5uZXIgKz0gdG9rLnZhbHVlO1xuICAgIH1cblxuICAgIGlmICh0b2sudmFsdWUgfHwgdG9rLm91dHB1dCkgYXBwZW5kKHRvayk7XG4gICAgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSAndGV4dCcgJiYgdG9rLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgcHJldi52YWx1ZSArPSB0b2sudmFsdWU7XG4gICAgICBwcmV2Lm91dHB1dCA9IChwcmV2Lm91dHB1dCB8fCAnJykgKyB0b2sudmFsdWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rLnByZXYgPSBwcmV2O1xuICAgIHRva2Vucy5wdXNoKHRvayk7XG4gICAgcHJldiA9IHRvaztcbiAgfTtcblxuICBjb25zdCBleHRnbG9iT3BlbiA9ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0geyAuLi5FWFRHTE9CX0NIQVJTW3ZhbHVlXSwgY29uZGl0aW9uczogMSwgaW5uZXI6ICcnIH07XG5cbiAgICB0b2tlbi5wcmV2ID0gcHJldjtcbiAgICB0b2tlbi5wYXJlbnMgPSBzdGF0ZS5wYXJlbnM7XG4gICAgdG9rZW4ub3V0cHV0ID0gc3RhdGUub3V0cHV0O1xuICAgIGNvbnN0IG91dHB1dCA9IChvcHRzLmNhcHR1cmUgPyAnKCcgOiAnJykgKyB0b2tlbi5vcGVuO1xuXG4gICAgaW5jcmVtZW50KCdwYXJlbnMnKTtcbiAgICBwdXNoKHsgdHlwZSwgdmFsdWUsIG91dHB1dDogc3RhdGUub3V0cHV0ID8gJycgOiBPTkVfQ0hBUiB9KTtcbiAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWU6IGFkdmFuY2UoKSwgb3V0cHV0IH0pO1xuICAgIGV4dGdsb2JzLnB1c2godG9rZW4pO1xuICB9O1xuXG4gIGNvbnN0IGV4dGdsb2JDbG9zZSA9IHRva2VuID0+IHtcbiAgICBsZXQgb3V0cHV0ID0gdG9rZW4uY2xvc2UgKyAob3B0cy5jYXB0dXJlID8gJyknIDogJycpO1xuICAgIGxldCByZXN0O1xuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICduZWdhdGUnKSB7XG4gICAgICBsZXQgZXh0Z2xvYlN0YXIgPSBzdGFyO1xuXG4gICAgICBpZiAodG9rZW4uaW5uZXIgJiYgdG9rZW4uaW5uZXIubGVuZ3RoID4gMSAmJiB0b2tlbi5pbm5lci5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIGV4dGdsb2JTdGFyID0gZ2xvYnN0YXIob3B0cyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleHRnbG9iU3RhciAhPT0gc3RhciB8fCBlb3MoKSB8fCAvXlxcKSskLy50ZXN0KHJlbWFpbmluZygpKSkge1xuICAgICAgICBvdXRwdXQgPSB0b2tlbi5jbG9zZSA9IGApJCkpJHtleHRnbG9iU3Rhcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4uaW5uZXIuaW5jbHVkZXMoJyonKSAmJiAocmVzdCA9IHJlbWFpbmluZygpKSAmJiAvXlxcLlteXFxcXC8uXSskLy50ZXN0KHJlc3QpKSB7XG4gICAgICAgIG91dHB1dCA9IHRva2VuLmNsb3NlID0gYCkke3Jlc3R9KSR7ZXh0Z2xvYlN0YXJ9KWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5wcmV2LnR5cGUgPT09ICdib3MnKSB7XG4gICAgICAgIHN0YXRlLm5lZ2F0ZWRFeHRnbG9iID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWUsIG91dHB1dCB9KTtcbiAgICBkZWNyZW1lbnQoJ3BhcmVucycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGYXN0IHBhdGhzXG4gICAqL1xuXG4gIGlmIChvcHRzLmZhc3RwYXRocyAhPT0gZmFsc2UgJiYgIS8oXlsqIV18Wy8oKVtcXF17fVwiXSkvLnRlc3QoaW5wdXQpKSB7XG4gICAgbGV0IGJhY2tzbGFzaGVzID0gZmFsc2U7XG5cbiAgICBsZXQgb3V0cHV0ID0gaW5wdXQucmVwbGFjZShSRUdFWF9TUEVDSUFMX0NIQVJTX0JBQ0tSRUYsIChtLCBlc2MsIGNoYXJzLCBmaXJzdCwgcmVzdCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChmaXJzdCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCA9PT0gJz8nKSB7XG4gICAgICAgIGlmIChlc2MpIHtcbiAgICAgICAgICByZXR1cm4gZXNjICsgZmlyc3QgKyAocmVzdCA/IFFNQVJLLnJlcGVhdChyZXN0Lmxlbmd0aCkgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHFtYXJrTm9Eb3QgKyAocmVzdCA/IFFNQVJLLnJlcGVhdChyZXN0Lmxlbmd0aCkgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFFNQVJLLnJlcGVhdChjaGFycy5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3QgPT09ICcuJykge1xuICAgICAgICByZXR1cm4gRE9UX0xJVEVSQUwucmVwZWF0KGNoYXJzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCA9PT0gJyonKSB7XG4gICAgICAgIGlmIChlc2MpIHtcbiAgICAgICAgICByZXR1cm4gZXNjICsgZmlyc3QgKyAocmVzdCA/IHN0YXIgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXNjID8gbSA6IGBcXFxcJHttfWA7XG4gICAgfSk7XG5cbiAgICBpZiAoYmFja3NsYXNoZXMgPT09IHRydWUpIHtcbiAgICAgIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXFxcKy9nLCBtID0+IHtcbiAgICAgICAgICByZXR1cm4gbS5sZW5ndGggJSAyID09PSAwID8gJ1xcXFxcXFxcJyA6IChtID8gJ1xcXFwnIDogJycpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3V0cHV0ID09PSBpbnB1dCAmJiBvcHRzLmNvbnRhaW5zID09PSB0cnVlKSB7XG4gICAgICBzdGF0ZS5vdXRwdXQgPSBpbnB1dDtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBzdGF0ZS5vdXRwdXQgPSB1dGlscy53cmFwT3V0cHV0KG91dHB1dCwgc3RhdGUsIG9wdGlvbnMpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2tlbml6ZSBpbnB1dCB1bnRpbCB3ZSByZWFjaCBlbmQtb2Ytc3RyaW5nXG4gICAqL1xuXG4gIHdoaWxlICghZW9zKCkpIHtcbiAgICB2YWx1ZSA9IGFkdmFuY2UoKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gJ1xcdTAwMDAnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVkIGNoYXJhY3RlcnNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ1xcXFwnKSB7XG4gICAgICBjb25zdCBuZXh0ID0gcGVlaygpO1xuXG4gICAgICBpZiAobmV4dCA9PT0gJy8nICYmIG9wdHMuYmFzaCAhPT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHQgPT09ICcuJyB8fCBuZXh0ID09PSAnOycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICB2YWx1ZSArPSAnXFxcXCc7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29sbGFwc2Ugc2xhc2hlcyB0byByZWR1Y2UgcG90ZW50aWFsIGZvciBleHBsb2l0c1xuICAgICAgY29uc3QgbWF0Y2ggPSAvXlxcXFwrLy5leGVjKHJlbWFpbmluZygpKTtcbiAgICAgIGxldCBzbGFzaGVzID0gMDtcblxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgc2xhc2hlcyA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgc3RhdGUuaW5kZXggKz0gc2xhc2hlcztcbiAgICAgICAgaWYgKHNsYXNoZXMgJSAyICE9PSAwKSB7XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gYWR2YW5jZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgKz0gYWR2YW5jZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuYnJhY2tldHMgPT09IDApIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIGluc2lkZSBhIHJlZ2V4IGNoYXJhY3RlciBjbGFzcywgY29udGludWVcbiAgICAgKiB1bnRpbCB3ZSByZWFjaCB0aGUgY2xvc2luZyBicmFja2V0LlxuICAgICAqL1xuXG4gICAgaWYgKHN0YXRlLmJyYWNrZXRzID4gMCAmJiAodmFsdWUgIT09ICddJyB8fCBwcmV2LnZhbHVlID09PSAnWycgfHwgcHJldi52YWx1ZSA9PT0gJ1teJykpIHtcbiAgICAgIGlmIChvcHRzLnBvc2l4ICE9PSBmYWxzZSAmJiB2YWx1ZSA9PT0gJzonKSB7XG4gICAgICAgIGNvbnN0IGlubmVyID0gcHJldi52YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgaWYgKGlubmVyLmluY2x1ZGVzKCdbJykpIHtcbiAgICAgICAgICBwcmV2LnBvc2l4ID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChpbm5lci5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBwcmV2LnZhbHVlLmxhc3RJbmRleE9mKCdbJyk7XG4gICAgICAgICAgICBjb25zdCBwcmUgPSBwcmV2LnZhbHVlLnNsaWNlKDAsIGlkeCk7XG4gICAgICAgICAgICBjb25zdCByZXN0ID0gcHJldi52YWx1ZS5zbGljZShpZHggKyAyKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l4ID0gUE9TSVhfUkVHRVhfU09VUkNFW3Jlc3RdO1xuICAgICAgICAgICAgaWYgKHBvc2l4KSB7XG4gICAgICAgICAgICAgIHByZXYudmFsdWUgPSBwcmUgKyBwb3NpeDtcbiAgICAgICAgICAgICAgc3RhdGUuYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYWR2YW5jZSgpO1xuXG4gICAgICAgICAgICAgIGlmICghYm9zLm91dHB1dCAmJiB0b2tlbnMuaW5kZXhPZihwcmV2KSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGJvcy5vdXRwdXQgPSBPTkVfQ0hBUjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCh2YWx1ZSA9PT0gJ1snICYmIHBlZWsoKSAhPT0gJzonKSB8fCAodmFsdWUgPT09ICctJyAmJiBwZWVrKCkgPT09ICddJykpIHtcbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlID09PSAnXScgJiYgKHByZXYudmFsdWUgPT09ICdbJyB8fCBwcmV2LnZhbHVlID09PSAnW14nKSkge1xuICAgICAgICB2YWx1ZSA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5wb3NpeCA9PT0gdHJ1ZSAmJiB2YWx1ZSA9PT0gJyEnICYmIHByZXYudmFsdWUgPT09ICdbJykge1xuICAgICAgICB2YWx1ZSA9ICdeJztcbiAgICAgIH1cblxuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIGFwcGVuZCh7IHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgd2UncmUgaW5zaWRlIGEgcXVvdGVkIHN0cmluZywgY29udGludWVcbiAgICAgKiB1bnRpbCB3ZSByZWFjaCB0aGUgY2xvc2luZyBkb3VibGUgcXVvdGUuXG4gICAgICovXG5cbiAgICBpZiAoc3RhdGUucXVvdGVzID09PSAxICYmIHZhbHVlICE9PSAnXCInKSB7XG4gICAgICB2YWx1ZSA9IHV0aWxzLmVzY2FwZVJlZ2V4KHZhbHVlKTtcbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICBhcHBlbmQoeyB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvdWJsZSBxdW90ZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ1wiJykge1xuICAgICAgc3RhdGUucXVvdGVzID0gc3RhdGUucXVvdGVzID09PSAxID8gMCA6IDE7XG4gICAgICBpZiAob3B0cy5rZWVwUXVvdGVzID09PSB0cnVlKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyZW50aGVzZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJygnKSB7XG4gICAgICBpbmNyZW1lbnQoJ3BhcmVucycpO1xuICAgICAgcHVzaCh7IHR5cGU6ICdwYXJlbicsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnKScpIHtcbiAgICAgIGlmIChzdGF0ZS5wYXJlbnMgPT09IDAgJiYgb3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ29wZW5pbmcnLCAnKCcpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXh0Z2xvYiA9IGV4dGdsb2JzW2V4dGdsb2JzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGV4dGdsb2IgJiYgc3RhdGUucGFyZW5zID09PSBleHRnbG9iLnBhcmVucyArIDEpIHtcbiAgICAgICAgZXh0Z2xvYkNsb3NlKGV4dGdsb2JzLnBvcCgpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAncGFyZW4nLCB2YWx1ZSwgb3V0cHV0OiBzdGF0ZS5wYXJlbnMgPyAnKScgOiAnXFxcXCknIH0pO1xuICAgICAgZGVjcmVtZW50KCdwYXJlbnMnKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNxdWFyZSBicmFja2V0c1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnWycpIHtcbiAgICAgIGlmIChvcHRzLm5vYnJhY2tldCA9PT0gdHJ1ZSB8fCAhcmVtYWluaW5nKCkuaW5jbHVkZXMoJ10nKSkge1xuICAgICAgICBpZiAob3B0cy5ub2JyYWNrZXQgIT09IHRydWUgJiYgb3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICddJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluY3JlbWVudCgnYnJhY2tldHMnKTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdicmFja2V0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICddJykge1xuICAgICAgaWYgKG9wdHMubm9icmFja2V0ID09PSB0cnVlIHx8IChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ2JyYWNrZXQnICYmIHByZXYudmFsdWUubGVuZ3RoID09PSAxKSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0OiBgXFxcXCR7dmFsdWV9YCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5icmFja2V0cyA9PT0gMCkge1xuICAgICAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignb3BlbmluZycsICdbJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogYFxcXFwke3ZhbHVlfWAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBkZWNyZW1lbnQoJ2JyYWNrZXRzJyk7XG5cbiAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IHByZXYudmFsdWUuc2xpY2UoMSk7XG4gICAgICBpZiAocHJldi5wb3NpeCAhPT0gdHJ1ZSAmJiBwcmV2VmFsdWVbMF0gPT09ICdeJyAmJiAhcHJldlZhbHVlLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgdmFsdWUgPSBgLyR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIGFwcGVuZCh7IHZhbHVlIH0pO1xuXG4gICAgICAvLyB3aGVuIGxpdGVyYWwgYnJhY2tldHMgYXJlIGV4cGxpY2l0bHkgZGlzYWJsZWRcbiAgICAgIC8vIGFzc3VtZSB3ZSBzaG91bGQgbWF0Y2ggd2l0aCBhIHJlZ2V4IGNoYXJhY3RlciBjbGFzc1xuICAgICAgaWYgKG9wdHMubGl0ZXJhbEJyYWNrZXRzID09PSBmYWxzZSB8fCB1dGlscy5oYXNSZWdleENoYXJzKHByZXZWYWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVzY2FwZWQgPSB1dGlscy5lc2NhcGVSZWdleChwcmV2LnZhbHVlKTtcbiAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtcHJldi52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICAvLyB3aGVuIGxpdGVyYWwgYnJhY2tldHMgYXJlIGV4cGxpY2l0bHkgZW5hYmxlZFxuICAgICAgLy8gYXNzdW1lIHdlIHNob3VsZCBlc2NhcGUgdGhlIGJyYWNrZXRzIHRvIG1hdGNoIGxpdGVyYWwgY2hhcmFjdGVyc1xuICAgICAgaWYgKG9wdHMubGl0ZXJhbEJyYWNrZXRzID09PSB0cnVlKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBlc2NhcGVkO1xuICAgICAgICBwcmV2LnZhbHVlID0gZXNjYXBlZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHdoZW4gdGhlIHVzZXIgc3BlY2lmaWVzIG5vdGhpbmcsIHRyeSB0byBtYXRjaCBib3RoXG4gICAgICBwcmV2LnZhbHVlID0gYCgke2NhcHR1cmV9JHtlc2NhcGVkfXwke3ByZXYudmFsdWV9KWA7XG4gICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi52YWx1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJyYWNlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAneycgJiYgb3B0cy5ub2JyYWNlICE9PSB0cnVlKSB7XG4gICAgICBpbmNyZW1lbnQoJ2JyYWNlcycpO1xuXG4gICAgICBjb25zdCBvcGVuID0ge1xuICAgICAgICB0eXBlOiAnYnJhY2UnLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb3V0cHV0OiAnKCcsXG4gICAgICAgIG91dHB1dEluZGV4OiBzdGF0ZS5vdXRwdXQubGVuZ3RoLFxuICAgICAgICB0b2tlbnNJbmRleDogc3RhdGUudG9rZW5zLmxlbmd0aFxuICAgICAgfTtcblxuICAgICAgYnJhY2VzLnB1c2gob3Blbik7XG4gICAgICBwdXNoKG9wZW4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnfScpIHtcbiAgICAgIGNvbnN0IGJyYWNlID0gYnJhY2VzW2JyYWNlcy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKG9wdHMubm9icmFjZSA9PT0gdHJ1ZSB8fCAhYnJhY2UpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgb3V0cHV0ID0gJyknO1xuXG4gICAgICBpZiAoYnJhY2UuZG90cyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBhcnIgPSB0b2tlbnMuc2xpY2UoKTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdG9rZW5zLnBvcCgpO1xuICAgICAgICAgIGlmIChhcnJbaV0udHlwZSA9PT0gJ2JyYWNlJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcnJbaV0udHlwZSAhPT0gJ2RvdHMnKSB7XG4gICAgICAgICAgICByYW5nZS51bnNoaWZ0KGFycltpXS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0ID0gZXhwYW5kUmFuZ2UocmFuZ2UsIG9wdHMpO1xuICAgICAgICBzdGF0ZS5iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJhY2UuY29tbWEgIT09IHRydWUgJiYgYnJhY2UuZG90cyAhPT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBvdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgYnJhY2Uub3V0cHV0SW5kZXgpO1xuICAgICAgICBjb25zdCB0b2tzID0gc3RhdGUudG9rZW5zLnNsaWNlKGJyYWNlLnRva2Vuc0luZGV4KTtcbiAgICAgICAgYnJhY2UudmFsdWUgPSBicmFjZS5vdXRwdXQgPSAnXFxcXHsnO1xuICAgICAgICB2YWx1ZSA9IG91dHB1dCA9ICdcXFxcfSc7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IG91dDtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRva3MpIHtcbiAgICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gKHQub3V0cHV0IHx8IHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnYnJhY2UnLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgICAgZGVjcmVtZW50KCdicmFjZXMnKTtcbiAgICAgIGJyYWNlcy5wb3AoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBpcGVzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICd8Jykge1xuICAgICAgaWYgKGV4dGdsb2JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXh0Z2xvYnNbZXh0Z2xvYnMubGVuZ3RoIC0gMV0uY29uZGl0aW9ucysrO1xuICAgICAgfVxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tYXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJywnKSB7XG4gICAgICBsZXQgb3V0cHV0ID0gdmFsdWU7XG5cbiAgICAgIGNvbnN0IGJyYWNlID0gYnJhY2VzW2JyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChicmFjZSAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PT0gJ2JyYWNlcycpIHtcbiAgICAgICAgYnJhY2UuY29tbWEgPSB0cnVlO1xuICAgICAgICBvdXRwdXQgPSAnfCc7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnY29tbWEnLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2xhc2hlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnLycpIHtcbiAgICAgIC8vIGlmIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGdsb2IgaXMgXCIuL1wiLCBhZHZhbmNlIHRoZSBzdGFydFxuICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgaW5kZXgsIGFuZCBkb24ndCBhZGQgdGhlIFwiLi9cIiBjaGFyYWN0ZXJzXG4gICAgICAvLyB0byB0aGUgc3RhdGUuIFRoaXMgZ3JlYXRseSBzaW1wbGlmaWVzIGxvb2tiZWhpbmRzIHdoZW5cbiAgICAgIC8vIGNoZWNraW5nIGZvciBCT1MgY2hhcmFjdGVycyBsaWtlIFwiIVwiIGFuZCBcIi5cIiAobm90IFwiLi9cIilcbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdkb3QnICYmIHN0YXRlLmluZGV4ID09PSBzdGF0ZS5zdGFydCArIDEpIHtcbiAgICAgICAgc3RhdGUuc3RhcnQgPSBzdGF0ZS5pbmRleCArIDE7XG4gICAgICAgIHN0YXRlLmNvbnN1bWVkID0gJyc7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9ICcnO1xuICAgICAgICB0b2tlbnMucG9wKCk7XG4gICAgICAgIHByZXYgPSBib3M7IC8vIHJlc2V0IFwicHJldlwiIHRvIHRoZSBmaXJzdCB0b2tlblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdzbGFzaCcsIHZhbHVlLCBvdXRwdXQ6IFNMQVNIX0xJVEVSQUwgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3RzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcuJykge1xuICAgICAgaWYgKHN0YXRlLmJyYWNlcyA+IDAgJiYgcHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgICBpZiAocHJldi52YWx1ZSA9PT0gJy4nKSBwcmV2Lm91dHB1dCA9IERPVF9MSVRFUkFMO1xuICAgICAgICBjb25zdCBicmFjZSA9IGJyYWNlc1ticmFjZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHByZXYudHlwZSA9ICdkb3RzJztcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gdmFsdWU7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIGJyYWNlLmRvdHMgPSB0cnVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChzdGF0ZS5icmFjZXMgKyBzdGF0ZS5wYXJlbnMpID09PSAwICYmIHByZXYudHlwZSAhPT0gJ2JvcycgJiYgcHJldi50eXBlICE9PSAnc2xhc2gnKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQ6IERPVF9MSVRFUkFMIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdkb3QnLCB2YWx1ZSwgb3V0cHV0OiBET1RfTElURVJBTCB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFF1ZXN0aW9uIG1hcmtzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICc/Jykge1xuICAgICAgY29uc3QgaXNHcm91cCA9IHByZXYgJiYgcHJldi52YWx1ZSA9PT0gJygnO1xuICAgICAgaWYgKCFpc0dyb3VwICYmIG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnICYmIHBlZWsoMikgIT09ICc/Jykge1xuICAgICAgICBleHRnbG9iT3BlbigncW1hcmsnLCB2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09ICdwYXJlbicpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHBlZWsoKTtcbiAgICAgICAgbGV0IG91dHB1dCA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSAnPCcgJiYgIXV0aWxzLnN1cHBvcnRzTG9va2JlaGluZHMoKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm9kZS5qcyB2MTAgb3IgaGlnaGVyIGlzIHJlcXVpcmVkIGZvciByZWdleCBsb29rYmVoaW5kcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChwcmV2LnZhbHVlID09PSAnKCcgJiYgIS9bIT08Ol0vLnRlc3QobmV4dCkpIHx8IChuZXh0ID09PSAnPCcgJiYgIS88KFshPV18XFx3Kz4pLy50ZXN0KHJlbWFpbmluZygpKSkpIHtcbiAgICAgICAgICBvdXRwdXQgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5kb3QgIT09IHRydWUgJiYgKHByZXYudHlwZSA9PT0gJ3NsYXNoJyB8fCBwcmV2LnR5cGUgPT09ICdib3MnKSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3FtYXJrJywgdmFsdWUsIG91dHB1dDogUU1BUktfTk9fRE9UIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdxbWFyaycsIHZhbHVlLCBvdXRwdXQ6IFFNQVJLIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhjbGFtYXRpb25cbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJyEnKSB7XG4gICAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcpIHtcbiAgICAgICAgaWYgKHBlZWsoMikgIT09ICc/JyB8fCAhL1shPTw6XS8udGVzdChwZWVrKDMpKSkge1xuICAgICAgICAgIGV4dGdsb2JPcGVuKCduZWdhdGUnLCB2YWx1ZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMubm9uZWdhdGUgIT09IHRydWUgJiYgc3RhdGUuaW5kZXggPT09IDApIHtcbiAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsdXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJysnKSB7XG4gICAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcgJiYgcGVlaygyKSAhPT0gJz8nKSB7XG4gICAgICAgIGV4dGdsb2JPcGVuKCdwbHVzJywgdmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChwcmV2ICYmIHByZXYudmFsdWUgPT09ICcoJykgfHwgb3B0cy5yZWdleCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdwbHVzJywgdmFsdWUsIG91dHB1dDogUExVU19MSVRFUkFMIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChwcmV2ICYmIChwcmV2LnR5cGUgPT09ICdicmFja2V0JyB8fCBwcmV2LnR5cGUgPT09ICdwYXJlbicgfHwgcHJldi50eXBlID09PSAnYnJhY2UnKSkgfHwgc3RhdGUucGFyZW5zID4gMCkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3BsdXMnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAncGx1cycsIHZhbHVlOiBQTFVTX0xJVEVSQUwgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGFpbiB0ZXh0XG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICdAJykge1xuICAgICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnICYmIHBlZWsoMikgIT09ICc/Jykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ2F0JywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWUsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHRcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSAhPT0gJyonKSB7XG4gICAgICBpZiAodmFsdWUgPT09ICckJyB8fCB2YWx1ZSA9PT0gJ14nKSB7XG4gICAgICAgIHZhbHVlID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoID0gUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlMuZXhlYyhyZW1haW5pbmcoKSk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFsdWUgKz0gbWF0Y2hbMF07XG4gICAgICAgIHN0YXRlLmluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHByZXYgJiYgKHByZXYudHlwZSA9PT0gJ2dsb2JzdGFyJyB8fCBwcmV2LnN0YXIgPT09IHRydWUpKSB7XG4gICAgICBwcmV2LnR5cGUgPSAnc3Rhcic7XG4gICAgICBwcmV2LnN0YXIgPSB0cnVlO1xuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIHByZXYub3V0cHV0ID0gc3RhcjtcbiAgICAgIHN0YXRlLmJhY2t0cmFjayA9IHRydWU7XG4gICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCByZXN0ID0gcmVtYWluaW5nKCk7XG4gICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIC9eXFwoW14/XS8udGVzdChyZXN0KSkge1xuICAgICAgZXh0Z2xvYk9wZW4oJ3N0YXInLCB2YWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAocHJldi50eXBlID09PSAnc3RhcicpIHtcbiAgICAgIGlmIChvcHRzLm5vZ2xvYnN0YXIgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmlvciA9IHByZXYucHJldjtcbiAgICAgIGNvbnN0IGJlZm9yZSA9IHByaW9yLnByZXY7XG4gICAgICBjb25zdCBpc1N0YXJ0ID0gcHJpb3IudHlwZSA9PT0gJ3NsYXNoJyB8fCBwcmlvci50eXBlID09PSAnYm9zJztcbiAgICAgIGNvbnN0IGFmdGVyU3RhciA9IGJlZm9yZSAmJiAoYmVmb3JlLnR5cGUgPT09ICdzdGFyJyB8fCBiZWZvcmUudHlwZSA9PT0gJ2dsb2JzdGFyJyk7XG5cbiAgICAgIGlmIChvcHRzLmJhc2ggPT09IHRydWUgJiYgKCFpc1N0YXJ0IHx8IChyZXN0WzBdICYmIHJlc3RbMF0gIT09ICcvJykpKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnc3RhcicsIHZhbHVlLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNCcmFjZSA9IHN0YXRlLmJyYWNlcyA+IDAgJiYgKHByaW9yLnR5cGUgPT09ICdjb21tYScgfHwgcHJpb3IudHlwZSA9PT0gJ2JyYWNlJyk7XG4gICAgICBjb25zdCBpc0V4dGdsb2IgPSBleHRnbG9icy5sZW5ndGggJiYgKHByaW9yLnR5cGUgPT09ICdwaXBlJyB8fCBwcmlvci50eXBlID09PSAncGFyZW4nKTtcbiAgICAgIGlmICghaXNTdGFydCAmJiBwcmlvci50eXBlICE9PSAncGFyZW4nICYmICFpc0JyYWNlICYmICFpc0V4dGdsb2IpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzdGFyJywgdmFsdWUsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBzdHJpcCBjb25zZWN1dGl2ZSBgLyoqL2BcbiAgICAgIHdoaWxlIChyZXN0LnNsaWNlKDAsIDMpID09PSAnLyoqJykge1xuICAgICAgICBjb25zdCBhZnRlciA9IGlucHV0W3N0YXRlLmluZGV4ICsgNF07XG4gICAgICAgIGlmIChhZnRlciAmJiBhZnRlciAhPT0gJy8nKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMyk7XG4gICAgICAgIGNvbnN1bWUoJy8qKicsIDMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ2JvcycgJiYgZW9zKCkpIHtcbiAgICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgcHJldi5vdXRwdXQgPSBnbG9ic3RhcihvcHRzKTtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gcHJldi5vdXRwdXQ7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ3NsYXNoJyAmJiBwcmlvci5wcmV2LnR5cGUgIT09ICdib3MnICYmICFhZnRlclN0YXIgJiYgZW9zKCkpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC0ocHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQpLmxlbmd0aCk7XG4gICAgICAgIHByaW9yLm91dHB1dCA9IGAoPzoke3ByaW9yLm91dHB1dH1gO1xuXG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYub3V0cHV0ID0gZ2xvYnN0YXIob3B0cykgKyAob3B0cy5zdHJpY3RTbGFzaGVzID8gJyknIDogJ3wkKScpO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBwcmlvci5vdXRwdXQgKyBwcmV2Lm91dHB1dDtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ3NsYXNoJyAmJiBwcmlvci5wcmV2LnR5cGUgIT09ICdib3MnICYmIHJlc3RbMF0gPT09ICcvJykge1xuICAgICAgICBjb25zdCBlbmQgPSByZXN0WzFdICE9PSB2b2lkIDAgPyAnfCQnIDogJyc7XG5cbiAgICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC0ocHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQpLmxlbmd0aCk7XG4gICAgICAgIHByaW9yLm91dHB1dCA9IGAoPzoke3ByaW9yLm91dHB1dH1gO1xuXG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYub3V0cHV0ID0gYCR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfXwke1NMQVNIX0xJVEVSQUx9JHtlbmR9KWA7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG5cbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IHByaW9yLm91dHB1dCArIHByZXYub3V0cHV0O1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG5cbiAgICAgICAgY29uc3VtZSh2YWx1ZSArIGFkdmFuY2UoKSk7XG5cbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzbGFzaCcsIHZhbHVlOiAnLycsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ2JvcycgJiYgcmVzdFswXSA9PT0gJy8nKSB7XG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHByZXYub3V0cHV0ID0gYCg/Ol58JHtTTEFTSF9MSVRFUkFMfXwke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pYDtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gcHJldi5vdXRwdXQ7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSArIGFkdmFuY2UoKSk7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnc2xhc2gnLCB2YWx1ZTogJy8nLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIHNpbmdsZSBzdGFyIGZyb20gb3V0cHV0XG4gICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLXByZXYub3V0cHV0Lmxlbmd0aCk7XG5cbiAgICAgIC8vIHJlc2V0IHByZXZpb3VzIHRva2VuIHRvIGdsb2JzdGFyXG4gICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgcHJldi5vdXRwdXQgPSBnbG9ic3RhcihvcHRzKTtcbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG5cbiAgICAgIC8vIHJlc2V0IG91dHB1dCB3aXRoIGdsb2JzdGFyXG4gICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi5vdXRwdXQ7XG4gICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0geyB0eXBlOiAnc3RhcicsIHZhbHVlLCBvdXRwdXQ6IHN0YXIgfTtcblxuICAgIGlmIChvcHRzLmJhc2ggPT09IHRydWUpIHtcbiAgICAgIHRva2VuLm91dHB1dCA9ICcuKj8nO1xuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2JvcycgfHwgcHJldi50eXBlID09PSAnc2xhc2gnKSB7XG4gICAgICAgIHRva2VuLm91dHB1dCA9IG5vZG90ICsgdG9rZW4ub3V0cHV0O1xuICAgICAgfVxuICAgICAgcHVzaCh0b2tlbik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAocHJldiAmJiAocHJldi50eXBlID09PSAnYnJhY2tldCcgfHwgcHJldi50eXBlID09PSAncGFyZW4nKSAmJiBvcHRzLnJlZ2V4ID09PSB0cnVlKSB7XG4gICAgICB0b2tlbi5vdXRwdXQgPSB2YWx1ZTtcbiAgICAgIHB1c2godG9rZW4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmluZGV4ID09PSBzdGF0ZS5zdGFydCB8fCBwcmV2LnR5cGUgPT09ICdzbGFzaCcgfHwgcHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IE5PX0RPVF9TTEFTSDtcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gTk9fRE9UX1NMQVNIO1xuXG4gICAgICB9IGVsc2UgaWYgKG9wdHMuZG90ID09PSB0cnVlKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBOT19ET1RTX1NMQVNIO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBOT19ET1RTX1NMQVNIO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gbm9kb3Q7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IG5vZG90O1xuICAgICAgfVxuXG4gICAgICBpZiAocGVlaygpICE9PSAnKicpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IE9ORV9DSEFSO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBPTkVfQ0hBUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoKHRva2VuKTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5icmFja2V0cyA+IDApIHtcbiAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJ10nKSk7XG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMuZXNjYXBlTGFzdChzdGF0ZS5vdXRwdXQsICdbJyk7XG4gICAgZGVjcmVtZW50KCdicmFja2V0cycpO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBhcmVucyA+IDApIHtcbiAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJyknKSk7XG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMuZXNjYXBlTGFzdChzdGF0ZS5vdXRwdXQsICcoJyk7XG4gICAgZGVjcmVtZW50KCdwYXJlbnMnKTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5icmFjZXMgPiAwKSB7XG4gICAgaWYgKG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICd9JykpO1xuICAgIHN0YXRlLm91dHB1dCA9IHV0aWxzLmVzY2FwZUxhc3Qoc3RhdGUub3V0cHV0LCAneycpO1xuICAgIGRlY3JlbWVudCgnYnJhY2VzJyk7XG4gIH1cblxuICBpZiAob3B0cy5zdHJpY3RTbGFzaGVzICE9PSB0cnVlICYmIChwcmV2LnR5cGUgPT09ICdzdGFyJyB8fCBwcmV2LnR5cGUgPT09ICdicmFja2V0JykpIHtcbiAgICBwdXNoKHsgdHlwZTogJ21heWJlX3NsYXNoJywgdmFsdWU6ICcnLCBvdXRwdXQ6IGAke1NMQVNIX0xJVEVSQUx9P2AgfSk7XG4gIH1cblxuICAvLyByZWJ1aWxkIHRoZSBvdXRwdXQgaWYgd2UgaGFkIHRvIGJhY2t0cmFjayBhdCBhbnkgcG9pbnRcbiAgaWYgKHN0YXRlLmJhY2t0cmFjayA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLm91dHB1dCA9ICcnO1xuXG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiBzdGF0ZS50b2tlbnMpIHtcbiAgICAgIHN0YXRlLm91dHB1dCArPSB0b2tlbi5vdXRwdXQgIT0gbnVsbCA/IHRva2VuLm91dHB1dCA6IHRva2VuLnZhbHVlO1xuXG4gICAgICBpZiAodG9rZW4uc3VmZml4KSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSB0b2tlbi5zdWZmaXg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBGYXN0IHBhdGhzIGZvciBjcmVhdGluZyByZWd1bGFyIGV4cHJlc3Npb25zIGZvciBjb21tb24gZ2xvYiBwYXR0ZXJucy5cbiAqIFRoaXMgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgcHJvY2Vzc2luZyBhbmQgaGFzIHZlcnkgbGl0dGxlIGRvd25zaWRlXG4gKiBpbXBhY3Qgd2hlbiBub25lIG9mIHRoZSBmYXN0IHBhdGhzIG1hdGNoLlxuICovXG5cbnBhcnNlLmZhc3RwYXRocyA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGNvbnN0IG1heCA9IHR5cGVvZiBvcHRzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihNQVhfTEVOR1RILCBvcHRzLm1heExlbmd0aCkgOiBNQVhfTEVOR1RIO1xuICBjb25zdCBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gIGlmIChsZW4gPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aDogJHtsZW59LCBleGNlZWRzIG1heGltdW0gYWxsb3dlZCBsZW5ndGg6ICR7bWF4fWApO1xuICB9XG5cbiAgaW5wdXQgPSBSRVBMQUNFTUVOVFNbaW5wdXRdIHx8IGlucHV0O1xuICBjb25zdCB3aW4zMiA9IHV0aWxzLmlzV2luZG93cyhvcHRpb25zKTtcblxuICAvLyBjcmVhdGUgY29uc3RhbnRzIGJhc2VkIG9uIHBsYXRmb3JtLCBmb3Igd2luZG93cyBvciBwb3NpeFxuICBjb25zdCB7XG4gICAgRE9UX0xJVEVSQUwsXG4gICAgU0xBU0hfTElURVJBTCxcbiAgICBPTkVfQ0hBUixcbiAgICBET1RTX1NMQVNILFxuICAgIE5PX0RPVCxcbiAgICBOT19ET1RTLFxuICAgIE5PX0RPVFNfU0xBU0gsXG4gICAgU1RBUixcbiAgICBTVEFSVF9BTkNIT1JcbiAgfSA9IGNvbnN0YW50cy5nbG9iQ2hhcnMod2luMzIpO1xuXG4gIGNvbnN0IG5vZG90ID0gb3B0cy5kb3QgPyBOT19ET1RTIDogTk9fRE9UO1xuICBjb25zdCBzbGFzaERvdCA9IG9wdHMuZG90ID8gTk9fRE9UU19TTEFTSCA6IE5PX0RPVDtcbiAgY29uc3QgY2FwdHVyZSA9IG9wdHMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgY29uc3Qgc3RhdGUgPSB7IG5lZ2F0ZWQ6IGZhbHNlLCBwcmVmaXg6ICcnIH07XG4gIGxldCBzdGFyID0gb3B0cy5iYXNoID09PSB0cnVlID8gJy4qPycgOiBTVEFSO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICBzdGFyID0gYCgke3N0YXJ9KWA7XG4gIH1cblxuICBjb25zdCBnbG9ic3RhciA9IG9wdHMgPT4ge1xuICAgIGlmIChvcHRzLm5vZ2xvYnN0YXIgPT09IHRydWUpIHJldHVybiBzdGFyO1xuICAgIHJldHVybiBgKCR7Y2FwdHVyZX0oPzooPyEke1NUQVJUX0FOQ0hPUn0ke29wdHMuZG90ID8gRE9UU19TTEFTSCA6IERPVF9MSVRFUkFMfSkuKSo/KWA7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlID0gc3RyID0+IHtcbiAgICBzd2l0Y2ggKHN0cikge1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHJldHVybiBgJHtub2RvdH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcuKic6XG4gICAgICAgIHJldHVybiBgJHtET1RfTElURVJBTH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqLionOlxuICAgICAgICByZXR1cm4gYCR7bm9kb3R9JHtzdGFyfSR7RE9UX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKi8qJzpcbiAgICAgICAgcmV0dXJuIGAke25vZG90fSR7c3Rhcn0ke1NMQVNIX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3NsYXNoRG90fSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqKic6XG4gICAgICAgIHJldHVybiBub2RvdCArIGdsb2JzdGFyKG9wdHMpO1xuXG4gICAgICBjYXNlICcqKi8qJzpcbiAgICAgICAgcmV0dXJuIGAoPzoke25vZG90fSR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfSk/JHtzbGFzaERvdH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqKi8qLionOlxuICAgICAgICByZXR1cm4gYCg/OiR7bm9kb3R9JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KT8ke3NsYXNoRG90fSR7c3Rhcn0ke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyoqLy4qJzpcbiAgICAgICAgcmV0dXJuIGAoPzoke25vZG90fSR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfSk/JHtET1RfTElURVJBTH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gL14oLio/KVxcLihcXHcrKSQvLmV4ZWMoc3RyKTtcbiAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGNyZWF0ZShtYXRjaFsxXSk7XG4gICAgICAgIGlmICghc291cmNlKSByZXR1cm47XG5cbiAgICAgICAgcmV0dXJuIHNvdXJjZSArIERPVF9MSVRFUkFMICsgbWF0Y2hbMl07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG91dHB1dCA9IHV0aWxzLnJlbW92ZVByZWZpeChpbnB1dCwgc3RhdGUpO1xuICBsZXQgc291cmNlID0gY3JlYXRlKG91dHB1dCk7XG5cbiAgaWYgKHNvdXJjZSAmJiBvcHRzLnN0cmljdFNsYXNoZXMgIT09IHRydWUpIHtcbiAgICBzb3VyY2UgKz0gYCR7U0xBU0hfTElURVJBTH0/YDtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHNjYW4gPSByZXF1aXJlKCcuL3NjYW4nKTtcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdGNoZXIgZnVuY3Rpb24gZnJvbSBvbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLiBUaGVcbiAqIHJldHVybmVkIGZ1bmN0aW9uIHRha2VzIGEgc3RyaW5nIHRvIG1hdGNoIGFzIGl0cyBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHN0cmluZyBpcyBhIG1hdGNoLiBUaGUgcmV0dXJuZWQgbWF0Y2hlclxuICogZnVuY3Rpb24gYWxzbyB0YWtlcyBhIGJvb2xlYW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0aGF0LCB3aGVuIHRydWUsXG4gKiByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogLy8gcGljb21hdGNoKGdsb2JbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc3QgaXNNYXRjaCA9IHBpY29tYXRjaCgnKi4hKCphKScpO1xuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5hJykpOyAvLz0+IGZhbHNlXG4gKiBjb25zb2xlLmxvZyhpc01hdGNoKCdhLmInKSk7IC8vPT4gdHJ1ZVxuICogYGBgXG4gKiBAbmFtZSBwaWNvbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgZ2xvYnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMuXG4gKiBAcGFyYW0ge09iamVjdD19IGBvcHRpb25zYFxuICogQHJldHVybiB7RnVuY3Rpb249fSBSZXR1cm5zIGEgbWF0Y2hlciBmdW5jdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuY29uc3QgcGljb21hdGNoID0gKGdsb2IsIG9wdGlvbnMsIHJldHVyblN0YXRlID0gZmFsc2UpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZ2xvYikpIHtcbiAgICBjb25zdCBmbnMgPSBnbG9iLm1hcChpbnB1dCA9PiBwaWNvbWF0Y2goaW5wdXQsIG9wdGlvbnMsIHJldHVyblN0YXRlKSk7XG4gICAgY29uc3QgYXJyYXlNYXRjaGVyID0gc3RyID0+IHtcbiAgICAgIGZvciAoY29uc3QgaXNNYXRjaCBvZiBmbnMpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBpc01hdGNoKHN0cik7XG4gICAgICAgIGlmIChzdGF0ZSkgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5TWF0Y2hlcjtcbiAgfVxuXG4gIGNvbnN0IGlzU3RhdGUgPSBpc09iamVjdChnbG9iKSAmJiBnbG9iLnRva2VucyAmJiBnbG9iLmlucHV0O1xuXG4gIGlmIChnbG9iID09PSAnJyB8fCAodHlwZW9mIGdsb2IgIT09ICdzdHJpbmcnICYmICFpc1N0YXRlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhdHRlcm4gdG8gYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gIH1cblxuICBjb25zdCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgcG9zaXggPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucyk7XG4gIGNvbnN0IHJlZ2V4ID0gaXNTdGF0ZVxuICAgID8gcGljb21hdGNoLmNvbXBpbGVSZShnbG9iLCBvcHRpb25zKVxuICAgIDogcGljb21hdGNoLm1ha2VSZShnbG9iLCBvcHRpb25zLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgY29uc3Qgc3RhdGUgPSByZWdleC5zdGF0ZTtcbiAgZGVsZXRlIHJlZ2V4LnN0YXRlO1xuXG4gIGxldCBpc0lnbm9yZWQgPSAoKSA9PiBmYWxzZTtcbiAgaWYgKG9wdHMuaWdub3JlKSB7XG4gICAgY29uc3QgaWdub3JlT3B0cyA9IHsgLi4ub3B0aW9ucywgaWdub3JlOiBudWxsLCBvbk1hdGNoOiBudWxsLCBvblJlc3VsdDogbnVsbCB9O1xuICAgIGlzSWdub3JlZCA9IHBpY29tYXRjaChvcHRzLmlnbm9yZSwgaWdub3JlT3B0cywgcmV0dXJuU3RhdGUpO1xuICB9XG5cbiAgY29uc3QgbWF0Y2hlciA9IChpbnB1dCwgcmV0dXJuT2JqZWN0ID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7IGlzTWF0Y2gsIG1hdGNoLCBvdXRwdXQgfSA9IHBpY29tYXRjaC50ZXN0KGlucHV0LCByZWdleCwgb3B0aW9ucywgeyBnbG9iLCBwb3NpeCB9KTtcbiAgICBjb25zdCByZXN1bHQgPSB7IGdsb2IsIHN0YXRlLCByZWdleCwgcG9zaXgsIGlucHV0LCBvdXRwdXQsIG1hdGNoLCBpc01hdGNoIH07XG5cbiAgICBpZiAodHlwZW9mIG9wdHMub25SZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdHMub25SZXN1bHQocmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNNYXRjaCA9PT0gZmFsc2UpIHtcbiAgICAgIHJlc3VsdC5pc01hdGNoID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmV0dXJuT2JqZWN0ID8gcmVzdWx0IDogZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzSWdub3JlZChpbnB1dCkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5vbklnbm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvcHRzLm9uSWdub3JlKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICByZXN1bHQuaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldHVybk9iamVjdCA/IHJlc3VsdCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5vbk1hdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRzLm9uTWF0Y2gocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVybk9iamVjdCA/IHJlc3VsdCA6IHRydWU7XG4gIH07XG5cbiAgaWYgKHJldHVyblN0YXRlKSB7XG4gICAgbWF0Y2hlci5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXI7XG59O1xuXG4vKipcbiAqIFRlc3QgYGlucHV0YCB3aXRoIHRoZSBnaXZlbiBgcmVnZXhgLiBUaGlzIGlzIHVzZWQgYnkgdGhlIG1haW5cbiAqIGBwaWNvbWF0Y2goKWAgZnVuY3Rpb24gdG8gdGVzdCB0aGUgaW5wdXQgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC50ZXN0KGlucHV0LCByZWdleFssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gudGVzdCgnZm9vL2JhcicsIC9eKD86KFteL10qPylcXC8oW14vXSo/KSkkLykpO1xuICogLy8geyBpc01hdGNoOiB0cnVlLCBtYXRjaDogWyAnZm9vLycsICdmb28nLCAnYmFyJyBdLCBvdXRwdXQ6ICdmb28vYmFyJyB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIFN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtSZWdFeHB9IGByZWdleGBcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBtYXRjaGluZyBpbmZvLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gudGVzdCA9IChpbnB1dCwgcmVnZXgsIG9wdGlvbnMsIHsgZ2xvYiwgcG9zaXggfSA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgaW5wdXQgdG8gYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGlmIChpbnB1dCA9PT0gJycpIHtcbiAgICByZXR1cm4geyBpc01hdGNoOiBmYWxzZSwgb3V0cHV0OiAnJyB9O1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGZvcm1hdCA9IG9wdHMuZm9ybWF0IHx8IChwb3NpeCA/IHV0aWxzLnRvUG9zaXhTbGFzaGVzIDogbnVsbCk7XG4gIGxldCBtYXRjaCA9IGlucHV0ID09PSBnbG9iO1xuICBsZXQgb3V0cHV0ID0gKG1hdGNoICYmIGZvcm1hdCkgPyBmb3JtYXQoaW5wdXQpIDogaW5wdXQ7XG5cbiAgaWYgKG1hdGNoID09PSBmYWxzZSkge1xuICAgIG91dHB1dCA9IGZvcm1hdCA/IGZvcm1hdChpbnB1dCkgOiBpbnB1dDtcbiAgICBtYXRjaCA9IG91dHB1dCA9PT0gZ2xvYjtcbiAgfVxuXG4gIGlmIChtYXRjaCA9PT0gZmFsc2UgfHwgb3B0cy5jYXB0dXJlID09PSB0cnVlKSB7XG4gICAgaWYgKG9wdHMubWF0Y2hCYXNlID09PSB0cnVlIHx8IG9wdHMuYmFzZW5hbWUgPT09IHRydWUpIHtcbiAgICAgIG1hdGNoID0gcGljb21hdGNoLm1hdGNoQmFzZShpbnB1dCwgcmVnZXgsIG9wdGlvbnMsIHBvc2l4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0Y2ggPSByZWdleC5leGVjKG91dHB1dCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgaXNNYXRjaDogQm9vbGVhbihtYXRjaCksIG1hdGNoLCBvdXRwdXQgfTtcbn07XG5cbi8qKlxuICogTWF0Y2ggdGhlIGJhc2VuYW1lIG9mIGEgZmlsZXBhdGguXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogLy8gcGljb21hdGNoLm1hdGNoQmFzZShpbnB1dCwgZ2xvYlssIG9wdGlvbnNdKTtcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5tYXRjaEJhc2UoJ2Zvby9iYXIuanMnLCAnKi5qcycpOyAvLyB0cnVlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIFN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBgZ2xvYmAgR2xvYiBwYXR0ZXJuIG9yIHJlZ2V4IGNyZWF0ZWQgYnkgWy5tYWtlUmVdKCNtYWtlUmUpLlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLm1hdGNoQmFzZSA9IChpbnB1dCwgZ2xvYiwgb3B0aW9ucywgcG9zaXggPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucykpID0+IHtcbiAgY29uc3QgcmVnZXggPSBnbG9iIGluc3RhbmNlb2YgUmVnRXhwID8gZ2xvYiA6IHBpY29tYXRjaC5tYWtlUmUoZ2xvYiwgb3B0aW9ucyk7XG4gIHJldHVybiByZWdleC50ZXN0KHBhdGguYmFzZW5hbWUoaW5wdXQpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmICoqYW55Kiogb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYCBtYXRjaCB0aGUgc3BlY2lmaWVkIGBzdHJpbmdgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5pc01hdGNoKHN0cmluZywgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLmlzTWF0Y2goJ2EuYScsIFsnYi4qJywgJyouYSddKSk7IC8vPT4gdHJ1ZVxuICogY29uc29sZS5sb2cocGljb21hdGNoLmlzTWF0Y2goJ2EuYScsICdiLionKSk7IC8vPT4gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHN0ciBUaGUgc3RyaW5nIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGF0dGVybnMgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IHBhdHRlcm5zIG1hdGNoIGBzdHJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5pc01hdGNoID0gKHN0ciwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHBpY29tYXRjaChwYXR0ZXJucywgb3B0aW9ucykoc3RyKTtcblxuLyoqXG4gKiBQYXJzZSBhIGdsb2IgcGF0dGVybiB0byBjcmVhdGUgdGhlIHNvdXJjZSBzdHJpbmcgZm9yIGEgcmVndWxhclxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiBjb25zdCByZXN1bHQgPSBwaWNvbWF0Y2gucGFyc2UocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHVzZWZ1bCBwcm9wZXJ0aWVzIGFuZCBvdXRwdXQgdG8gYmUgdXNlZCBhcyBhIHJlZ2V4IHNvdXJjZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5wYXJzZSA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSByZXR1cm4gcGF0dGVybi5tYXAocCA9PiBwaWNvbWF0Y2gucGFyc2UocCwgb3B0aW9ucykpO1xuICByZXR1cm4gcGFyc2UocGF0dGVybiwgeyAuLi5vcHRpb25zLCBmYXN0cGF0aHM6IGZhbHNlIH0pO1xufTtcblxuLyoqXG4gKiBTY2FuIGEgZ2xvYiBwYXR0ZXJuIHRvIHNlcGFyYXRlIHRoZSBwYXR0ZXJuIGludG8gc2VnbWVudHMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogLy8gcGljb21hdGNoLnNjYW4oaW5wdXRbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gcGljb21hdGNoLnNjYW4oJyEuL2Zvby8qLmpzJyk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICogeyBwcmVmaXg6ICchLi8nLFxuICogICBpbnB1dDogJyEuL2Zvby8qLmpzJyxcbiAqICAgc3RhcnQ6IDMsXG4gKiAgIGJhc2U6ICdmb28nLFxuICogICBnbG9iOiAnKi5qcycsXG4gKiAgIGlzQnJhY2U6IGZhbHNlLFxuICogICBpc0JyYWNrZXQ6IGZhbHNlLFxuICogICBpc0dsb2I6IHRydWUsXG4gKiAgIGlzRXh0Z2xvYjogZmFsc2UsXG4gKiAgIGlzR2xvYnN0YXI6IGZhbHNlLFxuICogICBuZWdhdGVkOiB0cnVlIH1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBpbnB1dGAgR2xvYiBwYXR0ZXJuIHRvIHNjYW4uXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGhcbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLnNjYW4gPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNjYW4oaW5wdXQsIG9wdGlvbnMpO1xuXG4vKipcbiAqIENvbXBpbGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSB0aGUgYHN0YXRlYCBvYmplY3QgcmV0dXJuZWQgYnkgdGhlXG4gKiBbcGFyc2UoKV0oI3BhcnNlKSBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGBzdGF0ZWBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYHJldHVybk91dHB1dGAgSW50ZW5kZWQgZm9yIGltcGxlbWVudG9ycywgdGhpcyBhcmd1bWVudCBhbGxvd3MgeW91IHRvIHJldHVybiB0aGUgcmF3IG91dHB1dCBmcm9tIHRoZSBwYXJzZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGByZXR1cm5TdGF0ZWAgQWRkcyB0aGUgc3RhdGUgdG8gYSBgc3RhdGVgIHByb3BlcnR5IG9uIHRoZSByZXR1cm5lZCByZWdleC4gVXNlZnVsIGZvciBpbXBsZW1lbnRvcnMgYW5kIGRlYnVnZ2luZy5cbiAqIEByZXR1cm4ge1JlZ0V4cH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLmNvbXBpbGVSZSA9IChzdGF0ZSwgb3B0aW9ucywgcmV0dXJuT3V0cHV0ID0gZmFsc2UsIHJldHVyblN0YXRlID0gZmFsc2UpID0+IHtcbiAgaWYgKHJldHVybk91dHB1dCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBzdGF0ZS5vdXRwdXQ7XG4gIH1cblxuICBjb25zdCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgcHJlcGVuZCA9IG9wdHMuY29udGFpbnMgPyAnJyA6ICdeJztcbiAgY29uc3QgYXBwZW5kID0gb3B0cy5jb250YWlucyA/ICcnIDogJyQnO1xuXG4gIGxldCBzb3VyY2UgPSBgJHtwcmVwZW5kfSg/OiR7c3RhdGUub3V0cHV0fSkke2FwcGVuZH1gO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUubmVnYXRlZCA9PT0gdHJ1ZSkge1xuICAgIHNvdXJjZSA9IGBeKD8hJHtzb3VyY2V9KS4qJGA7XG4gIH1cblxuICBjb25zdCByZWdleCA9IHBpY29tYXRjaC50b1JlZ2V4KHNvdXJjZSwgb3B0aW9ucyk7XG4gIGlmIChyZXR1cm5TdGF0ZSA9PT0gdHJ1ZSkge1xuICAgIHJlZ2V4LnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICByZXR1cm4gcmVnZXg7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIGEgcGFyc2VkIGdsb2IgcGF0dGVybi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiBjb25zdCBzdGF0ZSA9IHBpY29tYXRjaC5wYXJzZSgnKi5qcycpO1xuICogLy8gcGljb21hdGNoLmNvbXBpbGVSZShzdGF0ZVssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2guY29tcGlsZVJlKHN0YXRlKSk7XG4gKiAvLz0+IC9eKD86KD8hXFwuKSg/PS4pW14vXSo/XFwuanMpJC9cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdGF0ZWAgVGhlIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSBgLnBhcnNlYCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGByZXR1cm5PdXRwdXRgIEltcGxlbWVudG9ycyBtYXkgdXNlIHRoaXMgYXJndW1lbnQgdG8gcmV0dXJuIHRoZSBjb21waWxlZCBvdXRwdXQsIGluc3RlYWQgb2YgYSByZWd1bGFyIGV4cHJlc3Npb24uIFRoaXMgaXMgbm90IGV4cG9zZWQgb24gdGhlIG9wdGlvbnMgdG8gcHJldmVudCBlbmQtdXNlcnMgZnJvbSBtdXRhdGluZyB0aGUgcmVzdWx0LlxuICogQHBhcmFtIHtCb29sZWFufSBgcmV0dXJuU3RhdGVgIEltcGxlbWVudG9ycyBtYXkgdXNlIHRoaXMgYXJndW1lbnQgdG8gcmV0dXJuIHRoZSBzdGF0ZSBmcm9tIHRoZSBwYXJzZWQgZ2xvYiB3aXRoIHRoZSByZXR1cm5lZCByZWd1bGFyIGV4cHJlc3Npb24uXG4gKiBAcmV0dXJuIHtSZWdFeHB9IFJldHVybnMgYSByZWdleCBjcmVhdGVkIGZyb20gdGhlIGdpdmVuIHBhdHRlcm4uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5tYWtlUmUgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSwgcmV0dXJuT3V0cHV0ID0gZmFsc2UsIHJldHVyblN0YXRlID0gZmFsc2UpID0+IHtcbiAgaWYgKCFpbnB1dCB8fCB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gIH1cblxuICBsZXQgcGFyc2VkID0geyBuZWdhdGVkOiBmYWxzZSwgZmFzdHBhdGhzOiB0cnVlIH07XG5cbiAgaWYgKG9wdGlvbnMuZmFzdHBhdGhzICE9PSBmYWxzZSAmJiAoaW5wdXRbMF0gPT09ICcuJyB8fCBpbnB1dFswXSA9PT0gJyonKSkge1xuICAgIHBhcnNlZC5vdXRwdXQgPSBwYXJzZS5mYXN0cGF0aHMoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKCFwYXJzZWQub3V0cHV0KSB7XG4gICAgcGFyc2VkID0gcGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHBpY29tYXRjaC5jb21waWxlUmUocGFyc2VkLCBvcHRpb25zLCByZXR1cm5PdXRwdXQsIHJldHVyblN0YXRlKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGZyb20gdGhlIGdpdmVuIHJlZ2V4IHNvdXJjZSBzdHJpbmcuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogLy8gcGljb21hdGNoLnRvUmVnZXgoc291cmNlWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IHsgb3V0cHV0IH0gPSBwaWNvbWF0Y2gucGFyc2UoJyouanMnKTtcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC50b1JlZ2V4KG91dHB1dCkpO1xuICogLy89PiAvXig/Oig/IVxcLikoPz0uKVteL10qP1xcLmpzKSQvXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc291cmNlYCBSZWd1bGFyIGV4cHJlc3Npb24gc291cmNlIHN0cmluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge1JlZ0V4cH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLnRvUmVnZXggPSAoc291cmNlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoc291cmNlLCBvcHRzLmZsYWdzIHx8IChvcHRzLm5vY2FzZSA/ICdpJyA6ICcnKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHRocm93IGVycjtcbiAgICByZXR1cm4gLyReLztcbiAgfVxufTtcblxuLyoqXG4gKiBQaWNvbWF0Y2ggY29uc3RhbnRzLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbnBpY29tYXRjaC5jb25zdGFudHMgPSBjb25zdGFudHM7XG5cbi8qKlxuICogRXhwb3NlIFwicGljb21hdGNoXCJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBpY29tYXRjaDtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvcGljb21hdGNoJyk7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG5jb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgncGljb21hdGNoL2xpYi91dGlscycpO1xuY29uc3QgaXNFbXB0eVN0cmluZyA9IHZhbCA9PiB2YWwgPT09ICcnIHx8IHZhbCA9PT0gJy4vJztcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBtYXRjaCBvbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tKGxpc3QsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tKFsnYS5qcycsICdhLnR4dCddLCBbJyouanMnXSkpO1xuICogLy89PiBbICdhLmpzJyBdXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5PHN0cmluZz59IGBsaXN0YCBMaXN0IG9mIHN0cmluZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheTxzdHJpbmc+fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBtYXRjaGVzXG4gKiBAc3VtbWFyeSBmYWxzZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5jb25zdCBtaWNyb21hdGNoID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIHBhdHRlcm5zID0gW10uY29uY2F0KHBhdHRlcm5zKTtcbiAgbGlzdCA9IFtdLmNvbmNhdChsaXN0KTtcblxuICBsZXQgb21pdCA9IG5ldyBTZXQoKTtcbiAgbGV0IGtlZXAgPSBuZXcgU2V0KCk7XG4gIGxldCBpdGVtcyA9IG5ldyBTZXQoKTtcbiAgbGV0IG5lZ2F0aXZlcyA9IDA7XG5cbiAgbGV0IG9uUmVzdWx0ID0gc3RhdGUgPT4ge1xuICAgIGl0ZW1zLmFkZChzdGF0ZS5vdXRwdXQpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub25SZXN1bHQpIHtcbiAgICAgIG9wdGlvbnMub25SZXN1bHQoc3RhdGUpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goU3RyaW5nKHBhdHRlcm5zW2ldKSwgeyAuLi5vcHRpb25zLCBvblJlc3VsdCB9LCB0cnVlKTtcbiAgICBsZXQgbmVnYXRlZCA9IGlzTWF0Y2guc3RhdGUubmVnYXRlZCB8fCBpc01hdGNoLnN0YXRlLm5lZ2F0ZWRFeHRnbG9iO1xuICAgIGlmIChuZWdhdGVkKSBuZWdhdGl2ZXMrKztcblxuICAgIGZvciAobGV0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgbGV0IG1hdGNoZWQgPSBpc01hdGNoKGl0ZW0sIHRydWUpO1xuXG4gICAgICBsZXQgbWF0Y2ggPSBuZWdhdGVkID8gIW1hdGNoZWQuaXNNYXRjaCA6IG1hdGNoZWQuaXNNYXRjaDtcbiAgICAgIGlmICghbWF0Y2gpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAobmVnYXRlZCkge1xuICAgICAgICBvbWl0LmFkZChtYXRjaGVkLm91dHB1dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbWl0LmRlbGV0ZShtYXRjaGVkLm91dHB1dCk7XG4gICAgICAgIGtlZXAuYWRkKG1hdGNoZWQub3V0cHV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gbmVnYXRpdmVzID09PSBwYXR0ZXJucy5sZW5ndGggPyBbLi4uaXRlbXNdIDogWy4uLmtlZXBdO1xuICBsZXQgbWF0Y2hlcyA9IHJlc3VsdC5maWx0ZXIoaXRlbSA9PiAhb21pdC5oYXMoaXRlbSkpO1xuXG4gIGlmIChvcHRpb25zICYmIG1hdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKG9wdGlvbnMuZmFpbGdsb2IgPT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWF0Y2hlcyBmb3VuZCBmb3IgXCIke3BhdHRlcm5zLmpvaW4oJywgJyl9XCJgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ub251bGwgPT09IHRydWUgfHwgb3B0aW9ucy5udWxsZ2xvYiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMudW5lc2NhcGUgPyBwYXR0ZXJucy5tYXAocCA9PiBwLnJlcGxhY2UoL1xcXFwvZywgJycpKSA6IHBhdHRlcm5zO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuLyoqXG4gKiBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICovXG5cbm1pY3JvbWF0Y2gubWF0Y2ggPSBtaWNyb21hdGNoO1xuXG4vKipcbiAqIFJldHVybnMgYSBtYXRjaGVyIGZ1bmN0aW9uIGZyb20gdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5gIGFuZCBgb3B0aW9uc2AuXG4gKiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gdGFrZXMgYSBzdHJpbmcgdG8gbWF0Y2ggYXMgaXRzIG9ubHkgYXJndW1lbnQgYW5kIHJldHVybnNcbiAqIHRydWUgaWYgdGhlIHN0cmluZyBpcyBhIG1hdGNoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLm1hdGNoZXIocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zdCBpc01hdGNoID0gbW0ubWF0Y2hlcignKi4hKCphKScpO1xuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5hJykpOyAvLz0+IGZhbHNlXG4gKiBjb25zb2xlLmxvZyhpc01hdGNoKCdhLmInKSk7IC8vPT4gdHJ1ZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gIEdsb2IgcGF0dGVyblxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7RnVuY3Rpb259IFJldHVybnMgYSBtYXRjaGVyIGZ1bmN0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLm1hdGNoZXIgPSAocGF0dGVybiwgb3B0aW9ucykgPT4gcGljb21hdGNoKHBhdHRlcm4sIG9wdGlvbnMpO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiAqKmFueSoqIG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AgbWF0Y2ggdGhlIHNwZWNpZmllZCBgc3RyaW5nYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5pc01hdGNoKHN0cmluZywgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uaXNNYXRjaCgnYS5hJywgWydiLionLCAnKi5hJ10pKTsgLy89PiB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5pc01hdGNoKCdhLmEnLCAnYi4qJykpOyAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYCBUaGUgc3RyaW5nIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYFtvcHRpb25zXWAgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmlzTWF0Y2ggPSAoc3RyLCBwYXR0ZXJucywgb3B0aW9ucykgPT4gcGljb21hdGNoKHBhdHRlcm5zLCBvcHRpb25zKShzdHIpO1xuXG4vKipcbiAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gKi9cblxubWljcm9tYXRjaC5hbnkgPSBtaWNyb21hdGNoLmlzTWF0Y2g7XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RyaW5ncyB0aGF0IF8qKmRvIG5vdCBtYXRjaCBhbnkqKl8gb2YgdGhlIGdpdmVuIGBwYXR0ZXJuc2AuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0ubm90KGxpc3QsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLm5vdChbJ2EuYScsICdiLmInLCAnYy5jJ10sICcqLmEnKSk7XG4gKiAvLz0+IFsnYi5iJywgJ2MuYyddXG4gKiBgYGBcbiAqIEBwYXJhbSB7QXJyYXl9IGBsaXN0YCBBcnJheSBvZiBzdHJpbmdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJuIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc3RyaW5ncyB0aGF0ICoqZG8gbm90IG1hdGNoKiogdGhlIGdpdmVuIHBhdHRlcm5zLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLm5vdCA9IChsaXN0LCBwYXR0ZXJucywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIHBhdHRlcm5zID0gW10uY29uY2F0KHBhdHRlcm5zKS5tYXAoU3RyaW5nKTtcbiAgbGV0IHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgbGV0IGl0ZW1zID0gW107XG5cbiAgbGV0IG9uUmVzdWx0ID0gc3RhdGUgPT4ge1xuICAgIGlmIChvcHRpb25zLm9uUmVzdWx0KSBvcHRpb25zLm9uUmVzdWx0KHN0YXRlKTtcbiAgICBpdGVtcy5wdXNoKHN0YXRlLm91dHB1dCk7XG4gIH07XG5cbiAgbGV0IG1hdGNoZXMgPSBtaWNyb21hdGNoKGxpc3QsIHBhdHRlcm5zLCB7IC4uLm9wdGlvbnMsIG9uUmVzdWx0IH0pO1xuXG4gIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICBpZiAoIW1hdGNoZXMuaW5jbHVkZXMoaXRlbSkpIHtcbiAgICAgIHJlc3VsdC5hZGQoaXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbLi4ucmVzdWx0XTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBgc3RyaW5nYCBjb250YWlucyB0aGUgZ2l2ZW4gcGF0dGVybi4gU2ltaWxhclxuICogdG8gWy5pc01hdGNoXSgjaXNNYXRjaCkgYnV0IHRoZSBwYXR0ZXJuIGNhbiBtYXRjaCBhbnkgcGFydCBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5jb250YWlucyhzdHJpbmcsIHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uY29udGFpbnMoJ2FhL2JiL2NjJywgJypiJykpO1xuICogLy89PiB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5jb250YWlucygnYWEvYmIvY2MnLCAnKmQnKSk7XG4gKiAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYCBUaGUgc3RyaW5nIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgR2xvYiBwYXR0ZXJuIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBvZiB0aGUgcGF0dGVybnMgbWF0Y2hlcyBhbnkgcGFydCBvZiBgc3RyYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5jb250YWlucyA9IChzdHIsIHBhdHRlcm4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBzdHJpbmc6IFwiJHt1dGlsLmluc3BlY3Qoc3RyKX1cImApO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zb21lKHAgPT4gbWljcm9tYXRjaC5jb250YWlucyhzdHIsIHAsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoaXNFbXB0eVN0cmluZyhzdHIpIHx8IGlzRW1wdHlTdHJpbmcocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RyLmluY2x1ZGVzKHBhdHRlcm4pIHx8IChzdHIuc3RhcnRzV2l0aCgnLi8nKSAmJiBzdHIuc2xpY2UoMikuaW5jbHVkZXMocGF0dGVybikpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWljcm9tYXRjaC5pc01hdGNoKHN0ciwgcGF0dGVybiwgeyAuLi5vcHRpb25zLCBjb250YWluczogdHJ1ZSB9KTtcbn07XG5cbi8qKlxuICogRmlsdGVyIHRoZSBrZXlzIG9mIHRoZSBnaXZlbiBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gYGdsb2JgIHBhdHRlcm5cbiAqIGFuZCBgb3B0aW9uc2AuIERvZXMgbm90IGF0dGVtcHQgdG8gbWF0Y2ggbmVzdGVkIGtleXMuIElmIHlvdSBuZWVkIHRoaXMgZmVhdHVyZSxcbiAqIHVzZSBbZ2xvYi1vYmplY3RdW10gaW5zdGVhZC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5tYXRjaEtleXMob2JqZWN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zdCBvYmogPSB7IGFhOiAnYScsIGFiOiAnYicsIGFjOiAnYycgfTtcbiAqIGNvbnNvbGUubG9nKG1tLm1hdGNoS2V5cyhvYmosICcqYicpKTtcbiAqIC8vPT4geyBhYjogJ2InIH1cbiAqIGBgYFxuICogQHBhcmFtIHtPYmplY3R9IGBvYmplY3RgIFRoZSBvYmplY3Qgd2l0aCBrZXlzIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggb25seSBrZXlzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHBhdHRlcm5zLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLm1hdGNoS2V5cyA9IChvYmosIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICBsZXQga2V5cyA9IG1pY3JvbWF0Y2goT2JqZWN0LmtleXMob2JqKSwgcGF0dGVybnMsIG9wdGlvbnMpO1xuICBsZXQgcmVzID0ge307XG4gIGZvciAobGV0IGtleSBvZiBrZXlzKSByZXNba2V5XSA9IG9ialtrZXldO1xuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgc29tZSBvZiB0aGUgc3RyaW5ncyBpbiB0aGUgZ2l2ZW4gYGxpc3RgIG1hdGNoIGFueSBvZiB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybnNgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLnNvbWUobGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uc29tZShbJ2Zvby5qcycsICdiYXIuanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uc29tZShbJ2Zvby5qcyddLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyBmYWxzZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGxpc3RgIFRoZSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyB0byB0ZXN0LiBSZXR1cm5zIGFzIHNvb24gYXMgdGhlIGZpcnN0IG1hdGNoIGlzIGZvdW5kLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgYHBhdHRlcm5zYCBtYXRjaGVzIGFueSBvZiB0aGUgc3RyaW5ncyBpbiBgbGlzdGBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5zb21lID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCBpdGVtcyA9IFtdLmNvbmNhdChsaXN0KTtcblxuICBmb3IgKGxldCBwYXR0ZXJuIG9mIFtdLmNvbmNhdChwYXR0ZXJucykpIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpO1xuICAgIGlmIChpdGVtcy5zb21lKGl0ZW0gPT4gaXNNYXRjaChpdGVtKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBldmVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIGBsaXN0YCBtYXRjaGVzXG4gKiBhbnkgb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5ldmVyeShsaXN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeSgnZm9vLmpzJywgWydmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uZXZlcnkoWydmb28uanMnLCAnYmFyLmpzJ10sIFsnKi5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeShbJ2Zvby5qcycsICdiYXIuanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqIGNvbnNvbGUubG9nKG1tLmV2ZXJ5KFsnZm9vLmpzJ10sIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgbGlzdGAgVGhlIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFsbCBgcGF0dGVybnNgIG1hdGNoZXMgYWxsIG9mIHRoZSBzdHJpbmdzIGluIGBsaXN0YFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmV2ZXJ5ID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCBpdGVtcyA9IFtdLmNvbmNhdChsaXN0KTtcblxuICBmb3IgKGxldCBwYXR0ZXJuIG9mIFtdLmNvbmNhdChwYXR0ZXJucykpIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpO1xuICAgIGlmICghaXRlbXMuZXZlcnkoaXRlbSA9PiBpc01hdGNoKGl0ZW0pKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmICoqYWxsKiogb2YgdGhlIGdpdmVuIGBwYXR0ZXJuc2AgbWF0Y2hcbiAqIHRoZSBzcGVjaWZpZWQgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmFsbChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWydmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5hbGwoJ2Zvby5qcycsIFsnKi5qcycsICdmb28uanMnXSkpO1xuICogLy8gdHJ1ZVxuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWycqLmpzJywgJ2YqJywgJypvKicsICcqby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgc3RyYCBUaGUgc3RyaW5nIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmFsbCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgc3RyaW5nOiBcIiR7dXRpbC5pbnNwZWN0KHN0cil9XCJgKTtcbiAgfVxuXG4gIHJldHVybiBbXS5jb25jYXQocGF0dGVybnMpLmV2ZXJ5KHAgPT4gcGljb21hdGNoKHAsIG9wdGlvbnMpKHN0cikpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG1hdGNoZXMgY2FwdHVyZWQgYnkgYHBhdHRlcm5gIGluIGBzdHJpbmcsIG9yIGBudWxsYCBpZiB0aGUgcGF0dGVybiBkaWQgbm90IG1hdGNoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmNhcHR1cmUocGF0dGVybiwgc3RyaW5nWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmNhcHR1cmUoJ3Rlc3QvKi5qcycsICd0ZXN0L2Zvby5qcycpKTtcbiAqIC8vPT4gWydmb28nXVxuICogY29uc29sZS5sb2cobW0uY2FwdHVyZSgndGVzdC8qLmpzJywgJ2Zvby9iYXIuY3NzJykpO1xuICogLy89PiBudWxsXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgZ2xvYmAgR2xvYiBwYXR0ZXJuIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gbWF0Y2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtBcnJheXxudWxsfSBSZXR1cm5zIGFuIGFycmF5IG9mIGNhcHR1cmVzIGlmIHRoZSBpbnB1dCBtYXRjaGVzIHRoZSBnbG9iIHBhdHRlcm4sIG90aGVyd2lzZSBgbnVsbGAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guY2FwdHVyZSA9IChnbG9iLCBpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBsZXQgcG9zaXggPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucyk7XG4gIGxldCByZWdleCA9IHBpY29tYXRjaC5tYWtlUmUoU3RyaW5nKGdsb2IpLCB7IC4uLm9wdGlvbnMsIGNhcHR1cmU6IHRydWUgfSk7XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMocG9zaXggPyB1dGlscy50b1Bvc2l4U2xhc2hlcyhpbnB1dCkgOiBpbnB1dCk7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hdGNoLnNsaWNlKDEpLm1hcCh2ID0+IHYgPT09IHZvaWQgMCA/ICcnIDogdik7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVndWxhciBleHByZXNzaW9uIGZyb20gdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5gLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLm1ha2VSZShwYXR0ZXJuWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLm1ha2VSZSgnKi5qcycpKTtcbiAqIC8vPT4gL14oPzooXFwuW1xcXFxcXC9dKT8oPyFcXC4pKD89LilbXlxcL10qP1xcLmpzKSQvXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQSBnbG9iIHBhdHRlcm4gdG8gY29udmVydCB0byByZWdleC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge1JlZ0V4cH0gUmV0dXJucyBhIHJlZ2V4IGNyZWF0ZWQgZnJvbSB0aGUgZ2l2ZW4gcGF0dGVybi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5tYWtlUmUgPSAoLi4uYXJncykgPT4gcGljb21hdGNoLm1ha2VSZSguLi5hcmdzKTtcblxuLyoqXG4gKiBTY2FuIGEgZ2xvYiBwYXR0ZXJuIHRvIHNlcGFyYXRlIHRoZSBwYXR0ZXJuIGludG8gc2VnbWVudHMuIFVzZWRcbiAqIGJ5IHRoZSBbc3BsaXRdKCNzcGxpdCkgbWV0aG9kLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnN0IHN0YXRlID0gbW0uc2NhbihwYXR0ZXJuWywgb3B0aW9uc10pO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGhcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5zY2FuID0gKC4uLmFyZ3MpID0+IHBpY29tYXRjaC5zY2FuKC4uLmFyZ3MpO1xuXG4vKipcbiAqIFBhcnNlIGEgZ2xvYiBwYXR0ZXJuIHRvIGNyZWF0ZSB0aGUgc291cmNlIHN0cmluZyBmb3IgYSByZWd1bGFyXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnN0IHN0YXRlID0gbW0ocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBnbG9iYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHVzZWZ1bCBwcm9wZXJ0aWVzIGFuZCBvdXRwdXQgdG8gYmUgdXNlZCBhcyByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLnBhcnNlID0gKHBhdHRlcm5zLCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXMgPSBbXTtcbiAgZm9yIChsZXQgcGF0dGVybiBvZiBbXS5jb25jYXQocGF0dGVybnMgfHwgW10pKSB7XG4gICAgZm9yIChsZXQgc3RyIG9mIGJyYWNlcyhTdHJpbmcocGF0dGVybiksIG9wdGlvbnMpKSB7XG4gICAgICByZXMucHVzaChwaWNvbWF0Y2gucGFyc2Uoc3RyLCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgdGhlIGdpdmVuIGJyYWNlIGBwYXR0ZXJuYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgeyBicmFjZXMgfSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcygnZm9vL3thLGIsY30vYmFyJykpO1xuICogLy89PiBbICdmb28vKGF8YnxjKS9iYXInIF1cbiAqXG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ2Zvby97YSxiLGN9L2JhcicsIHsgZXhwYW5kOiB0cnVlIH0pKTtcbiAqIC8vPT4gWyAnZm9vL2EvYmFyJywgJ2Zvby9iL2JhcicsICdmb28vYy9iYXInIF1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBTdHJpbmcgd2l0aCBicmFjZSBwYXR0ZXJuIHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIEFueSBbb3B0aW9uc10oI29wdGlvbnMpIHRvIGNoYW5nZSBob3cgZXhwYW5zaW9uIGlzIHBlcmZvcm1lZC4gU2VlIHRoZSBbYnJhY2VzXVtdIGxpYnJhcnkgZm9yIGFsbCBhdmFpbGFibGUgb3B0aW9ucy5cbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmJyYWNlcyA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIGlmICgob3B0aW9ucyAmJiBvcHRpb25zLm5vYnJhY2UgPT09IHRydWUpIHx8ICEvXFx7LipcXH0vLnRlc3QocGF0dGVybikpIHtcbiAgICByZXR1cm4gW3BhdHRlcm5dO1xuICB9XG4gIHJldHVybiBicmFjZXMocGF0dGVybiwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEV4cGFuZCBicmFjZXNcbiAqL1xuXG5taWNyb21hdGNoLmJyYWNlRXhwYW5kID0gKHBhdHRlcm4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgcmV0dXJuIG1pY3JvbWF0Y2guYnJhY2VzKHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgZXhwYW5kOiB0cnVlIH0pO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgbWljcm9tYXRjaFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gbWljcm9tYXRjaDtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWF0Y2hBbnkgPSBleHBvcnRzLmNvbnZlcnRQYXR0ZXJuc1RvUmUgPSBleHBvcnRzLm1ha2VSZSA9IGV4cG9ydHMuZ2V0UGF0dGVyblBhcnRzID0gZXhwb3J0cy5leHBhbmRCcmFjZUV4cGFuc2lvbiA9IGV4cG9ydHMuZXhwYW5kUGF0dGVybnNXaXRoQnJhY2VFeHBhbnNpb24gPSBleHBvcnRzLmlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuID0gZXhwb3J0cy5lbmRzV2l0aFNsYXNoR2xvYlN0YXIgPSBleHBvcnRzLmhhc0dsb2JTdGFyID0gZXhwb3J0cy5nZXRCYXNlRGlyZWN0b3J5ID0gZXhwb3J0cy5pc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3RvcnkgPSBleHBvcnRzLmdldFBhdHRlcm5zT3V0c2lkZUN1cnJlbnREaXJlY3RvcnkgPSBleHBvcnRzLmdldFBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSA9IGV4cG9ydHMuZ2V0UG9zaXRpdmVQYXR0ZXJucyA9IGV4cG9ydHMuZ2V0TmVnYXRpdmVQYXR0ZXJucyA9IGV4cG9ydHMuaXNQb3NpdGl2ZVBhdHRlcm4gPSBleHBvcnRzLmlzTmVnYXRpdmVQYXR0ZXJuID0gZXhwb3J0cy5jb252ZXJ0VG9OZWdhdGl2ZVBhdHRlcm4gPSBleHBvcnRzLmNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybiA9IGV4cG9ydHMuaXNEeW5hbWljUGF0dGVybiA9IGV4cG9ydHMuaXNTdGF0aWNQYXR0ZXJuID0gdm9pZCAwO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZ2xvYlBhcmVudCA9IHJlcXVpcmUoXCJnbG9iLXBhcmVudFwiKTtcbmNvbnN0IG1pY3JvbWF0Y2ggPSByZXF1aXJlKFwibWljcm9tYXRjaFwiKTtcbmNvbnN0IEdMT0JTVEFSID0gJyoqJztcbmNvbnN0IEVTQ0FQRV9TWU1CT0wgPSAnXFxcXCc7XG5jb25zdCBDT01NT05fR0xPQl9TWU1CT0xTX1JFID0gL1sqP118XiEvO1xuY29uc3QgUkVHRVhfQ0hBUkFDVEVSX0NMQVNTX1NZTUJPTFNfUkUgPSAvXFxbW15bXSpdLztcbmNvbnN0IFJFR0VYX0dST1VQX1NZTUJPTFNfUkUgPSAvKD86XnxbXiEqKz9AXSlcXChbXihdKlxcfFtefF0qXFwpLztcbmNvbnN0IEdMT0JfRVhURU5TSU9OX1NZTUJPTFNfUkUgPSAvWyEqKz9AXVxcKFteKF0qXFwpLztcbmNvbnN0IEJSQUNFX0VYUEFOU0lPTl9TRVBBUkFUT1JTX1JFID0gLyx8XFwuXFwuLztcbmZ1bmN0aW9uIGlzU3RhdGljUGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gIWlzRHluYW1pY1BhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmlzU3RhdGljUGF0dGVybiA9IGlzU3RhdGljUGF0dGVybjtcbmZ1bmN0aW9uIGlzRHluYW1pY1BhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsIGNhc2Ugd2l0aCBhbiBlbXB0eSBzdHJpbmcgaXMgbmVjZXNzYXJ5IGZvciBtYXRjaGluZyBwYXR0ZXJucyB0aGF0IHN0YXJ0IHdpdGggYSBmb3J3YXJkIHNsYXNoLlxuICAgICAqIEFuIGVtcHR5IHN0cmluZyBjYW5ub3QgYmUgYSBkeW5hbWljIHBhdHRlcm4uXG4gICAgICogRm9yIGV4YW1wbGUsIHRoZSBwYXR0ZXJuIGAvbGliLypgIHdpbGwgYmUgc3ByZWFkIGludG8gcGFydHM6ICcnLCAnbGliJywgJyonLlxuICAgICAqL1xuICAgIGlmIChwYXR0ZXJuID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGBjYXNlU2Vuc2l0aXZlTWF0Y2hgIG9wdGlvbiBpcyBkaXNhYmxlZCwgYWxsIHBhdHRlcm5zIG11c3QgYmUgbWFya2VkIGFzIGR5bmFtaWMsIGJlY2F1c2Ugd2UgY2Fubm90IGNoZWNrXG4gICAgICogZmlsZXBhdGggZGlyZWN0bHkgKHdpdGhvdXQgcmVhZCBkaXJlY3RvcnkpLlxuICAgICAqL1xuICAgIGlmIChvcHRpb25zLmNhc2VTZW5zaXRpdmVNYXRjaCA9PT0gZmFsc2UgfHwgcGF0dGVybi5pbmNsdWRlcyhFU0NBUEVfU1lNQk9MKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKENPTU1PTl9HTE9CX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSB8fCBSRUdFWF9DSEFSQUNURVJfQ0xBU1NfU1lNQk9MU19SRS50ZXN0KHBhdHRlcm4pIHx8IFJFR0VYX0dST1VQX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZXh0Z2xvYiAhPT0gZmFsc2UgJiYgR0xPQl9FWFRFTlNJT05fU1lNQk9MU19SRS50ZXN0KHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5icmFjZUV4cGFuc2lvbiAhPT0gZmFsc2UgJiYgaGFzQnJhY2VFeHBhbnNpb24ocGF0dGVybikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNEeW5hbWljUGF0dGVybiA9IGlzRHluYW1pY1BhdHRlcm47XG5mdW5jdGlvbiBoYXNCcmFjZUV4cGFuc2lvbihwYXR0ZXJuKSB7XG4gICAgY29uc3Qgb3BlbmluZ0JyYWNlSW5kZXggPSBwYXR0ZXJuLmluZGV4T2YoJ3snKTtcbiAgICBpZiAob3BlbmluZ0JyYWNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY2xvc2luZ0JyYWNlSW5kZXggPSBwYXR0ZXJuLmluZGV4T2YoJ30nLCBvcGVuaW5nQnJhY2VJbmRleCArIDEpO1xuICAgIGlmIChjbG9zaW5nQnJhY2VJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBicmFjZUNvbnRlbnQgPSBwYXR0ZXJuLnNsaWNlKG9wZW5pbmdCcmFjZUluZGV4LCBjbG9zaW5nQnJhY2VJbmRleCk7XG4gICAgcmV0dXJuIEJSQUNFX0VYUEFOU0lPTl9TRVBBUkFUT1JTX1JFLnRlc3QoYnJhY2VDb250ZW50KTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmVQYXR0ZXJuKHBhdHRlcm4pID8gcGF0dGVybi5zbGljZSgxKSA6IHBhdHRlcm47XG59XG5leHBvcnRzLmNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybiA9IGNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybjtcbmZ1bmN0aW9uIGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgcmV0dXJuICchJyArIHBhdHRlcm47XG59XG5leHBvcnRzLmNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybiA9IGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybjtcbmZ1bmN0aW9uIGlzTmVnYXRpdmVQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5zdGFydHNXaXRoKCchJykgJiYgcGF0dGVyblsxXSAhPT0gJygnO1xufVxuZXhwb3J0cy5pc05lZ2F0aXZlUGF0dGVybiA9IGlzTmVnYXRpdmVQYXR0ZXJuO1xuZnVuY3Rpb24gaXNQb3NpdGl2ZVBhdHRlcm4ocGF0dGVybikge1xuICAgIHJldHVybiAhaXNOZWdhdGl2ZVBhdHRlcm4ocGF0dGVybik7XG59XG5leHBvcnRzLmlzUG9zaXRpdmVQYXR0ZXJuID0gaXNQb3NpdGl2ZVBhdHRlcm47XG5mdW5jdGlvbiBnZXROZWdhdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIHBhdHRlcm5zLmZpbHRlcihpc05lZ2F0aXZlUGF0dGVybik7XG59XG5leHBvcnRzLmdldE5lZ2F0aXZlUGF0dGVybnMgPSBnZXROZWdhdGl2ZVBhdHRlcm5zO1xuZnVuY3Rpb24gZ2V0UG9zaXRpdmVQYXR0ZXJucyhwYXR0ZXJucykge1xuICAgIHJldHVybiBwYXR0ZXJucy5maWx0ZXIoaXNQb3NpdGl2ZVBhdHRlcm4pO1xufVxuZXhwb3J0cy5nZXRQb3NpdGl2ZVBhdHRlcm5zID0gZ2V0UG9zaXRpdmVQYXR0ZXJucztcbi8qKlxuICogUmV0dXJucyBwYXR0ZXJucyB0aGF0IGNhbiBiZSBhcHBsaWVkIGluc2lkZSB0aGUgY3VycmVudCBkaXJlY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFsnLi8qJywgJyonLCAnYS8qJ11cbiAqIGdldFBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeShbJy4vKicsICcqJywgJ2EvKicsICcuLi8qJywgJy4vLi4vKiddKVxuICovXG5mdW5jdGlvbiBnZXRQYXR0ZXJuc0luc2lkZUN1cnJlbnREaXJlY3RvcnkocGF0dGVybnMpIHtcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKChwYXR0ZXJuKSA9PiAhaXNQYXR0ZXJuUmVsYXRlZFRvUGFyZW50RGlyZWN0b3J5KHBhdHRlcm4pKTtcbn1cbmV4cG9ydHMuZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5ID0gZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5O1xuLyoqXG4gKiBSZXR1cm5zIHBhdHRlcm5zIHRvIGJlIGV4cGFuZGVkIHJlbGF0aXZlIHRvIChvdXRzaWRlKSB0aGUgY3VycmVudCBkaXJlY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFsnLi4vKicsICcuLy4uLyonXVxuICogZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5KFsnLi8qJywgJyonLCAnYS8qJywgJy4uLyonLCAnLi8uLi8qJ10pXG4gKi9cbmZ1bmN0aW9uIGdldFBhdHRlcm5zT3V0c2lkZUN1cnJlbnREaXJlY3RvcnkocGF0dGVybnMpIHtcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzUGF0dGVyblJlbGF0ZWRUb1BhcmVudERpcmVjdG9yeSk7XG59XG5leHBvcnRzLmdldFBhdHRlcm5zT3V0c2lkZUN1cnJlbnREaXJlY3RvcnkgPSBnZXRQYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5O1xuZnVuY3Rpb24gaXNQYXR0ZXJuUmVsYXRlZFRvUGFyZW50RGlyZWN0b3J5KHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5zdGFydHNXaXRoKCcuLicpIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnLi8uLicpO1xufVxuZXhwb3J0cy5pc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3RvcnkgPSBpc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3Rvcnk7XG5mdW5jdGlvbiBnZXRCYXNlRGlyZWN0b3J5KHBhdHRlcm4pIHtcbiAgICByZXR1cm4gZ2xvYlBhcmVudChwYXR0ZXJuLCB7IGZsaXBCYWNrc2xhc2hlczogZmFsc2UgfSk7XG59XG5leHBvcnRzLmdldEJhc2VEaXJlY3RvcnkgPSBnZXRCYXNlRGlyZWN0b3J5O1xuZnVuY3Rpb24gaGFzR2xvYlN0YXIocGF0dGVybikge1xuICAgIHJldHVybiBwYXR0ZXJuLmluY2x1ZGVzKEdMT0JTVEFSKTtcbn1cbmV4cG9ydHMuaGFzR2xvYlN0YXIgPSBoYXNHbG9iU3RhcjtcbmZ1bmN0aW9uIGVuZHNXaXRoU2xhc2hHbG9iU3RhcihwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uZW5kc1dpdGgoJy8nICsgR0xPQlNUQVIpO1xufVxuZXhwb3J0cy5lbmRzV2l0aFNsYXNoR2xvYlN0YXIgPSBlbmRzV2l0aFNsYXNoR2xvYlN0YXI7XG5mdW5jdGlvbiBpc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgY29uc3QgYmFzZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHBhdHRlcm4pO1xuICAgIHJldHVybiBlbmRzV2l0aFNsYXNoR2xvYlN0YXIocGF0dGVybikgfHwgaXNTdGF0aWNQYXR0ZXJuKGJhc2VuYW1lKTtcbn1cbmV4cG9ydHMuaXNBZmZlY3REZXB0aE9mUmVhZGluZ1BhdHRlcm4gPSBpc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybjtcbmZ1bmN0aW9uIGV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uKHBhdHRlcm5zKSB7XG4gICAgcmV0dXJuIHBhdHRlcm5zLnJlZHVjZSgoY29sbGVjdGlvbiwgcGF0dGVybikgPT4ge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5jb25jYXQoZXhwYW5kQnJhY2VFeHBhbnNpb24ocGF0dGVybikpO1xuICAgIH0sIFtdKTtcbn1cbmV4cG9ydHMuZXhwYW5kUGF0dGVybnNXaXRoQnJhY2VFeHBhbnNpb24gPSBleHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbjtcbmZ1bmN0aW9uIGV4cGFuZEJyYWNlRXhwYW5zaW9uKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gbWljcm9tYXRjaC5icmFjZXMocGF0dGVybiwge1xuICAgICAgICBleHBhbmQ6IHRydWUsXG4gICAgICAgIG5vZHVwZXM6IHRydWVcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhwYW5kQnJhY2VFeHBhbnNpb24gPSBleHBhbmRCcmFjZUV4cGFuc2lvbjtcbmZ1bmN0aW9uIGdldFBhdHRlcm5QYXJ0cyhwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgbGV0IHsgcGFydHMgfSA9IG1pY3JvbWF0Y2guc2NhbihwYXR0ZXJuLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHBhcnRzOiB0cnVlIH0pKTtcbiAgICAvKipcbiAgICAgKiBUaGUgc2NhbiBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBhcnJheSBpbiBzb21lIGNhc2VzLlxuICAgICAqIFNlZSBtaWNyb21hdGNoL3BpY29tYXRjaCM1OCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqL1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcGFydHMgPSBbcGF0dGVybl07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzY2FuIG1ldGhvZCBkb2VzIG5vdCByZXR1cm4gYW4gZW1wdHkgcGFydCBmb3IgdGhlIHBhdHRlcm4gd2l0aCBhIGZvcndhcmQgc2xhc2guXG4gICAgICogVGhpcyBpcyBhbm90aGVyIHBhcnQgb2YgbWljcm9tYXRjaC9waWNvbWF0Y2gjNTguXG4gICAgICovXG4gICAgaWYgKHBhcnRzWzBdLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNsaWNlKDEpO1xuICAgICAgICBwYXJ0cy51bnNoaWZ0KCcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xufVxuZXhwb3J0cy5nZXRQYXR0ZXJuUGFydHMgPSBnZXRQYXR0ZXJuUGFydHM7XG5mdW5jdGlvbiBtYWtlUmUocGF0dGVybiwgb3B0aW9ucykge1xuICAgIHJldHVybiBtaWNyb21hdGNoLm1ha2VSZShwYXR0ZXJuLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMubWFrZVJlID0gbWFrZVJlO1xuZnVuY3Rpb24gY29udmVydFBhdHRlcm5zVG9SZShwYXR0ZXJucywgb3B0aW9ucykge1xuICAgIHJldHVybiBwYXR0ZXJucy5tYXAoKHBhdHRlcm4pID0+IG1ha2VSZShwYXR0ZXJuLCBvcHRpb25zKSk7XG59XG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuc1RvUmUgPSBjb252ZXJ0UGF0dGVybnNUb1JlO1xuZnVuY3Rpb24gbWF0Y2hBbnkoZW50cnksIHBhdHRlcm5zUmUpIHtcbiAgICByZXR1cm4gcGF0dGVybnNSZS5zb21lKChwYXR0ZXJuUmUpID0+IHBhdHRlcm5SZS50ZXN0KGVudHJ5KSk7XG59XG5leHBvcnRzLm1hdGNoQW55ID0gbWF0Y2hBbnk7XG4iLCAiJ3VzZSBzdHJpY3QnXG4vKlxuICogbWVyZ2UyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGVhbWJpdGlvbi9tZXJnZTJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAyMCBUZWFtYml0aW9uXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG5jb25zdCBQYXNzVGhyb3VnaCA9IFN0cmVhbS5QYXNzVGhyb3VnaFxuY29uc3Qgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTJcblxuZnVuY3Rpb24gbWVyZ2UyICgpIHtcbiAgY29uc3Qgc3RyZWFtc1F1ZXVlID0gW11cbiAgY29uc3QgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICBsZXQgbWVyZ2luZyA9IGZhbHNlXG4gIGxldCBvcHRpb25zID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKG9wdGlvbnMgJiYgIUFycmF5LmlzQXJyYXkob3B0aW9ucykgJiYgb3B0aW9ucy5waXBlID09IG51bGwpIHtcbiAgICBhcmdzLnBvcCgpXG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICBjb25zdCBkb0VuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICBjb25zdCBkb1BpcGVFcnJvciA9IG9wdGlvbnMucGlwZUVycm9yID09PSB0cnVlXG4gIGlmIChvcHRpb25zLm9iamVjdE1vZGUgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMub2JqZWN0TW9kZSA9IHRydWVcbiAgfVxuICBpZiAob3B0aW9ucy5oaWdoV2F0ZXJNYXJrID09IG51bGwpIHtcbiAgICBvcHRpb25zLmhpZ2hXYXRlck1hcmsgPSA2NCAqIDEwMjRcbiAgfVxuICBjb25zdCBtZXJnZWRTdHJlYW0gPSBQYXNzVGhyb3VnaChvcHRpb25zKVxuXG4gIGZ1bmN0aW9uIGFkZFN0cmVhbSAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc3RyZWFtc1F1ZXVlLnB1c2gocGF1c2VTdHJlYW1zKGFyZ3VtZW50c1tpXSwgb3B0aW9ucykpXG4gICAgfVxuICAgIG1lcmdlU3RyZWFtKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VTdHJlYW0gKCkge1xuICAgIGlmIChtZXJnaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbWVyZ2luZyA9IHRydWVcblxuICAgIGxldCBzdHJlYW1zID0gc3RyZWFtc1F1ZXVlLnNoaWZ0KClcbiAgICBpZiAoIXN0cmVhbXMpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW5kU3RyZWFtKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShzdHJlYW1zKSkge1xuICAgICAgc3RyZWFtcyA9IFtzdHJlYW1zXVxuICAgIH1cblxuICAgIGxldCBwaXBlc0NvdW50ID0gc3RyZWFtcy5sZW5ndGggKyAxXG5cbiAgICBmdW5jdGlvbiBuZXh0ICgpIHtcbiAgICAgIGlmICgtLXBpcGVzQ291bnQgPiAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbWVyZ2luZyA9IGZhbHNlXG4gICAgICBtZXJnZVN0cmVhbSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGlwZSAoc3RyZWFtKSB7XG4gICAgICBmdW5jdGlvbiBvbmVuZCAoKSB7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignbWVyZ2UyVW5waXBlRW5kJywgb25lbmQpXG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpXG4gICAgICAgIGlmIChkb1BpcGVFcnJvcikge1xuICAgICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKVxuICAgICAgICB9XG4gICAgICAgIG5leHQoKVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgICAgIG1lcmdlZFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycilcbiAgICAgIH1cbiAgICAgIC8vIHNraXAgZW5kZWQgc3RyZWFtXG4gICAgICBpZiAoc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKVxuICAgICAgfVxuXG4gICAgICBzdHJlYW0ub24oJ21lcmdlMlVucGlwZUVuZCcsIG9uZW5kKVxuICAgICAgc3RyZWFtLm9uKCdlbmQnLCBvbmVuZClcblxuICAgICAgaWYgKGRvUGlwZUVycm9yKSB7XG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBvbmVycm9yKVxuICAgICAgfVxuXG4gICAgICBzdHJlYW0ucGlwZShtZXJnZWRTdHJlYW0sIHsgZW5kOiBmYWxzZSB9KVxuICAgICAgLy8gY29tcGF0aWJsZSBmb3Igb2xkIHN0cmVhbVxuICAgICAgc3RyZWFtLnJlc3VtZSgpXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJlYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwaXBlKHN0cmVhbXNbaV0pXG4gICAgfVxuXG4gICAgbmV4dCgpXG4gIH1cblxuICBmdW5jdGlvbiBlbmRTdHJlYW0gKCkge1xuICAgIG1lcmdpbmcgPSBmYWxzZVxuICAgIC8vIGVtaXQgJ3F1ZXVlRHJhaW4nIHdoZW4gYWxsIHN0cmVhbXMgbWVyZ2VkLlxuICAgIG1lcmdlZFN0cmVhbS5lbWl0KCdxdWV1ZURyYWluJylcbiAgICBpZiAoZG9FbmQpIHtcbiAgICAgIG1lcmdlZFN0cmVhbS5lbmQoKVxuICAgIH1cbiAgfVxuXG4gIG1lcmdlZFN0cmVhbS5zZXRNYXhMaXN0ZW5lcnMoMClcbiAgbWVyZ2VkU3RyZWFtLmFkZCA9IGFkZFN0cmVhbVxuICBtZXJnZWRTdHJlYW0ub24oJ3VucGlwZScsIGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICBzdHJlYW0uZW1pdCgnbWVyZ2UyVW5waXBlRW5kJylcbiAgfSlcblxuICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICBhZGRTdHJlYW0uYXBwbHkobnVsbCwgYXJncylcbiAgfVxuICByZXR1cm4gbWVyZ2VkU3RyZWFtXG59XG5cbi8vIGNoZWNrIGFuZCBwYXVzZSBzdHJlYW1zIGZvciBwaXBlLlxuZnVuY3Rpb24gcGF1c2VTdHJlYW1zIChzdHJlYW1zLCBvcHRpb25zKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShzdHJlYW1zKSkge1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBvbGQtc3R5bGUgc3RyZWFtc1xuICAgIGlmICghc3RyZWFtcy5fcmVhZGFibGVTdGF0ZSAmJiBzdHJlYW1zLnBpcGUpIHtcbiAgICAgIHN0cmVhbXMgPSBzdHJlYW1zLnBpcGUoUGFzc1Rocm91Z2gob3B0aW9ucykpXG4gICAgfVxuICAgIGlmICghc3RyZWFtcy5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtcy5wYXVzZSB8fCAhc3RyZWFtcy5waXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgcmVhZGFibGUgc3RyZWFtIGNhbiBiZSBtZXJnZWQuJylcbiAgICB9XG4gICAgc3RyZWFtcy5wYXVzZSgpXG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0cmVhbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHN0cmVhbXNbaV0gPSBwYXVzZVN0cmVhbXMoc3RyZWFtc1tpXSwgb3B0aW9ucylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cmVhbXNcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2UgPSB2b2lkIDA7XG5jb25zdCBtZXJnZTIgPSByZXF1aXJlKFwibWVyZ2UyXCIpO1xuZnVuY3Rpb24gbWVyZ2Uoc3RyZWFtcykge1xuICAgIGNvbnN0IG1lcmdlZFN0cmVhbSA9IG1lcmdlMihzdHJlYW1zKTtcbiAgICBzdHJlYW1zLmZvckVhY2goKHN0cmVhbSkgPT4ge1xuICAgICAgICBzdHJlYW0ub25jZSgnZXJyb3InLCAoZXJyb3IpID0+IG1lcmdlZFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKSk7XG4gICAgfSk7XG4gICAgbWVyZ2VkU3RyZWFtLm9uY2UoJ2Nsb3NlJywgKCkgPT4gcHJvcGFnYXRlQ2xvc2VFdmVudFRvU291cmNlcyhzdHJlYW1zKSk7XG4gICAgbWVyZ2VkU3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IHByb3BhZ2F0ZUNsb3NlRXZlbnRUb1NvdXJjZXMoc3RyZWFtcykpO1xuICAgIHJldHVybiBtZXJnZWRTdHJlYW07XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG5mdW5jdGlvbiBwcm9wYWdhdGVDbG9zZUV2ZW50VG9Tb3VyY2VzKHN0cmVhbXMpIHtcbiAgICBzdHJlYW1zLmZvckVhY2goKHN0cmVhbSkgPT4gc3RyZWFtLmVtaXQoJ2Nsb3NlJykpO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5ID0gZXhwb3J0cy5pc1N0cmluZyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5mdW5jdGlvbiBpc0VtcHR5KGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSAnJztcbn1cbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0cmluZyA9IGV4cG9ydHMuc3RyZWFtID0gZXhwb3J0cy5wYXR0ZXJuID0gZXhwb3J0cy5wYXRoID0gZXhwb3J0cy5mcyA9IGV4cG9ydHMuZXJybm8gPSBleHBvcnRzLmFycmF5ID0gdm9pZCAwO1xuY29uc3QgYXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheVwiKTtcbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcbmNvbnN0IGVycm5vID0gcmVxdWlyZShcIi4vZXJybm9cIik7XG5leHBvcnRzLmVycm5vID0gZXJybm87XG5jb25zdCBmcyA9IHJlcXVpcmUoXCIuL2ZzXCIpO1xuZXhwb3J0cy5mcyA9IGZzO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XG5leHBvcnRzLnBhdGggPSBwYXRoO1xuY29uc3QgcGF0dGVybiA9IHJlcXVpcmUoXCIuL3BhdHRlcm5cIik7XG5leHBvcnRzLnBhdHRlcm4gPSBwYXR0ZXJuO1xuY29uc3Qgc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtXCIpO1xuZXhwb3J0cy5zdHJlYW0gPSBzdHJlYW07XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKFwiLi9zdHJpbmdcIik7XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udmVydFBhdHRlcm5Hcm91cFRvVGFzayA9IGV4cG9ydHMuY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzID0gZXhwb3J0cy5ncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5ID0gZXhwb3J0cy5nZXROZWdhdGl2ZVBhdHRlcm5zQXNQb3NpdGl2ZSA9IGV4cG9ydHMuZ2V0UG9zaXRpdmVQYXR0ZXJucyA9IGV4cG9ydHMuY29udmVydFBhdHRlcm5zVG9UYXNrcyA9IGV4cG9ydHMuZ2VuZXJhdGUgPSB2b2lkIDA7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdlbmVyYXRlKHBhdHRlcm5zLCBzZXR0aW5ncykge1xuICAgIGNvbnN0IHBvc2l0aXZlUGF0dGVybnMgPSBnZXRQb3NpdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKTtcbiAgICBjb25zdCBuZWdhdGl2ZVBhdHRlcm5zID0gZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmUocGF0dGVybnMsIHNldHRpbmdzLmlnbm9yZSk7XG4gICAgY29uc3Qgc3RhdGljUGF0dGVybnMgPSBwb3NpdGl2ZVBhdHRlcm5zLmZpbHRlcigocGF0dGVybikgPT4gdXRpbHMucGF0dGVybi5pc1N0YXRpY1BhdHRlcm4ocGF0dGVybiwgc2V0dGluZ3MpKTtcbiAgICBjb25zdCBkeW5hbWljUGF0dGVybnMgPSBwb3NpdGl2ZVBhdHRlcm5zLmZpbHRlcigocGF0dGVybikgPT4gdXRpbHMucGF0dGVybi5pc0R5bmFtaWNQYXR0ZXJuKHBhdHRlcm4sIHNldHRpbmdzKSk7XG4gICAgY29uc3Qgc3RhdGljVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzKHN0YXRpY1BhdHRlcm5zLCBuZWdhdGl2ZVBhdHRlcm5zLCAvKiBkeW5hbWljICovIGZhbHNlKTtcbiAgICBjb25zdCBkeW5hbWljVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzKGR5bmFtaWNQYXR0ZXJucywgbmVnYXRpdmVQYXR0ZXJucywgLyogZHluYW1pYyAqLyB0cnVlKTtcbiAgICByZXR1cm4gc3RhdGljVGFza3MuY29uY2F0KGR5bmFtaWNUYXNrcyk7XG59XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG4vKipcbiAqIFJldHVybnMgdGFza3MgZ3JvdXBlZCBieSBiYXNpYyBwYXR0ZXJuIGRpcmVjdG9yaWVzLlxuICpcbiAqIFBhdHRlcm5zIHRoYXQgY2FuIGJlIGZvdW5kIGluc2lkZSAoYC4vYCkgYW5kIG91dHNpZGUgKGAuLi9gKSB0aGUgY3VycmVudCBkaXJlY3RvcnkgYXJlIGhhbmRsZWQgc2VwYXJhdGVseS5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgZGlyZWN0b3J5IHRyYXZlcnNhbCBzdGFydHMgYXQgdGhlIGJhc2UgZGlyZWN0b3J5IGFuZCBnb2VzIGRlZXBlci5cbiAqL1xuZnVuY3Rpb24gY29udmVydFBhdHRlcm5zVG9UYXNrcyhwb3NpdGl2ZSwgbmVnYXRpdmUsIGR5bmFtaWMpIHtcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuICAgIGNvbnN0IHBhdHRlcm5zT3V0c2lkZUN1cnJlbnREaXJlY3RvcnkgPSB1dGlscy5wYXR0ZXJuLmdldFBhdHRlcm5zT3V0c2lkZUN1cnJlbnREaXJlY3RvcnkocG9zaXRpdmUpO1xuICAgIGNvbnN0IHBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSA9IHV0aWxzLnBhdHRlcm4uZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5KHBvc2l0aXZlKTtcbiAgICBjb25zdCBvdXRzaWRlQ3VycmVudERpcmVjdG9yeUdyb3VwID0gZ3JvdXBQYXR0ZXJuc0J5QmFzZURpcmVjdG9yeShwYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5KTtcbiAgICBjb25zdCBpbnNpZGVDdXJyZW50RGlyZWN0b3J5R3JvdXAgPSBncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5KHBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSk7XG4gICAgdGFza3MucHVzaCguLi5jb252ZXJ0UGF0dGVybkdyb3Vwc1RvVGFza3Mob3V0c2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCwgbmVnYXRpdmUsIGR5bmFtaWMpKTtcbiAgICAvKlxuICAgICAqIEZvciB0aGUgc2FrZSBvZiByZWR1Y2luZyBmdXR1cmUgYWNjZXNzZXMgdG8gdGhlIGZpbGUgc3lzdGVtLCB3ZSBtZXJnZSBhbGwgdGFza3Mgd2l0aGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeVxuICAgICAqIGludG8gYSBnbG9iYWwgdGFzaywgaWYgYXQgbGVhc3Qgb25lIHBhdHRlcm4gcmVmZXJzIHRvIHRoZSByb290IChgLmApLiBJbiB0aGlzIGNhc2UsIHRoZSBnbG9iYWwgdGFzayBjb3ZlcnMgdGhlIHJlc3QuXG4gICAgICovXG4gICAgaWYgKCcuJyBpbiBpbnNpZGVDdXJyZW50RGlyZWN0b3J5R3JvdXApIHtcbiAgICAgICAgdGFza3MucHVzaChjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrKCcuJywgcGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5LCBuZWdhdGl2ZSwgZHluYW1pYykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFza3MucHVzaCguLi5jb252ZXJ0UGF0dGVybkdyb3Vwc1RvVGFza3MoaW5zaWRlQ3VycmVudERpcmVjdG9yeUdyb3VwLCBuZWdhdGl2ZSwgZHluYW1pYykpO1xuICAgIH1cbiAgICByZXR1cm4gdGFza3M7XG59XG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuc1RvVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzO1xuZnVuY3Rpb24gZ2V0UG9zaXRpdmVQYXR0ZXJucyhwYXR0ZXJucykge1xuICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLmdldFBvc2l0aXZlUGF0dGVybnMocGF0dGVybnMpO1xufVxuZXhwb3J0cy5nZXRQb3NpdGl2ZVBhdHRlcm5zID0gZ2V0UG9zaXRpdmVQYXR0ZXJucztcbmZ1bmN0aW9uIGdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlKHBhdHRlcm5zLCBpZ25vcmUpIHtcbiAgICBjb25zdCBuZWdhdGl2ZSA9IHV0aWxzLnBhdHRlcm4uZ2V0TmVnYXRpdmVQYXR0ZXJucyhwYXR0ZXJucykuY29uY2F0KGlnbm9yZSk7XG4gICAgY29uc3QgcG9zaXRpdmUgPSBuZWdhdGl2ZS5tYXAodXRpbHMucGF0dGVybi5jb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm4pO1xuICAgIHJldHVybiBwb3NpdGl2ZTtcbn1cbmV4cG9ydHMuZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmUgPSBnZXROZWdhdGl2ZVBhdHRlcm5zQXNQb3NpdGl2ZTtcbmZ1bmN0aW9uIGdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkocGF0dGVybnMpIHtcbiAgICBjb25zdCBncm91cCA9IHt9O1xuICAgIHJldHVybiBwYXR0ZXJucy5yZWR1Y2UoKGNvbGxlY3Rpb24sIHBhdHRlcm4pID0+IHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHV0aWxzLnBhdHRlcm4uZ2V0QmFzZURpcmVjdG9yeShwYXR0ZXJuKTtcbiAgICAgICAgaWYgKGJhc2UgaW4gY29sbGVjdGlvbikge1xuICAgICAgICAgICAgY29sbGVjdGlvbltiYXNlXS5wdXNoKHBhdHRlcm4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29sbGVjdGlvbltiYXNlXSA9IFtwYXR0ZXJuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9LCBncm91cCk7XG59XG5leHBvcnRzLmdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkgPSBncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5O1xuZnVuY3Rpb24gY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzKHBvc2l0aXZlLCBuZWdhdGl2ZSwgZHluYW1pYykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwb3NpdGl2ZSkubWFwKChiYXNlKSA9PiB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrKGJhc2UsIHBvc2l0aXZlW2Jhc2VdLCBuZWdhdGl2ZSwgZHluYW1pYyk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcyA9IGNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcztcbmZ1bmN0aW9uIGNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2soYmFzZSwgcG9zaXRpdmUsIG5lZ2F0aXZlLCBkeW5hbWljKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgcG9zaXRpdmUsXG4gICAgICAgIG5lZ2F0aXZlLFxuICAgICAgICBiYXNlLFxuICAgICAgICBwYXR0ZXJuczogW10uY29uY2F0KHBvc2l0aXZlLCBuZWdhdGl2ZS5tYXAodXRpbHMucGF0dGVybi5jb252ZXJ0VG9OZWdhdGl2ZVBhdHRlcm4pKVxuICAgIH07XG59XG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2sgPSBjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW1vdmVEdXBsaWNhdGVTbGFzaGVzID0gZXhwb3J0cy50cmFuc2Zvcm0gPSB2b2lkIDA7XG4vKipcbiAqIE1hdGNoZXMgYSBzZXF1ZW5jZSBvZiB0d28gb3IgbW9yZSBjb25zZWN1dGl2ZSBzbGFzaGVzLCBleGNsdWRpbmcgdGhlIGZpcnN0IHR3byBzbGFzaGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZy5cbiAqIFRoZSBsYXR0ZXIgaXMgZHVlIHRvIHRoZSBwcmVzZW5jZSBvZiB0aGUgZGV2aWNlIHBhdGggYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgVU5DIHBhdGguXG4gKiBAdG9kbyByZXdyaXRlIHRvIG5lZ2F0aXZlIGxvb2tiZWhpbmQgd2l0aCB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuICovXG5jb25zdCBET1VCTEVfU0xBU0hfUkUgPSAvKD8hXilcXC97Mix9L2c7XG5mdW5jdGlvbiB0cmFuc2Zvcm0ocGF0dGVybnMpIHtcbiAgICByZXR1cm4gcGF0dGVybnMubWFwKChwYXR0ZXJuKSA9PiByZW1vdmVEdXBsaWNhdGVTbGFzaGVzKHBhdHRlcm4pKTtcbn1cbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuLyoqXG4gKiBUaGlzIHBhY2thZ2Ugb25seSB3b3JrcyB3aXRoIGZvcndhcmQgc2xhc2hlcyBhcyBhIHBhdGggc2VwYXJhdG9yLlxuICogQmVjYXVzZSBvZiB0aGlzLCB3ZSBjYW5ub3QgdXNlIHRoZSBzdGFuZGFyZCBgcGF0aC5ub3JtYWxpemVgIG1ldGhvZCwgYmVjYXVzZSBvbiBXaW5kb3dzIHBsYXRmb3JtIGl0IHdpbGwgdXNlIG9mIGJhY2tzbGFzaGVzLlxuICovXG5mdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVTbGFzaGVzKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKERPVUJMRV9TTEFTSF9SRSwgJy8nKTtcbn1cbmV4cG9ydHMucmVtb3ZlRHVwbGljYXRlU2xhc2hlcyA9IHJlbW92ZUR1cGxpY2F0ZVNsYXNoZXM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlYWQgPSB2b2lkIDA7XG5mdW5jdGlvbiByZWFkKHBhdGgsIHNldHRpbmdzLCBjYWxsYmFjaykge1xuICAgIHNldHRpbmdzLmZzLmxzdGF0KHBhdGgsIChsc3RhdEVycm9yLCBsc3RhdCkgPT4ge1xuICAgICAgICBpZiAobHN0YXRFcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgbHN0YXRFcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsc3RhdC5pc1N5bWJvbGljTGluaygpIHx8ICFzZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmspIHtcbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGxzdGF0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXR0aW5ncy5mcy5zdGF0KHBhdGgsIChzdGF0RXJyb3IsIHN0YXQpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0RXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIHN0YXRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgbHN0YXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5tYXJrU3ltYm9saWNMaW5rKSB7XG4gICAgICAgICAgICAgICAgc3RhdC5pc1N5bWJvbGljTGluayA9ICgpID0+IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBzdGF0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWQgPSByZWFkO1xuZnVuY3Rpb24gY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IpIHtcbiAgICBjYWxsYmFjayhlcnJvcik7XG59XG5mdW5jdGlvbiBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCByZXN1bHQpIHtcbiAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFkID0gdm9pZCAwO1xuZnVuY3Rpb24gcmVhZChwYXRoLCBzZXR0aW5ncykge1xuICAgIGNvbnN0IGxzdGF0ID0gc2V0dGluZ3MuZnMubHN0YXRTeW5jKHBhdGgpO1xuICAgIGlmICghbHN0YXQuaXNTeW1ib2xpY0xpbmsoKSB8fCAhc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rKSB7XG4gICAgICAgIHJldHVybiBsc3RhdDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RhdCA9IHNldHRpbmdzLmZzLnN0YXRTeW5jKHBhdGgpO1xuICAgICAgICBpZiAoc2V0dGluZ3MubWFya1N5bWJvbGljTGluaykge1xuICAgICAgICAgICAgc3RhdC5pc1N5bWJvbGljTGluayA9ICgpID0+IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaykge1xuICAgICAgICAgICAgcmV0dXJuIGxzdGF0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyID0gZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5leHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIgPSB7XG4gICAgbHN0YXQ6IGZzLmxzdGF0LFxuICAgIHN0YXQ6IGZzLnN0YXQsXG4gICAgbHN0YXRTeW5jOiBmcy5sc3RhdFN5bmMsXG4gICAgc3RhdFN5bmM6IGZzLnN0YXRTeW5jXG59O1xuZnVuY3Rpb24gY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIoZnNNZXRob2RzKSB7XG4gICAgaWYgKGZzTWV0aG9kcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVI7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUiksIGZzTWV0aG9kcyk7XG59XG5leHBvcnRzLmNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyID0gY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCIuL2FkYXB0ZXJzL2ZzXCIpO1xuY2xhc3MgU2V0dGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKF9vcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGluayA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZm9sbG93U3ltYm9saWNMaW5rLCB0cnVlKTtcbiAgICAgICAgdGhpcy5mcyA9IGZzLmNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyKHRoaXMuX29wdGlvbnMuZnMpO1xuICAgICAgICB0aGlzLm1hcmtTeW1ib2xpY0xpbmsgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLm1hcmtTeW1ib2xpY0xpbmssIGZhbHNlKTtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmsgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaywgdHJ1ZSk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZShvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb24gIT09IG51bGwgJiYgb3B0aW9uICE9PSB2b2lkIDAgPyBvcHRpb24gOiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXR0aW5ncztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RhdFN5bmMgPSBleHBvcnRzLnN0YXQgPSBleHBvcnRzLlNldHRpbmdzID0gdm9pZCAwO1xuY29uc3QgYXN5bmMgPSByZXF1aXJlKFwiLi9wcm92aWRlcnMvYXN5bmNcIik7XG5jb25zdCBzeW5jID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL3N5bmNcIik7XG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XG5leHBvcnRzLlNldHRpbmdzID0gc2V0dGluZ3NfMS5kZWZhdWx0O1xuZnVuY3Rpb24gc3RhdChwYXRoLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncygpLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jLnJlYWQocGF0aCwgZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKSwgY2FsbGJhY2spO1xufVxuZXhwb3J0cy5zdGF0ID0gc3RhdDtcbmZ1bmN0aW9uIHN0YXRTeW5jKHBhdGgsIG9wdGlvbnNPclNldHRpbmdzKSB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5ncyk7XG4gICAgcmV0dXJuIHN5bmMucmVhZChwYXRoLCBzZXR0aW5ncyk7XG59XG5leHBvcnRzLnN0YXRTeW5jID0gc3RhdFN5bmM7XG5mdW5jdGlvbiBnZXRTZXR0aW5ncyhzZXR0aW5nc09yT3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHNldHRpbmdzT3JPcHRpb25zIGluc3RhbmNlb2Ygc2V0dGluZ3NfMS5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBzZXR0aW5nc09yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBzZXR0aW5nc18xLmRlZmF1bHQoc2V0dGluZ3NPck9wdGlvbnMpO1xufVxuIiwgIi8qISBxdWV1ZS1taWNyb3Rhc2suIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmxldCBwcm9taXNlXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nXG4gID8gcXVldWVNaWNyb3Rhc2suYmluZCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbiAgLy8gcmV1c2UgcmVzb2x2ZWQgcHJvbWlzZSwgYW5kIGFsbG9jYXRlIGl0IGxhemlseVxuICA6IGNiID0+IChwcm9taXNlIHx8IChwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkpKVxuICAgIC50aGVuKGNiKVxuICAgIC5jYXRjaChlcnIgPT4gc2V0VGltZW91dCgoKSA9PiB7IHRocm93IGVyciB9LCAwKSlcbiIsICIvKiEgcnVuLXBhcmFsbGVsLiBNSVQgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5tb2R1bGUuZXhwb3J0cyA9IHJ1blBhcmFsbGVsXG5cbmNvbnN0IHF1ZXVlTWljcm90YXNrID0gcmVxdWlyZSgncXVldWUtbWljcm90YXNrJylcblxuZnVuY3Rpb24gcnVuUGFyYWxsZWwgKHRhc2tzLCBjYikge1xuICBsZXQgcmVzdWx0cywgcGVuZGluZywga2V5c1xuICBsZXQgaXNTeW5jID0gdHJ1ZVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRhc2tzKSkge1xuICAgIHJlc3VsdHMgPSBbXVxuICAgIHBlbmRpbmcgPSB0YXNrcy5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModGFza3MpXG4gICAgcmVzdWx0cyA9IHt9XG4gICAgcGVuZGluZyA9IGtleXMubGVuZ3RoXG4gIH1cblxuICBmdW5jdGlvbiBkb25lIChlcnIpIHtcbiAgICBmdW5jdGlvbiBlbmQgKCkge1xuICAgICAgaWYgKGNiKSBjYihlcnIsIHJlc3VsdHMpXG4gICAgICBjYiA9IG51bGxcbiAgICB9XG4gICAgaWYgKGlzU3luYykgcXVldWVNaWNyb3Rhc2soZW5kKVxuICAgIGVsc2UgZW5kKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhY2ggKGksIGVyciwgcmVzdWx0KSB7XG4gICAgcmVzdWx0c1tpXSA9IHJlc3VsdFxuICAgIGlmICgtLXBlbmRpbmcgPT09IDAgfHwgZXJyKSB7XG4gICAgICBkb25lKGVycilcbiAgICB9XG4gIH1cblxuICBpZiAoIXBlbmRpbmcpIHtcbiAgICAvLyBlbXB0eVxuICAgIGRvbmUobnVsbClcbiAgfSBlbHNlIGlmIChrZXlzKSB7XG4gICAgLy8gb2JqZWN0XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHRhc2tzW2tleV0oZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7IGVhY2goa2V5LCBlcnIsIHJlc3VsdCkgfSlcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIC8vIGFycmF5XG4gICAgdGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaywgaSkge1xuICAgICAgdGFzayhmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHsgZWFjaChpLCBlcnIsIHJlc3VsdCkgfSlcbiAgICB9KVxuICB9XG5cbiAgaXNTeW5jID0gZmFsc2Vcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUyA9IHZvaWQgMDtcbmNvbnN0IE5PREVfUFJPQ0VTU19WRVJTSU9OX1BBUlRTID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJyk7XG5pZiAoTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFNbMF0gPT09IHVuZGVmaW5lZCB8fCBOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUU1sxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGJlaGF2aW9yLiBUaGUgJ3Byb2Nlc3MudmVyc2lvbnMubm9kZScgdmFyaWFibGUgaGFzIGludmFsaWQgdmFsdWU6ICR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfWApO1xufVxuY29uc3QgTUFKT1JfVkVSU0lPTiA9IE51bWJlci5wYXJzZUludChOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUU1swXSwgMTApO1xuY29uc3QgTUlOT1JfVkVSU0lPTiA9IE51bWJlci5wYXJzZUludChOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUU1sxXSwgMTApO1xuY29uc3QgU1VQUE9SVEVEX01BSk9SX1ZFUlNJT04gPSAxMDtcbmNvbnN0IFNVUFBPUlRFRF9NSU5PUl9WRVJTSU9OID0gMTA7XG5jb25zdCBJU19NQVRDSEVEX0JZX01BSk9SID0gTUFKT1JfVkVSU0lPTiA+IFNVUFBPUlRFRF9NQUpPUl9WRVJTSU9OO1xuY29uc3QgSVNfTUFUQ0hFRF9CWV9NQUpPUl9BTkRfTUlOT1IgPSBNQUpPUl9WRVJTSU9OID09PSBTVVBQT1JURURfTUFKT1JfVkVSU0lPTiAmJiBNSU5PUl9WRVJTSU9OID49IFNVUFBPUlRFRF9NSU5PUl9WRVJTSU9OO1xuLyoqXG4gKiBJUyBgdHJ1ZWAgZm9yIE5vZGUuanMgMTAuMTAgYW5kIGdyZWF0ZXIuXG4gKi9cbmV4cG9ydHMuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUyA9IElTX01BVENIRURfQllfTUFKT1IgfHwgSVNfTUFUQ0hFRF9CWV9NQUpPUl9BTkRfTUlOT1I7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZURpcmVudEZyb21TdGF0cyA9IHZvaWQgMDtcbmNsYXNzIERpcmVudEZyb21TdGF0cyB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgc3RhdHMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pc0Jsb2NrRGV2aWNlID0gc3RhdHMuaXNCbG9ja0RldmljZS5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc0NoYXJhY3RlckRldmljZSA9IHN0YXRzLmlzQ2hhcmFjdGVyRGV2aWNlLmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzRGlyZWN0b3J5ID0gc3RhdHMuaXNEaXJlY3RvcnkuYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNGSUZPID0gc3RhdHMuaXNGSUZPLmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzRmlsZSA9IHN0YXRzLmlzRmlsZS5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc1NvY2tldCA9IHN0YXRzLmlzU29ja2V0LmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzU3ltYm9saWNMaW5rID0gc3RhdHMuaXNTeW1ib2xpY0xpbmsuYmluZChzdGF0cyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRGlyZW50RnJvbVN0YXRzKG5hbWUsIHN0YXRzKSB7XG4gICAgcmV0dXJuIG5ldyBEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpO1xufVxuZXhwb3J0cy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMgPSBjcmVhdGVEaXJlbnRGcm9tU3RhdHM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZzID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9mc1wiKTtcbmV4cG9ydHMuZnMgPSBmcztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuam9pblBhdGhTZWdtZW50cyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGpvaW5QYXRoU2VnbWVudHMoYSwgYiwgc2VwYXJhdG9yKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvcnJlY3QgaGFuZGxpbmcgb2YgY2FzZXMgd2hlbiB0aGUgZmlyc3Qgc2VnbWVudCBpcyBhIHJvb3QgKGAvYCwgYEM6L2ApIG9yIFVOQyBwYXRoIChgLy8/L0M6L2ApLlxuICAgICAqL1xuICAgIGlmIChhLmVuZHNXaXRoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gYSArIHNlcGFyYXRvciArIGI7XG59XG5leHBvcnRzLmpvaW5QYXRoU2VnbWVudHMgPSBqb2luUGF0aFNlZ21lbnRzO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFkZGlyID0gZXhwb3J0cy5yZWFkZGlyV2l0aEZpbGVUeXBlcyA9IGV4cG9ydHMucmVhZCA9IHZvaWQgMDtcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xuY29uc3QgcnBsID0gcmVxdWlyZShcInJ1bi1wYXJhbGxlbFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuZnVuY3Rpb24gcmVhZChkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjaykge1xuICAgIGlmICghc2V0dGluZ3Muc3RhdHMgJiYgY29uc3RhbnRzXzEuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUykge1xuICAgICAgICByZWFkZGlyV2l0aEZpbGVUeXBlcyhkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVhZGRpcihkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjayk7XG59XG5leHBvcnRzLnJlYWQgPSByZWFkO1xuZnVuY3Rpb24gcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spIHtcbiAgICBzZXR0aW5ncy5mcy5yZWFkZGlyKGRpcmVjdG9yeSwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0sIChyZWFkZGlyRXJyb3IsIGRpcmVudHMpID0+IHtcbiAgICAgICAgaWYgKHJlYWRkaXJFcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgcmVhZGRpckVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbnRyaWVzID0gZGlyZW50cy5tYXAoKGRpcmVudCkgPT4gKHtcbiAgICAgICAgICAgIGRpcmVudCxcbiAgICAgICAgICAgIG5hbWU6IGRpcmVudC5uYW1lLFxuICAgICAgICAgICAgcGF0aDogY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoZGlyZWN0b3J5LCBkaXJlbnQubmFtZSwgc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpXG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzKSB7XG4gICAgICAgICAgICBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBlbnRyaWVzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXNrcyA9IGVudHJpZXMubWFwKChlbnRyeSkgPT4gbWFrZVJwbFRhc2tFbnRyeShlbnRyeSwgc2V0dGluZ3MpKTtcbiAgICAgICAgcnBsKHRhc2tzLCAocnBsRXJyb3IsIHJwbEVudHJpZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChycGxFcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIHJwbEVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBycGxFbnRyaWVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWRkaXJXaXRoRmlsZVR5cGVzID0gcmVhZGRpcldpdGhGaWxlVHlwZXM7XG5mdW5jdGlvbiBtYWtlUnBsVGFza0VudHJ5KGVudHJ5LCBzZXR0aW5ncykge1xuICAgIHJldHVybiAoZG9uZSkgPT4ge1xuICAgICAgICBpZiAoIWVudHJ5LmRpcmVudC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgICAgICAgICBkb25lKG51bGwsIGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXR0aW5ncy5mcy5zdGF0KGVudHJ5LnBhdGgsIChzdGF0RXJyb3IsIHN0YXRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdEVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaykge1xuICAgICAgICAgICAgICAgICAgICBkb25lKHN0YXRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9uZShudWxsLCBlbnRyeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkuZGlyZW50ID0gdXRpbHMuZnMuY3JlYXRlRGlyZW50RnJvbVN0YXRzKGVudHJ5Lm5hbWUsIHN0YXRzKTtcbiAgICAgICAgICAgIGRvbmUobnVsbCwgZW50cnkpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVhZGRpcihkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjaykge1xuICAgIHNldHRpbmdzLmZzLnJlYWRkaXIoZGlyZWN0b3J5LCAocmVhZGRpckVycm9yLCBuYW1lcykgPT4ge1xuICAgICAgICBpZiAocmVhZGRpckVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCByZWFkZGlyRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhc2tzID0gbmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoZGlyZWN0b3J5LCBuYW1lLCBzZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcik7XG4gICAgICAgICAgICByZXR1cm4gKGRvbmUpID0+IHtcbiAgICAgICAgICAgICAgICBmc1N0YXQuc3RhdChwYXRoLCBzZXR0aW5ncy5mc1N0YXRTZXR0aW5ncywgKGVycm9yLCBzdGF0cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlbnQ6IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnN0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5zdGF0cyA9IHN0YXRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgZW50cnkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJwbCh0YXNrcywgKHJwbEVycm9yLCBlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocnBsRXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBycGxFcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgZW50cmllcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWFkZGlyID0gcmVhZGRpcjtcbmZ1bmN0aW9uIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKSB7XG4gICAgY2FsbGJhY2soZXJyb3IpO1xufVxuZnVuY3Rpb24gY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgcmVzdWx0KSB7XG4gICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVhZGRpciA9IGV4cG9ydHMucmVhZGRpcldpdGhGaWxlVHlwZXMgPSBleHBvcnRzLnJlYWQgPSB2b2lkIDA7XG5jb25zdCBmc1N0YXQgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc3RhdFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuZnVuY3Rpb24gcmVhZChkaXJlY3RvcnksIHNldHRpbmdzKSB7XG4gICAgaWYgKCFzZXR0aW5ncy5zdGF0cyAmJiBjb25zdGFudHNfMS5JU19TVVBQT1JUX1JFQURESVJfV0lUSF9GSUxFX1RZUEVTKSB7XG4gICAgICAgIHJldHVybiByZWFkZGlyV2l0aEZpbGVUeXBlcyhkaXJlY3RvcnksIHNldHRpbmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWRkaXIoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XG59XG5leHBvcnRzLnJlYWQgPSByZWFkO1xuZnVuY3Rpb24gcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncykge1xuICAgIGNvbnN0IGRpcmVudHMgPSBzZXR0aW5ncy5mcy5yZWFkZGlyU3luYyhkaXJlY3RvcnksIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcbiAgICByZXR1cm4gZGlyZW50cy5tYXAoKGRpcmVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgIGRpcmVudCxcbiAgICAgICAgICAgIG5hbWU6IGRpcmVudC5uYW1lLFxuICAgICAgICAgICAgcGF0aDogY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoZGlyZWN0b3J5LCBkaXJlbnQubmFtZSwgc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbnRyeS5kaXJlbnQuaXNTeW1ib2xpY0xpbmsoKSAmJiBzZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gc2V0dGluZ3MuZnMuc3RhdFN5bmMoZW50cnkucGF0aCk7XG4gICAgICAgICAgICAgICAgZW50cnkuZGlyZW50ID0gdXRpbHMuZnMuY3JlYXRlRGlyZW50RnJvbVN0YXRzKGVudHJ5Lm5hbWUsIHN0YXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVhZGRpcldpdGhGaWxlVHlwZXMgPSByZWFkZGlyV2l0aEZpbGVUeXBlcztcbmZ1bmN0aW9uIHJlYWRkaXIoZGlyZWN0b3J5LCBzZXR0aW5ncykge1xuICAgIGNvbnN0IG5hbWVzID0gc2V0dGluZ3MuZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5KTtcbiAgICByZXR1cm4gbmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGVudHJ5UGF0aCA9IGNvbW1vbi5qb2luUGF0aFNlZ21lbnRzKGRpcmVjdG9yeSwgbmFtZSwgc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpO1xuICAgICAgICBjb25zdCBzdGF0cyA9IGZzU3RhdC5zdGF0U3luYyhlbnRyeVBhdGgsIHNldHRpbmdzLmZzU3RhdFNldHRpbmdzKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgcGF0aDogZW50cnlQYXRoLFxuICAgICAgICAgICAgZGlyZW50OiB1dGlscy5mcy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzZXR0aW5ncy5zdGF0cykge1xuICAgICAgICAgICAgZW50cnkuc3RhdHMgPSBzdGF0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWRkaXIgPSByZWFkZGlyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlciA9IGV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUiA9IHZvaWQgMDtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSID0ge1xuICAgIGxzdGF0OiBmcy5sc3RhdCxcbiAgICBzdGF0OiBmcy5zdGF0LFxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxuICAgIHN0YXRTeW5jOiBmcy5zdGF0U3luYyxcbiAgICByZWFkZGlyOiBmcy5yZWFkZGlyLFxuICAgIHJlYWRkaXJTeW5jOiBmcy5yZWFkZGlyU3luY1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyKGZzTWV0aG9kcykge1xuICAgIGlmIChmc01ldGhvZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIpLCBmc01ldGhvZHMpO1xufVxuZXhwb3J0cy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlciA9IGNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCIuL2FkYXB0ZXJzL2ZzXCIpO1xuY2xhc3MgU2V0dGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKF9vcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGlua3MsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5mcyA9IGZzLmNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyKHRoaXMuX29wdGlvbnMuZnMpO1xuICAgICAgICB0aGlzLnBhdGhTZWdtZW50U2VwYXJhdG9yID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5wYXRoU2VnbWVudFNlcGFyYXRvciwgcGF0aC5zZXApO1xuICAgICAgICB0aGlzLnN0YXRzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdGF0cywgZmFsc2UpO1xuICAgICAgICB0aGlzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluayA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rLCB0cnVlKTtcbiAgICAgICAgdGhpcy5mc1N0YXRTZXR0aW5ncyA9IG5ldyBmc1N0YXQuU2V0dGluZ3Moe1xuICAgICAgICAgICAgZm9sbG93U3ltYm9saWNMaW5rOiB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MsXG4gICAgICAgICAgICBmczogdGhpcy5mcyxcbiAgICAgICAgICAgIHRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluazogdGhpcy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZShvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb24gIT09IG51bGwgJiYgb3B0aW9uICE9PSB2b2lkIDAgPyBvcHRpb24gOiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXR0aW5ncztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0dGluZ3MgPSBleHBvcnRzLnNjYW5kaXJTeW5jID0gZXhwb3J0cy5zY2FuZGlyID0gdm9pZCAwO1xuY29uc3QgYXN5bmMgPSByZXF1aXJlKFwiLi9wcm92aWRlcnMvYXN5bmNcIik7XG5jb25zdCBzeW5jID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL3N5bmNcIik7XG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XG5leHBvcnRzLlNldHRpbmdzID0gc2V0dGluZ3NfMS5kZWZhdWx0O1xuZnVuY3Rpb24gc2NhbmRpcihwYXRoLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncygpLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jLnJlYWQocGF0aCwgZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKSwgY2FsbGJhY2spO1xufVxuZXhwb3J0cy5zY2FuZGlyID0gc2NhbmRpcjtcbmZ1bmN0aW9uIHNjYW5kaXJTeW5jKHBhdGgsIG9wdGlvbnNPclNldHRpbmdzKSB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5ncyk7XG4gICAgcmV0dXJuIHN5bmMucmVhZChwYXRoLCBzZXR0aW5ncyk7XG59XG5leHBvcnRzLnNjYW5kaXJTeW5jID0gc2NhbmRpclN5bmM7XG5mdW5jdGlvbiBnZXRTZXR0aW5ncyhzZXR0aW5nc09yT3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHNldHRpbmdzT3JPcHRpb25zIGluc3RhbmNlb2Ygc2V0dGluZ3NfMS5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBzZXR0aW5nc09yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBzZXR0aW5nc18xLmRlZmF1bHQoc2V0dGluZ3NPck9wdGlvbnMpO1xufVxuIiwgIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiByZXVzaWZ5IChDb25zdHJ1Y3Rvcikge1xuICB2YXIgaGVhZCA9IG5ldyBDb25zdHJ1Y3RvcigpXG4gIHZhciB0YWlsID0gaGVhZFxuXG4gIGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBoZWFkXG5cbiAgICBpZiAoY3VycmVudC5uZXh0KSB7XG4gICAgICBoZWFkID0gY3VycmVudC5uZXh0XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQgPSBuZXcgQ29uc3RydWN0b3IoKVxuICAgICAgdGFpbCA9IGhlYWRcbiAgICB9XG5cbiAgICBjdXJyZW50Lm5leHQgPSBudWxsXG5cbiAgICByZXR1cm4gY3VycmVudFxuICB9XG5cbiAgZnVuY3Rpb24gcmVsZWFzZSAob2JqKSB7XG4gICAgdGFpbC5uZXh0ID0gb2JqXG4gICAgdGFpbCA9IG9ialxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGdldCxcbiAgICByZWxlYXNlOiByZWxlYXNlXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXVzaWZ5XG4iLCAiJ3VzZSBzdHJpY3QnXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciAqL1xuXG52YXIgcmV1c2lmeSA9IHJlcXVpcmUoJ3JldXNpZnknKVxuXG5mdW5jdGlvbiBmYXN0cXVldWUgKGNvbnRleHQsIHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uY3VycmVuY3kgPSB3b3JrZXJcbiAgICB3b3JrZXIgPSBjb250ZXh0XG4gICAgY29udGV4dCA9IG51bGxcbiAgfVxuXG4gIGlmIChjb25jdXJyZW5jeSA8IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zhc3RxdWV1ZSBjb25jdXJyZW5jeSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJylcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHJldXNpZnkoVGFzaylcbiAgdmFyIHF1ZXVlSGVhZCA9IG51bGxcbiAgdmFyIHF1ZXVlVGFpbCA9IG51bGxcbiAgdmFyIF9ydW5uaW5nID0gMFxuICB2YXIgZXJyb3JIYW5kbGVyID0gbnVsbFxuXG4gIHZhciBzZWxmID0ge1xuICAgIHB1c2g6IHB1c2gsXG4gICAgZHJhaW46IG5vb3AsXG4gICAgc2F0dXJhdGVkOiBub29wLFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIGNvbmN1cnJlbmN5OiBjb25jdXJyZW5jeSxcbiAgICBydW5uaW5nOiBydW5uaW5nLFxuICAgIHJlc3VtZTogcmVzdW1lLFxuICAgIGlkbGU6IGlkbGUsXG4gICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgZ2V0UXVldWU6IGdldFF1ZXVlLFxuICAgIHVuc2hpZnQ6IHVuc2hpZnQsXG4gICAgZW1wdHk6IG5vb3AsXG4gICAga2lsbDoga2lsbCxcbiAgICBraWxsQW5kRHJhaW46IGtpbGxBbmREcmFpbixcbiAgICBlcnJvcjogZXJyb3JcbiAgfVxuXG4gIHJldHVybiBzZWxmXG5cbiAgZnVuY3Rpb24gcnVubmluZyAoKSB7XG4gICAgcmV0dXJuIF9ydW5uaW5nXG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgc2VsZi5wYXVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGggKCkge1xuICAgIHZhciBjdXJyZW50ID0gcXVldWVIZWFkXG4gICAgdmFyIGNvdW50ZXIgPSAwXG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICAgICAgY291bnRlcisrXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50ZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXVlICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHF1ZXVlSGVhZFxuICAgIHZhciB0YXNrcyA9IFtdXG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgdGFza3MucHVzaChjdXJyZW50LnZhbHVlKVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICAgIH1cblxuICAgIHJldHVybiB0YXNrc1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzdW1lICgpIHtcbiAgICBpZiAoIXNlbGYucGF1c2VkKSByZXR1cm5cbiAgICBzZWxmLnBhdXNlZCA9IGZhbHNlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNvbmN1cnJlbmN5OyBpKyspIHtcbiAgICAgIF9ydW5uaW5nKytcbiAgICAgIHJlbGVhc2UoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlkbGUgKCkge1xuICAgIHJldHVybiBfcnVubmluZyA9PT0gMCAmJiBzZWxmLmxlbmd0aCgpID09PSAwXG4gIH1cblxuICBmdW5jdGlvbiBwdXNoICh2YWx1ZSwgZG9uZSkge1xuICAgIHZhciBjdXJyZW50ID0gY2FjaGUuZ2V0KClcblxuICAgIGN1cnJlbnQuY29udGV4dCA9IGNvbnRleHRcbiAgICBjdXJyZW50LnJlbGVhc2UgPSByZWxlYXNlXG4gICAgY3VycmVudC52YWx1ZSA9IHZhbHVlXG4gICAgY3VycmVudC5jYWxsYmFjayA9IGRvbmUgfHwgbm9vcFxuICAgIGN1cnJlbnQuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyXG5cbiAgICBpZiAoX3J1bm5pbmcgPT09IHNlbGYuY29uY3VycmVuY3kgfHwgc2VsZi5wYXVzZWQpIHtcbiAgICAgIGlmIChxdWV1ZVRhaWwpIHtcbiAgICAgICAgcXVldWVUYWlsLm5leHQgPSBjdXJyZW50XG4gICAgICAgIHF1ZXVlVGFpbCA9IGN1cnJlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgICAgcXVldWVUYWlsID0gY3VycmVudFxuICAgICAgICBzZWxmLnNhdHVyYXRlZCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9ydW5uaW5nKytcbiAgICAgIHdvcmtlci5jYWxsKGNvbnRleHQsIGN1cnJlbnQudmFsdWUsIGN1cnJlbnQud29ya2VkKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2hpZnQgKHZhbHVlLCBkb25lKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjYWNoZS5nZXQoKVxuXG4gICAgY3VycmVudC5jb250ZXh0ID0gY29udGV4dFxuICAgIGN1cnJlbnQucmVsZWFzZSA9IHJlbGVhc2VcbiAgICBjdXJyZW50LnZhbHVlID0gdmFsdWVcbiAgICBjdXJyZW50LmNhbGxiYWNrID0gZG9uZSB8fCBub29wXG5cbiAgICBpZiAoX3J1bm5pbmcgPT09IHNlbGYuY29uY3VycmVuY3kgfHwgc2VsZi5wYXVzZWQpIHtcbiAgICAgIGlmIChxdWV1ZUhlYWQpIHtcbiAgICAgICAgY3VycmVudC5uZXh0ID0gcXVldWVIZWFkXG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgICAgcXVldWVUYWlsID0gY3VycmVudFxuICAgICAgICBzZWxmLnNhdHVyYXRlZCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9ydW5uaW5nKytcbiAgICAgIHdvcmtlci5jYWxsKGNvbnRleHQsIGN1cnJlbnQudmFsdWUsIGN1cnJlbnQud29ya2VkKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2UgKGhvbGRlcikge1xuICAgIGlmIChob2xkZXIpIHtcbiAgICAgIGNhY2hlLnJlbGVhc2UoaG9sZGVyKVxuICAgIH1cbiAgICB2YXIgbmV4dCA9IHF1ZXVlSGVhZFxuICAgIGlmIChuZXh0KSB7XG4gICAgICBpZiAoIXNlbGYucGF1c2VkKSB7XG4gICAgICAgIGlmIChxdWV1ZVRhaWwgPT09IHF1ZXVlSGVhZCkge1xuICAgICAgICAgIHF1ZXVlVGFpbCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUhlYWQgPSBuZXh0Lm5leHRcbiAgICAgICAgbmV4dC5uZXh0ID0gbnVsbFxuICAgICAgICB3b3JrZXIuY2FsbChjb250ZXh0LCBuZXh0LnZhbHVlLCBuZXh0LndvcmtlZClcbiAgICAgICAgaWYgKHF1ZXVlVGFpbCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNlbGYuZW1wdHkoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcnVubmluZy0tXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgtLV9ydW5uaW5nID09PSAwKSB7XG4gICAgICBzZWxmLmRyYWluKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBraWxsICgpIHtcbiAgICBxdWV1ZUhlYWQgPSBudWxsXG4gICAgcXVldWVUYWlsID0gbnVsbFxuICAgIHNlbGYuZHJhaW4gPSBub29wXG4gIH1cblxuICBmdW5jdGlvbiBraWxsQW5kRHJhaW4gKCkge1xuICAgIHF1ZXVlSGVhZCA9IG51bGxcbiAgICBxdWV1ZVRhaWwgPSBudWxsXG4gICAgc2VsZi5kcmFpbigpXG4gICAgc2VsZi5kcmFpbiA9IG5vb3BcbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yIChoYW5kbGVyKSB7XG4gICAgZXJyb3JIYW5kbGVyID0gaGFuZGxlclxuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cblxuZnVuY3Rpb24gVGFzayAoKSB7XG4gIHRoaXMudmFsdWUgPSBudWxsXG4gIHRoaXMuY2FsbGJhY2sgPSBub29wXG4gIHRoaXMubmV4dCA9IG51bGxcbiAgdGhpcy5yZWxlYXNlID0gbm9vcFxuICB0aGlzLmNvbnRleHQgPSBudWxsXG4gIHRoaXMuZXJyb3JIYW5kbGVyID0gbnVsbFxuXG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHRoaXMud29ya2VkID0gZnVuY3Rpb24gd29ya2VkIChlcnIsIHJlc3VsdCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNlbGYuY2FsbGJhY2tcbiAgICB2YXIgZXJyb3JIYW5kbGVyID0gc2VsZi5lcnJvckhhbmRsZXJcbiAgICB2YXIgdmFsID0gc2VsZi52YWx1ZVxuICAgIHNlbGYudmFsdWUgPSBudWxsXG4gICAgc2VsZi5jYWxsYmFjayA9IG5vb3BcbiAgICBpZiAoc2VsZi5lcnJvckhhbmRsZXIpIHtcbiAgICAgIGVycm9ySGFuZGxlcihlcnIsIHZhbClcbiAgICB9XG4gICAgY2FsbGJhY2suY2FsbChzZWxmLmNvbnRleHQsIGVyciwgcmVzdWx0KVxuICAgIHNlbGYucmVsZWFzZShzZWxmKVxuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXVlQXNQcm9taXNlZCAoY29udGV4dCwgd29ya2VyLCBjb25jdXJyZW5jeSkge1xuICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25jdXJyZW5jeSA9IHdvcmtlclxuICAgIHdvcmtlciA9IGNvbnRleHRcbiAgICBjb250ZXh0ID0gbnVsbFxuICB9XG5cbiAgZnVuY3Rpb24gYXN5bmNXcmFwcGVyIChhcmcsIGNiKSB7XG4gICAgd29ya2VyLmNhbGwodGhpcywgYXJnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBjYihudWxsLCByZXMpXG4gICAgICB9LCBjYilcbiAgfVxuXG4gIHZhciBxdWV1ZSA9IGZhc3RxdWV1ZShjb250ZXh0LCBhc3luY1dyYXBwZXIsIGNvbmN1cnJlbmN5KVxuXG4gIHZhciBwdXNoQ2IgPSBxdWV1ZS5wdXNoXG4gIHZhciB1bnNoaWZ0Q2IgPSBxdWV1ZS51bnNoaWZ0XG5cbiAgcXVldWUucHVzaCA9IHB1c2hcbiAgcXVldWUudW5zaGlmdCA9IHVuc2hpZnRcbiAgcXVldWUuZHJhaW5lZCA9IGRyYWluZWRcblxuICByZXR1cm4gcXVldWVcblxuICBmdW5jdGlvbiBwdXNoICh2YWx1ZSkge1xuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHVzaENiKHZhbHVlLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBMZXQncyBmb3JrIHRoZSBwcm9taXNlIGNoYWluIHRvXG4gICAgLy8gbWFrZSB0aGUgZXJyb3IgYnViYmxlIHVwIHRvIHRoZSB1c2VyIGJ1dFxuICAgIC8vIG5vdCBsZWFkIHRvIGEgdW5oYW5kbGVkUmVqZWN0aW9uXG4gICAgcC5jYXRjaChub29wKVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2hpZnQgKHZhbHVlKSB7XG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB1bnNoaWZ0Q2IodmFsdWUsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIExldCdzIGZvcmsgdGhlIHByb21pc2UgY2hhaW4gdG9cbiAgICAvLyBtYWtlIHRoZSBlcnJvciBidWJibGUgdXAgdG8gdGhlIHVzZXIgYnV0XG4gICAgLy8gbm90IGxlYWQgdG8gYSB1bmhhbmRsZWRSZWplY3Rpb25cbiAgICBwLmNhdGNoKG5vb3ApXG5cbiAgICByZXR1cm4gcFxuICB9XG5cbiAgZnVuY3Rpb24gZHJhaW5lZCAoKSB7XG4gICAgdmFyIHByZXZpb3VzRHJhaW4gPSBxdWV1ZS5kcmFpblxuXG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgcXVldWUuZHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByZXZpb3VzRHJhaW4oKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHBcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhc3RxdWV1ZVxubW9kdWxlLmV4cG9ydHMucHJvbWlzZSA9IHF1ZXVlQXNQcm9taXNlZFxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5qb2luUGF0aFNlZ21lbnRzID0gZXhwb3J0cy5yZXBsYWNlUGF0aFNlZ21lbnRTZXBhcmF0b3IgPSBleHBvcnRzLmlzQXBwbGllZEZpbHRlciA9IGV4cG9ydHMuaXNGYXRhbEVycm9yID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNGYXRhbEVycm9yKHNldHRpbmdzLCBlcnJvcikge1xuICAgIGlmIChzZXR0aW5ncy5lcnJvckZpbHRlciA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICFzZXR0aW5ncy5lcnJvckZpbHRlcihlcnJvcik7XG59XG5leHBvcnRzLmlzRmF0YWxFcnJvciA9IGlzRmF0YWxFcnJvcjtcbmZ1bmN0aW9uIGlzQXBwbGllZEZpbHRlcihmaWx0ZXIsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIodmFsdWUpO1xufVxuZXhwb3J0cy5pc0FwcGxpZWRGaWx0ZXIgPSBpc0FwcGxpZWRGaWx0ZXI7XG5mdW5jdGlvbiByZXBsYWNlUGF0aFNlZ21lbnRTZXBhcmF0b3IoZmlsZXBhdGgsIHNlcGFyYXRvcikge1xuICAgIHJldHVybiBmaWxlcGF0aC5zcGxpdCgvWy9cXFxcXS8pLmpvaW4oc2VwYXJhdG9yKTtcbn1cbmV4cG9ydHMucmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yID0gcmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yO1xuZnVuY3Rpb24gam9pblBhdGhTZWdtZW50cyhhLCBiLCBzZXBhcmF0b3IpIHtcbiAgICBpZiAoYSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjb3JyZWN0IGhhbmRsaW5nIG9mIGNhc2VzIHdoZW4gdGhlIGZpcnN0IHNlZ21lbnQgaXMgYSByb290IChgL2AsIGBDOi9gKSBvciBVTkMgcGF0aCAoYC8vPy9DOi9gKS5cbiAgICAgKi9cbiAgICBpZiAoYS5lbmRzV2l0aChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGEgKyBzZXBhcmF0b3IgKyBiO1xufVxuZXhwb3J0cy5qb2luUGF0aFNlZ21lbnRzID0gam9pblBhdGhTZWdtZW50cztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmNsYXNzIFJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoX3Jvb3QsIF9zZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9yb290ID0gX3Jvb3Q7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgICAgICB0aGlzLl9yb290ID0gY29tbW9uLnJlcGxhY2VQYXRoU2VnbWVudFNlcGFyYXRvcihfcm9vdCwgX3NldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBmc1NjYW5kaXIgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc2NhbmRpclwiKTtcbmNvbnN0IGZhc3RxID0gcmVxdWlyZShcImZhc3RxXCIpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuY29uc3QgcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG5jbGFzcyBBc3luY1JlYWRlciBleHRlbmRzIHJlYWRlcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKF9yb290LCBfc2V0dGluZ3MpIHtcbiAgICAgICAgc3VwZXIoX3Jvb3QsIF9zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgICAgICB0aGlzLl9zY2FuZGlyID0gZnNTY2FuZGlyLnNjYW5kaXI7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gZmFzdHEodGhpcy5fd29ya2VyLmJpbmQodGhpcyksIHRoaXMuX3NldHRpbmdzLmNvbmN1cnJlbmN5KTtcbiAgICAgICAgdGhpcy5faXNGYXRhbEVycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3F1ZXVlLmRyYWluID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0ZhdGFsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoJ2VuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZWFkKCkge1xuICAgICAgICB0aGlzLl9pc0ZhdGFsRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hUb1F1ZXVlKHRoaXMuX3Jvb3QsIHRoaXMuX3NldHRpbmdzLmJhc2VQYXRoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyO1xuICAgIH1cbiAgICBnZXQgaXNEZXN0cm95ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Rlc3Ryb3llZDtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSByZWFkZXIgaXMgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3F1ZXVlLmtpbGxBbmREcmFpbigpO1xuICAgIH1cbiAgICBvbkVudHJ5KGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub24oJ2VudHJ5JywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkVycm9yKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25jZSgnZXJyb3InLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIG9uRW5kKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25jZSgnZW5kJywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBfcHVzaFRvUXVldWUoZGlyZWN0b3J5LCBiYXNlKSB7XG4gICAgICAgIGNvbnN0IHF1ZXVlSXRlbSA9IHsgZGlyZWN0b3J5LCBiYXNlIH07XG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2gocXVldWVJdGVtLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF93b3JrZXIoaXRlbSwgZG9uZSkge1xuICAgICAgICB0aGlzLl9zY2FuZGlyKGl0ZW0uZGlyZWN0b3J5LCB0aGlzLl9zZXR0aW5ncy5mc1NjYW5kaXJTZXR0aW5ncywgKGVycm9yLCBlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkb25lKGVycm9yLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUVudHJ5KGVudHJ5LCBpdGVtLmJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZShudWxsLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCB8fCAhY29tbW9uLmlzRmF0YWxFcnJvcih0aGlzLl9zZXR0aW5ncywgZXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNGYXRhbEVycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH1cbiAgICBfaGFuZGxlRW50cnkoZW50cnksIGJhc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRGVzdHJveWVkIHx8IHRoaXMuX2lzRmF0YWxFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bGxwYXRoID0gZW50cnkucGF0aDtcbiAgICAgICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZW50cnkucGF0aCA9IGNvbW1vbi5qb2luUGF0aFNlZ21lbnRzKGJhc2UsIGVudHJ5Lm5hbWUsIHRoaXMuX3NldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbW9uLmlzQXBwbGllZEZpbHRlcih0aGlzLl9zZXR0aW5ncy5lbnRyeUZpbHRlciwgZW50cnkpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0RW50cnkoZW50cnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKSAmJiBjb21tb24uaXNBcHBsaWVkRmlsdGVyKHRoaXMuX3NldHRpbmdzLmRlZXBGaWx0ZXIsIGVudHJ5KSkge1xuICAgICAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUoZnVsbHBhdGgsIGJhc2UgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGVudHJ5LnBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9lbWl0RW50cnkoZW50cnkpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdlbnRyeScsIGVudHJ5KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBc3luY1JlYWRlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9hc3luY1wiKTtcbmNsYXNzIEFzeW5jUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9yb290LCBfc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IGFzeW5jXzEuZGVmYXVsdCh0aGlzLl9yb290LCB0aGlzLl9zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBbXTtcbiAgICB9XG4gICAgcmVhZChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9yZWFkZXIub25FcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVudHJ5KChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCB0aGlzLl9zdG9yYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlYWRlci5yZWFkKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXN5bmNQcm92aWRlcjtcbmZ1bmN0aW9uIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKSB7XG4gICAgY2FsbGJhY2soZXJyb3IpO1xufVxuZnVuY3Rpb24gY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgZW50cmllcykge1xuICAgIGNhbGxiYWNrKG51bGwsIGVudHJpZXMpO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9yZWFkZXJzL2FzeW5jXCIpO1xuY2xhc3MgU3RyZWFtUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9yb290LCBfc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IGFzeW5jXzEuZGVmYXVsdCh0aGlzLl9yb290LCB0aGlzLl9zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX3N0cmVhbSA9IG5ldyBzdHJlYW1fMS5SZWFkYWJsZSh7XG4gICAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgICAgICAgcmVhZDogKCkgPT4geyB9LFxuICAgICAgICAgICAgZGVzdHJveTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVhZGVyLmlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVhZCgpIHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLm9uRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0uZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIub25FbnRyeSgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N0cmVhbS5wdXNoKGVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlYWRlci5yZWFkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtUHJvdmlkZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmc1NjYW5kaXIgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc2NhbmRpclwiKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xuY2xhc3MgU3luY1JlYWRlciBleHRlbmRzIHJlYWRlcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9zY2FuZGlyID0gZnNTY2FuZGlyLnNjYW5kaXJTeW5jO1xuICAgICAgICB0aGlzLl9zdG9yYWdlID0gW107XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICByZWFkKCkge1xuICAgICAgICB0aGlzLl9wdXNoVG9RdWV1ZSh0aGlzLl9yb290LCB0aGlzLl9zZXR0aW5ncy5iYXNlUGF0aCk7XG4gICAgICAgIHRoaXMuX2hhbmRsZVF1ZXVlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlO1xuICAgIH1cbiAgICBfcHVzaFRvUXVldWUoZGlyZWN0b3J5LCBiYXNlKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLmFkZCh7IGRpcmVjdG9yeSwgYmFzZSB9KTtcbiAgICB9XG4gICAgX2hhbmRsZVF1ZXVlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5fcXVldWUudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURpcmVjdG9yeShpdGVtLmRpcmVjdG9yeSwgaXRlbS5iYXNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaGFuZGxlRGlyZWN0b3J5KGRpcmVjdG9yeSwgYmFzZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMuX3NjYW5kaXIoZGlyZWN0b3J5LCB0aGlzLl9zZXR0aW5ncy5mc1NjYW5kaXJTZXR0aW5ncyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFbnRyeShlbnRyeSwgYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2hhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgICAgIGlmICghY29tbW9uLmlzRmF0YWxFcnJvcih0aGlzLl9zZXR0aW5ncywgZXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIF9oYW5kbGVFbnRyeShlbnRyeSwgYmFzZSkge1xuICAgICAgICBjb25zdCBmdWxscGF0aCA9IGVudHJ5LnBhdGg7XG4gICAgICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVudHJ5LnBhdGggPSBjb21tb24uam9pblBhdGhTZWdtZW50cyhiYXNlLCBlbnRyeS5uYW1lLCB0aGlzLl9zZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1vbi5pc0FwcGxpZWRGaWx0ZXIodGhpcy5fc2V0dGluZ3MuZW50cnlGaWx0ZXIsIGVudHJ5KSkge1xuICAgICAgICAgICAgdGhpcy5fcHVzaFRvU3RvcmFnZShlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudHJ5LmRpcmVudC5pc0RpcmVjdG9yeSgpICYmIGNvbW1vbi5pc0FwcGxpZWRGaWx0ZXIodGhpcy5fc2V0dGluZ3MuZGVlcEZpbHRlciwgZW50cnkpKSB7XG4gICAgICAgICAgICB0aGlzLl9wdXNoVG9RdWV1ZShmdWxscGF0aCwgYmFzZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZW50cnkucGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3B1c2hUb1N0b3JhZ2UoZW50cnkpIHtcbiAgICAgICAgdGhpcy5fc3RvcmFnZS5wdXNoKGVudHJ5KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTeW5jUmVhZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3luY18xID0gcmVxdWlyZShcIi4uL3JlYWRlcnMvc3luY1wiKTtcbmNsYXNzIFN5bmNQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoX3Jvb3QsIF9zZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9yb290ID0gX3Jvb3Q7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgICAgICB0aGlzLl9yZWFkZXIgPSBuZXcgc3luY18xLmRlZmF1bHQodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cbiAgICByZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnJlYWQoKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTeW5jUHJvdmlkZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBmc1NjYW5kaXIgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc2NhbmRpclwiKTtcbmNsYXNzIFNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3Rvcihfb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuYmFzZVBhdGgsIHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuY29uY3VycmVuY3kgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmNvbmN1cnJlbmN5LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICB0aGlzLmRlZXBGaWx0ZXIgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmRlZXBGaWx0ZXIsIG51bGwpO1xuICAgICAgICB0aGlzLmVudHJ5RmlsdGVyID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5lbnRyeUZpbHRlciwgbnVsbCk7XG4gICAgICAgIHRoaXMuZXJyb3JGaWx0ZXIgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmVycm9yRmlsdGVyLCBudWxsKTtcbiAgICAgICAgdGhpcy5wYXRoU2VnbWVudFNlcGFyYXRvciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMucGF0aFNlZ21lbnRTZXBhcmF0b3IsIHBhdGguc2VwKTtcbiAgICAgICAgdGhpcy5mc1NjYW5kaXJTZXR0aW5ncyA9IG5ldyBmc1NjYW5kaXIuU2V0dGluZ3Moe1xuICAgICAgICAgICAgZm9sbG93U3ltYm9saWNMaW5rczogdGhpcy5fb3B0aW9ucy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxuICAgICAgICAgICAgZnM6IHRoaXMuX29wdGlvbnMuZnMsXG4gICAgICAgICAgICBwYXRoU2VnbWVudFNlcGFyYXRvcjogdGhpcy5fb3B0aW9ucy5wYXRoU2VnbWVudFNlcGFyYXRvcixcbiAgICAgICAgICAgIHN0YXRzOiB0aGlzLl9vcHRpb25zLnN0YXRzLFxuICAgICAgICAgICAgdGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rOiB0aGlzLl9vcHRpb25zLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGlua1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldFZhbHVlKG9wdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbiAhPT0gbnVsbCAmJiBvcHRpb24gIT09IHZvaWQgMCA/IG9wdGlvbiA6IHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNldHRpbmdzO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXR0aW5ncyA9IGV4cG9ydHMud2Fsa1N0cmVhbSA9IGV4cG9ydHMud2Fsa1N5bmMgPSBleHBvcnRzLndhbGsgPSB2b2lkIDA7XG5jb25zdCBhc3luY18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL2FzeW5jXCIpO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlcnMvc3RyZWFtXCIpO1xuY29uc3Qgc3luY18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL3N5bmNcIik7XG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XG5leHBvcnRzLlNldHRpbmdzID0gc2V0dGluZ3NfMS5kZWZhdWx0O1xuZnVuY3Rpb24gd2FsayhkaXJlY3RvcnksIG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBuZXcgYXN5bmNfMS5kZWZhdWx0KGRpcmVjdG9yeSwgZ2V0U2V0dGluZ3MoKSkucmVhZChvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ldyBhc3luY18xLmRlZmF1bHQoZGlyZWN0b3J5LCBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spKS5yZWFkKGNhbGxiYWNrKTtcbn1cbmV4cG9ydHMud2FsayA9IHdhbGs7XG5mdW5jdGlvbiB3YWxrU3luYyhkaXJlY3RvcnksIG9wdGlvbnNPclNldHRpbmdzKSB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5ncyk7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgc3luY18xLmRlZmF1bHQoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHByb3ZpZGVyLnJlYWQoKTtcbn1cbmV4cG9ydHMud2Fsa1N5bmMgPSB3YWxrU3luYztcbmZ1bmN0aW9uIHdhbGtTdHJlYW0oZGlyZWN0b3J5LCBvcHRpb25zT3JTZXR0aW5ncykge1xuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IHN0cmVhbV8xLmRlZmF1bHQoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHByb3ZpZGVyLnJlYWQoKTtcbn1cbmV4cG9ydHMud2Fsa1N0cmVhbSA9IHdhbGtTdHJlYW07XG5mdW5jdGlvbiBnZXRTZXR0aW5ncyhzZXR0aW5nc09yT3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHNldHRpbmdzT3JPcHRpb25zIGluc3RhbmNlb2Ygc2V0dGluZ3NfMS5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBzZXR0aW5nc09yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBzZXR0aW5nc18xLmRlZmF1bHQoc2V0dGluZ3NPck9wdGlvbnMpO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNsYXNzIFJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoX3NldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgICAgICB0aGlzLl9mc1N0YXRTZXR0aW5ncyA9IG5ldyBmc1N0YXQuU2V0dGluZ3Moe1xuICAgICAgICAgICAgZm9sbG93U3ltYm9saWNMaW5rOiB0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxuICAgICAgICAgICAgZnM6IHRoaXMuX3NldHRpbmdzLmZzLFxuICAgICAgICAgICAgdGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rOiB0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0RnVsbEVudHJ5UGF0aChmaWxlcGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLmN3ZCwgZmlsZXBhdGgpO1xuICAgIH1cbiAgICBfbWFrZUVudHJ5KHN0YXRzLCBwYXR0ZXJuKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgbmFtZTogcGF0dGVybixcbiAgICAgICAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICAgICAgICBkaXJlbnQ6IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhwYXR0ZXJuLCBzdGF0cylcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnN0YXRzKSB7XG4gICAgICAgICAgICBlbnRyeS5zdGF0cyA9IHN0YXRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgX2lzRmF0YWxFcnJvcihlcnJvcikge1xuICAgICAgICByZXR1cm4gIXV0aWxzLmVycm5vLmlzRW5vZW50Q29kZUVycm9yKGVycm9yKSAmJiAhdGhpcy5fc2V0dGluZ3Muc3VwcHJlc3NFcnJvcnM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XG5jb25zdCBmc1dhbGsgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMud2Fsa1wiKTtcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xuY2xhc3MgUmVhZGVyU3RyZWFtIGV4dGVuZHMgcmVhZGVyXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3dhbGtTdHJlYW0gPSBmc1dhbGsud2Fsa1N0cmVhbTtcbiAgICAgICAgdGhpcy5fc3RhdCA9IGZzU3RhdC5zdGF0O1xuICAgIH1cbiAgICBkeW5hbWljKHJvb3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dhbGtTdHJlYW0ocm9vdCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyhwYXR0ZXJucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBmaWxlcGF0aHMgPSBwYXR0ZXJucy5tYXAodGhpcy5fZ2V0RnVsbEVudHJ5UGF0aCwgdGhpcyk7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBzdHJlYW1fMS5QYXNzVGhyb3VnaCh7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgICAgIHN0cmVhbS5fd3JpdGUgPSAoaW5kZXgsIF9lbmMsIGRvbmUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRFbnRyeShmaWxlcGF0aHNbaW5kZXhdLCBwYXR0ZXJuc1tpbmRleF0sIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5ICE9PSBudWxsICYmIG9wdGlvbnMuZW50cnlGaWx0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBmaWxlcGF0aHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGRvbmUpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVwYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlKGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIF9nZXRFbnRyeShmaWxlcGF0aCwgcGF0dGVybiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhdChmaWxlcGF0aClcbiAgICAgICAgICAgIC50aGVuKChzdGF0cykgPT4gdGhpcy5fbWFrZUVudHJ5KHN0YXRzLCBwYXR0ZXJuKSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVycm9yRmlsdGVyKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0U3RhdChmaWxlcGF0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RhdChmaWxlcGF0aCwgdGhpcy5fZnNTdGF0U2V0dGluZ3MsIChlcnJvciwgc3RhdHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IgPT09IG51bGwgPyByZXNvbHZlKHN0YXRzKSA6IHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhZGVyU3RyZWFtO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jbGFzcyBNYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihfcGF0dGVybnMsIF9zZXR0aW5ncywgX21pY3JvbWF0Y2hPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3BhdHRlcm5zID0gX3BhdHRlcm5zO1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMgPSBfbWljcm9tYXRjaE9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBbXTtcbiAgICAgICAgdGhpcy5fZmlsbFN0b3JhZ2UoKTtcbiAgICB9XG4gICAgX2ZpbGxTdG9yYWdlKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9yaWdpbmFsIHBhdHRlcm4gbWF5IGluY2x1ZGUgYHssKiwqKixhLyp9YCwgd2hpY2ggd2lsbCBsZWFkIHRvIHByb2JsZW1zIHdpdGggbWF0Y2hpbmcgKHVucmVzb2x2ZWQgbGV2ZWwpLlxuICAgICAgICAgKiBTbywgYmVmb3JlIGV4cGFuZCBwYXR0ZXJucyB3aXRoIGJyYWNlIGV4cGFuc2lvbiBpbnRvIHNlcGFyYXRlZCBwYXR0ZXJucy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gdXRpbHMucGF0dGVybi5leHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbih0aGlzLl9wYXR0ZXJucyk7XG4gICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLl9nZXRQYXR0ZXJuU2VnbWVudHMocGF0dGVybik7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9ucyA9IHRoaXMuX3NwbGl0U2VnbWVudHNJbnRvU2VjdGlvbnMoc2VnbWVudHMpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZS5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogc2VjdGlvbnMubGVuZ3RoIDw9IDEsXG4gICAgICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgICAgICAgICBzZWN0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldFBhdHRlcm5TZWdtZW50cyhwYXR0ZXJuKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdXRpbHMucGF0dGVybi5nZXRQYXR0ZXJuUGFydHMocGF0dGVybiwgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkeW5hbWljID0gdXRpbHMucGF0dGVybi5pc0R5bmFtaWNQYXR0ZXJuKHBhcnQsIHRoaXMuX3NldHRpbmdzKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBwYXJ0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZHluYW1pYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiBwYXJ0LFxuICAgICAgICAgICAgICAgIHBhdHRlcm5SZTogdXRpbHMucGF0dGVybi5tYWtlUmUocGFydCwgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NwbGl0U2VnbWVudHNJbnRvU2VjdGlvbnMoc2VnbWVudHMpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmFycmF5LnNwbGl0V2hlbihzZWdtZW50cywgKHNlZ21lbnQpID0+IHNlZ21lbnQuZHluYW1pYyAmJiB1dGlscy5wYXR0ZXJuLmhhc0dsb2JTdGFyKHNlZ21lbnQucGF0dGVybikpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE1hdGNoZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtYXRjaGVyXzEgPSByZXF1aXJlKFwiLi9tYXRjaGVyXCIpO1xuY2xhc3MgUGFydGlhbE1hdGNoZXIgZXh0ZW5kcyBtYXRjaGVyXzEuZGVmYXVsdCB7XG4gICAgbWF0Y2goZmlsZXBhdGgpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBmaWxlcGF0aC5zcGxpdCgnLycpO1xuICAgICAgICBjb25zdCBsZXZlbHMgPSBwYXJ0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gdGhpcy5fc3RvcmFnZS5maWx0ZXIoKGluZm8pID0+ICFpbmZvLmNvbXBsZXRlIHx8IGluZm8uc2VnbWVudHMubGVuZ3RoID4gbGV2ZWxzKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uID0gcGF0dGVybi5zZWN0aW9uc1swXTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW4gdGhpcyBjYXNlLCB0aGUgcGF0dGVybiBoYXMgYSBnbG9ic3RhciBhbmQgd2UgbXVzdCByZWFkIGFsbCBkaXJlY3RvcmllcyB1bmNvbmRpdGlvbmFsbHksXG4gICAgICAgICAgICAgKiBidXQgb25seSBpZiB0aGUgbGV2ZWwgaGFzIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgZmlyc3QgZ3JvdXAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogZml4dHVyZXMve2EsYn0vKipcbiAgICAgICAgICAgICAqICBeIHRydWUvZmFsc2UgIF4gYWx3YXlzIHRydWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIXBhdHRlcm4uY29tcGxldGUgJiYgbGV2ZWxzID4gc2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcGFydHMuZXZlcnkoKHBhcnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudCA9IHBhdHRlcm4uc2VnbWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuUmUudGVzdChwYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuID09PSBwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQYXJ0aWFsTWF0Y2hlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgcGFydGlhbF8xID0gcmVxdWlyZShcIi4uL21hdGNoZXJzL3BhcnRpYWxcIik7XG5jbGFzcyBEZWVwRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MsIF9taWNyb21hdGNoT3B0aW9ucykge1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMgPSBfbWljcm9tYXRjaE9wdGlvbnM7XG4gICAgfVxuICAgIGdldEZpbHRlcihiYXNlUGF0aCwgcG9zaXRpdmUsIG5lZ2F0aXZlKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXIgPSB0aGlzLl9nZXRNYXRjaGVyKHBvc2l0aXZlKTtcbiAgICAgICAgY29uc3QgbmVnYXRpdmVSZSA9IHRoaXMuX2dldE5lZ2F0aXZlUGF0dGVybnNSZShuZWdhdGl2ZSk7XG4gICAgICAgIHJldHVybiAoZW50cnkpID0+IHRoaXMuX2ZpbHRlcihiYXNlUGF0aCwgZW50cnksIG1hdGNoZXIsIG5lZ2F0aXZlUmUpO1xuICAgIH1cbiAgICBfZ2V0TWF0Y2hlcihwYXR0ZXJucykge1xuICAgICAgICByZXR1cm4gbmV3IHBhcnRpYWxfMS5kZWZhdWx0KHBhdHRlcm5zLCB0aGlzLl9zZXR0aW5ncywgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xuICAgIH1cbiAgICBfZ2V0TmVnYXRpdmVQYXR0ZXJuc1JlKHBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IGFmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybnMgPSBwYXR0ZXJucy5maWx0ZXIodXRpbHMucGF0dGVybi5pc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybik7XG4gICAgICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLmNvbnZlcnRQYXR0ZXJuc1RvUmUoYWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJucywgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xuICAgIH1cbiAgICBfZmlsdGVyKGJhc2VQYXRoLCBlbnRyeSwgbWF0Y2hlciwgbmVnYXRpdmVSZSkge1xuICAgICAgICBpZiAodGhpcy5faXNTa2lwcGVkQnlEZWVwKGJhc2VQYXRoLCBlbnRyeS5wYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc1NraXBwZWRTeW1ib2xpY0xpbmsoZW50cnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB1dGlscy5wYXRoLnJlbW92ZUxlYWRpbmdEb3RTZWdtZW50KGVudHJ5LnBhdGgpO1xuICAgICAgICBpZiAodGhpcy5faXNTa2lwcGVkQnlQb3NpdGl2ZVBhdHRlcm5zKGZpbGVwYXRoLCBtYXRjaGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NraXBwZWRCeU5lZ2F0aXZlUGF0dGVybnMoZmlsZXBhdGgsIG5lZ2F0aXZlUmUpO1xuICAgIH1cbiAgICBfaXNTa2lwcGVkQnlEZWVwKGJhc2VQYXRoLCBlbnRyeVBhdGgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF2b2lkIHVubmVjZXNzYXJ5IGRlcHRoIGNhbGN1bGF0aW9ucyB3aGVuIGl0IGRvZXNuJ3QgbWF0dGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLmRlZXAgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudHJ5TGV2ZWwoYmFzZVBhdGgsIGVudHJ5UGF0aCkgPj0gdGhpcy5fc2V0dGluZ3MuZGVlcDtcbiAgICB9XG4gICAgX2dldEVudHJ5TGV2ZWwoYmFzZVBhdGgsIGVudHJ5UGF0aCkge1xuICAgICAgICBjb25zdCBlbnRyeVBhdGhEZXB0aCA9IGVudHJ5UGF0aC5zcGxpdCgnLycpLmxlbmd0aDtcbiAgICAgICAgaWYgKGJhc2VQYXRoID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5UGF0aERlcHRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJhc2VQYXRoRGVwdGggPSBiYXNlUGF0aC5zcGxpdCgnLycpLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGVudHJ5UGF0aERlcHRoIC0gYmFzZVBhdGhEZXB0aDtcbiAgICB9XG4gICAgX2lzU2tpcHBlZFN5bWJvbGljTGluayhlbnRyeSkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX3NldHRpbmdzLmZvbGxvd1N5bWJvbGljTGlua3MgJiYgZW50cnkuZGlyZW50LmlzU3ltYm9saWNMaW5rKCk7XG4gICAgfVxuICAgIF9pc1NraXBwZWRCeVBvc2l0aXZlUGF0dGVybnMoZW50cnlQYXRoLCBtYXRjaGVyKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5fc2V0dGluZ3MuYmFzZU5hbWVNYXRjaCAmJiAhbWF0Y2hlci5tYXRjaChlbnRyeVBhdGgpO1xuICAgIH1cbiAgICBfaXNTa2lwcGVkQnlOZWdhdGl2ZVBhdHRlcm5zKGVudHJ5UGF0aCwgcGF0dGVybnNSZSkge1xuICAgICAgICByZXR1cm4gIXV0aWxzLnBhdHRlcm4ubWF0Y2hBbnkoZW50cnlQYXRoLCBwYXR0ZXJuc1JlKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBEZWVwRmlsdGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jbGFzcyBFbnRyeUZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoX3NldHRpbmdzLCBfbWljcm9tYXRjaE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zID0gX21pY3JvbWF0Y2hPcHRpb25zO1xuICAgICAgICB0aGlzLmluZGV4ID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXRGaWx0ZXIocG9zaXRpdmUsIG5lZ2F0aXZlKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aXZlUmUgPSB1dGlscy5wYXR0ZXJuLmNvbnZlcnRQYXR0ZXJuc1RvUmUocG9zaXRpdmUsIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKTtcbiAgICAgICAgY29uc3QgbmVnYXRpdmVSZSA9IHV0aWxzLnBhdHRlcm4uY29udmVydFBhdHRlcm5zVG9SZShuZWdhdGl2ZSwgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gKGVudHJ5KSA9PiB0aGlzLl9maWx0ZXIoZW50cnksIHBvc2l0aXZlUmUsIG5lZ2F0aXZlUmUpO1xuICAgIH1cbiAgICBfZmlsdGVyKGVudHJ5LCBwb3NpdGl2ZVJlLCBuZWdhdGl2ZVJlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy51bmlxdWUgJiYgdGhpcy5faXNEdXBsaWNhdGVFbnRyeShlbnRyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb25seUZpbGVGaWx0ZXIoZW50cnkpIHx8IHRoaXMuX29ubHlEaXJlY3RvcnlGaWx0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzU2tpcHBlZEJ5QWJzb2x1dGVOZWdhdGl2ZVBhdHRlcm5zKGVudHJ5LnBhdGgsIG5lZ2F0aXZlUmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLl9zZXR0aW5ncy5iYXNlTmFtZU1hdGNoID8gZW50cnkubmFtZSA6IGVudHJ5LnBhdGg7XG4gICAgICAgIGNvbnN0IGlzTWF0Y2hlZCA9IHRoaXMuX2lzTWF0Y2hUb1BhdHRlcm5zKGZpbGVwYXRoLCBwb3NpdGl2ZVJlKSAmJiAhdGhpcy5faXNNYXRjaFRvUGF0dGVybnMoZW50cnkucGF0aCwgbmVnYXRpdmVSZSk7XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy51bmlxdWUgJiYgaXNNYXRjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVJbmRleFJlY29yZChlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTWF0Y2hlZDtcbiAgICB9XG4gICAgX2lzRHVwbGljYXRlRW50cnkoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXguaGFzKGVudHJ5LnBhdGgpO1xuICAgIH1cbiAgICBfY3JlYXRlSW5kZXhSZWNvcmQoZW50cnkpIHtcbiAgICAgICAgdGhpcy5pbmRleC5zZXQoZW50cnkucGF0aCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgX29ubHlGaWxlRmlsdGVyKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5vbmx5RmlsZXMgJiYgIWVudHJ5LmRpcmVudC5pc0ZpbGUoKTtcbiAgICB9XG4gICAgX29ubHlEaXJlY3RvcnlGaWx0ZXIoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLm9ubHlEaXJlY3RvcmllcyAmJiAhZW50cnkuZGlyZW50LmlzRGlyZWN0b3J5KCk7XG4gICAgfVxuICAgIF9pc1NraXBwZWRCeUFic29sdXRlTmVnYXRpdmVQYXR0ZXJucyhlbnRyeVBhdGgsIHBhdHRlcm5zUmUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hYnNvbHV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1bGxwYXRoID0gdXRpbHMucGF0aC5tYWtlQWJzb2x1dGUodGhpcy5fc2V0dGluZ3MuY3dkLCBlbnRyeVBhdGgpO1xuICAgICAgICByZXR1cm4gdXRpbHMucGF0dGVybi5tYXRjaEFueShmdWxscGF0aCwgcGF0dGVybnNSZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcnN0LCBqdXN0IHRyeWluZyB0byBhcHBseSBwYXR0ZXJucyB0byB0aGUgcGF0aC5cbiAgICAgKiBTZWNvbmQsIHRyeWluZyB0byBhcHBseSBwYXR0ZXJucyB0byB0aGUgcGF0aCB3aXRoIGZpbmFsIHNsYXNoLlxuICAgICAqL1xuICAgIF9pc01hdGNoVG9QYXR0ZXJucyhlbnRyeVBhdGgsIHBhdHRlcm5zUmUpIHtcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB1dGlscy5wYXRoLnJlbW92ZUxlYWRpbmdEb3RTZWdtZW50KGVudHJ5UGF0aCk7XG4gICAgICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGZpbGVwYXRoLCBwYXR0ZXJuc1JlKSB8fCB1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGZpbGVwYXRoICsgJy8nLCBwYXR0ZXJuc1JlKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBFbnRyeUZpbHRlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY2xhc3MgRXJyb3JGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICB9XG4gICAgZ2V0RmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gKGVycm9yKSA9PiB0aGlzLl9pc05vbkZhdGFsRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBfaXNOb25GYXRhbEVycm9yKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB1dGlscy5lcnJuby5pc0Vub2VudENvZGVFcnJvcihlcnJvcikgfHwgdGhpcy5fc2V0dGluZ3Muc3VwcHJlc3NFcnJvcnM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXJyb3JGaWx0ZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNsYXNzIEVudHJ5VHJhbnNmb3JtZXIge1xuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICB9XG4gICAgZ2V0VHJhbnNmb3JtZXIoKSB7XG4gICAgICAgIHJldHVybiAoZW50cnkpID0+IHRoaXMuX3RyYW5zZm9ybShlbnRyeSk7XG4gICAgfVxuICAgIF90cmFuc2Zvcm0oZW50cnkpIHtcbiAgICAgICAgbGV0IGZpbGVwYXRoID0gZW50cnkucGF0aDtcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLmFic29sdXRlKSB7XG4gICAgICAgICAgICBmaWxlcGF0aCA9IHV0aWxzLnBhdGgubWFrZUFic29sdXRlKHRoaXMuX3NldHRpbmdzLmN3ZCwgZmlsZXBhdGgpO1xuICAgICAgICAgICAgZmlsZXBhdGggPSB1dGlscy5wYXRoLnVuaXhpZnkoZmlsZXBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5tYXJrRGlyZWN0b3JpZXMgJiYgZW50cnkuZGlyZW50LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIGZpbGVwYXRoICs9ICcvJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3NldHRpbmdzLm9iamVjdE1vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlcGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBlbnRyeSksIHsgcGF0aDogZmlsZXBhdGggfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRW50cnlUcmFuc2Zvcm1lcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGRlZXBfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZGVlcFwiKTtcbmNvbnN0IGVudHJ5XzEgPSByZXF1aXJlKFwiLi9maWx0ZXJzL2VudHJ5XCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZXJyb3JcIik7XG5jb25zdCBlbnRyeV8yID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtZXJzL2VudHJ5XCIpO1xuY2xhc3MgUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5lcnJvckZpbHRlciA9IG5ldyBlcnJvcl8xLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLmVudHJ5RmlsdGVyID0gbmV3IGVudHJ5XzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncywgdGhpcy5fZ2V0TWljcm9tYXRjaE9wdGlvbnMoKSk7XG4gICAgICAgIHRoaXMuZGVlcEZpbHRlciA9IG5ldyBkZWVwXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncywgdGhpcy5fZ2V0TWljcm9tYXRjaE9wdGlvbnMoKSk7XG4gICAgICAgIHRoaXMuZW50cnlUcmFuc2Zvcm1lciA9IG5ldyBlbnRyeV8yLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cbiAgICBfZ2V0Um9vdERpcmVjdG9yeSh0YXNrKSB7XG4gICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUodGhpcy5fc2V0dGluZ3MuY3dkLCB0YXNrLmJhc2UpO1xuICAgIH1cbiAgICBfZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKSB7XG4gICAgICAgIGNvbnN0IGJhc2VQYXRoID0gdGFzay5iYXNlID09PSAnLicgPyAnJyA6IHRhc2suYmFzZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2VQYXRoLFxuICAgICAgICAgICAgcGF0aFNlZ21lbnRTZXBhcmF0b3I6ICcvJyxcbiAgICAgICAgICAgIGNvbmN1cnJlbmN5OiB0aGlzLl9zZXR0aW5ncy5jb25jdXJyZW5jeSxcbiAgICAgICAgICAgIGRlZXBGaWx0ZXI6IHRoaXMuZGVlcEZpbHRlci5nZXRGaWx0ZXIoYmFzZVBhdGgsIHRhc2sucG9zaXRpdmUsIHRhc2submVnYXRpdmUpLFxuICAgICAgICAgICAgZW50cnlGaWx0ZXI6IHRoaXMuZW50cnlGaWx0ZXIuZ2V0RmlsdGVyKHRhc2sucG9zaXRpdmUsIHRhc2submVnYXRpdmUpLFxuICAgICAgICAgICAgZXJyb3JGaWx0ZXI6IHRoaXMuZXJyb3JGaWx0ZXIuZ2V0RmlsdGVyKCksXG4gICAgICAgICAgICBmb2xsb3dTeW1ib2xpY0xpbmtzOiB0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxuICAgICAgICAgICAgZnM6IHRoaXMuX3NldHRpbmdzLmZzLFxuICAgICAgICAgICAgc3RhdHM6IHRoaXMuX3NldHRpbmdzLnN0YXRzLFxuICAgICAgICAgICAgdGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rOiB0aGlzLl9zZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRoaXMuZW50cnlUcmFuc2Zvcm1lci5nZXRUcmFuc2Zvcm1lcigpXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9nZXRNaWNyb21hdGNoT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvdDogdGhpcy5fc2V0dGluZ3MuZG90LFxuICAgICAgICAgICAgbWF0Y2hCYXNlOiB0aGlzLl9zZXR0aW5ncy5iYXNlTmFtZU1hdGNoLFxuICAgICAgICAgICAgbm9icmFjZTogIXRoaXMuX3NldHRpbmdzLmJyYWNlRXhwYW5zaW9uLFxuICAgICAgICAgICAgbm9jYXNlOiAhdGhpcy5fc2V0dGluZ3MuY2FzZVNlbnNpdGl2ZU1hdGNoLFxuICAgICAgICAgICAgbm9leHQ6ICF0aGlzLl9zZXR0aW5ncy5leHRnbG9iLFxuICAgICAgICAgICAgbm9nbG9ic3RhcjogIXRoaXMuX3NldHRpbmdzLmdsb2JzdGFyLFxuICAgICAgICAgICAgcG9zaXg6IHRydWUsXG4gICAgICAgICAgICBzdHJpY3RTbGFzaGVzOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zdHJlYW1cIik7XG5jb25zdCBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5jbGFzcyBQcm92aWRlckFzeW5jIGV4dGVuZHMgcHJvdmlkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IHN0cmVhbV8xLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cbiAgICByZWFkKHRhc2spIHtcbiAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuX2dldFJvb3REaXJlY3RvcnkodGFzayk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9nZXRSZWFkZXJPcHRpb25zKHRhc2spO1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gW107XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLmFwaShyb290LCB0YXNrLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHN0cmVhbS5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgICBzdHJlYW0ub24oJ2RhdGEnLCAoZW50cnkpID0+IGVudHJpZXMucHVzaChvcHRpb25zLnRyYW5zZm9ybShlbnRyeSkpKTtcbiAgICAgICAgICAgIHN0cmVhbS5vbmNlKCdlbmQnLCAoKSA9PiByZXNvbHZlKGVudHJpZXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0YXNrLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuZHluYW1pYyhyb290LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnN0YXRpYyh0YXNrLnBhdHRlcm5zLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQcm92aWRlckFzeW5jO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY29uc3Qgc3RyZWFtXzIgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zdHJlYW1cIik7XG5jb25zdCBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XG5jbGFzcyBQcm92aWRlclN0cmVhbSBleHRlbmRzIHByb3ZpZGVyXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBzdHJlYW1fMi5kZWZhdWx0KHRoaXMuX3NldHRpbmdzKTtcbiAgICB9XG4gICAgcmVhZCh0YXNrKSB7XG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLl9nZXRSb290RGlyZWN0b3J5KHRhc2spO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5hcGkocm9vdCwgdGFzaywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gbmV3IHN0cmVhbV8xLlJlYWRhYmxlKHsgb2JqZWN0TW9kZTogdHJ1ZSwgcmVhZDogKCkgPT4geyB9IH0pO1xuICAgICAgICBzb3VyY2VcbiAgICAgICAgICAgIC5vbmNlKCdlcnJvcicsIChlcnJvcikgPT4gZGVzdGluYXRpb24uZW1pdCgnZXJyb3InLCBlcnJvcikpXG4gICAgICAgICAgICAub24oJ2RhdGEnLCAoZW50cnkpID0+IGRlc3RpbmF0aW9uLmVtaXQoJ2RhdGEnLCBvcHRpb25zLnRyYW5zZm9ybShlbnRyeSkpKVxuICAgICAgICAgICAgLm9uY2UoJ2VuZCcsICgpID0+IGRlc3RpbmF0aW9uLmVtaXQoJ2VuZCcpKTtcbiAgICAgICAgZGVzdGluYXRpb25cbiAgICAgICAgICAgIC5vbmNlKCdjbG9zZScsICgpID0+IHNvdXJjZS5kZXN0cm95KCkpO1xuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XG4gICAgfVxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0YXNrLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuZHluYW1pYyhyb290LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnN0YXRpYyh0YXNrLnBhdHRlcm5zLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQcm92aWRlclN0cmVhbTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xuY29uc3QgZnNXYWxrID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLndhbGtcIik7XG5jb25zdCByZWFkZXJfMSA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbmNsYXNzIFJlYWRlclN5bmMgZXh0ZW5kcyByZWFkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fd2Fsa1N5bmMgPSBmc1dhbGsud2Fsa1N5bmM7XG4gICAgICAgIHRoaXMuX3N0YXRTeW5jID0gZnNTdGF0LnN0YXRTeW5jO1xuICAgIH1cbiAgICBkeW5hbWljKHJvb3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dhbGtTeW5jKHJvb3QsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMocGF0dGVybnMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdGhpcy5fZ2V0RnVsbEVudHJ5UGF0aChwYXR0ZXJuKTtcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5fZ2V0RW50cnkoZmlsZXBhdGgsIHBhdHRlcm4sIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsIHx8ICFvcHRpb25zLmVudHJ5RmlsdGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICB9XG4gICAgX2dldEVudHJ5KGZpbGVwYXRoLCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IHRoaXMuX2dldFN0YXQoZmlsZXBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VFbnRyeShzdGF0cywgcGF0dGVybik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lcnJvckZpbHRlcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRTdGF0KGZpbGVwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0U3luYyhmaWxlcGF0aCwgdGhpcy5fZnNTdGF0U2V0dGluZ3MpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlYWRlclN5bmM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zeW5jXCIpO1xuY29uc3QgcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyXCIpO1xuY2xhc3MgUHJvdmlkZXJTeW5jIGV4dGVuZHMgcHJvdmlkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IHN5bmNfMS5kZWZhdWx0KHRoaXMuX3NldHRpbmdzKTtcbiAgICB9XG4gICAgcmVhZCh0YXNrKSB7XG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLl9nZXRSb290RGlyZWN0b3J5KHRhc2spO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMuYXBpKHJvb3QsIHRhc2ssIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gZW50cmllcy5tYXAob3B0aW9ucy50cmFuc2Zvcm0pO1xuICAgIH1cbiAgICBhcGkocm9vdCwgdGFzaywgb3B0aW9ucykge1xuICAgICAgICBpZiAodGFzay5keW5hbWljKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLmR5bmFtaWMocm9vdCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5zdGF0aWModGFzay5wYXR0ZXJucywgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUHJvdmlkZXJTeW5jO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0ZJTEVfU1lTVEVNX0FEQVBURVIgPSB2b2lkIDA7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IG9zID0gcmVxdWlyZShcIm9zXCIpO1xuLyoqXG4gKiBUaGUgYG9zLmNwdXNgIG1ldGhvZCBjYW4gcmV0dXJuIHplcm8uIFdlIGV4cGVjdCB0aGUgbnVtYmVyIG9mIGNvcmVzIHRvIGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvN2ZhZWRkZjIzYTk4YzUzODk2ZjhiNTc0YTZlNjY1ODllOGZiMWViOC9saWIvb3MuanMjTDEwNi1MMTA3XG4gKi9cbmNvbnN0IENQVV9DT1VOVCA9IE1hdGgubWF4KG9zLmNwdXMoKS5sZW5ndGgsIDEpO1xuZXhwb3J0cy5ERUZBVUxUX0ZJTEVfU1lTVEVNX0FEQVBURVIgPSB7XG4gICAgbHN0YXQ6IGZzLmxzdGF0LFxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxuICAgIHN0YXQ6IGZzLnN0YXQsXG4gICAgc3RhdFN5bmM6IGZzLnN0YXRTeW5jLFxuICAgIHJlYWRkaXI6IGZzLnJlYWRkaXIsXG4gICAgcmVhZGRpclN5bmM6IGZzLnJlYWRkaXJTeW5jXG59O1xuY2xhc3MgU2V0dGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKF9vcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xuICAgICAgICB0aGlzLmFic29sdXRlID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5hYnNvbHV0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmJhc2VOYW1lTWF0Y2ggPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmJhc2VOYW1lTWF0Y2gsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5icmFjZUV4cGFuc2lvbiA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuYnJhY2VFeHBhbnNpb24sIHRydWUpO1xuICAgICAgICB0aGlzLmNhc2VTZW5zaXRpdmVNYXRjaCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY2FzZVNlbnNpdGl2ZU1hdGNoLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jb25jdXJyZW5jeSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY29uY3VycmVuY3ksIENQVV9DT1VOVCk7XG4gICAgICAgIHRoaXMuY3dkID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5jd2QsIHByb2Nlc3MuY3dkKCkpO1xuICAgICAgICB0aGlzLmRlZXAgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmRlZXAsIEluZmluaXR5KTtcbiAgICAgICAgdGhpcy5kb3QgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmRvdCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmV4dGdsb2IgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmV4dGdsb2IsIHRydWUpO1xuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGlua3MsIHRydWUpO1xuICAgICAgICB0aGlzLmZzID0gdGhpcy5fZ2V0RmlsZVN5c3RlbU1ldGhvZHModGhpcy5fb3B0aW9ucy5mcyk7XG4gICAgICAgIHRoaXMuZ2xvYnN0YXIgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmdsb2JzdGFyLCB0cnVlKTtcbiAgICAgICAgdGhpcy5pZ25vcmUgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmlnbm9yZSwgW10pO1xuICAgICAgICB0aGlzLm1hcmtEaXJlY3RvcmllcyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMubWFya0RpcmVjdG9yaWVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMub2JqZWN0TW9kZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLm9ubHlEaXJlY3RvcmllcyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMub25seURpcmVjdG9yaWVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMub25seUZpbGVzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5vbmx5RmlsZXMsIHRydWUpO1xuICAgICAgICB0aGlzLnN0YXRzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdGF0cywgZmFsc2UpO1xuICAgICAgICB0aGlzLnN1cHByZXNzRXJyb3JzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdXBwcmVzc0Vycm9ycywgZmFsc2UpO1xuICAgICAgICB0aGlzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluayA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudW5pcXVlID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy51bmlxdWUsIHRydWUpO1xuICAgICAgICBpZiAodGhpcy5vbmx5RGlyZWN0b3JpZXMpIHtcbiAgICAgICAgICAgIHRoaXMub25seUZpbGVzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdHMpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0TW9kZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldFZhbHVlKG9wdGlvbiwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbiA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiBvcHRpb247XG4gICAgfVxuICAgIF9nZXRGaWxlU3lzdGVtTWV0aG9kcyhtZXRob2RzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5ERUZBVUxUX0ZJTEVfU1lTVEVNX0FEQVBURVIpLCBtZXRob2RzKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXR0aW5ncztcbiIsICJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRhc2tNYW5hZ2VyID0gcmVxdWlyZShcIi4vbWFuYWdlcnMvdGFza3NcIik7XG5jb25zdCBwYXR0ZXJuTWFuYWdlciA9IHJlcXVpcmUoXCIuL21hbmFnZXJzL3BhdHRlcm5zXCIpO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9hc3luY1wiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL3N0cmVhbVwiKTtcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xuY29uc3Qgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3NldHRpbmdzXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIEZhc3RHbG9iKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcbiAgICBjb25zdCB3b3JrcyA9IGdldFdvcmtzKHNvdXJjZSwgYXN5bmNfMS5kZWZhdWx0LCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbCh3b3Jrcyk7XG4gICAgcmV0dXJuIHV0aWxzLmFycmF5LmZsYXR0ZW4ocmVzdWx0KTtcbn1cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBlc2NyaXB0LWVzbGludC90eXBlc2NyaXB0LWVzbGludC9pc3N1ZXMvNjBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbihmdW5jdGlvbiAoRmFzdEdsb2IpIHtcbiAgICBmdW5jdGlvbiBzeW5jKHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XG4gICAgICAgIGNvbnN0IHdvcmtzID0gZ2V0V29ya3Moc291cmNlLCBzeW5jXzEuZGVmYXVsdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB1dGlscy5hcnJheS5mbGF0dGVuKHdvcmtzKTtcbiAgICB9XG4gICAgRmFzdEdsb2Iuc3luYyA9IHN5bmM7XG4gICAgZnVuY3Rpb24gc3RyZWFtKHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XG4gICAgICAgIGNvbnN0IHdvcmtzID0gZ2V0V29ya3Moc291cmNlLCBzdHJlYW1fMS5kZWZhdWx0LCBvcHRpb25zKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdHJlYW0gcmV0dXJuZWQgYnkgdGhlIHByb3ZpZGVyIGNhbm5vdCB3b3JrIHdpdGggYW4gYXN5bmNocm9ub3VzIGl0ZXJhdG9yLlxuICAgICAgICAgKiBUbyBzdXBwb3J0IGFzeW5jaHJvbm91cyBpdGVyYXRvcnMsIHJlZ2FyZGxlc3Mgb2YgdGhlIG51bWJlciBvZiB0YXNrcywgd2UgYWx3YXlzIG11bHRpcGxleCBzdHJlYW1zLlxuICAgICAgICAgKiBUaGlzIGFmZmVjdHMgcGVyZm9ybWFuY2UgKCsyNSUpLiBJIGRvbid0IHNlZSBiZXN0IHNvbHV0aW9uIHJpZ2h0IG5vdy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB1dGlscy5zdHJlYW0ubWVyZ2Uod29ya3MpO1xuICAgIH1cbiAgICBGYXN0R2xvYi5zdHJlYW0gPSBzdHJlYW07XG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVUYXNrcyhzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0UGF0dGVybnNJbnB1dChzb3VyY2UpO1xuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IHBhdHRlcm5NYW5hZ2VyLnRyYW5zZm9ybShbXS5jb25jYXQoc291cmNlKSk7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gbmV3IHNldHRpbmdzXzEuZGVmYXVsdChvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRhc2tNYW5hZ2VyLmdlbmVyYXRlKHBhdHRlcm5zLCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIEZhc3RHbG9iLmdlbmVyYXRlVGFza3MgPSBnZW5lcmF0ZVRhc2tzO1xuICAgIGZ1bmN0aW9uIGlzRHluYW1pY1BhdHRlcm4oc291cmNlLCBvcHRpb25zKSB7XG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdXRpbHMucGF0dGVybi5pc0R5bmFtaWNQYXR0ZXJuKHNvdXJjZSwgc2V0dGluZ3MpO1xuICAgIH1cbiAgICBGYXN0R2xvYi5pc0R5bmFtaWNQYXR0ZXJuID0gaXNEeW5hbWljUGF0dGVybjtcbiAgICBmdW5jdGlvbiBlc2NhcGVQYXRoKHNvdXJjZSkge1xuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XG4gICAgICAgIHJldHVybiB1dGlscy5wYXRoLmVzY2FwZShzb3VyY2UpO1xuICAgIH1cbiAgICBGYXN0R2xvYi5lc2NhcGVQYXRoID0gZXNjYXBlUGF0aDtcbn0pKEZhc3RHbG9iIHx8IChGYXN0R2xvYiA9IHt9KSk7XG5mdW5jdGlvbiBnZXRXb3Jrcyhzb3VyY2UsIF9Qcm92aWRlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhdHRlcm5zID0gcGF0dGVybk1hbmFnZXIudHJhbnNmb3JtKFtdLmNvbmNhdChzb3VyY2UpKTtcbiAgICBjb25zdCBzZXR0aW5ncyA9IG5ldyBzZXR0aW5nc18xLmRlZmF1bHQob3B0aW9ucyk7XG4gICAgY29uc3QgdGFza3MgPSB0YXNrTWFuYWdlci5nZW5lcmF0ZShwYXR0ZXJucywgc2V0dGluZ3MpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IF9Qcm92aWRlcihzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHRhc2tzLm1hcChwcm92aWRlci5yZWFkLCBwcm92aWRlcik7XG59XG5mdW5jdGlvbiBhc3NlcnRQYXR0ZXJuc0lucHV0KGlucHV0KSB7XG4gICAgY29uc3Qgc291cmNlID0gW10uY29uY2F0KGlucHV0KTtcbiAgICBjb25zdCBpc1ZhbGlkU291cmNlID0gc291cmNlLmV2ZXJ5KChpdGVtKSA9PiB1dGlscy5zdHJpbmcuaXNTdHJpbmcoaXRlbSkgJiYgIXV0aWxzLnN0cmluZy5pc0VtcHR5KGl0ZW0pKTtcbiAgICBpZiAoIWlzVmFsaWRTb3VyY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0dGVybnMgbXVzdCBiZSBhIHN0cmluZyAobm9uIGVtcHR5KSBvciBhbiBhcnJheSBvZiBzdHJpbmdzJyk7XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBGYXN0R2xvYjtcbiIsICJpbXBvcnQgeyBBc3luY0R1Y2tEQkRpc3BhdGNoZXIsIFdvcmtlclJlc3BvbnNlVmFyaWFudCwgV29ya2VyUmVxdWVzdFZhcmlhbnQgfSBmcm9tICcuLi9wYXJhbGxlbC8nO1xuaW1wb3J0IHsgRHVja0RCQmluZGluZ3MgfSBmcm9tICcuLi9iaW5kaW5ncyc7XG5pbXBvcnQgeyBEdWNrREIgfSBmcm9tICcuLi9iaW5kaW5ncy9iaW5kaW5nc19ub2RlX2VoJztcbmltcG9ydCB7IE5PREVfUlVOVElNRSB9IGZyb20gJy4uL2JpbmRpbmdzL3J1bnRpbWVfbm9kZSc7XG5pbXBvcnQgeyBJbnN0YW50aWF0aW9uUHJvZ3Jlc3MgfSBmcm9tICcuLi9iaW5kaW5ncy9wcm9ncmVzcyc7XG5cbi8qKiBUaGUgZHVja2RiIHdvcmtlciBBUEkgZm9yIG5vZGUuanMgd29ya2VycyAqL1xuY2xhc3MgTm9kZVdvcmtlciBleHRlbmRzIEFzeW5jRHVja0RCRGlzcGF0Y2hlciB7XG4gICAgLyoqIFBvc3QgYSByZXNwb25zZSBiYWNrIHRvIHRoZSBtYWluIHRocmVhZCAqL1xuICAgIHByb3RlY3RlZCBwb3N0TWVzc2FnZShyZXNwb25zZTogV29ya2VyUmVzcG9uc2VWYXJpYW50LCB0cmFuc2ZlcjogQXJyYXlCdWZmZXJbXSkge1xuICAgICAgICBnbG9iYWxUaGlzLnBvc3RNZXNzYWdlKHJlc3BvbnNlLCB0cmFuc2Zlcik7XG4gICAgfVxuXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSB3YXNtIG1vZHVsZSAqL1xuICAgIHByb3RlY3RlZCBhc3luYyBpbnN0YW50aWF0ZShcbiAgICAgICAgbWFpbk1vZHVsZVBhdGg6IHN0cmluZyxcbiAgICAgICAgcHRocmVhZFdvcmtlclBhdGg6IHN0cmluZyB8IG51bGwsXG4gICAgICAgIHByb2dyZXNzOiAocDogSW5zdGFudGlhdGlvblByb2dyZXNzKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8RHVja0RCQmluZGluZ3M+IHtcbiAgICAgICAgY29uc3QgYmluZGluZ3MgPSBuZXcgRHVja0RCKHRoaXMsIE5PREVfUlVOVElNRSwgbWFpbk1vZHVsZVBhdGgsIHB0aHJlYWRXb3JrZXJQYXRoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGJpbmRpbmdzLmluc3RhbnRpYXRlKHByb2dyZXNzKTtcbiAgICB9XG59XG5cbi8qKiBSZWdpc3RlciB0aGUgd29ya2VyICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJXb3JrZXIoKTogdm9pZCB7XG4gICAgY29uc3QgYXBpID0gbmV3IE5vZGVXb3JrZXIoKTtcbiAgICBnbG9iYWxUaGlzLm9ubWVzc2FnZSA9IGFzeW5jIChldmVudDogTWVzc2FnZUV2ZW50PFdvcmtlclJlcXVlc3RWYXJpYW50PikgPT4ge1xuICAgICAgICBhd2FpdCBhcGkub25NZXNzYWdlKGV2ZW50LmRhdGEpO1xuICAgIH07XG59XG5cbnJlZ2lzdGVyV29ya2VyKCk7XG4iLCAiaW1wb3J0ICogYXMgYXJyb3cgZnJvbSAnYXBhY2hlLWFycm93JztcblxuZXhwb3J0IGludGVyZmFjZSBTUUxUeXBlIHtcbiAgICAvLy8gVGhlIHNxbCB0eXBlXG4gICAgc3FsVHlwZTogc3RyaW5nO1xuICAgIC8vLyBJcyBudWxsYWJsZT9cbiAgICBudWxsYWJsZT86IGJvb2xlYW47XG4gICAgLy8vIERlY2ltYWwgcHJlY2lzaW9uXG4gICAgcHJlY2lzaW9uPzogbnVtYmVyO1xuICAgIC8vLyBEZWNpbWFsIHNjYWxpbmdcbiAgICBzY2FsZT86IG51bWJlcjtcbiAgICAvLy8gVGltZXpvbmVcbiAgICB0aW1lem9uZT86IHN0cmluZztcbiAgICAvLy8gQnl0ZSB3aWR0aCAoRml4ZWRTaXplQmluYXJ5KVxuICAgIGJ5dGVXaWR0aD86IG51bWJlcjtcbiAgICAvLy8gS2V5IHR5cGVcbiAgICBrZXlUeXBlPzogU1FMVHlwZTtcbiAgICAvLy8gVmFsdWUgdHlwZVxuICAgIHZhbHVlVHlwZT86IFNRTFR5cGU7XG4gICAgLy8vIEZpZWxkc1xuICAgIGZpZWxkcz86IFNRTEZpZWxkW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJvd1RvU1FMVHlwZSh0eXBlOiBhcnJvdy5EYXRhVHlwZSk6IFNRTFR5cGUge1xuICAgIHN3aXRjaCAodHlwZS50eXBlSWQpIHtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkJpbmFyeTpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdiaW5hcnknIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5Cb29sOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2Jvb2wnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5EYXRlOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2RhdGUnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5EYXRlRGF5OlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2RhdGUzMltkXScgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkRhdGVNaWxsaXNlY29uZDpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdkYXRlNjRbbXNdJyB9O1xuICAgICAgICBjYXNlIGFycm93LlR5cGUuRGVjaW1hbDoge1xuICAgICAgICAgICAgY29uc3QgZGVjID0gdHlwZSBhcyBhcnJvdy5EZWNpbWFsO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2RlY2ltYWwnLCBwcmVjaXNpb246IGRlYy5wcmVjaXNpb24sIHNjYWxlOiBkZWMuc2NhbGUgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGFycm93LlR5cGUuRmxvYXQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnZmxvYXQnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5GbG9hdDE2OlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2Zsb2F0MTYnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5GbG9hdDMyOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2Zsb2F0MzInIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5GbG9hdDY0OlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2Zsb2F0NjQnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5JbnQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50MzInIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5JbnQxNjpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdpbnQxNicgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludDMyOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2ludDMyJyB9O1xuICAgICAgICBjYXNlIGFycm93LlR5cGUuSW50NjQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50NjQnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5VaW50MTY6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndWludDE2JyB9O1xuICAgICAgICBjYXNlIGFycm93LlR5cGUuVWludDMyOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ3VpbnQzMicgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlVpbnQ2NDpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd1aW50NjQnIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5VaW50ODpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd1aW50OCcgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludGVydmFsRGF5VGltZTpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdpbnRlcnZhbFtkdF0nIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5JbnRlcnZhbFllYXJNb250aDpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdpbnRlcnZhbFttXScgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkxpc3Q6IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSB0eXBlIGFzIGFycm93Lkxpc3Q7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNxbFR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IGFycm93VG9TUUxUeXBlKGxpc3QudmFsdWVUeXBlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkZpeGVkU2l6ZUJpbmFyeToge1xuICAgICAgICAgICAgY29uc3QgYmluID0gdHlwZSBhcyBhcnJvdy5GaXhlZFNpemVCaW5hcnk7XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnZml4ZWRzaXplYmluYXJ5JywgYnl0ZVdpZHRoOiBiaW4uYnl0ZVdpZHRoIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLk51bGw6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnbnVsbCcgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlV0Zjg6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndXRmOCcgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlN0cnVjdDoge1xuICAgICAgICAgICAgY29uc3Qgc3RydWN0XyA9IHR5cGUgYXMgYXJyb3cuU3RydWN0O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzcWxUeXBlOiAnc3RydWN0JyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHN0cnVjdF8uY2hpbGRyZW4ubWFwKGMgPT4gYXJyb3dUb1NRTEZpZWxkKGMubmFtZSwgYy50eXBlKSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5NYXA6IHtcbiAgICAgICAgICAgIGNvbnN0IG1hcF8gPSB0eXBlIGFzIGFycm93Lk1hcF87XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNxbFR5cGU6ICdtYXAnLFxuICAgICAgICAgICAgICAgIGtleVR5cGU6IGFycm93VG9TUUxUeXBlKG1hcF8ua2V5VHlwZSksXG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlOiBhcnJvd1RvU1FMVHlwZShtYXBfLnZhbHVlVHlwZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lOlxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ3RpbWVbc10nIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lTWljcm9zZWNvbmQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZVt1c10nIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lTWlsbGlzZWNvbmQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZVttc10nIH07XG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lTmFub3NlY29uZDpcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lW25zXScgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVTZWNvbmQ6XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZVtzXScgfTtcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVzdGFtcDoge1xuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcDtcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lc3RhbXAnLCB0aW1lem9uZTogdHMudGltZXpvbmUgfHwgdW5kZWZpbmVkIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVzdGFtcFNlY29uZDoge1xuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcFNlY29uZDtcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lc3RhbXBbc10nLCB0aW1lem9uZTogdHMudGltZXpvbmUgfHwgdW5kZWZpbmVkIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVzdGFtcE1pY3Jvc2Vjb25kOiB7XG4gICAgICAgICAgICBjb25zdCB0cyA9IHR5cGUgYXMgYXJyb3cuVGltZXN0YW1wTWljcm9zZWNvbmQ7XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZXN0YW1wW3VzXScsIHRpbWV6b25lOiB0cy50aW1lem9uZSB8fCB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVGltZXN0YW1wTmFub3NlY29uZDoge1xuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcE5hbm9zZWNvbmQ7XG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZXN0YW1wW25zXScsIHRpbWV6b25lOiB0cy50aW1lem9uZSB8fCB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVGltZXN0YW1wTWlsbGlzZWNvbmQ6IHtcbiAgICAgICAgICAgIGNvbnN0IHRzID0gdHlwZSBhcyBhcnJvdy5UaW1lc3RhbXBNaWxsaXNlY29uZDtcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lc3RhbXBbbXNdJywgdGltZXpvbmU6IHRzLnRpbWV6b25lIHx8IHVuZGVmaW5lZCB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgYXJyb3cgdHlwZTogJHt0eXBlLnRvU3RyaW5nKCl9YCk7XG59XG5cbmV4cG9ydCB0eXBlIFNRTEZpZWxkID0gU1FMVHlwZSAmIHsgbmFtZTogc3RyaW5nIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJvd1RvU1FMRmllbGQobmFtZTogc3RyaW5nLCB0eXBlOiBhcnJvdy5EYXRhVHlwZSk6IFNRTEZpZWxkIHtcbiAgICBjb25zdCB0ID0gYXJyb3dUb1NRTFR5cGUodHlwZSkgYXMgU1FMRmllbGQ7XG4gICAgdC5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gdDtcbn1cbiIsICJpbXBvcnQgeyBEdWNrREJCaW5kaW5ncyB9IGZyb20gJy4uL2JpbmRpbmdzJztcbmltcG9ydCB7IFdvcmtlclJlc3BvbnNlVmFyaWFudCwgV29ya2VyUmVxdWVzdFZhcmlhbnQsIFdvcmtlclJlcXVlc3RUeXBlLCBXb3JrZXJSZXNwb25zZVR5cGUgfSBmcm9tICcuL3dvcmtlcl9yZXF1ZXN0JztcbmltcG9ydCB7IExvZ2dlciwgTG9nRW50cnlWYXJpYW50IH0gZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7IEluc3RhbnRpYXRpb25Qcm9ncmVzcyB9IGZyb20gJy4uL2JpbmRpbmdzL3Byb2dyZXNzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFzeW5jRHVja0RCRGlzcGF0Y2hlciBpbXBsZW1lbnRzIExvZ2dlciB7XG4gICAgLyoqIFRoZSBiaW5kaW5ncyAqL1xuICAgIHByb3RlY3RlZCBfYmluZGluZ3M6IER1Y2tEQkJpbmRpbmdzIHwgbnVsbCA9IG51bGw7XG4gICAgLyoqIFRoZSBuZXh0IG1lc3NhZ2UgaWQgKi9cbiAgICBwcm90ZWN0ZWQgX25leHRNZXNzYWdlSWQgPSAwO1xuXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSB3YXNtIG1vZHVsZSAqL1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBpbnN0YW50aWF0ZShcbiAgICAgICAgbWFpbk1vZHVsZTogc3RyaW5nLFxuICAgICAgICBwdGhyZWFkV29ya2VyOiBzdHJpbmcgfCBudWxsLFxuICAgICAgICBwcm9ncmVzczogKHA6IEluc3RhbnRpYXRpb25Qcm9ncmVzcykgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPER1Y2tEQkJpbmRpbmdzPjtcbiAgICAvKiogUG9zdCBhIHJlc3BvbnNlIHRvIHRoZSBtYWluIHRocmVhZCAqL1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBwb3N0TWVzc2FnZShyZXNwb25zZTogV29ya2VyUmVzcG9uc2VWYXJpYW50LCB0cmFuc2ZlcjogQXJyYXlCdWZmZXJbXSk6IHZvaWQ7XG5cbiAgICAvKiogU2VuZCBsb2cgZW50cnkgdG8gdGhlIG1haW4gdGhyZWFkICovXG4gICAgcHVibGljIGxvZyhlbnRyeTogTG9nRW50cnlWYXJpYW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiAwLFxuICAgICAgICAgICAgICAgIHR5cGU6IFdvcmtlclJlc3BvbnNlVHlwZS5MT0csXG4gICAgICAgICAgICAgICAgZGF0YTogZW50cnksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW10sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqIFNlbmQgcGxhaW4gT0sgd2l0aG91dCBmdXJ0aGVyIGRhdGEgKi9cbiAgICBwcm90ZWN0ZWQgc2VuZE9LKHJlcXVlc3Q6IFdvcmtlclJlcXVlc3RWYXJpYW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuT0ssXG4gICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKiogRmFpbCB3aXRoIGFuIGVycm9yICovXG4gICAgcHJvdGVjdGVkIGZhaWxXaXRoKHJlcXVlc3Q6IFdvcmtlclJlcXVlc3RWYXJpYW50LCBlOiBFcnJvcik6IHZvaWQge1xuICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBGaXJlZm94IG5vdCBiZWluZyBhYmxlIHRvIHBlcmZvcm0gc3RydWN0dXJlZC1jbG9uZSBvbiBOYXRpdmUgRXJyb3JzXG4gICAgICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTY2MDRcbiAgICAgICAgY29uc3Qgb2JqOiBhbnkgPSB7XG4gICAgICAgICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICAgICAgICBzdGFjazogZS5zdGFjayB8fCB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuRVJST1IsXG4gICAgICAgICAgICAgICAgZGF0YTogb2JqLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtdLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqIFByb2Nlc3MgYSByZXF1ZXN0IGZyb20gdGhlIG1haW4gdGhyZWFkICovXG4gICAgcHVibGljIGFzeW5jIG9uTWVzc2FnZShyZXF1ZXN0OiBXb3JrZXJSZXF1ZXN0VmFyaWFudCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBGaXJzdCBwcm9jZXNzIHRob3NlIHJlcXVlc3RzIHRoYXQgZG9uJ3QgbmVlZCBiaW5kaW5nc1xuICAgICAgICBzd2l0Y2ggKHJlcXVlc3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5QSU5HOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuSU5TVEFOVElBVEU6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRpbmdzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsV2l0aChyZXF1ZXN0LCBuZXcgRXJyb3IoJ2R1Y2tkYiBhbHJlYWR5IGluaXRpYWxpemVkJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kaW5ncyA9IGF3YWl0IHRoaXMuaW5zdGFudGlhdGUocmVxdWVzdC5kYXRhWzBdLCByZXF1ZXN0LmRhdGFbMV0sIHAgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fbmV4dE1lc3NhZ2VJZCsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuSU5TVEFOVElBVEVfUFJPR1JFU1MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRPSyhyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWxXaXRoKHJlcXVlc3QsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmluZGluZ3Mgbm90IGluaXRpYWxpemVkP1xuICAgICAgICBpZiAoIXRoaXMuX2JpbmRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsV2l0aChyZXF1ZXN0LCBuZXcgRXJyb3IoJ2R1Y2tkYiBpcyBub3QgaW5pdGlhbGl6ZWQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBldmVyeSBleGNlcHRpb24gYW5kIGZvcndhcmQgaXQgYXMgZXJyb3IgbWVzc2FnZSB0byB0aGUgbWFpbiB0aHJlYWRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN3aXRjaCAocmVxdWVzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5HRVRfVkVSU0lPTjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6IHRoaXMuX25leHRNZXNzYWdlSWQrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdvcmtlclJlc3BvbnNlVHlwZS5WRVJTSU9OX1NUUklORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLl9iaW5kaW5ncy5nZXRWZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuR0VUX0ZFQVRVUkVfRkxBR1M6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuRkVBVFVSRV9GTEFHUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLl9iaW5kaW5ncy5nZXRGZWF0dXJlRmxhZ3MoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5SRVNFVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5PUEVOOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5vcGVuKHJlcXVlc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkRST1BfRklMRTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuZHJvcEZpbGUocmVxdWVzdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuRFJPUF9GSUxFUzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuZHJvcEZpbGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkZMVVNIX0ZJTEVTOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5mbHVzaEZpbGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkNPTk5FQ1Q6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ubiA9IHRoaXMuX2JpbmRpbmdzLmNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6IHRoaXMuX25leHRNZXNzYWdlSWQrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdvcmtlclJlc3BvbnNlVHlwZS5DT05ORUNUSU9OX0lORk8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY29ubi51c2VVbnNhZmUoKF8sIGMpID0+IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5kaXNjb25uZWN0KHJlcXVlc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkNSRUFURV9QUkVQQVJFRDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9iaW5kaW5ncy5jcmVhdGVQcmVwYXJlZChyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuUFJFUEFSRURfU1RBVEVNRU5UX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuQ0xPU0VfUFJFUEFSRUQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuY2xvc2VQcmVwYXJlZChyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5SVU5fUFJFUEFSRUQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYmluZGluZ3MucnVuUHJlcGFyZWQocmVxdWVzdC5kYXRhWzBdLCByZXF1ZXN0LmRhdGFbMV0sIHJlcXVlc3QuZGF0YVsyXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuUVVFUllfUkVTVUxULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbcmVzdWx0LmJ1ZmZlcl0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLlJVTl9RVUVSWToge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9iaW5kaW5ncy5ydW5RdWVyeShyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuUVVFUllfUkVTVUxULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbcmVzdWx0LmJ1ZmZlcl0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLlNFTkRfUFJFUEFSRUQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYmluZGluZ3Muc2VuZFByZXBhcmVkKHJlcXVlc3QuZGF0YVswXSwgcmVxdWVzdC5kYXRhWzFdLCByZXF1ZXN0LmRhdGFbMl0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fbmV4dE1lc3NhZ2VJZCsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdC5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV29ya2VyUmVzcG9uc2VUeXBlLlFVRVJZX1JFU1VMVF9IRUFERVIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyZXN1bHQuYnVmZmVyXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuU1RBUlRfUEVORElOR19RVUVSWToge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9iaW5kaW5ncy5zdGFydFBlbmRpbmdRdWVyeShyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyLnB1c2gocmVzdWx0LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6IHRoaXMuX25leHRNZXNzYWdlSWQrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdvcmtlclJlc3BvbnNlVHlwZS5RVUVSWV9SRVNVTFRfSEVBREVSX09SX05VTEwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5QT0xMX1BFTkRJTkdfUVVFUlk6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYmluZGluZ3MucG9sbFBlbmRpbmdRdWVyeShyZXF1ZXN0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zlci5wdXNoKHJlc3VsdC5idWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuUVVFUllfUkVTVUxUX0hFQURFUl9PUl9OVUxMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2ZlcixcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuQ0FOQ0VMX1BFTkRJTkdfUVVFUlk6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYmluZGluZ3MuY2FuY2VsUGVuZGluZ1F1ZXJ5KHJlcXVlc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuU1VDQ0VTUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkZFVENIX1FVRVJZX1JFU1VMVFM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fYmluZGluZ3MuZmV0Y2hRdWVyeVJlc3VsdHMocmVxdWVzdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6IHRoaXMuX25leHRNZXNzYWdlSWQrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdvcmtlclJlc3BvbnNlVHlwZS5RVUVSWV9SRVNVTFRfQ0hVTkssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyZXN1bHQuYnVmZmVyXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuR0VUX1RBQkxFX05BTUVTOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2JpbmRpbmdzLmdldFRhYmxlTmFtZXMocmVxdWVzdC5kYXRhWzBdLCByZXF1ZXN0LmRhdGFbMV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fbmV4dE1lc3NhZ2VJZCsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdC5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV29ya2VyUmVzcG9uc2VUeXBlLlRBQkxFX05BTUVTLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuR0xPQl9GSUxFX0lORk9TOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm9zID0gdGhpcy5fYmluZGluZ3MuZ2xvYkZpbGVzKHJlcXVlc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuRklMRV9JTkZPUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpbmZvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5SRUdJU1RFUl9GSUxFX1VSTDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MucmVnaXN0ZXJGaWxlVVJMKHJlcXVlc3QuZGF0YVswXSwgcmVxdWVzdC5kYXRhWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5SRUdJU1RFUl9GSUxFX0JVRkZFUjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MucmVnaXN0ZXJGaWxlQnVmZmVyKHJlcXVlc3QuZGF0YVswXSwgcmVxdWVzdC5kYXRhWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5SRUdJU1RFUl9GSUxFX0hBTkRMRTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MucmVnaXN0ZXJGaWxlSGFuZGxlKHJlcXVlc3QuZGF0YVswXSwgcmVxdWVzdC5kYXRhWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5DT1BZX0ZJTEVfVE9fUEFUSDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuY29weUZpbGVUb1BhdGgocmVxdWVzdC5kYXRhWzBdLCByZXF1ZXN0LmRhdGFbMV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRPSyhyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLkNPUFlfRklMRV9UT19CVUZGRVI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5fYmluZGluZ3MuY29weUZpbGVUb0J1ZmZlcihyZXF1ZXN0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fbmV4dE1lc3NhZ2VJZCsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdC5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV29ya2VyUmVzcG9uc2VUeXBlLkZJTEVfQlVGRkVSLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuQ09MTEVDVF9GSUxFX1NUQVRJU1RJQ1M6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmNvbGxlY3RGaWxlU3RhdGlzdGljcyhyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE9LKHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuRVhQT1JUX0ZJTEVfU1RBVElTVElDUzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogdGhpcy5fbmV4dE1lc3NhZ2VJZCsrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdC5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogV29ya2VyUmVzcG9uc2VUeXBlLkZJTEVfU1RBVElTVElDUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLl9iaW5kaW5ncy5leHBvcnRGaWxlU3RhdGlzdGljcyhyZXF1ZXN0LmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtdLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBXb3JrZXJSZXF1ZXN0VHlwZS5JTlNFUlRfQVJST1dfRlJPTV9JUENfU1RSRUFNOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmluc2VydEFycm93RnJvbUlQQ1N0cmVhbShyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSwgcmVxdWVzdC5kYXRhWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLklOU0VSVF9DU1ZfRlJPTV9QQVRIOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmluc2VydENTVkZyb21QYXRoKHJlcXVlc3QuZGF0YVswXSwgcmVxdWVzdC5kYXRhWzFdLCByZXF1ZXN0LmRhdGFbMl0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRPSyhyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgV29ya2VyUmVxdWVzdFR5cGUuSU5TRVJUX0pTT05fRlJPTV9QQVRIOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmluc2VydEpTT05Gcm9tUGF0aChyZXF1ZXN0LmRhdGFbMF0sIHJlcXVlc3QuZGF0YVsxXSwgcmVxdWVzdC5kYXRhWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kT0socmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFdvcmtlclJlcXVlc3RUeXBlLlRPS0VOSVpFOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2JpbmRpbmdzLnRva2VuaXplKHJlcXVlc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiB0aGlzLl9uZXh0TWVzc2FnZUlkKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBXb3JrZXJSZXNwb25zZVR5cGUuU0NSSVBUX1RPS0VOUyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsV2l0aChyZXF1ZXN0LCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJcbnZhciBEdWNrREIgPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IGltcG9ydC5tZXRhLnVybDtcbiAgXG4gIHJldHVybiAoXG5mdW5jdGlvbihEdWNrREIpIHtcbiAgRHVja0RCID0gRHVja0RCIHx8IHt9O1xuXG52YXIgTW9kdWxlID0gdHlwZW9mIER1Y2tEQiAhPSBcInVuZGVmaW5lZFwiID8gRHVja0RCIDoge307XG5cbnZhciByZWFkeVByb21pc2VSZXNvbHZlLCByZWFkeVByb21pc2VSZWplY3Q7XG5cbk1vZHVsZVtcInJlYWR5XCJdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gcmVhZHlQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gcmVhZHlQcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xufSk7XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfbWFpblwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfbWFpblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9tYWluIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9tYWluXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX21haW4gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9tYWxsb2NcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX21hbGxvY1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9tYWxsb2Mgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX21hbGxvY1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9tYWxsb2Mgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9mcmVlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9mcmVlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2ZyZWUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2ZyZWVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZnJlZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2VcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2VcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHNcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29ubmVjdFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb25uZWN0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfY29ubmVjdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb25uZWN0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfY29ubmVjdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3RcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9kaXNjb25uZWN0IG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3RcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9kaXNjb25uZWN0IG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0c1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0c1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHMgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZhaWxfd2l0aFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mYWlsX3dpdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mYWlsX3dpdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZmFpbF93aXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZmFpbF93aXRoIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mbHVzaF9maWxlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mbHVzaF9maWxlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXMgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWVcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3NcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3Mgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXJcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlciBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmxcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmxcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3NldF9maWxlX2Rlc2NyaXB0b3JcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3NldF9maWxlX2Rlc2NyaXB0b3JcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3Mgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm8gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mbyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfdmVyc2lvblwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfdmVyc2lvblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF92ZXJzaW9uXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb24gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW0gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW0gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX29wZW5cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfb3BlblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX29wZW4gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfb3BlblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX29wZW4gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWwgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWxcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGxcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGwgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnRcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2Ugb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2VcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9jbG9zZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1blwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW5cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW4gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9xdWVyeV9ydW5cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcXVlcnlfcnVuIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1blwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX3F1ZXJ5X3J1biBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcmVzZXRcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcmVzZXRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9yZXNldCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9yZXNldFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX3Jlc2V0IG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl90b2tlbml6ZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl90b2tlbml6ZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3Rva2VuaXplIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3Rva2VuaXplXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfdG9rZW5pemUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX19fc3RkaW9fZXhpdFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfX19zdGRpb19leGl0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX19fc3RkaW9fZXhpdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfX19zdGRpb19leGl0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX19fc3RkaW9fZXhpdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwib25SdW50aW1lSW5pdGlhbGl6ZWRcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwib25SdW50aW1lSW5pdGlhbGl6ZWRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBvblJ1bnRpbWVJbml0aWFsaXplZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIG9uUnVudGltZUluaXRpYWxpemVkIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbnZhciBtb2R1bGVPdmVycmlkZXMgPSBPYmplY3QuYXNzaWduKHt9LCBNb2R1bGUpO1xuXG52YXIgYXJndW1lbnRzXyA9IFtdO1xuXG52YXIgdGhpc1Byb2dyYW0gPSBcIi4vdGhpcy5wcm9ncmFtXCI7XG5cbnZhciBxdWl0XyA9IChzdGF0dXMsIHRvVGhyb3cpID0+IHtcbiB0aHJvdyB0b1Rocm93O1xufTtcblxudmFyIEVOVklST05NRU5UX0lTX1dFQiA9IHR5cGVvZiB3aW5kb3cgPT0gXCJvYmplY3RcIjtcblxudmFyIEVOVklST05NRU5UX0lTX1dPUktFUiA9IHR5cGVvZiBpbXBvcnRTY3JpcHRzID09IFwiZnVuY3Rpb25cIjtcblxudmFyIEVOVklST05NRU5UX0lTX05PREUgPSB0eXBlb2YgcHJvY2VzcyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSA9PSBcInN0cmluZ1wiO1xuXG52YXIgRU5WSVJPTk1FTlRfSVNfU0hFTEwgPSAhRU5WSVJPTk1FTlRfSVNfV0VCICYmICFFTlZJUk9OTUVOVF9JU19OT0RFICYmICFFTlZJUk9OTUVOVF9JU19XT1JLRVI7XG5cbmlmIChNb2R1bGVbXCJFTlZJUk9OTUVOVFwiXSkge1xuIHRocm93IG5ldyBFcnJvcihcIk1vZHVsZS5FTlZJUk9OTUVOVCBoYXMgYmVlbiBkZXByZWNhdGVkLiBUbyBmb3JjZSB0aGUgZW52aXJvbm1lbnQsIHVzZSB0aGUgRU5WSVJPTk1FTlQgY29tcGlsZS10aW1lIG9wdGlvbiAoZm9yIGV4YW1wbGUsIC1zRU5WSVJPTk1FTlQ9d2ViIG9yIC1zRU5WSVJPTk1FTlQ9bm9kZSlcIik7XG59XG5cbnZhciBzY3JpcHREaXJlY3RvcnkgPSBcIlwiO1xuXG5mdW5jdGlvbiBsb2NhdGVGaWxlKHBhdGgpIHtcbiBpZiAoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSkge1xuICByZXR1cm4gTW9kdWxlW1wibG9jYXRlRmlsZVwiXShwYXRoLCBzY3JpcHREaXJlY3RvcnkpO1xuIH1cbiByZXR1cm4gc2NyaXB0RGlyZWN0b3J5ICsgcGF0aDtcbn1cblxudmFyIHJlYWRfLCByZWFkQXN5bmMsIHJlYWRCaW5hcnksIHNldFdpbmRvd1RpdGxlO1xuXG5mdW5jdGlvbiBsb2dFeGNlcHRpb25PbkV4aXQoZSkge1xuIGlmIChlIGluc3RhbmNlb2YgRXhpdFN0YXR1cykgcmV0dXJuO1xuIGxldCB0b0xvZyA9IGU7XG4gaWYgKGUgJiYgdHlwZW9mIGUgPT0gXCJvYmplY3RcIiAmJiBlLnN0YWNrKSB7XG4gIHRvTG9nID0gWyBlLCBlLnN0YWNrIF07XG4gfVxuIGVycihcImV4aXRpbmcgZHVlIHRvIGV4Y2VwdGlvbjogXCIgKyB0b0xvZyk7XG59XG5cbnZhciBmcztcblxudmFyIG5vZGVQYXRoO1xuXG52YXIgcmVxdWlyZU5vZGVGUztcblxuaWYgKEVOVklST05NRU5UX0lTX05PREUpIHtcbiBpZiAoISh0eXBlb2YgcHJvY2VzcyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZXF1aXJlID09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBFcnJvcihcIm5vdCBjb21waWxlZCBmb3IgdGhpcyBlbnZpcm9ubWVudCAoZGlkIHlvdSBidWlsZCB0byBIVE1MIGFuZCB0cnkgdG8gcnVuIGl0IG5vdCBvbiB0aGUgd2ViLCBvciBzZXQgRU5WSVJPTk1FTlQgdG8gc29tZXRoaW5nIC0gbGlrZSBub2RlIC0gYW5kIHJ1biBpdCBzb21lcGxhY2UgZWxzZSAtIGxpa2Ugb24gdGhlIHdlYj8pXCIpO1xuIGlmIChFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHtcbiAgc2NyaXB0RGlyZWN0b3J5ID0gcmVxdWlyZShcInBhdGhcIikuZGlybmFtZShzY3JpcHREaXJlY3RvcnkpICsgXCIvXCI7XG4gfSBlbHNlIHtcbiAgc2NyaXB0RGlyZWN0b3J5ID0gX19kaXJuYW1lICsgXCIvXCI7XG4gfVxuIHJlcXVpcmVOb2RlRlMgPSAoKCkgPT4ge1xuICBpZiAoIW5vZGVQYXRoKSB7XG4gICBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbiAgIG5vZGVQYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG4gIH1cbiB9KTtcbiByZWFkXyA9IGZ1bmN0aW9uIHNoZWxsX3JlYWQoZmlsZW5hbWUsIGJpbmFyeSkge1xuICByZXF1aXJlTm9kZUZTKCk7XG4gIGZpbGVuYW1lID0gbm9kZVBhdGhbXCJub3JtYWxpemVcIl0oZmlsZW5hbWUpO1xuICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCBiaW5hcnkgPyB1bmRlZmluZWQgOiBcInV0ZjhcIik7XG4gfTtcbiByZWFkQmluYXJ5ID0gKGZpbGVuYW1lID0+IHtcbiAgdmFyIHJldCA9IHJlYWRfKGZpbGVuYW1lLCB0cnVlKTtcbiAgaWYgKCFyZXQuYnVmZmVyKSB7XG4gICByZXQgPSBuZXcgVWludDhBcnJheShyZXQpO1xuICB9XG4gIGFzc2VydChyZXQuYnVmZmVyKTtcbiAgcmV0dXJuIHJldDtcbiB9KTtcbiByZWFkQXN5bmMgPSAoKGZpbGVuYW1lLCBvbmxvYWQsIG9uZXJyb3IpID0+IHtcbiAgcmVxdWlyZU5vZGVGUygpO1xuICBmaWxlbmFtZSA9IG5vZGVQYXRoW1wibm9ybWFsaXplXCJdKGZpbGVuYW1lKTtcbiAgZnMucmVhZEZpbGUoZmlsZW5hbWUsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgaWYgKGVycikgb25lcnJvcihlcnIpOyBlbHNlIG9ubG9hZChkYXRhLmJ1ZmZlcik7XG4gIH0pO1xuIH0pO1xuIGlmIChwcm9jZXNzW1wiYXJndlwiXS5sZW5ndGggPiAxKSB7XG4gIHRoaXNQcm9ncmFtID0gcHJvY2Vzc1tcImFyZ3ZcIl1bMV0ucmVwbGFjZSgvXFxcXC9nLCBcIi9cIik7XG4gfVxuIGFyZ3VtZW50c18gPSBwcm9jZXNzW1wiYXJndlwiXS5zbGljZSgyKTtcbiBwcm9jZXNzW1wib25cIl0oXCJ1bmNhdWdodEV4Y2VwdGlvblwiLCBmdW5jdGlvbihleCkge1xuICBpZiAoIShleCBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpKSB7XG4gICB0aHJvdyBleDtcbiAgfVxuIH0pO1xuIHByb2Nlc3NbXCJvblwiXShcInVuaGFuZGxlZFJlamVjdGlvblwiLCBmdW5jdGlvbihyZWFzb24pIHtcbiAgdGhyb3cgcmVhc29uO1xuIH0pO1xuIHF1aXRfID0gKChzdGF0dXMsIHRvVGhyb3cpID0+IHtcbiAgaWYgKGtlZXBSdW50aW1lQWxpdmUoKSkge1xuICAgcHJvY2Vzc1tcImV4aXRDb2RlXCJdID0gc3RhdHVzO1xuICAgdGhyb3cgdG9UaHJvdztcbiAgfVxuICBsb2dFeGNlcHRpb25PbkV4aXQodG9UaHJvdyk7XG4gIHByb2Nlc3NbXCJleGl0XCJdKHN0YXR1cyk7XG4gfSk7XG4gTW9kdWxlW1wiaW5zcGVjdFwiXSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwiO1xuIH07XG59IGVsc2UgaWYgKEVOVklST05NRU5UX0lTX1NIRUxMKSB7XG4gaWYgKHR5cGVvZiBwcm9jZXNzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2Ygd2luZG93ID09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGltcG9ydFNjcmlwdHMgPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJub3QgY29tcGlsZWQgZm9yIHRoaXMgZW52aXJvbm1lbnQgKGRpZCB5b3UgYnVpbGQgdG8gSFRNTCBhbmQgdHJ5IHRvIHJ1biBpdCBub3Qgb24gdGhlIHdlYiwgb3Igc2V0IEVOVklST05NRU5UIHRvIHNvbWV0aGluZyAtIGxpa2Ugbm9kZSAtIGFuZCBydW4gaXQgc29tZXBsYWNlIGVsc2UgLSBsaWtlIG9uIHRoZSB3ZWI/KVwiKTtcbiBpZiAodHlwZW9mIHJlYWQgIT0gXCJ1bmRlZmluZWRcIikge1xuICByZWFkXyA9IGZ1bmN0aW9uIHNoZWxsX3JlYWQoZikge1xuICAgcmV0dXJuIHJlYWQoZik7XG4gIH07XG4gfVxuIHJlYWRCaW5hcnkgPSBmdW5jdGlvbiByZWFkQmluYXJ5KGYpIHtcbiAgbGV0IGRhdGE7XG4gIGlmICh0eXBlb2YgcmVhZGJ1ZmZlciA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIHJldHVybiBuZXcgVWludDhBcnJheShyZWFkYnVmZmVyKGYpKTtcbiAgfVxuICBkYXRhID0gcmVhZChmLCBcImJpbmFyeVwiKTtcbiAgYXNzZXJ0KHR5cGVvZiBkYXRhID09IFwib2JqZWN0XCIpO1xuICByZXR1cm4gZGF0YTtcbiB9O1xuIHJlYWRBc3luYyA9IGZ1bmN0aW9uIHJlYWRBc3luYyhmLCBvbmxvYWQsIG9uZXJyb3IpIHtcbiAgc2V0VGltZW91dCgoKSA9PiBvbmxvYWQocmVhZEJpbmFyeShmKSksIDApO1xuIH07XG4gaWYgKHR5cGVvZiBzY3JpcHRBcmdzICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgYXJndW1lbnRzXyA9IHNjcmlwdEFyZ3M7XG4gfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgYXJndW1lbnRzXyA9IGFyZ3VtZW50cztcbiB9XG4gaWYgKHR5cGVvZiBxdWl0ID09IFwiZnVuY3Rpb25cIikge1xuICBxdWl0XyA9ICgoc3RhdHVzLCB0b1Rocm93KSA9PiB7XG4gICBsb2dFeGNlcHRpb25PbkV4aXQodG9UaHJvdyk7XG4gICBxdWl0KHN0YXR1cyk7XG4gIH0pO1xuIH1cbiBpZiAodHlwZW9mIHByaW50ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlID09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUgPSB7fTtcbiAgY29uc29sZS5sb2cgPSBwcmludDtcbiAgY29uc29sZS53YXJuID0gY29uc29sZS5lcnJvciA9IHR5cGVvZiBwcmludEVyciAhPSBcInVuZGVmaW5lZFwiID8gcHJpbnRFcnIgOiBwcmludDtcbiB9XG59IGVsc2UgaWYgKEVOVklST05NRU5UX0lTX1dFQiB8fCBFTlZJUk9OTUVOVF9JU19XT1JLRVIpIHtcbiBpZiAoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IHNlbGYubG9jYXRpb24uaHJlZjtcbiB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudCAhPSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgc2NyaXB0RGlyZWN0b3J5ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gfVxuIGlmIChfc2NyaXB0RGlyKSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IF9zY3JpcHREaXI7XG4gfVxuIGlmIChzY3JpcHREaXJlY3RvcnkuaW5kZXhPZihcImJsb2I6XCIpICE9PSAwKSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IHNjcmlwdERpcmVjdG9yeS5zdWJzdHIoMCwgc2NyaXB0RGlyZWN0b3J5LnJlcGxhY2UoL1s/I10uKi8sIFwiXCIpLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuIH0gZWxzZSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IFwiXCI7XG4gfVxuIGlmICghKHR5cGVvZiB3aW5kb3cgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgaW1wb3J0U2NyaXB0cyA9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgRXJyb3IoXCJub3QgY29tcGlsZWQgZm9yIHRoaXMgZW52aXJvbm1lbnQgKGRpZCB5b3UgYnVpbGQgdG8gSFRNTCBhbmQgdHJ5IHRvIHJ1biBpdCBub3Qgb24gdGhlIHdlYiwgb3Igc2V0IEVOVklST05NRU5UIHRvIHNvbWV0aGluZyAtIGxpa2Ugbm9kZSAtIGFuZCBydW4gaXQgc29tZXBsYWNlIGVsc2UgLSBsaWtlIG9uIHRoZSB3ZWI/KVwiKTtcbiB7XG4gIHJlYWRfID0gKHVybCA9PiB7XG4gICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIGZhbHNlKTtcbiAgIHhoci5zZW5kKG51bGwpO1xuICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG4gIH0pO1xuICBpZiAoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7XG4gICByZWFkQmluYXJ5ID0gKHVybCA9PiB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCwgZmFsc2UpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgeGhyLnNlbmQobnVsbCk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSk7XG4gICB9KTtcbiAgfVxuICByZWFkQXN5bmMgPSAoKHVybCwgb25sb2FkLCBvbmVycm9yKSA9PiB7XG4gICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgIHhoci5vbmxvYWQgPSAoKCkgPT4ge1xuICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCB8fCB4aHIuc3RhdHVzID09IDAgJiYgeGhyLnJlc3BvbnNlKSB7XG4gICAgIG9ubG9hZCh4aHIucmVzcG9uc2UpO1xuICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uZXJyb3IoKTtcbiAgIH0pO1xuICAgeGhyLm9uZXJyb3IgPSBvbmVycm9yO1xuICAgeGhyLnNlbmQobnVsbCk7XG4gIH0pO1xuIH1cbiBzZXRXaW5kb3dUaXRsZSA9ICh0aXRsZSA9PiBkb2N1bWVudC50aXRsZSA9IHRpdGxlKTtcbn0gZWxzZSB7XG4gdGhyb3cgbmV3IEVycm9yKFwiZW52aXJvbm1lbnQgZGV0ZWN0aW9uIGVycm9yXCIpO1xufVxuXG52YXIgb3V0ID0gTW9kdWxlW1wicHJpbnRcIl0gfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcblxudmFyIGVyciA9IE1vZHVsZVtcInByaW50RXJyXCJdIHx8IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO1xuXG5PYmplY3QuYXNzaWduKE1vZHVsZSwgbW9kdWxlT3ZlcnJpZGVzKTtcblxubW9kdWxlT3ZlcnJpZGVzID0gbnVsbDtcblxuY2hlY2tJbmNvbWluZ01vZHVsZUFQSSgpO1xuXG5pZiAoTW9kdWxlW1wiYXJndW1lbnRzXCJdKSBhcmd1bWVudHNfID0gTW9kdWxlW1wiYXJndW1lbnRzXCJdO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwiYXJndW1lbnRzXCIsIFwiYXJndW1lbnRzX1wiKTtcblxuaWYgKE1vZHVsZVtcInRoaXNQcm9ncmFtXCJdKSB0aGlzUHJvZ3JhbSA9IE1vZHVsZVtcInRoaXNQcm9ncmFtXCJdO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwidGhpc1Byb2dyYW1cIiwgXCJ0aGlzUHJvZ3JhbVwiKTtcblxuaWYgKE1vZHVsZVtcInF1aXRcIl0pIHF1aXRfID0gTW9kdWxlW1wicXVpdFwiXTtcblxubGVnYWN5TW9kdWxlUHJvcChcInF1aXRcIiwgXCJxdWl0X1wiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJtZW1vcnlJbml0aWFsaXplclByZWZpeFVSTFwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5tZW1vcnlJbml0aWFsaXplclByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcInB0aHJlYWRNYWluUHJlZml4VVJMXCJdID09IFwidW5kZWZpbmVkXCIsIFwiTW9kdWxlLnB0aHJlYWRNYWluUHJlZml4VVJMIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIE1vZHVsZS5sb2NhdGVGaWxlIGluc3RlYWRcIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wiY2RJbml0aWFsaXplclByZWZpeFVSTFwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5jZEluaXRpYWxpemVyUHJlZml4VVJMIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIE1vZHVsZS5sb2NhdGVGaWxlIGluc3RlYWRcIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wiZmlsZVBhY2thZ2VQcmVmaXhVUkxcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUuZmlsZVBhY2thZ2VQcmVmaXhVUkwgb3B0aW9uIHdhcyByZW1vdmVkLCB1c2UgTW9kdWxlLmxvY2F0ZUZpbGUgaW5zdGVhZFwiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJyZWFkXCJdID09IFwidW5kZWZpbmVkXCIsIFwiTW9kdWxlLnJlYWQgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgcmVhZF8gaW4gSlMpXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcInJlYWRBc3luY1wiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5yZWFkQXN5bmMgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgcmVhZEFzeW5jIGluIEpTKVwiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJyZWFkQmluYXJ5XCJdID09IFwidW5kZWZpbmVkXCIsIFwiTW9kdWxlLnJlYWRCaW5hcnkgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgcmVhZEJpbmFyeSBpbiBKUylcIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wic2V0V2luZG93VGl0bGVcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUuc2V0V2luZG93VGl0bGUgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgc2V0V2luZG93VGl0bGUgaW4gSlMpXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcIlRPVEFMX01FTU9SWVwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5UT1RBTF9NRU1PUlkgaGFzIGJlZW4gcmVuYW1lZCBNb2R1bGUuSU5JVElBTF9NRU1PUllcIik7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJyZWFkXCIsIFwicmVhZF9cIik7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJyZWFkQXN5bmNcIiwgXCJyZWFkQXN5bmNcIik7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJyZWFkQmluYXJ5XCIsIFwicmVhZEJpbmFyeVwiKTtcblxubGVnYWN5TW9kdWxlUHJvcChcInNldFdpbmRvd1RpdGxlXCIsIFwic2V0V2luZG93VGl0bGVcIik7XG5cbnZhciBJREJGUyA9IFwiSURCRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxpZGJmcy5qc1wiO1xuXG52YXIgUFJPWFlGUyA9IFwiUFJPWFlGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbHByb3h5ZnMuanNcIjtcblxudmFyIFdPUktFUkZTID0gXCJXT1JLRVJGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbHdvcmtlcmZzLmpzXCI7XG5cbnZhciBOT0RFRlMgPSBcIk5PREVGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbG5vZGVmcy5qc1wiO1xuXG5mdW5jdGlvbiBhbGlnbk1lbW9yeSgpIHtcbiBhYm9ydChcImBhbGlnbk1lbW9yeWAgaXMgbm93IGEgbGlicmFyeSBmdW5jdGlvbiBhbmQgbm90IGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGFkZCBpdCB0byB5b3VyIGxpYnJhcnkuanMgX19kZXBzIG9yIHRvIERFRkFVTFRfTElCUkFSWV9GVU5DU19UT19JTkNMVURFIG9uIHRoZSBjb21tYW5kIGxpbmVcIik7XG59XG5cbmFzc2VydCghRU5WSVJPTk1FTlRfSVNfU0hFTEwsIFwic2hlbGwgZW52aXJvbm1lbnQgZGV0ZWN0ZWQgYnV0IG5vdCBlbmFibGVkIGF0IGJ1aWxkIHRpbWUuICBBZGQgJ3NoZWxsJyB0byBgLXNFTlZJUk9OTUVOVGAgdG8gZW5hYmxlLlwiKTtcblxudmFyIFNUQUNLX0FMSUdOID0gMTY7XG5cbnZhciBQT0lOVEVSX1NJWkUgPSA0O1xuXG5mdW5jdGlvbiBnZXROYXRpdmVUeXBlU2l6ZSh0eXBlKSB7XG4gc3dpdGNoICh0eXBlKSB7XG4gY2FzZSBcImkxXCI6XG4gY2FzZSBcImk4XCI6XG4gIHJldHVybiAxO1xuXG4gY2FzZSBcImkxNlwiOlxuICByZXR1cm4gMjtcblxuIGNhc2UgXCJpMzJcIjpcbiAgcmV0dXJuIDQ7XG5cbiBjYXNlIFwiaTY0XCI6XG4gIHJldHVybiA4O1xuXG4gY2FzZSBcImZsb2F0XCI6XG4gIHJldHVybiA0O1xuXG4gY2FzZSBcImRvdWJsZVwiOlxuICByZXR1cm4gODtcblxuIGRlZmF1bHQ6XG4gIHtcbiAgIGlmICh0eXBlW3R5cGUubGVuZ3RoIC0gMV0gPT09IFwiKlwiKSB7XG4gICAgcmV0dXJuIFBPSU5URVJfU0laRTtcbiAgIH0gZWxzZSBpZiAodHlwZVswXSA9PT0gXCJpXCIpIHtcbiAgICBjb25zdCBiaXRzID0gTnVtYmVyKHR5cGUuc3Vic3RyKDEpKTtcbiAgICBhc3NlcnQoYml0cyAlIDggPT09IDAsIFwiZ2V0TmF0aXZlVHlwZVNpemUgaW52YWxpZCBiaXRzIFwiICsgYml0cyArIFwiLCB0eXBlIFwiICsgdHlwZSk7XG4gICAgcmV0dXJuIGJpdHMgLyA4O1xuICAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgIH1cbiAgfVxuIH1cbn1cblxuZnVuY3Rpb24gd2Fybk9uY2UodGV4dCkge1xuIGlmICghd2Fybk9uY2Uuc2hvd24pIHdhcm5PbmNlLnNob3duID0ge307XG4gaWYgKCF3YXJuT25jZS5zaG93blt0ZXh0XSkge1xuICB3YXJuT25jZS5zaG93blt0ZXh0XSA9IDE7XG4gIGVycih0ZXh0KTtcbiB9XG59XG5cbmZ1bmN0aW9uIHVsZWIxMjhFbmNvZGUobikge1xuIGFzc2VydChuIDwgMTYzODQpO1xuIGlmIChuIDwgMTI4KSB7XG4gIHJldHVybiBbIG4gXTtcbiB9XG4gcmV0dXJuIFsgbiAlIDEyOCB8IDEyOCwgbiA+PiA3IF07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRKc0Z1bmN0aW9uVG9XYXNtKGZ1bmMsIHNpZykge1xuIGlmICh0eXBlb2YgV2ViQXNzZW1ibHkuRnVuY3Rpb24gPT0gXCJmdW5jdGlvblwiKSB7XG4gIHZhciB0eXBlTmFtZXMgPSB7XG4gICBcImlcIjogXCJpMzJcIixcbiAgIFwialwiOiBcImk2NFwiLFxuICAgXCJmXCI6IFwiZjMyXCIsXG4gICBcImRcIjogXCJmNjRcIlxuICB9O1xuICB2YXIgdHlwZSA9IHtcbiAgIHBhcmFtZXRlcnM6IFtdLFxuICAgcmVzdWx0czogc2lnWzBdID09IFwidlwiID8gW10gOiBbIHR5cGVOYW1lc1tzaWdbMF1dIF1cbiAgfTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBzaWcubGVuZ3RoOyArK2kpIHtcbiAgIHR5cGUucGFyYW1ldGVycy5wdXNoKHR5cGVOYW1lc1tzaWdbaV1dKTtcbiAgfVxuICByZXR1cm4gbmV3IFdlYkFzc2VtYmx5LkZ1bmN0aW9uKHR5cGUsIGZ1bmMpO1xuIH1cbiB2YXIgdHlwZVNlY3Rpb24gPSBbIDEsIDk2IF07XG4gdmFyIHNpZ1JldCA9IHNpZy5zbGljZSgwLCAxKTtcbiB2YXIgc2lnUGFyYW0gPSBzaWcuc2xpY2UoMSk7XG4gdmFyIHR5cGVDb2RlcyA9IHtcbiAgXCJpXCI6IDEyNyxcbiAgXCJqXCI6IDEyNixcbiAgXCJmXCI6IDEyNSxcbiAgXCJkXCI6IDEyNFxuIH07XG4gdHlwZVNlY3Rpb24gPSB0eXBlU2VjdGlvbi5jb25jYXQodWxlYjEyOEVuY29kZShzaWdQYXJhbS5sZW5ndGgpKTtcbiBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ1BhcmFtLmxlbmd0aDsgKytpKSB7XG4gIHR5cGVTZWN0aW9uLnB1c2godHlwZUNvZGVzW3NpZ1BhcmFtW2ldXSk7XG4gfVxuIGlmIChzaWdSZXQgPT0gXCJ2XCIpIHtcbiAgdHlwZVNlY3Rpb24ucHVzaCgwKTtcbiB9IGVsc2Uge1xuICB0eXBlU2VjdGlvbiA9IHR5cGVTZWN0aW9uLmNvbmNhdChbIDEsIHR5cGVDb2Rlc1tzaWdSZXRdIF0pO1xuIH1cbiB0eXBlU2VjdGlvbiA9IFsgMSBdLmNvbmNhdCh1bGViMTI4RW5jb2RlKHR5cGVTZWN0aW9uLmxlbmd0aCksIHR5cGVTZWN0aW9uKTtcbiB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbIDAsIDk3LCAxMTUsIDEwOSwgMSwgMCwgMCwgMCBdLmNvbmNhdCh0eXBlU2VjdGlvbiwgWyAyLCA3LCAxLCAxLCAxMDEsIDEsIDEwMiwgMCwgMCwgNywgNSwgMSwgMSwgMTAyLCAwLCAwIF0pKTtcbiB2YXIgbW9kdWxlID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShieXRlcyk7XG4gdmFyIGluc3RhbmNlID0gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSwge1xuICBcImVcIjoge1xuICAgXCJmXCI6IGZ1bmNcbiAgfVxuIH0pO1xuIHZhciB3cmFwcGVkRnVuYyA9IGluc3RhbmNlLmV4cG9ydHNbXCJmXCJdO1xuIHJldHVybiB3cmFwcGVkRnVuYztcbn1cblxudmFyIGZyZWVUYWJsZUluZGV4ZXMgPSBbXTtcblxudmFyIGZ1bmN0aW9uc0luVGFibGVNYXA7XG5cbmZ1bmN0aW9uIGdldEVtcHR5VGFibGVTbG90KCkge1xuIGlmIChmcmVlVGFibGVJbmRleGVzLmxlbmd0aCkge1xuICByZXR1cm4gZnJlZVRhYmxlSW5kZXhlcy5wb3AoKTtcbiB9XG4gdHJ5IHtcbiAgd2FzbVRhYmxlLmdyb3coMSk7XG4gfSBjYXRjaCAoZXJyKSB7XG4gIGlmICghKGVyciBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpKSB7XG4gICB0aHJvdyBlcnI7XG4gIH1cbiAgdGhyb3cgXCJVbmFibGUgdG8gZ3JvdyB3YXNtIHRhYmxlLiBTZXQgQUxMT1dfVEFCTEVfR1JPV1RILlwiO1xuIH1cbiByZXR1cm4gd2FzbVRhYmxlLmxlbmd0aCAtIDE7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRhYmxlTWFwKG9mZnNldCwgY291bnQpIHtcbiBmb3IgKHZhciBpID0gb2Zmc2V0OyBpIDwgb2Zmc2V0ICsgY291bnQ7IGkrKykge1xuICB2YXIgaXRlbSA9IGdldFdhc21UYWJsZUVudHJ5KGkpO1xuICBpZiAoaXRlbSkge1xuICAgZnVuY3Rpb25zSW5UYWJsZU1hcC5zZXQoaXRlbSwgaSk7XG4gIH1cbiB9XG59XG5cbmZ1bmN0aW9uIGFkZEZ1bmN0aW9uKGZ1bmMsIHNpZykge1xuIGFzc2VydCh0eXBlb2YgZnVuYyAhPSBcInVuZGVmaW5lZFwiKTtcbiBpZiAoIWZ1bmN0aW9uc0luVGFibGVNYXApIHtcbiAgZnVuY3Rpb25zSW5UYWJsZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHVwZGF0ZVRhYmxlTWFwKDAsIHdhc21UYWJsZS5sZW5ndGgpO1xuIH1cbiBpZiAoZnVuY3Rpb25zSW5UYWJsZU1hcC5oYXMoZnVuYykpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uc0luVGFibGVNYXAuZ2V0KGZ1bmMpO1xuIH1cbiB2YXIgcmV0ID0gZ2V0RW1wdHlUYWJsZVNsb3QoKTtcbiB0cnkge1xuICBzZXRXYXNtVGFibGVFbnRyeShyZXQsIGZ1bmMpO1xuIH0gY2F0Y2ggKGVycikge1xuICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUeXBlRXJyb3IpKSB7XG4gICB0aHJvdyBlcnI7XG4gIH1cbiAgYXNzZXJ0KHR5cGVvZiBzaWcgIT0gXCJ1bmRlZmluZWRcIiwgXCJNaXNzaW5nIHNpZ25hdHVyZSBhcmd1bWVudCB0byBhZGRGdW5jdGlvbjogXCIgKyBmdW5jKTtcbiAgdmFyIHdyYXBwZWQgPSBjb252ZXJ0SnNGdW5jdGlvblRvV2FzbShmdW5jLCBzaWcpO1xuICBzZXRXYXNtVGFibGVFbnRyeShyZXQsIHdyYXBwZWQpO1xuIH1cbiBmdW5jdGlvbnNJblRhYmxlTWFwLnNldChmdW5jLCByZXQpO1xuIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGluZGV4KSB7XG4gZnVuY3Rpb25zSW5UYWJsZU1hcC5kZWxldGUoZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKTtcbiBmcmVlVGFibGVJbmRleGVzLnB1c2goaW5kZXgpO1xufVxuXG5mdW5jdGlvbiBsZWdhY3lNb2R1bGVQcm9wKHByb3AsIG5ld05hbWUpIHtcbiBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlLCBwcm9wKSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLCBwcm9wLCB7XG4gICBjb25maWd1cmFibGU6IHRydWUsXG4gICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGFib3J0KFwiTW9kdWxlLlwiICsgcHJvcCArIFwiIGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggcGxhaW4gXCIgKyBuZXdOYW1lICsgXCIgKHRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBwcm92aWRlZCBvbiBNb2R1bGUsIGJ1dCBhZnRlciBzdGFydHVwIHRoZSB2YWx1ZSBpcyBvbmx5IGxvb2tlZCBmb3Igb24gYSBsb2NhbCB2YXJpYWJsZSBvZiB0aGF0IG5hbWUpXCIpO1xuICAgfVxuICB9KTtcbiB9XG59XG5cbmZ1bmN0aW9uIGlnbm9yZWRNb2R1bGVQcm9wKHByb3ApIHtcbiBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGUsIHByb3ApKSB7XG4gIGFib3J0KFwiYE1vZHVsZS5cIiArIHByb3AgKyBcImAgd2FzIHN1cHBsaWVkIGJ1dCBgXCIgKyBwcm9wICsgXCJgIG5vdCBpbmNsdWRlZCBpbiBJTkNPTUlOR19NT0RVTEVfSlNfQVBJXCIpO1xuIH1cbn1cblxuZnVuY3Rpb24gdW5leHBvcnRlZE1lc3NhZ2Uoc3ltLCBpc0ZTU3lib2wpIHtcbiB2YXIgbXNnID0gXCInXCIgKyBzeW0gKyBcIicgd2FzIG5vdCBleHBvcnRlZC4gYWRkIGl0IHRvIEVYUE9SVEVEX1JVTlRJTUVfTUVUSE9EUyAoc2VlIHRoZSBGQVEpXCI7XG4gaWYgKGlzRlNTeWJvbCkge1xuICBtc2cgKz0gXCIuIEFsdGVybmF0aXZlbHksIGZvcmNpbmcgZmlsZXN5c3RlbSBzdXBwb3J0ICgtc0ZPUkNFX0ZJTEVTWVNURU0pIGNhbiBleHBvcnQgdGhpcyBmb3IgeW91XCI7XG4gfVxuIHJldHVybiBtc2c7XG59XG5cbmZ1bmN0aW9uIHVuZXhwb3J0ZWRSdW50aW1lU3ltYm9sKHN5bSwgaXNGU1N5Ym9sKSB7XG4gaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZSwgc3ltKSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLCBzeW0sIHtcbiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgYWJvcnQodW5leHBvcnRlZE1lc3NhZ2Uoc3ltLCBpc0ZTU3lib2wpKTtcbiAgIH1cbiAgfSk7XG4gfVxufVxuXG5mdW5jdGlvbiB1bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKHN5bSwgaXNGU1N5Ym9sKSB7XG4gaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZSwgc3ltKSkge1xuICBNb2R1bGVbc3ltXSA9ICgoKSA9PiBhYm9ydCh1bmV4cG9ydGVkTWVzc2FnZShzeW0sIGlzRlNTeWJvbCkpKTtcbiB9XG59XG5cbnZhciB0ZW1wUmV0MCA9IDA7XG5cbnZhciBzZXRUZW1wUmV0MCA9IHZhbHVlID0+IHtcbiB0ZW1wUmV0MCA9IHZhbHVlO1xufTtcblxudmFyIGdldFRlbXBSZXQwID0gKCkgPT4gdGVtcFJldDA7XG5cbnZhciB3YXNtQmluYXJ5O1xuXG5pZiAoTW9kdWxlW1wid2FzbUJpbmFyeVwiXSkgd2FzbUJpbmFyeSA9IE1vZHVsZVtcIndhc21CaW5hcnlcIl07XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJ3YXNtQmluYXJ5XCIsIFwid2FzbUJpbmFyeVwiKTtcblxudmFyIG5vRXhpdFJ1bnRpbWUgPSBNb2R1bGVbXCJub0V4aXRSdW50aW1lXCJdIHx8IHRydWU7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJub0V4aXRSdW50aW1lXCIsIFwibm9FeGl0UnVudGltZVwiKTtcblxuaWYgKHR5cGVvZiBXZWJBc3NlbWJseSAhPSBcIm9iamVjdFwiKSB7XG4gYWJvcnQoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpO1xufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZShwdHIsIHZhbHVlLCB0eXBlID0gXCJpOFwiLCBub1NhZmUpIHtcbiBpZiAodHlwZS5jaGFyQXQodHlwZS5sZW5ndGggLSAxKSA9PT0gXCIqXCIpIHR5cGUgPSBcImkzMlwiO1xuIGlmIChub1NhZmUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gIGNhc2UgXCJpMVwiOlxuICAgSEVBUDhbcHRyID4+PiAwXSA9IHZhbHVlO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImk4XCI6XG4gICBIRUFQOFtwdHIgPj4+IDBdID0gdmFsdWU7XG4gICBicmVhaztcblxuICBjYXNlIFwiaTE2XCI6XG4gICBIRUFQMTZbcHRyID4+PiAxXSA9IHZhbHVlO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImkzMlwiOlxuICAgSEVBUDMyW3B0ciA+Pj4gMl0gPSB2YWx1ZTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpNjRcIjpcbiAgIHRlbXBJNjQgPSBbIHZhbHVlID4+PiAwLCAodGVtcERvdWJsZSA9IHZhbHVlLCArTWF0aC5hYnModGVtcERvdWJsZSkgPj0gMSA/IHRlbXBEb3VibGUgPiAwID8gKE1hdGgubWluKCtNYXRoLmZsb29yKHRlbXBEb3VibGUgLyA0Mjk0OTY3Mjk2KSwgNDI5NDk2NzI5NSkgfCAwKSA+Pj4gMCA6IH5+K01hdGguY2VpbCgodGVtcERvdWJsZSAtICsofn50ZW1wRG91YmxlID4+PiAwKSkgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IDApIF0sIFxuICAgSEVBUDMyW3B0ciA+Pj4gMl0gPSB0ZW1wSTY0WzBdLCBIRUFQMzJbcHRyICsgNCA+Pj4gMl0gPSB0ZW1wSTY0WzFdO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImZsb2F0XCI6XG4gICBIRUFQRjMyW3B0ciA+Pj4gMl0gPSB2YWx1ZTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJkb3VibGVcIjpcbiAgIEhFQVBGNjRbcHRyID4+PiAzXSA9IHZhbHVlO1xuICAgYnJlYWs7XG5cbiAgZGVmYXVsdDpcbiAgIGFib3J0KFwiaW52YWxpZCB0eXBlIGZvciBzZXRWYWx1ZTogXCIgKyB0eXBlKTtcbiAgfVxuIH0gZWxzZSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICBjYXNlIFwiaTFcIjpcbiAgIFNBRkVfSEVBUF9TVE9SRShwdHIgfCAwLCB2YWx1ZSB8IDAsIDEpO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImk4XCI6XG4gICBTQUZFX0hFQVBfU1RPUkUocHRyIHwgMCwgdmFsdWUgfCAwLCAxKTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpMTZcIjpcbiAgIFNBRkVfSEVBUF9TVE9SRShwdHIgfCAwLCB2YWx1ZSB8IDAsIDIpO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImkzMlwiOlxuICAgU0FGRV9IRUFQX1NUT1JFKHB0ciB8IDAsIHZhbHVlIHwgMCwgNCk7XG4gICBicmVhaztcblxuICBjYXNlIFwiaTY0XCI6XG4gICB0ZW1wSTY0ID0gWyB2YWx1ZSA+Pj4gMCwgKHRlbXBEb3VibGUgPSB2YWx1ZSwgK01hdGguYWJzKHRlbXBEb3VibGUpID49IDEgPyB0ZW1wRG91YmxlID4gMCA/IChNYXRoLm1pbigrTWF0aC5mbG9vcih0ZW1wRG91YmxlIC8gNDI5NDk2NzI5NiksIDQyOTQ5NjcyOTUpIHwgMCkgPj4+IDAgOiB+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUgLSArKH5+dGVtcERvdWJsZSA+Pj4gMCkpIC8gNDI5NDk2NzI5NikgPj4+IDAgOiAwKSBdLCBcbiAgIFNBRkVfSEVBUF9TVE9SRShwdHIgfCAwLCB0ZW1wSTY0WzBdIHwgMCwgNCksIFNBRkVfSEVBUF9TVE9SRShwdHIgKyA0IHwgMCwgdGVtcEk2NFsxXSB8IDAsIDQpO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImZsb2F0XCI6XG4gICBTQUZFX0hFQVBfU1RPUkVfRChwdHIgfCAwLCBNYXRoLmZyb3VuZCh2YWx1ZSksIDQpO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImRvdWJsZVwiOlxuICAgU0FGRV9IRUFQX1NUT1JFX0QocHRyIHwgMCwgK3ZhbHVlLCA4KTtcbiAgIGJyZWFrO1xuXG4gIGRlZmF1bHQ6XG4gICBhYm9ydChcImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6IFwiICsgdHlwZSk7XG4gIH1cbiB9XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHB0ciwgdHlwZSA9IFwiaThcIiwgbm9TYWZlKSB7XG4gaWYgKHR5cGUuY2hhckF0KHR5cGUubGVuZ3RoIC0gMSkgPT09IFwiKlwiKSB0eXBlID0gXCJpMzJcIjtcbiBpZiAobm9TYWZlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICBjYXNlIFwiaTFcIjpcbiAgIHJldHVybiBIRUFQOFtwdHIgPj4+IDBdO1xuXG4gIGNhc2UgXCJpOFwiOlxuICAgcmV0dXJuIEhFQVA4W3B0ciA+Pj4gMF07XG5cbiAgY2FzZSBcImkxNlwiOlxuICAgcmV0dXJuIEhFQVAxNltwdHIgPj4+IDFdO1xuXG4gIGNhc2UgXCJpMzJcIjpcbiAgIHJldHVybiBIRUFQMzJbcHRyID4+PiAyXTtcblxuICBjYXNlIFwiaTY0XCI6XG4gICByZXR1cm4gSEVBUDMyW3B0ciA+Pj4gMl07XG5cbiAgY2FzZSBcImZsb2F0XCI6XG4gICByZXR1cm4gSEVBUEYzMltwdHIgPj4+IDJdO1xuXG4gIGNhc2UgXCJkb3VibGVcIjpcbiAgIHJldHVybiBOdW1iZXIoSEVBUEY2NFtwdHIgPj4+IDNdKTtcblxuICBkZWZhdWx0OlxuICAgYWJvcnQoXCJpbnZhbGlkIHR5cGUgZm9yIGdldFZhbHVlOiBcIiArIHR5cGUpO1xuICB9XG4gfSBlbHNlIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gIGNhc2UgXCJpMVwiOlxuICAgcmV0dXJuIFNBRkVfSEVBUF9MT0FEKHB0ciB8IDAsIDEsIDApIHwgMDtcblxuICBjYXNlIFwiaThcIjpcbiAgIHJldHVybiBTQUZFX0hFQVBfTE9BRChwdHIgfCAwLCAxLCAwKSB8IDA7XG5cbiAgY2FzZSBcImkxNlwiOlxuICAgcmV0dXJuIFNBRkVfSEVBUF9MT0FEKHB0ciB8IDAsIDIsIDApIHwgMDtcblxuICBjYXNlIFwiaTMyXCI6XG4gICByZXR1cm4gU0FGRV9IRUFQX0xPQUQocHRyIHwgMCwgNCwgMCkgfCAwO1xuXG4gIGNhc2UgXCJpNjRcIjpcbiAgIHJldHVybiBTQUZFX0hFQVBfTE9BRChwdHIgfCAwLCA4LCAwKSB8IDA7XG5cbiAgY2FzZSBcImZsb2F0XCI6XG4gICByZXR1cm4gTWF0aC5mcm91bmQoU0FGRV9IRUFQX0xPQURfRChwdHIgfCAwLCA0LCAwKSk7XG5cbiAgY2FzZSBcImRvdWJsZVwiOlxuICAgcmV0dXJuICtTQUZFX0hFQVBfTE9BRF9EKHB0ciB8IDAsIDgsIDApO1xuXG4gIGRlZmF1bHQ6XG4gICBhYm9ydChcImludmFsaWQgdHlwZSBmb3IgZ2V0VmFsdWU6IFwiICsgdHlwZSk7XG4gIH1cbiB9XG4gcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFNhZmVIZWFwVHlwZShieXRlcywgaXNGbG9hdCkge1xuIHN3aXRjaCAoYnl0ZXMpIHtcbiBjYXNlIDE6XG4gIHJldHVybiBcImk4XCI7XG5cbiBjYXNlIDI6XG4gIHJldHVybiBcImkxNlwiO1xuXG4gY2FzZSA0OlxuICByZXR1cm4gaXNGbG9hdCA/IFwiZmxvYXRcIiA6IFwiaTMyXCI7XG5cbiBjYXNlIDg6XG4gIHJldHVybiBpc0Zsb2F0ID8gXCJkb3VibGVcIiA6IFwiaTY0XCI7XG5cbiBkZWZhdWx0OlxuICBhc3NlcnQoMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBTQUZFX0hFQVBfU1RPUkUoZGVzdCwgdmFsdWUsIGJ5dGVzLCBpc0Zsb2F0KSB7XG4gZGVzdCA+Pj49IDA7XG4gaWYgKGRlc3QgPD0gMCkgYWJvcnQoXCJzZWdtZW50YXRpb24gZmF1bHQgc3RvcmluZyBcIiArIGJ5dGVzICsgXCIgYnl0ZXMgdG8gYWRkcmVzcyBcIiArIGRlc3QpO1xuIGlmIChkZXN0ICUgYnl0ZXMgIT09IDApIGFib3J0KFwiYWxpZ25tZW50IGVycm9yIHN0b3JpbmcgdG8gYWRkcmVzcyBcIiArIGRlc3QgKyBcIiwgd2hpY2ggd2FzIGV4cGVjdGVkIHRvIGJlIGFsaWduZWQgdG8gYSBtdWx0aXBsZSBvZiBcIiArIGJ5dGVzKTtcbiBpZiAocnVudGltZUluaXRpYWxpemVkKSB7XG4gIHZhciBicmsgPSBfc2JyaygpID4+PiAwO1xuICBpZiAoZGVzdCArIGJ5dGVzID4gYnJrKSBhYm9ydChcInNlZ21lbnRhdGlvbiBmYXVsdCwgZXhjZWVkZWQgdGhlIHRvcCBvZiB0aGUgYXZhaWxhYmxlIGR5bmFtaWMgaGVhcCB3aGVuIHN0b3JpbmcgXCIgKyBieXRlcyArIFwiIGJ5dGVzIHRvIGFkZHJlc3MgXCIgKyBkZXN0ICsgXCIuIERZTkFNSUNUT1A9XCIgKyBicmspO1xuICBhc3NlcnQoYnJrID49IF9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlKCkpO1xuICBhc3NlcnQoYnJrIDw9IEhFQVA4Lmxlbmd0aCk7XG4gfVxuIHNldFZhbHVlKGRlc3QsIHZhbHVlLCBnZXRTYWZlSGVhcFR5cGUoYnl0ZXMsIGlzRmxvYXQpLCAxKTtcbiByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIFNBRkVfSEVBUF9TVE9SRV9EKGRlc3QsIHZhbHVlLCBieXRlcykge1xuIHJldHVybiBTQUZFX0hFQVBfU1RPUkUoZGVzdCwgdmFsdWUsIGJ5dGVzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gU0FGRV9IRUFQX0xPQUQoZGVzdCwgYnl0ZXMsIHVuc2lnbmVkLCBpc0Zsb2F0KSB7XG4gZGVzdCA+Pj49IDA7XG4gaWYgKGRlc3QgPD0gMCkgYWJvcnQoXCJzZWdtZW50YXRpb24gZmF1bHQgbG9hZGluZyBcIiArIGJ5dGVzICsgXCIgYnl0ZXMgZnJvbSBhZGRyZXNzIFwiICsgZGVzdCk7XG4gaWYgKGRlc3QgJSBieXRlcyAhPT0gMCkgYWJvcnQoXCJhbGlnbm1lbnQgZXJyb3IgbG9hZGluZyBmcm9tIGFkZHJlc3MgXCIgKyBkZXN0ICsgXCIsIHdoaWNoIHdhcyBleHBlY3RlZCB0byBiZSBhbGlnbmVkIHRvIGEgbXVsdGlwbGUgb2YgXCIgKyBieXRlcyk7XG4gaWYgKHJ1bnRpbWVJbml0aWFsaXplZCkge1xuICB2YXIgYnJrID0gX3NicmsoKSA+Pj4gMDtcbiAgaWYgKGRlc3QgKyBieXRlcyA+IGJyaykgYWJvcnQoXCJzZWdtZW50YXRpb24gZmF1bHQsIGV4Y2VlZGVkIHRoZSB0b3Agb2YgdGhlIGF2YWlsYWJsZSBkeW5hbWljIGhlYXAgd2hlbiBsb2FkaW5nIFwiICsgYnl0ZXMgKyBcIiBieXRlcyBmcm9tIGFkZHJlc3MgXCIgKyBkZXN0ICsgXCIuIERZTkFNSUNUT1A9XCIgKyBicmspO1xuICBhc3NlcnQoYnJrID49IF9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlKCkpO1xuICBhc3NlcnQoYnJrIDw9IEhFQVA4Lmxlbmd0aCk7XG4gfVxuIHZhciB0eXBlID0gZ2V0U2FmZUhlYXBUeXBlKGJ5dGVzLCBpc0Zsb2F0KTtcbiB2YXIgcmV0ID0gZ2V0VmFsdWUoZGVzdCwgdHlwZSwgMSk7XG4gaWYgKHVuc2lnbmVkKSByZXQgPSB1blNpZ24ocmV0LCBwYXJzZUludCh0eXBlLnN1YnN0cigxKSwgMTApKTtcbiByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBTQUZFX0hFQVBfTE9BRF9EKGRlc3QsIGJ5dGVzLCB1bnNpZ25lZCkge1xuIHJldHVybiBTQUZFX0hFQVBfTE9BRChkZXN0LCBieXRlcywgdW5zaWduZWQsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBTQUZFX0ZUX01BU0sodmFsdWUsIG1hc2spIHtcbiB2YXIgcmV0ID0gdmFsdWUgJiBtYXNrO1xuIGlmIChyZXQgIT09IHZhbHVlKSB7XG4gIGFib3J0KFwiRnVuY3Rpb24gdGFibGUgbWFzayBlcnJvcjogZnVuY3Rpb24gcG9pbnRlciBpcyBcIiArIHZhbHVlICsgXCIgd2hpY2ggaXMgbWFza2VkIGJ5IFwiICsgbWFzayArIFwiLCB0aGUgbGlrZWx5IGNhdXNlIG9mIHRoaXMgaXMgdGhhdCB0aGUgZnVuY3Rpb24gcG9pbnRlciBpcyBiZWluZyBjYWxsZWQgYnkgdGhlIHdyb25nIHR5cGUuXCIpO1xuIH1cbiByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZWdmYXVsdCgpIHtcbiBhYm9ydChcInNlZ21lbnRhdGlvbiBmYXVsdFwiKTtcbn1cblxuZnVuY3Rpb24gYWxpZ25mYXVsdCgpIHtcbiBhYm9ydChcImFsaWdubWVudCBmYXVsdFwiKTtcbn1cblxudmFyIHdhc21NZW1vcnk7XG5cbnZhciBBQk9SVCA9IGZhbHNlO1xuXG52YXIgRVhJVFNUQVRVUztcblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgdGV4dCkge1xuIGlmICghY29uZGl0aW9uKSB7XG4gIGFib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZFwiICsgKHRleHQgPyBcIjogXCIgKyB0ZXh0IDogXCJcIikpO1xuIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q0Z1bmMoaWRlbnQpIHtcbiB2YXIgZnVuYyA9IE1vZHVsZVtcIl9cIiArIGlkZW50XTtcbiBhc3NlcnQoZnVuYywgXCJDYW5ub3QgY2FsbCB1bmtub3duIGZ1bmN0aW9uIFwiICsgaWRlbnQgKyBcIiwgbWFrZSBzdXJlIGl0IGlzIGV4cG9ydGVkXCIpO1xuIHJldHVybiBmdW5jO1xufVxuXG5mdW5jdGlvbiBjY2FsbChpZGVudCwgcmV0dXJuVHlwZSwgYXJnVHlwZXMsIGFyZ3MsIG9wdHMpIHtcbiB2YXIgdG9DID0ge1xuICBcInN0cmluZ1wiOiBmdW5jdGlvbihzdHIpIHtcbiAgIHZhciByZXQgPSAwO1xuICAgaWYgKHN0ciAhPT0gbnVsbCAmJiBzdHIgIT09IHVuZGVmaW5lZCAmJiBzdHIgIT09IDApIHtcbiAgICB2YXIgbGVuID0gKHN0ci5sZW5ndGggPDwgMikgKyAxO1xuICAgIHJldCA9IHN0YWNrQWxsb2MobGVuKTtcbiAgICBzdHJpbmdUb1VURjgoc3RyLCByZXQsIGxlbik7XG4gICB9XG4gICByZXR1cm4gcmV0O1xuICB9LFxuICBcImFycmF5XCI6IGZ1bmN0aW9uKGFycikge1xuICAgdmFyIHJldCA9IHN0YWNrQWxsb2MoYXJyLmxlbmd0aCk7XG4gICB3cml0ZUFycmF5VG9NZW1vcnkoYXJyLCByZXQpO1xuICAgcmV0dXJuIHJldDtcbiAgfVxuIH07XG4gZnVuY3Rpb24gY29udmVydFJldHVyblZhbHVlKHJldCkge1xuICBpZiAocmV0dXJuVHlwZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIFVURjhUb1N0cmluZyhyZXQpO1xuICBpZiAocmV0dXJuVHlwZSA9PT0gXCJib29sZWFuXCIpIHJldHVybiBCb29sZWFuKHJldCk7XG4gIHJldHVybiByZXQ7XG4gfVxuIHZhciBmdW5jID0gZ2V0Q0Z1bmMoaWRlbnQpO1xuIHZhciBjQXJncyA9IFtdO1xuIHZhciBzdGFjayA9IDA7XG4gYXNzZXJ0KHJldHVyblR5cGUgIT09IFwiYXJyYXlcIiwgJ1JldHVybiB0eXBlIHNob3VsZCBub3QgYmUgXCJhcnJheVwiLicpO1xuIGlmIChhcmdzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgdmFyIGNvbnZlcnRlciA9IHRvQ1thcmdUeXBlc1tpXV07XG4gICBpZiAoY29udmVydGVyKSB7XG4gICAgaWYgKHN0YWNrID09PSAwKSBzdGFjayA9IHN0YWNrU2F2ZSgpO1xuICAgIGNBcmdzW2ldID0gY29udmVydGVyKGFyZ3NbaV0pO1xuICAgfSBlbHNlIHtcbiAgICBjQXJnc1tpXSA9IGFyZ3NbaV07XG4gICB9XG4gIH1cbiB9XG4gdmFyIHJldCA9IGZ1bmMuYXBwbHkobnVsbCwgY0FyZ3MpO1xuIGZ1bmN0aW9uIG9uRG9uZShyZXQpIHtcbiAgaWYgKHN0YWNrICE9PSAwKSBzdGFja1Jlc3RvcmUoc3RhY2spO1xuICByZXR1cm4gY29udmVydFJldHVyblZhbHVlKHJldCk7XG4gfVxuIHJldCA9IG9uRG9uZShyZXQpO1xuIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGN3cmFwKGlkZW50LCByZXR1cm5UeXBlLCBhcmdUeXBlcywgb3B0cykge1xuIHJldHVybiBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNjYWxsKGlkZW50LCByZXR1cm5UeXBlLCBhcmdUeXBlcywgYXJndW1lbnRzLCBvcHRzKTtcbiB9O1xufVxuXG52YXIgQUxMT0NfTk9STUFMID0gMDtcblxudmFyIEFMTE9DX1NUQUNLID0gMTtcblxuZnVuY3Rpb24gYWxsb2NhdGUoc2xhYiwgYWxsb2NhdG9yKSB7XG4gdmFyIHJldDtcbiBhc3NlcnQodHlwZW9mIGFsbG9jYXRvciA9PSBcIm51bWJlclwiLCBcImFsbG9jYXRlIG5vIGxvbmdlciB0YWtlcyBhIHR5cGUgYXJndW1lbnRcIik7XG4gYXNzZXJ0KHR5cGVvZiBzbGFiICE9IFwibnVtYmVyXCIsIFwiYWxsb2NhdGUgbm8gbG9uZ2VyIHRha2VzIGEgbnVtYmVyIGFzIGFyZzBcIik7XG4gaWYgKGFsbG9jYXRvciA9PSBBTExPQ19TVEFDSykge1xuICByZXQgPSBzdGFja0FsbG9jKHNsYWIubGVuZ3RoKTtcbiB9IGVsc2Uge1xuICByZXQgPSBfbWFsbG9jKHNsYWIubGVuZ3RoKTtcbiB9XG4gaWYgKCFzbGFiLnN1YmFycmF5ICYmICFzbGFiLnNsaWNlKSB7XG4gIHNsYWIgPSBuZXcgVWludDhBcnJheShzbGFiKTtcbiB9XG4gSEVBUFU4LnNldChzbGFiLCByZXQgPj4+IDApO1xuIHJldHVybiByZXQ7XG59XG5cbnZhciBVVEY4RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciAhPSBcInVuZGVmaW5lZFwiID8gbmV3IFRleHREZWNvZGVyKFwidXRmOFwiKSA6IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoaGVhcE9yQXJyYXksIGlkeCwgbWF4Qnl0ZXNUb1JlYWQpIHtcbiBpZHggPj4+PSAwO1xuIHZhciBlbmRJZHggPSBpZHggKyBtYXhCeXRlc1RvUmVhZDtcbiB2YXIgZW5kUHRyID0gaWR4O1xuIHdoaWxlIChoZWFwT3JBcnJheVtlbmRQdHJdICYmICEoZW5kUHRyID49IGVuZElkeCkpICsrZW5kUHRyO1xuIGlmIChlbmRQdHIgLSBpZHggPiAxNiAmJiBoZWFwT3JBcnJheS5idWZmZXIgJiYgVVRGOERlY29kZXIpIHtcbiAgcmV0dXJuIFVURjhEZWNvZGVyLmRlY29kZShoZWFwT3JBcnJheS5zdWJhcnJheShpZHgsIGVuZFB0cikpO1xuIH0gZWxzZSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICB3aGlsZSAoaWR4IDwgZW5kUHRyKSB7XG4gICB2YXIgdTAgPSBoZWFwT3JBcnJheVtpZHgrK107XG4gICBpZiAoISh1MCAmIDEyOCkpIHtcbiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7XG4gICAgY29udGludWU7XG4gICB9XG4gICB2YXIgdTEgPSBoZWFwT3JBcnJheVtpZHgrK10gJiA2MztcbiAgIGlmICgodTAgJiAyMjQpID09IDE5Mikge1xuICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCAmIDMxKSA8PCA2IHwgdTEpO1xuICAgIGNvbnRpbnVlO1xuICAgfVxuICAgdmFyIHUyID0gaGVhcE9yQXJyYXlbaWR4KytdICYgNjM7XG4gICBpZiAoKHUwICYgMjQwKSA9PSAyMjQpIHtcbiAgICB1MCA9ICh1MCAmIDE1KSA8PCAxMiB8IHUxIDw8IDYgfCB1MjtcbiAgIH0gZWxzZSB7XG4gICAgaWYgKCh1MCAmIDI0OCkgIT0gMjQwKSB3YXJuT25jZShcIkludmFsaWQgVVRGLTggbGVhZGluZyBieXRlIDB4XCIgKyB1MC50b1N0cmluZygxNikgKyBcIiBlbmNvdW50ZXJlZCB3aGVuIGRlc2VyaWFsaXppbmcgYSBVVEYtOCBzdHJpbmcgaW4gd2FzbSBtZW1vcnkgdG8gYSBKUyBzdHJpbmchXCIpO1xuICAgIHUwID0gKHUwICYgNykgPDwgMTggfCB1MSA8PCAxMiB8IHUyIDw8IDYgfCBoZWFwT3JBcnJheVtpZHgrK10gJiA2MztcbiAgIH1cbiAgIGlmICh1MCA8IDY1NTM2KSB7XG4gICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApO1xuICAgfSBlbHNlIHtcbiAgICB2YXIgY2ggPSB1MCAtIDY1NTM2O1xuICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgY2ggPj4gMTAsIDU2MzIwIHwgY2ggJiAxMDIzKTtcbiAgIH1cbiAgfVxuIH1cbiByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBVVEY4VG9TdHJpbmcocHRyLCBtYXhCeXRlc1RvUmVhZCkge1xuIHB0ciA+Pj49IDA7XG4gcmV0dXJuIHB0ciA/IFVURjhBcnJheVRvU3RyaW5nKEhFQVBVOCwgcHRyLCBtYXhCeXRlc1RvUmVhZCkgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsIGhlYXAsIG91dElkeCwgbWF4Qnl0ZXNUb1dyaXRlKSB7XG4gb3V0SWR4ID4+Pj0gMDtcbiBpZiAoIShtYXhCeXRlc1RvV3JpdGUgPiAwKSkgcmV0dXJuIDA7XG4gdmFyIHN0YXJ0SWR4ID0gb3V0SWR4O1xuIHZhciBlbmRJZHggPSBvdXRJZHggKyBtYXhCeXRlc1RvV3JpdGUgLSAxO1xuIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gIHZhciB1ID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIGlmICh1ID49IDU1Mjk2ICYmIHUgPD0gNTczNDMpIHtcbiAgIHZhciB1MSA9IHN0ci5jaGFyQ29kZUF0KCsraSk7XG4gICB1ID0gNjU1MzYgKyAoKHUgJiAxMDIzKSA8PCAxMCkgfCB1MSAmIDEwMjM7XG4gIH1cbiAgaWYgKHUgPD0gMTI3KSB7XG4gICBpZiAob3V0SWR4ID49IGVuZElkeCkgYnJlYWs7XG4gICBoZWFwW291dElkeCsrID4+PiAwXSA9IHU7XG4gIH0gZWxzZSBpZiAodSA8PSAyMDQ3KSB7XG4gICBpZiAob3V0SWR4ICsgMSA+PSBlbmRJZHgpIGJyZWFrO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxOTIgfCB1ID4+IDY7XG4gICBoZWFwW291dElkeCsrID4+PiAwXSA9IDEyOCB8IHUgJiA2MztcbiAgfSBlbHNlIGlmICh1IDw9IDY1NTM1KSB7XG4gICBpZiAob3V0SWR4ICsgMiA+PSBlbmRJZHgpIGJyZWFrO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAyMjQgfCB1ID4+IDEyO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxMjggfCB1ID4+IDYgJiA2MztcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMTI4IHwgdSAmIDYzO1xuICB9IGVsc2Uge1xuICAgaWYgKG91dElkeCArIDMgPj0gZW5kSWR4KSBicmVhaztcbiAgIGlmICh1ID4gMTExNDExMSkgd2Fybk9uY2UoXCJJbnZhbGlkIFVuaWNvZGUgY29kZSBwb2ludCAweFwiICsgdS50b1N0cmluZygxNikgKyBcIiBlbmNvdW50ZXJlZCB3aGVuIHNlcmlhbGl6aW5nIGEgSlMgc3RyaW5nIHRvIGEgVVRGLTggc3RyaW5nIGluIHdhc20gbWVtb3J5ISAoVmFsaWQgdW5pY29kZSBjb2RlIHBvaW50cyBzaG91bGQgYmUgaW4gcmFuZ2UgMC0weDEwRkZGRikuXCIpO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAyNDAgfCB1ID4+IDE4O1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxMjggfCB1ID4+IDEyICYgNjM7XG4gICBoZWFwW291dElkeCsrID4+PiAwXSA9IDEyOCB8IHUgPj4gNiAmIDYzO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxMjggfCB1ICYgNjM7XG4gIH1cbiB9XG4gaGVhcFtvdXRJZHggPj4+IDBdID0gMDtcbiByZXR1cm4gb3V0SWR4IC0gc3RhcnRJZHg7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvVVRGOChzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSB7XG4gYXNzZXJ0KHR5cGVvZiBtYXhCeXRlc1RvV3JpdGUgPT0gXCJudW1iZXJcIiwgXCJzdHJpbmdUb1VURjgoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkgaXMgbWlzc2luZyB0aGUgdGhpcmQgcGFyYW1ldGVyIHRoYXQgc3BlY2lmaWVzIHRoZSBsZW5ndGggb2YgdGhlIG91dHB1dCBidWZmZXIhXCIpO1xuIHJldHVybiBzdHJpbmdUb1VURjhBcnJheShzdHIsIEhFQVBVOCwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKSB7XG4gdmFyIGxlbiA9IDA7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgdmFyIHUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgaWYgKHUgPj0gNTUyOTYgJiYgdSA8PSA1NzM0MykgdSA9IDY1NTM2ICsgKCh1ICYgMTAyMykgPDwgMTApIHwgc3RyLmNoYXJDb2RlQXQoKytpKSAmIDEwMjM7XG4gIGlmICh1IDw9IDEyNykgKytsZW47IGVsc2UgaWYgKHUgPD0gMjA0NykgbGVuICs9IDI7IGVsc2UgaWYgKHUgPD0gNjU1MzUpIGxlbiArPSAzOyBlbHNlIGxlbiArPSA0O1xuIH1cbiByZXR1cm4gbGVuO1xufVxuXG5mdW5jdGlvbiBBc2NpaVRvU3RyaW5nKHB0cikge1xuIHB0ciA+Pj49IDA7XG4gdmFyIHN0ciA9IFwiXCI7XG4gd2hpbGUgKDEpIHtcbiAgdmFyIGNoID0gU0FGRV9IRUFQX0xPQUQocHRyKysgfCAwLCAxLCAxKSA+Pj4gMDtcbiAgaWYgKCFjaCkgcmV0dXJuIHN0cjtcbiAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nVG9Bc2NpaShzdHIsIG91dFB0cikge1xuIHJldHVybiB3cml0ZUFzY2lpVG9NZW1vcnkoc3RyLCBvdXRQdHIsIGZhbHNlKTtcbn1cblxudmFyIFVURjE2RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciAhPSBcInVuZGVmaW5lZFwiID8gbmV3IFRleHREZWNvZGVyKFwidXRmLTE2bGVcIikgOiB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIFVURjE2VG9TdHJpbmcocHRyLCBtYXhCeXRlc1RvUmVhZCkge1xuIGFzc2VydChwdHIgJSAyID09IDAsIFwiUG9pbnRlciBwYXNzZWQgdG8gVVRGMTZUb1N0cmluZyBtdXN0IGJlIGFsaWduZWQgdG8gdHdvIGJ5dGVzIVwiKTtcbiB2YXIgZW5kUHRyID0gcHRyO1xuIHZhciBpZHggPSBlbmRQdHIgPj4gMTtcbiB2YXIgbWF4SWR4ID0gaWR4ICsgbWF4Qnl0ZXNUb1JlYWQgLyAyO1xuIHdoaWxlICghKGlkeCA+PSBtYXhJZHgpICYmIFNBRkVfSEVBUF9MT0FEKChpZHggPj4+IDApICogMiwgMiwgMSkpICsraWR4O1xuIGVuZFB0ciA9IGlkeCA8PCAxO1xuIGlmIChlbmRQdHIgLSBwdHIgPiAzMiAmJiBVVEYxNkRlY29kZXIpIHtcbiAgcmV0dXJuIFVURjE2RGVjb2Rlci5kZWNvZGUoSEVBUFU4LnN1YmFycmF5KHB0ciA+Pj4gMCwgZW5kUHRyID4+PiAwKSk7XG4gfSBlbHNlIHtcbiAgdmFyIHN0ciA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyAhKGkgPj0gbWF4Qnl0ZXNUb1JlYWQgLyAyKTsgKytpKSB7XG4gICB2YXIgY29kZVVuaXQgPSBTQUZFX0hFQVBfTE9BRChwdHIgKyBpICogMiB8IDAsIDIsIDApIHwgMDtcbiAgIGlmIChjb2RlVW5pdCA9PSAwKSBicmVhaztcbiAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVVbml0KTtcbiAgfVxuICByZXR1cm4gc3RyO1xuIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nVG9VVEYxNihzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSB7XG4gYXNzZXJ0KG91dFB0ciAlIDIgPT0gMCwgXCJQb2ludGVyIHBhc3NlZCB0byBzdHJpbmdUb1VURjE2IG11c3QgYmUgYWxpZ25lZCB0byB0d28gYnl0ZXMhXCIpO1xuIGFzc2VydCh0eXBlb2YgbWF4Qnl0ZXNUb1dyaXRlID09IFwibnVtYmVyXCIsIFwic3RyaW5nVG9VVEYxNihzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSBpcyBtaXNzaW5nIHRoZSB0aGlyZCBwYXJhbWV0ZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGxlbmd0aCBvZiB0aGUgb3V0cHV0IGJ1ZmZlciFcIik7XG4gaWYgKG1heEJ5dGVzVG9Xcml0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gIG1heEJ5dGVzVG9Xcml0ZSA9IDIxNDc0ODM2NDc7XG4gfVxuIGlmIChtYXhCeXRlc1RvV3JpdGUgPCAyKSByZXR1cm4gMDtcbiBtYXhCeXRlc1RvV3JpdGUgLT0gMjtcbiB2YXIgc3RhcnRQdHIgPSBvdXRQdHI7XG4gdmFyIG51bUNoYXJzVG9Xcml0ZSA9IG1heEJ5dGVzVG9Xcml0ZSA8IHN0ci5sZW5ndGggKiAyID8gbWF4Qnl0ZXNUb1dyaXRlIC8gMiA6IHN0ci5sZW5ndGg7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBudW1DaGFyc1RvV3JpdGU7ICsraSkge1xuICB2YXIgY29kZVVuaXQgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgU0FGRV9IRUFQX1NUT1JFKG91dFB0ciB8IDAsIGNvZGVVbml0IHwgMCwgMik7XG4gIG91dFB0ciArPSAyO1xuIH1cbiBTQUZFX0hFQVBfU1RPUkUob3V0UHRyIHwgMCwgMCB8IDAsIDIpO1xuIHJldHVybiBvdXRQdHIgLSBzdGFydFB0cjtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEYxNihzdHIpIHtcbiByZXR1cm4gc3RyLmxlbmd0aCAqIDI7XG59XG5cbmZ1bmN0aW9uIFVURjMyVG9TdHJpbmcocHRyLCBtYXhCeXRlc1RvUmVhZCkge1xuIGFzc2VydChwdHIgJSA0ID09IDAsIFwiUG9pbnRlciBwYXNzZWQgdG8gVVRGMzJUb1N0cmluZyBtdXN0IGJlIGFsaWduZWQgdG8gZm91ciBieXRlcyFcIik7XG4gdmFyIGkgPSAwO1xuIHZhciBzdHIgPSBcIlwiO1xuIHdoaWxlICghKGkgPj0gbWF4Qnl0ZXNUb1JlYWQgLyA0KSkge1xuICB2YXIgdXRmMzIgPSBTQUZFX0hFQVBfTE9BRChwdHIgKyBpICogNCB8IDAsIDQsIDApIHwgMDtcbiAgaWYgKHV0ZjMyID09IDApIGJyZWFrO1xuICArK2k7XG4gIGlmICh1dGYzMiA+PSA2NTUzNikge1xuICAgdmFyIGNoID0gdXRmMzIgLSA2NTUzNjtcbiAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgY2ggPj4gMTAsIDU2MzIwIHwgY2ggJiAxMDIzKTtcbiAgfSBlbHNlIHtcbiAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHV0ZjMyKTtcbiAgfVxuIH1cbiByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb1VURjMyKHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIHtcbiBvdXRQdHIgPj4+PSAwO1xuIGFzc2VydChvdXRQdHIgJSA0ID09IDAsIFwiUG9pbnRlciBwYXNzZWQgdG8gc3RyaW5nVG9VVEYzMiBtdXN0IGJlIGFsaWduZWQgdG8gZm91ciBieXRlcyFcIik7XG4gYXNzZXJ0KHR5cGVvZiBtYXhCeXRlc1RvV3JpdGUgPT0gXCJudW1iZXJcIiwgXCJzdHJpbmdUb1VURjMyKHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIGlzIG1pc3NpbmcgdGhlIHRoaXJkIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbGVuZ3RoIG9mIHRoZSBvdXRwdXQgYnVmZmVyIVwiKTtcbiBpZiAobWF4Qnl0ZXNUb1dyaXRlID09PSB1bmRlZmluZWQpIHtcbiAgbWF4Qnl0ZXNUb1dyaXRlID0gMjE0NzQ4MzY0NztcbiB9XG4gaWYgKG1heEJ5dGVzVG9Xcml0ZSA8IDQpIHJldHVybiAwO1xuIHZhciBzdGFydFB0ciA9IG91dFB0cjtcbiB2YXIgZW5kUHRyID0gc3RhcnRQdHIgKyBtYXhCeXRlc1RvV3JpdGUgLSA0O1xuIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gIHZhciBjb2RlVW5pdCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICBpZiAoY29kZVVuaXQgPj0gNTUyOTYgJiYgY29kZVVuaXQgPD0gNTczNDMpIHtcbiAgIHZhciB0cmFpbFN1cnJvZ2F0ZSA9IHN0ci5jaGFyQ29kZUF0KCsraSk7XG4gICBjb2RlVW5pdCA9IDY1NTM2ICsgKChjb2RlVW5pdCAmIDEwMjMpIDw8IDEwKSB8IHRyYWlsU3Vycm9nYXRlICYgMTAyMztcbiAgfVxuICBTQUZFX0hFQVBfU1RPUkUob3V0UHRyIHwgMCwgY29kZVVuaXQgfCAwLCA0KTtcbiAgb3V0UHRyICs9IDQ7XG4gIGlmIChvdXRQdHIgKyA0ID4gZW5kUHRyKSBicmVhaztcbiB9XG4gU0FGRV9IRUFQX1NUT1JFKG91dFB0ciB8IDAsIDAgfCAwLCA0KTtcbiByZXR1cm4gb3V0UHRyIC0gc3RhcnRQdHI7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMzIoc3RyKSB7XG4gdmFyIGxlbiA9IDA7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgdmFyIGNvZGVVbml0ID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIGlmIChjb2RlVW5pdCA+PSA1NTI5NiAmJiBjb2RlVW5pdCA8PSA1NzM0MykgKytpO1xuICBsZW4gKz0gNDtcbiB9XG4gcmV0dXJuIGxlbjtcbn1cblxuZnVuY3Rpb24gYWxsb2NhdGVVVEY4KHN0cikge1xuIHZhciBzaXplID0gbGVuZ3RoQnl0ZXNVVEY4KHN0cikgKyAxO1xuIHZhciByZXQgPSBfbWFsbG9jKHNpemUpO1xuIGlmIChyZXQpIHN0cmluZ1RvVVRGOEFycmF5KHN0ciwgSEVBUDgsIHJldCwgc2l6ZSk7XG4gcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYWxsb2NhdGVVVEY4T25TdGFjayhzdHIpIHtcbiB2YXIgc2l6ZSA9IGxlbmd0aEJ5dGVzVVRGOChzdHIpICsgMTtcbiB2YXIgcmV0ID0gc3RhY2tBbGxvYyhzaXplKTtcbiBzdHJpbmdUb1VURjhBcnJheShzdHIsIEhFQVA4LCByZXQsIHNpemUpO1xuIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nVG9NZW1vcnkoc3RyaW5nLCBidWZmZXIsIGRvbnRBZGROdWxsKSB7XG4gd2Fybk9uY2UoXCJ3cml0ZVN0cmluZ1RvTWVtb3J5IGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkISBVc2Ugc3RyaW5nVG9VVEY4KCkgaW5zdGVhZCFcIik7XG4gdmFyIGxhc3RDaGFyLCBlbmQ7XG4gaWYgKGRvbnRBZGROdWxsKSB7XG4gIGVuZCA9IGJ1ZmZlciArIGxlbmd0aEJ5dGVzVVRGOChzdHJpbmcpO1xuICBsYXN0Q2hhciA9IFNBRkVfSEVBUF9MT0FEKGVuZCA+Pj4gMCwgMSwgMCk7XG4gfVxuIHN0cmluZ1RvVVRGOChzdHJpbmcsIGJ1ZmZlciwgSW5maW5pdHkpO1xuIGlmIChkb250QWRkTnVsbCkgU0FGRV9IRUFQX1NUT1JFKGVuZCA+Pj4gMCwgbGFzdENoYXIsIDEpO1xufVxuXG5mdW5jdGlvbiB3cml0ZUFycmF5VG9NZW1vcnkoYXJyYXksIGJ1ZmZlcikge1xuIGFzc2VydChhcnJheS5sZW5ndGggPj0gMCwgXCJ3cml0ZUFycmF5VG9NZW1vcnkgYXJyYXkgbXVzdCBoYXZlIGEgbGVuZ3RoIChzaG91bGQgYmUgYW4gYXJyYXkgb3IgdHlwZWQgYXJyYXkpXCIpO1xuIEhFQVA4LnNldChhcnJheSwgYnVmZmVyID4+PiAwKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVBc2NpaVRvTWVtb3J5KHN0ciwgYnVmZmVyLCBkb250QWRkTnVsbCkge1xuIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gIGFzc2VydChzdHIuY2hhckNvZGVBdChpKSA9PT0gKHN0ci5jaGFyQ29kZUF0KGkpICYgMjU1KSk7XG4gIFNBRkVfSEVBUF9TVE9SRShidWZmZXIrKyB8IDAsIHN0ci5jaGFyQ29kZUF0KGkpIHwgMCwgMSk7XG4gfVxuIGlmICghZG9udEFkZE51bGwpIFNBRkVfSEVBUF9TVE9SRShidWZmZXIgfCAwLCAwIHwgMCwgMSk7XG59XG5cbnZhciBIRUFQLCBidWZmZXIsIEhFQVA4LCBIRUFQVTgsIEhFQVAxNiwgSEVBUFUxNiwgSEVBUDMyLCBIRUFQVTMyLCBIRUFQRjMyLCBIRUFQRjY0O1xuXG5mdW5jdGlvbiB1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyhidWYpIHtcbiBidWZmZXIgPSBidWY7XG4gTW9kdWxlW1wiSEVBUDhcIl0gPSBIRUFQOCA9IG5ldyBJbnQ4QXJyYXkoYnVmKTtcbiBNb2R1bGVbXCJIRUFQMTZcIl0gPSBIRUFQMTYgPSBuZXcgSW50MTZBcnJheShidWYpO1xuIE1vZHVsZVtcIkhFQVAzMlwiXSA9IEhFQVAzMiA9IG5ldyBJbnQzMkFycmF5KGJ1Zik7XG4gTW9kdWxlW1wiSEVBUFU4XCJdID0gSEVBUFU4ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiBNb2R1bGVbXCJIRUFQVTE2XCJdID0gSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShidWYpO1xuIE1vZHVsZVtcIkhFQVBVMzJcIl0gPSBIRUFQVTMyID0gbmV3IFVpbnQzMkFycmF5KGJ1Zik7XG4gTW9kdWxlW1wiSEVBUEYzMlwiXSA9IEhFQVBGMzIgPSBuZXcgRmxvYXQzMkFycmF5KGJ1Zik7XG4gTW9kdWxlW1wiSEVBUEY2NFwiXSA9IEhFQVBGNjQgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1Zik7XG59XG5cbnZhciBUT1RBTF9TVEFDSyA9IDUyNDI4ODA7XG5cbmlmIChNb2R1bGVbXCJUT1RBTF9TVEFDS1wiXSkgYXNzZXJ0KFRPVEFMX1NUQUNLID09PSBNb2R1bGVbXCJUT1RBTF9TVEFDS1wiXSwgXCJ0aGUgc3RhY2sgc2l6ZSBjYW4gbm8gbG9uZ2VyIGJlIGRldGVybWluZWQgYXQgcnVudGltZVwiKTtcblxudmFyIElOSVRJQUxfTUVNT1JZID0gTW9kdWxlW1wiSU5JVElBTF9NRU1PUllcIl0gfHwgMTY3NzcyMTY7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJJTklUSUFMX01FTU9SWVwiLCBcIklOSVRJQUxfTUVNT1JZXCIpO1xuXG5hc3NlcnQoSU5JVElBTF9NRU1PUlkgPj0gVE9UQUxfU1RBQ0ssIFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFRPVEFMX1NUQUNLLCB3YXMgXCIgKyBJTklUSUFMX01FTU9SWSArIFwiISAoVE9UQUxfU1RBQ0s9XCIgKyBUT1RBTF9TVEFDSyArIFwiKVwiKTtcblxuYXNzZXJ0KHR5cGVvZiBJbnQzMkFycmF5ICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIEZsb2F0NjRBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBJbnQzMkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSAhPSB1bmRlZmluZWQgJiYgSW50MzJBcnJheS5wcm90b3R5cGUuc2V0ICE9IHVuZGVmaW5lZCwgXCJKUyBlbmdpbmUgZG9lcyBub3QgcHJvdmlkZSBmdWxsIHR5cGVkIGFycmF5IHN1cHBvcnRcIik7XG5cbmFzc2VydCghTW9kdWxlW1wid2FzbU1lbW9yeVwiXSwgXCJVc2Ugb2YgYHdhc21NZW1vcnlgIGRldGVjdGVkLiAgVXNlIC1zSU1QT1JURURfTUVNT1JZIHRvIGRlZmluZSB3YXNtTWVtb3J5IGV4dGVybmFsbHlcIik7XG5cbmFzc2VydChJTklUSUFMX01FTU9SWSA9PSAxNjc3NzIxNiwgXCJEZXRlY3RlZCBydW50aW1lIElOSVRJQUxfTUVNT1JZIHNldHRpbmcuICBVc2UgLXNJTVBPUlRFRF9NRU1PUlkgdG8gZGVmaW5lIHdhc21NZW1vcnkgZHluYW1pY2FsbHlcIik7XG5cbnZhciB3YXNtVGFibGU7XG5cbmZ1bmN0aW9uIHdyaXRlU3RhY2tDb29raWUoKSB7XG4gdmFyIG1heCA9IF9lbXNjcmlwdGVuX3N0YWNrX2dldF9lbmQoKTtcbiBhc3NlcnQoKG1heCAmIDMpID09IDApO1xuIFNBRkVfSEVBUF9TVE9SRShtYXggfCAwLCAzNDgyMTIyMyB8IDAsIDQpO1xuIFNBRkVfSEVBUF9TVE9SRShtYXggKyA0IHwgMCwgMjMxMDcyMTAyMiB8IDAsIDQpO1xufVxuXG5mdW5jdGlvbiBjaGVja1N0YWNrQ29va2llKCkge1xuIGlmIChBQk9SVCkgcmV0dXJuO1xuIHZhciBtYXggPSBfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kKCk7XG4gdmFyIGNvb2tpZTEgPSBTQUZFX0hFQVBfTE9BRChtYXggfCAwLCA0LCAxKSA+Pj4gMDtcbiB2YXIgY29va2llMiA9IFNBRkVfSEVBUF9MT0FEKG1heCArIDQgfCAwLCA0LCAxKSA+Pj4gMDtcbiBpZiAoY29va2llMSAhPSAzNDgyMTIyMyB8fCBjb29raWUyICE9IDIzMTA3MjEwMjIpIHtcbiAgYWJvcnQoXCJTdGFjayBvdmVyZmxvdyEgU3RhY2sgY29va2llIGhhcyBiZWVuIG92ZXJ3cml0dGVuLCBleHBlY3RlZCBoZXggZHdvcmRzIDB4ODlCQUNERkUgYW5kIDB4MjEzNTQ2NywgYnV0IHJlY2VpdmVkIDB4XCIgKyBjb29raWUyLnRvU3RyaW5nKDE2KSArIFwiIDB4XCIgKyBjb29raWUxLnRvU3RyaW5nKDE2KSk7XG4gfVxufVxuXG4oZnVuY3Rpb24oKSB7XG4gdmFyIGgxNiA9IG5ldyBJbnQxNkFycmF5KDEpO1xuIHZhciBoOCA9IG5ldyBJbnQ4QXJyYXkoaDE2LmJ1ZmZlcik7XG4gaDE2WzBdID0gMjU0NTk7XG4gaWYgKGg4WzBdICE9PSAxMTUgfHwgaDhbMV0gIT09IDk5KSB0aHJvdyBcIlJ1bnRpbWUgZXJyb3I6IGV4cGVjdGVkIHRoZSBzeXN0ZW0gdG8gYmUgbGl0dGxlLWVuZGlhbiEgKFJ1biB3aXRoIC1zU1VQUE9SVF9CSUdfRU5ESUFOIHRvIGJ5cGFzcylcIjtcbn0pKCk7XG5cbnZhciBfX0FUUFJFUlVOX18gPSBbXTtcblxudmFyIF9fQVRJTklUX18gPSBbXTtcblxudmFyIF9fQVRNQUlOX18gPSBbXTtcblxudmFyIF9fQVRFWElUX18gPSBbXTtcblxudmFyIF9fQVRQT1NUUlVOX18gPSBbXTtcblxudmFyIHJ1bnRpbWVJbml0aWFsaXplZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBrZWVwUnVudGltZUFsaXZlKCkge1xuIHJldHVybiBub0V4aXRSdW50aW1lO1xufVxuXG5mdW5jdGlvbiBwcmVSdW4oKSB7XG4gaWYgKE1vZHVsZVtcInByZVJ1blwiXSkge1xuICBpZiAodHlwZW9mIE1vZHVsZVtcInByZVJ1blwiXSA9PSBcImZ1bmN0aW9uXCIpIE1vZHVsZVtcInByZVJ1blwiXSA9IFsgTW9kdWxlW1wicHJlUnVuXCJdIF07XG4gIHdoaWxlIChNb2R1bGVbXCJwcmVSdW5cIl0ubGVuZ3RoKSB7XG4gICBhZGRPblByZVJ1bihNb2R1bGVbXCJwcmVSdW5cIl0uc2hpZnQoKSk7XG4gIH1cbiB9XG4gY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKTtcbn1cblxuZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKSB7XG4gY2hlY2tTdGFja0Nvb2tpZSgpO1xuIGFzc2VydCghcnVudGltZUluaXRpYWxpemVkKTtcbiBydW50aW1lSW5pdGlhbGl6ZWQgPSB0cnVlO1xuIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRJTklUX18pO1xufVxuXG5mdW5jdGlvbiBwcmVNYWluKCkge1xuIGNoZWNrU3RhY2tDb29raWUoKTtcbiBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUTUFJTl9fKTtcbn1cblxuZnVuY3Rpb24gcG9zdFJ1bigpIHtcbiBjaGVja1N0YWNrQ29va2llKCk7XG4gaWYgKE1vZHVsZVtcInBvc3RSdW5cIl0pIHtcbiAgaWYgKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdID09IFwiZnVuY3Rpb25cIikgTW9kdWxlW1wicG9zdFJ1blwiXSA9IFsgTW9kdWxlW1wicG9zdFJ1blwiXSBdO1xuICB3aGlsZSAoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpIHtcbiAgIGFkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpO1xuICB9XG4gfVxuIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pO1xufVxuXG5mdW5jdGlvbiBhZGRPblByZVJ1bihjYikge1xuIF9fQVRQUkVSVU5fXy51bnNoaWZ0KGNiKTtcbn1cblxuZnVuY3Rpb24gYWRkT25Jbml0KGNiKSB7XG4gX19BVElOSVRfXy51bnNoaWZ0KGNiKTtcbn1cblxuZnVuY3Rpb24gYWRkT25QcmVNYWluKGNiKSB7XG4gX19BVE1BSU5fXy51bnNoaWZ0KGNiKTtcbn1cblxuZnVuY3Rpb24gYWRkT25FeGl0KGNiKSB7fVxuXG5mdW5jdGlvbiBhZGRPblBvc3RSdW4oY2IpIHtcbiBfX0FUUE9TVFJVTl9fLnVuc2hpZnQoY2IpO1xufVxuXG5hc3NlcnQoTWF0aC5pbXVsLCBcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IE1hdGguaW11bCgpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbFwiKTtcblxuYXNzZXJ0KE1hdGguZnJvdW5kLCBcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IE1hdGguZnJvdW5kKCksIGJ1aWxkIHdpdGggTEVHQUNZX1ZNX1NVUFBPUlQgb3IgUE9MWUZJTExfT0xEX01BVEhfRlVOQ1RJT05TIHRvIGFkZCBpbiBhIHBvbHlmaWxsXCIpO1xuXG5hc3NlcnQoTWF0aC5jbHozMiwgXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmNsejMyKCksIGJ1aWxkIHdpdGggTEVHQUNZX1ZNX1NVUFBPUlQgb3IgUE9MWUZJTExfT0xEX01BVEhfRlVOQ1RJT05TIHRvIGFkZCBpbiBhIHBvbHlmaWxsXCIpO1xuXG5hc3NlcnQoTWF0aC50cnVuYywgXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLnRydW5jKCksIGJ1aWxkIHdpdGggTEVHQUNZX1ZNX1NVUFBPUlQgb3IgUE9MWUZJTExfT0xEX01BVEhfRlVOQ1RJT05TIHRvIGFkZCBpbiBhIHBvbHlmaWxsXCIpO1xuXG52YXIgcnVuRGVwZW5kZW5jaWVzID0gMDtcblxudmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gbnVsbDtcblxudmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IG51bGw7XG5cbnZhciBydW5EZXBlbmRlbmN5VHJhY2tpbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlUnVuRGVwZW5kZW5jeShpZCkge1xuIHZhciBvcmlnID0gaWQ7XG4gd2hpbGUgKDEpIHtcbiAgaWYgKCFydW5EZXBlbmRlbmN5VHJhY2tpbmdbaWRdKSByZXR1cm4gaWQ7XG4gIGlkID0gb3JpZyArIE1hdGgucmFuZG9tKCk7XG4gfVxufVxuXG5mdW5jdGlvbiBhZGRSdW5EZXBlbmRlbmN5KGlkKSB7XG4gcnVuRGVwZW5kZW5jaWVzKys7XG4gaWYgKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pIHtcbiAgTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpO1xuIH1cbiBpZiAoaWQpIHtcbiAgYXNzZXJ0KCFydW5EZXBlbmRlbmN5VHJhY2tpbmdbaWRdKTtcbiAgcnVuRGVwZW5kZW5jeVRyYWNraW5nW2lkXSA9IDE7XG4gIGlmIChydW5EZXBlbmRlbmN5V2F0Y2hlciA9PT0gbnVsbCAmJiB0eXBlb2Ygc2V0SW50ZXJ2YWwgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgcnVuRGVwZW5kZW5jeVdhdGNoZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICBpZiAoQUJPUlQpIHtcbiAgICAgY2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7XG4gICAgIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gbnVsbDtcbiAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgc2hvd24gPSBmYWxzZTtcbiAgICBmb3IgKHZhciBkZXAgaW4gcnVuRGVwZW5kZW5jeVRyYWNraW5nKSB7XG4gICAgIGlmICghc2hvd24pIHtcbiAgICAgIHNob3duID0gdHJ1ZTtcbiAgICAgIGVycihcInN0aWxsIHdhaXRpbmcgb24gcnVuIGRlcGVuZGVuY2llczpcIik7XG4gICAgIH1cbiAgICAgZXJyKFwiZGVwZW5kZW5jeTogXCIgKyBkZXApO1xuICAgIH1cbiAgICBpZiAoc2hvd24pIHtcbiAgICAgZXJyKFwiKGVuZCBvZiBsaXN0KVwiKTtcbiAgICB9XG4gICB9LCAxZTQpO1xuICB9XG4gfSBlbHNlIHtcbiAgZXJyKFwid2FybmluZzogcnVuIGRlcGVuZGVuY3kgYWRkZWQgd2l0aG91dCBJRFwiKTtcbiB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJ1bkRlcGVuZGVuY3koaWQpIHtcbiBydW5EZXBlbmRlbmNpZXMtLTtcbiBpZiAoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSkge1xuICBNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyk7XG4gfVxuIGlmIChpZCkge1xuICBhc3NlcnQocnVuRGVwZW5kZW5jeVRyYWNraW5nW2lkXSk7XG4gIGRlbGV0ZSBydW5EZXBlbmRlbmN5VHJhY2tpbmdbaWRdO1xuIH0gZWxzZSB7XG4gIGVycihcIndhcm5pbmc6IHJ1biBkZXBlbmRlbmN5IHJlbW92ZWQgd2l0aG91dCBJRFwiKTtcbiB9XG4gaWYgKHJ1bkRlcGVuZGVuY2llcyA9PSAwKSB7XG4gIGlmIChydW5EZXBlbmRlbmN5V2F0Y2hlciAhPT0gbnVsbCkge1xuICAgY2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7XG4gICBydW5EZXBlbmRlbmN5V2F0Y2hlciA9IG51bGw7XG4gIH1cbiAgaWYgKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCkge1xuICAgdmFyIGNhbGxiYWNrID0gZGVwZW5kZW5jaWVzRnVsZmlsbGVkO1xuICAgZGVwZW5kZW5jaWVzRnVsZmlsbGVkID0gbnVsbDtcbiAgIGNhbGxiYWNrKCk7XG4gIH1cbiB9XG59XG5cbmZ1bmN0aW9uIGFib3J0KHdoYXQpIHtcbiB7XG4gIGlmIChNb2R1bGVbXCJvbkFib3J0XCJdKSB7XG4gICBNb2R1bGVbXCJvbkFib3J0XCJdKHdoYXQpO1xuICB9XG4gfVxuIHdoYXQgPSBcIkFib3J0ZWQoXCIgKyB3aGF0ICsgXCIpXCI7XG4gZXJyKHdoYXQpO1xuIEFCT1JUID0gdHJ1ZTtcbiBFWElUU1RBVFVTID0gMTtcbiB2YXIgZSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3Iod2hhdCk7XG4gcmVhZHlQcm9taXNlUmVqZWN0KGUpO1xuIHRocm93IGU7XG59XG5cbnZhciBkYXRhVVJJUHJlZml4ID0gXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCI7XG5cbmZ1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSkge1xuIHJldHVybiBmaWxlbmFtZS5zdGFydHNXaXRoKGRhdGFVUklQcmVmaXgpO1xufVxuXG5mdW5jdGlvbiBpc0ZpbGVVUkkoZmlsZW5hbWUpIHtcbiByZXR1cm4gZmlsZW5hbWUuc3RhcnRzV2l0aChcImZpbGU6Ly9cIik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4cG9ydFdyYXBwZXIobmFtZSwgZml4ZWRhc20pIHtcbiByZXR1cm4gZnVuY3Rpb24oKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHZhciBhc20gPSBmaXhlZGFzbTtcbiAgaWYgKCFmaXhlZGFzbSkge1xuICAgYXNtID0gTW9kdWxlW1wiYXNtXCJdO1xuICB9XG4gIGFzc2VydChydW50aW1lSW5pdGlhbGl6ZWQsIFwibmF0aXZlIGZ1bmN0aW9uIGBcIiArIGRpc3BsYXlOYW1lICsgXCJgIGNhbGxlZCBiZWZvcmUgcnVudGltZSBpbml0aWFsaXphdGlvblwiKTtcbiAgaWYgKCFhc21bbmFtZV0pIHtcbiAgIGFzc2VydChhc21bbmFtZV0sIFwiZXhwb3J0ZWQgbmF0aXZlIGZ1bmN0aW9uIGBcIiArIGRpc3BsYXlOYW1lICsgXCJgIG5vdCBmb3VuZFwiKTtcbiAgfVxuICByZXR1cm4gYXNtW25hbWVdLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gfTtcbn1cblxudmFyIHdhc21CaW5hcnlGaWxlO1xuXG5pZiAoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSkge1xuIHdhc21CaW5hcnlGaWxlID0gXCIuL2R1Y2tkYi1laC53YXNtXCI7XG4gaWYgKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKSB7XG4gIHdhc21CaW5hcnlGaWxlID0gbG9jYXRlRmlsZSh3YXNtQmluYXJ5RmlsZSk7XG4gfVxufSBlbHNlIHtcbiB3YXNtQmluYXJ5RmlsZSA9IG5ldyBVUkwoXCIuL2R1Y2tkYi1laC53YXNtXCIsIGltcG9ydC5tZXRhLnVybCkudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gZ2V0QmluYXJ5KGZpbGUpIHtcbiB0cnkge1xuICBpZiAoZmlsZSA9PSB3YXNtQmluYXJ5RmlsZSAmJiB3YXNtQmluYXJ5KSB7XG4gICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkod2FzbUJpbmFyeSk7XG4gIH1cbiAgaWYgKHJlYWRCaW5hcnkpIHtcbiAgIHJldHVybiByZWFkQmluYXJ5KGZpbGUpO1xuICB9IGVsc2Uge1xuICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICB9XG4gfSBjYXRjaCAoZXJyKSB7XG4gIGFib3J0KGVycik7XG4gfVxufVxuXG5mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCkge1xuIGlmICghd2FzbUJpbmFyeSAmJiAoRU5WSVJPTk1FTlRfSVNfV0VCIHx8IEVOVklST05NRU5UX0lTX1dPUktFUikpIHtcbiAgaWYgKHR5cGVvZiBmZXRjaCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIHJldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSwge1xuICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlW1wib2tcIl0pIHtcbiAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIHdhc21CaW5hcnlGaWxlICsgXCInXCI7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZVtcImFycmF5QnVmZmVyXCJdKCk7XG4gICB9KS5jYXRjaChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTtcbiAgIH0pO1xuICB9XG4gfVxuIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTtcbiB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2FzbSgpIHtcbiB2YXIgaW5mbyA9IHtcbiAgXCJlbnZcIjogYXNtTGlicmFyeUFyZyxcbiAgXCJ3YXNpX3NuYXBzaG90X3ByZXZpZXcxXCI6IGFzbUxpYnJhcnlBcmdcbiB9O1xuIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSwgbW9kdWxlKSB7XG4gIHZhciBleHBvcnRzID0gaW5zdGFuY2UuZXhwb3J0cztcbiAgTW9kdWxlW1wiYXNtXCJdID0gZXhwb3J0cztcbiAgd2FzbU1lbW9yeSA9IE1vZHVsZVtcImFzbVwiXVtcIm1lbW9yeVwiXTtcbiAgYXNzZXJ0KHdhc21NZW1vcnksIFwibWVtb3J5IG5vdCBmb3VuZCBpbiB3YXNtIGV4cG9ydHNcIik7XG4gIHVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKTtcbiAgd2FzbVRhYmxlID0gTW9kdWxlW1wiYXNtXCJdW1wiX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZVwiXTtcbiAgYXNzZXJ0KHdhc21UYWJsZSwgXCJ0YWJsZSBub3QgZm91bmQgaW4gd2FzbSBleHBvcnRzXCIpO1xuICBhZGRPbkluaXQoTW9kdWxlW1wiYXNtXCJdW1wiX193YXNtX2NhbGxfY3RvcnNcIl0pO1xuICByZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtcbiB9XG4gYWRkUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIik7XG4gdmFyIHRydWVNb2R1bGUgPSBNb2R1bGU7XG4gZnVuY3Rpb24gcmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQocmVzdWx0KSB7XG4gIGFzc2VydChNb2R1bGUgPT09IHRydWVNb2R1bGUsIFwidGhlIE1vZHVsZSBvYmplY3Qgc2hvdWxkIG5vdCBiZSByZXBsYWNlZCBkdXJpbmcgYXN5bmMgY29tcGlsYXRpb24gLSBwZXJoYXBzIHRoZSBvcmRlciBvZiBIVE1MIGVsZW1lbnRzIGlzIHdyb25nP1wiKTtcbiAgdHJ1ZU1vZHVsZSA9IG51bGw7XG4gIHJlY2VpdmVJbnN0YW5jZShyZXN1bHRbXCJpbnN0YW5jZVwiXSk7XG4gfVxuIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZXIpIHtcbiAgcmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSkge1xuICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSwgaW5mbyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSkudGhlbihyZWNlaXZlciwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICBlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIiArIHJlYXNvbik7XG4gICBpZiAoaXNGaWxlVVJJKHdhc21CaW5hcnlGaWxlKSkge1xuICAgIGVycihcIndhcm5pbmc6IExvYWRpbmcgZnJvbSBhIGZpbGUgVVJJIChcIiArIHdhc21CaW5hcnlGaWxlICsgXCIpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbW9zdCBicm93c2Vycy4gU2VlIGh0dHBzOi8vZW1zY3JpcHRlbi5vcmcvZG9jcy9nZXR0aW5nX3N0YXJ0ZWQvRkFRLmh0bWwjaG93LWRvLWktcnVuLWEtbG9jYWwtd2Vic2VydmVyLWZvci10ZXN0aW5nLXdoeS1kb2VzLW15LXByb2dyYW0tc3RhbGwtaW4tZG93bmxvYWRpbmctb3ItcHJlcGFyaW5nXCIpO1xuICAgfVxuICAgYWJvcnQocmVhc29uKTtcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXN5bmMoKSB7XG4gIGlmICghd2FzbUJpbmFyeSAmJiB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT0gXCJmdW5jdGlvblwiICYmICFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpICYmIHR5cGVvZiBmZXRjaCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIHJldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSwge1xuICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICB2YXIgcmVzdWx0ID0gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsIGluZm8pO1xuICAgIHJldHVybiByZXN1bHQudGhlbihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgIGVycihcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIiArIHJlYXNvbik7XG4gICAgIGVycihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO1xuICAgICByZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCk7XG4gICAgfSk7XG4gICB9KTtcbiAgfSBlbHNlIHtcbiAgIHJldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KTtcbiAgfVxuIH1cbiBpZiAoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKSB7XG4gIHRyeSB7XG4gICB2YXIgZXhwb3J0cyA9IE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLCByZWNlaXZlSW5zdGFuY2UpO1xuICAgcmV0dXJuIGV4cG9ydHM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgIGVycihcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgZSk7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiB9XG4gaW5zdGFudGlhdGVBc3luYygpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7XG4gcmV0dXJuIHt9O1xufVxuXG52YXIgdGVtcERvdWJsZTtcblxudmFyIHRlbXBJNjQ7XG5cbnZhciBBU01fQ09OU1RTID0ge307XG5cbmZ1bmN0aW9uIGNhbGxSdW50aW1lQ2FsbGJhY2tzKGNhbGxiYWNrcykge1xuIHdoaWxlIChjYWxsYmFja3MubGVuZ3RoID4gMCkge1xuICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3Muc2hpZnQoKTtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIGNhbGxiYWNrKE1vZHVsZSk7XG4gICBjb250aW51ZTtcbiAgfVxuICB2YXIgZnVuYyA9IGNhbGxiYWNrLmZ1bmM7XG4gIGlmICh0eXBlb2YgZnVuYyA9PSBcIm51bWJlclwiKSB7XG4gICBpZiAoY2FsbGJhY2suYXJnID09PSB1bmRlZmluZWQpIHtcbiAgICBnZXRXYXNtVGFibGVFbnRyeShmdW5jKSgpO1xuICAgfSBlbHNlIHtcbiAgICBnZXRXYXNtVGFibGVFbnRyeShmdW5jKShjYWxsYmFjay5hcmcpO1xuICAgfVxuICB9IGVsc2Uge1xuICAgZnVuYyhjYWxsYmFjay5hcmcgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjay5hcmcpO1xuICB9XG4gfVxufVxuXG5mdW5jdGlvbiB3aXRoU3RhY2tTYXZlKGYpIHtcbiB2YXIgc3RhY2sgPSBzdGFja1NhdmUoKTtcbiB2YXIgcmV0ID0gZigpO1xuIHN0YWNrUmVzdG9yZShzdGFjayk7XG4gcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZGVtYW5nbGUoZnVuYykge1xuIHdhcm5PbmNlKFwid2FybmluZzogYnVpbGQgd2l0aCAtc0RFTUFOR0xFX1NVUFBPUlQgdG8gbGluayBpbiBsaWJjeHhhYmkgZGVtYW5nbGluZ1wiKTtcbiByZXR1cm4gZnVuYztcbn1cblxuZnVuY3Rpb24gZGVtYW5nbGVBbGwodGV4dCkge1xuIHZhciByZWdleCA9IC9cXGJfWltcXHdcXGRfXSsvZztcbiByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZ2V4LCBmdW5jdGlvbih4KSB7XG4gIHZhciB5ID0gZGVtYW5nbGUoeCk7XG4gIHJldHVybiB4ID09PSB5ID8geCA6IHkgKyBcIiBbXCIgKyB4ICsgXCJdXCI7XG4gfSk7XG59XG5cbnZhciB3YXNtVGFibGVNaXJyb3IgPSBbXTtcblxuZnVuY3Rpb24gZ2V0V2FzbVRhYmxlRW50cnkoZnVuY1B0cikge1xuIHZhciBmdW5jID0gd2FzbVRhYmxlTWlycm9yW2Z1bmNQdHJdO1xuIGlmICghZnVuYykge1xuICBpZiAoZnVuY1B0ciA+PSB3YXNtVGFibGVNaXJyb3IubGVuZ3RoKSB3YXNtVGFibGVNaXJyb3IubGVuZ3RoID0gZnVuY1B0ciArIDE7XG4gIHdhc21UYWJsZU1pcnJvcltmdW5jUHRyXSA9IGZ1bmMgPSB3YXNtVGFibGUuZ2V0KGZ1bmNQdHIpO1xuIH1cbiBhc3NlcnQod2FzbVRhYmxlLmdldChmdW5jUHRyKSA9PSBmdW5jLCBcIkphdmFTY3JpcHQtc2lkZSBXYXNtIGZ1bmN0aW9uIHRhYmxlIG1pcnJvciBpcyBvdXQgb2YgZGF0ZSFcIik7XG4gcmV0dXJuIGZ1bmM7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV4Y2VwdGlvbihlKSB7XG4gaWYgKGUgaW5zdGFuY2VvZiBFeGl0U3RhdHVzIHx8IGUgPT0gXCJ1bndpbmRcIikge1xuICByZXR1cm4gRVhJVFNUQVRVUztcbiB9XG4gcXVpdF8oMSwgZSk7XG59XG5cbmZ1bmN0aW9uIGpzU3RhY2tUcmFjZSgpIHtcbiB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiBpZiAoIWVycm9yLnN0YWNrKSB7XG4gIHRyeSB7XG4gICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgZXJyb3IgPSBlO1xuICB9XG4gIGlmICghZXJyb3Iuc3RhY2spIHtcbiAgIHJldHVybiBcIihubyBzdGFjayB0cmFjZSBhdmFpbGFibGUpXCI7XG4gIH1cbiB9XG4gcmV0dXJuIGVycm9yLnN0YWNrLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIHNldFdhc21UYWJsZUVudHJ5KGlkeCwgZnVuYykge1xuIHdhc21UYWJsZS5zZXQoaWR4LCBmdW5jKTtcbiB3YXNtVGFibGVNaXJyb3JbaWR4XSA9IHdhc21UYWJsZS5nZXQoaWR4KTtcbn1cblxuZnVuY3Rpb24gc3RhY2tUcmFjZSgpIHtcbiB2YXIganMgPSBqc1N0YWNrVHJhY2UoKTtcbiBpZiAoTW9kdWxlW1wiZXh0cmFTdGFja1RyYWNlXCJdKSBqcyArPSBcIlxcblwiICsgTW9kdWxlW1wiZXh0cmFTdGFja1RyYWNlXCJdKCk7XG4gcmV0dXJuIGRlbWFuZ2xlQWxsKGpzKTtcbn1cblxuZnVuY3Rpb24gdW5TaWduKHZhbHVlLCBiaXRzKSB7XG4gaWYgKHZhbHVlID49IDApIHtcbiAgcmV0dXJuIHZhbHVlO1xuIH1cbiByZXR1cm4gYml0cyA8PSAzMiA/IDIgKiBNYXRoLmFicygxIDw8IGJpdHMgLSAxKSArIHZhbHVlIDogTWF0aC5wb3coMiwgYml0cykgKyB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gX19fYXNzZXJ0X2ZhaWwoY29uZGl0aW9uLCBmaWxlbmFtZSwgbGluZSwgZnVuYykge1xuIGFib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyBVVEY4VG9TdHJpbmcoY29uZGl0aW9uKSArIFwiLCBhdDogXCIgKyBbIGZpbGVuYW1lID8gVVRGOFRvU3RyaW5nKGZpbGVuYW1lKSA6IFwidW5rbm93biBmaWxlbmFtZVwiLCBsaW5lLCBmdW5jID8gVVRGOFRvU3RyaW5nKGZ1bmMpIDogXCJ1bmtub3duIGZ1bmN0aW9uXCIgXSk7XG59XG5cbnZhciBTWVNDQUxMUyA9IHtcbiBidWZmZXJzOiBbIG51bGwsIFtdLCBbXSBdLFxuIHByaW50Q2hhcjogZnVuY3Rpb24oc3RyZWFtLCBjdXJyKSB7XG4gIHZhciBidWZmZXIgPSBTWVNDQUxMUy5idWZmZXJzW3N0cmVhbV07XG4gIGFzc2VydChidWZmZXIpO1xuICBpZiAoY3VyciA9PT0gMCB8fCBjdXJyID09PSAxMCkge1xuICAgKHN0cmVhbSA9PT0gMSA/IG91dCA6IGVycikoVVRGOEFycmF5VG9TdHJpbmcoYnVmZmVyLCAwKSk7XG4gICBidWZmZXIubGVuZ3RoID0gMDtcbiAgfSBlbHNlIHtcbiAgIGJ1ZmZlci5wdXNoKGN1cnIpO1xuICB9XG4gfSxcbiB2YXJhcmdzOiB1bmRlZmluZWQsXG4gZ2V0OiBmdW5jdGlvbigpIHtcbiAgYXNzZXJ0KFNZU0NBTExTLnZhcmFyZ3MgIT0gdW5kZWZpbmVkKTtcbiAgU1lTQ0FMTFMudmFyYXJncyArPSA0O1xuICB2YXIgcmV0ID0gU0FGRV9IRUFQX0xPQUQoU1lTQ0FMTFMudmFyYXJncyAtIDQgfCAwLCA0LCAwKSB8IDA7XG4gIHJldHVybiByZXQ7XG4gfSxcbiBnZXRTdHI6IGZ1bmN0aW9uKHB0cikge1xuICB2YXIgcmV0ID0gVVRGOFRvU3RyaW5nKHB0cik7XG4gIHJldHVybiByZXQ7XG4gfVxufTtcblxuZnVuY3Rpb24gX19fc3lzY2FsbF9fbmV3c2VsZWN0KG5mZHMsIHJlYWRmZHMsIHdyaXRlZmRzLCBleGNlcHRmZHMsIHRpbWVvdXQpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gU09DS0ZTKCkge1xuIGVycihcIm1pc3NpbmcgZnVuY3Rpb246ICRTT0NLRlNcIik7XG4gYWJvcnQoLTEpO1xufVxuXG5mdW5jdGlvbiBGUygpIHtcbiBlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiAkRlNcIik7XG4gYWJvcnQoLTEpO1xufVxuXG5mdW5jdGlvbiBnZXRTb2NrZXRGcm9tRkQoZmQpIHtcbiB2YXIgc29ja2V0ID0gU09DS0ZTLmdldFNvY2tldChmZCk7XG4gaWYgKCFzb2NrZXQpIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpO1xuIHJldHVybiBzb2NrZXQ7XG59XG5cbmZ1bmN0aW9uIHNldEVyck5vKHZhbHVlKSB7XG4gU0FGRV9IRUFQX1NUT1JFKF9fX2Vycm5vX2xvY2F0aW9uKCkgfCAwLCB2YWx1ZSB8IDAsIDQpO1xuIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIFNvY2tldHMgPSB7XG4gQlVGRkVSX1NJWkU6IDEwMjQwLFxuIE1BWF9CVUZGRVJfU0laRTogMTA0ODU3NjAsXG4gbmV4dEZkOiAxLFxuIGZkczoge30sXG4gbmV4dHBvcnQ6IDEsXG4gbWF4cG9ydDogNjU1MzUsXG4gcGVlcjogbnVsbCxcbiBjb25uZWN0aW9uczoge30sXG4gcG9ydG1hcDoge30sXG4gbG9jYWxBZGRyOiA0MjYxNDEyODc0LFxuIGFkZHJQb29sOiBbIDMzNTU0NDQyLCA1MDMzMTY1OCwgNjcxMDg4NzQsIDgzODg2MDkwLCAxMDA2NjMzMDYsIDExNzQ0MDUyMiwgMTM0MjE3NzM4LCAxNTA5OTQ5NTQsIDE2Nzc3MjE3MCwgMTg0NTQ5Mzg2LCAyMDEzMjY2MDIsIDIxODEwMzgxOCwgMjM0ODgxMDM0IF1cbn07XG5cbmZ1bmN0aW9uIGluZXROdG9wNChhZGRyKSB7XG4gcmV0dXJuIChhZGRyICYgMjU1KSArIFwiLlwiICsgKGFkZHIgPj4gOCAmIDI1NSkgKyBcIi5cIiArIChhZGRyID4+IDE2ICYgMjU1KSArIFwiLlwiICsgKGFkZHIgPj4gMjQgJiAyNTUpO1xufVxuXG5mdW5jdGlvbiBpbmV0TnRvcDYoaW50cykge1xuIHZhciBzdHIgPSBcIlwiO1xuIHZhciB3b3JkID0gMDtcbiB2YXIgbG9uZ2VzdCA9IDA7XG4gdmFyIGxhc3R6ZXJvID0gMDtcbiB2YXIgenN0YXJ0ID0gMDtcbiB2YXIgbGVuID0gMDtcbiB2YXIgaSA9IDA7XG4gdmFyIHBhcnRzID0gWyBpbnRzWzBdICYgNjU1MzUsIGludHNbMF0gPj4gMTYsIGludHNbMV0gJiA2NTUzNSwgaW50c1sxXSA+PiAxNiwgaW50c1syXSAmIDY1NTM1LCBpbnRzWzJdID4+IDE2LCBpbnRzWzNdICYgNjU1MzUsIGludHNbM10gPj4gMTYgXTtcbiB2YXIgaGFzaXB2NCA9IHRydWU7XG4gdmFyIHY0cGFydCA9IFwiXCI7XG4gZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICBpZiAocGFydHNbaV0gIT09IDApIHtcbiAgIGhhc2lwdjQgPSBmYWxzZTtcbiAgIGJyZWFrO1xuICB9XG4gfVxuIGlmIChoYXNpcHY0KSB7XG4gIHY0cGFydCA9IGluZXROdG9wNChwYXJ0c1s2XSB8IHBhcnRzWzddIDw8IDE2KTtcbiAgaWYgKHBhcnRzWzVdID09PSAtMSkge1xuICAgc3RyID0gXCI6OmZmZmY6XCI7XG4gICBzdHIgKz0gdjRwYXJ0O1xuICAgcmV0dXJuIHN0cjtcbiAgfVxuICBpZiAocGFydHNbNV0gPT09IDApIHtcbiAgIHN0ciA9IFwiOjpcIjtcbiAgIGlmICh2NHBhcnQgPT09IFwiMC4wLjAuMFwiKSB2NHBhcnQgPSBcIlwiO1xuICAgaWYgKHY0cGFydCA9PT0gXCIwLjAuMC4xXCIpIHY0cGFydCA9IFwiMVwiO1xuICAgc3RyICs9IHY0cGFydDtcbiAgIHJldHVybiBzdHI7XG4gIH1cbiB9XG4gZm9yICh3b3JkID0gMDsgd29yZCA8IDg7IHdvcmQrKykge1xuICBpZiAocGFydHNbd29yZF0gPT09IDApIHtcbiAgIGlmICh3b3JkIC0gbGFzdHplcm8gPiAxKSB7XG4gICAgbGVuID0gMDtcbiAgIH1cbiAgIGxhc3R6ZXJvID0gd29yZDtcbiAgIGxlbisrO1xuICB9XG4gIGlmIChsZW4gPiBsb25nZXN0KSB7XG4gICBsb25nZXN0ID0gbGVuO1xuICAgenN0YXJ0ID0gd29yZCAtIGxvbmdlc3QgKyAxO1xuICB9XG4gfVxuIGZvciAod29yZCA9IDA7IHdvcmQgPCA4OyB3b3JkKyspIHtcbiAgaWYgKGxvbmdlc3QgPiAxKSB7XG4gICBpZiAocGFydHNbd29yZF0gPT09IDAgJiYgd29yZCA+PSB6c3RhcnQgJiYgd29yZCA8IHpzdGFydCArIGxvbmdlc3QpIHtcbiAgICBpZiAod29yZCA9PT0genN0YXJ0KSB7XG4gICAgIHN0ciArPSBcIjpcIjtcbiAgICAgaWYgKHpzdGFydCA9PT0gMCkgc3RyICs9IFwiOlwiO1xuICAgIH1cbiAgICBjb250aW51ZTtcbiAgIH1cbiAgfVxuICBzdHIgKz0gTnVtYmVyKF9udG9ocyhwYXJ0c1t3b3JkXSAmIDY1NTM1KSkudG9TdHJpbmcoMTYpO1xuICBzdHIgKz0gd29yZCA8IDcgPyBcIjpcIiA6IFwiXCI7XG4gfVxuIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHJlYWRTb2NrYWRkcihzYSwgc2FsZW4pIHtcbiB2YXIgZmFtaWx5ID0gU0FGRV9IRUFQX0xPQUQoc2EgfCAwLCAyLCAwKSB8IDA7XG4gdmFyIHBvcnQgPSBfbnRvaHMoU0FGRV9IRUFQX0xPQUQoc2EgKyAyIHwgMCwgMiwgMSkgPj4+IDApO1xuIHZhciBhZGRyO1xuIHN3aXRjaCAoZmFtaWx5KSB7XG4gY2FzZSAyOlxuICBpZiAoc2FsZW4gIT09IDE2KSB7XG4gICByZXR1cm4ge1xuICAgIGVycm5vOiAyOFxuICAgfTtcbiAgfVxuICBhZGRyID0gU0FGRV9IRUFQX0xPQUQoc2EgKyA0IHwgMCwgNCwgMCkgfCAwO1xuICBhZGRyID0gaW5ldE50b3A0KGFkZHIpO1xuICBicmVhaztcblxuIGNhc2UgMTA6XG4gIGlmIChzYWxlbiAhPT0gMjgpIHtcbiAgIHJldHVybiB7XG4gICAgZXJybm86IDI4XG4gICB9O1xuICB9XG4gIGFkZHIgPSBbIFNBRkVfSEVBUF9MT0FEKHNhICsgOCB8IDAsIDQsIDApIHwgMCwgU0FGRV9IRUFQX0xPQUQoc2EgKyAxMiB8IDAsIDQsIDApIHwgMCwgU0FGRV9IRUFQX0xPQUQoc2EgKyAxNiB8IDAsIDQsIDApIHwgMCwgU0FGRV9IRUFQX0xPQUQoc2EgKyAyMCB8IDAsIDQsIDApIHwgMCBdO1xuICBhZGRyID0gaW5ldE50b3A2KGFkZHIpO1xuICBicmVhaztcblxuIGRlZmF1bHQ6XG4gIHJldHVybiB7XG4gICBlcnJubzogNVxuICB9O1xuIH1cbiByZXR1cm4ge1xuICBmYW1pbHk6IGZhbWlseSxcbiAgYWRkcjogYWRkcixcbiAgcG9ydDogcG9ydFxuIH07XG59XG5cbmZ1bmN0aW9uIGluZXRQdG9uNChzdHIpIHtcbiB2YXIgYiA9IHN0ci5zcGxpdChcIi5cIik7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgdmFyIHRtcCA9IE51bWJlcihiW2ldKTtcbiAgaWYgKGlzTmFOKHRtcCkpIHJldHVybiBudWxsO1xuICBiW2ldID0gdG1wO1xuIH1cbiByZXR1cm4gKGJbMF0gfCBiWzFdIDw8IDggfCBiWzJdIDw8IDE2IHwgYlszXSA8PCAyNCkgPj4+IDA7XG59XG5cbmZ1bmN0aW9uIGpzdG9pX3Eoc3RyKSB7XG4gcmV0dXJuIHBhcnNlSW50KHN0cik7XG59XG5cbmZ1bmN0aW9uIGluZXRQdG9uNihzdHIpIHtcbiB2YXIgd29yZHM7XG4gdmFyIHcsIG9mZnNldCwgeiwgaTtcbiB2YXIgdmFsaWQ2cmVneCA9IC9eKCg/PS4qOjopKD8hLio6Oi4rOjopKDo6KT8oW1xcZEEtRl17MSw0fTooOnxcXGIpfCl7NX18KFtcXGRBLUZdezEsNH06KXs2fSkoKChbXFxkQS1GXXsxLDR9KCg/IVxcMyk6Onw6XFxifCQpKXwoPyFcXDJcXDMpKXsyfXwoKCgyWzAtNF18MVxcZHxbMS05XSk/XFxkfDI1WzAtNV0pXFwuP1xcYil7NH0pJC9pO1xuIHZhciBwYXJ0cyA9IFtdO1xuIGlmICghdmFsaWQ2cmVneC50ZXN0KHN0cikpIHtcbiAgcmV0dXJuIG51bGw7XG4gfVxuIGlmIChzdHIgPT09IFwiOjpcIikge1xuICByZXR1cm4gWyAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwIF07XG4gfVxuIGlmIChzdHIuc3RhcnRzV2l0aChcIjo6XCIpKSB7XG4gIHN0ciA9IHN0ci5yZXBsYWNlKFwiOjpcIiwgXCJaOlwiKTtcbiB9IGVsc2Uge1xuICBzdHIgPSBzdHIucmVwbGFjZShcIjo6XCIsIFwiOlo6XCIpO1xuIH1cbiBpZiAoc3RyLmluZGV4T2YoXCIuXCIpID4gMCkge1xuICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiWy5dXCIsIFwiZ1wiKSwgXCI6XCIpO1xuICB3b3JkcyA9IHN0ci5zcGxpdChcIjpcIik7XG4gIHdvcmRzW3dvcmRzLmxlbmd0aCAtIDRdID0ganN0b2lfcSh3b3Jkc1t3b3Jkcy5sZW5ndGggLSA0XSkgKyBqc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aCAtIDNdKSAqIDI1NjtcbiAgd29yZHNbd29yZHMubGVuZ3RoIC0gM10gPSBqc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aCAtIDJdKSArIGpzdG9pX3Eod29yZHNbd29yZHMubGVuZ3RoIC0gMV0pICogMjU2O1xuICB3b3JkcyA9IHdvcmRzLnNsaWNlKDAsIHdvcmRzLmxlbmd0aCAtIDIpO1xuIH0gZWxzZSB7XG4gIHdvcmRzID0gc3RyLnNwbGl0KFwiOlwiKTtcbiB9XG4gb2Zmc2V0ID0gMDtcbiB6ID0gMDtcbiBmb3IgKHcgPSAwOyB3IDwgd29yZHMubGVuZ3RoOyB3KyspIHtcbiAgaWYgKHR5cGVvZiB3b3Jkc1t3XSA9PSBcInN0cmluZ1wiKSB7XG4gICBpZiAod29yZHNbd10gPT09IFwiWlwiKSB7XG4gICAgZm9yICh6ID0gMDsgeiA8IDggLSB3b3Jkcy5sZW5ndGggKyAxOyB6KyspIHtcbiAgICAgcGFydHNbdyArIHpdID0gMDtcbiAgICB9XG4gICAgb2Zmc2V0ID0geiAtIDE7XG4gICB9IGVsc2Uge1xuICAgIHBhcnRzW3cgKyBvZmZzZXRdID0gX2h0b25zKHBhcnNlSW50KHdvcmRzW3ddLCAxNikpO1xuICAgfVxuICB9IGVsc2Uge1xuICAgcGFydHNbdyArIG9mZnNldF0gPSB3b3Jkc1t3XTtcbiAgfVxuIH1cbiByZXR1cm4gWyBwYXJ0c1sxXSA8PCAxNiB8IHBhcnRzWzBdLCBwYXJ0c1szXSA8PCAxNiB8IHBhcnRzWzJdLCBwYXJ0c1s1XSA8PCAxNiB8IHBhcnRzWzRdLCBwYXJ0c1s3XSA8PCAxNiB8IHBhcnRzWzZdIF07XG59XG5cbnZhciBETlMgPSB7XG4gYWRkcmVzc19tYXA6IHtcbiAgaWQ6IDEsXG4gIGFkZHJzOiB7fSxcbiAgbmFtZXM6IHt9XG4gfSxcbiBsb29rdXBfbmFtZTogZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcmVzID0gaW5ldFB0b240KG5hbWUpO1xuICBpZiAocmVzICE9PSBudWxsKSB7XG4gICByZXR1cm4gbmFtZTtcbiAgfVxuICByZXMgPSBpbmV0UHRvbjYobmFtZSk7XG4gIGlmIChyZXMgIT09IG51bGwpIHtcbiAgIHJldHVybiBuYW1lO1xuICB9XG4gIHZhciBhZGRyO1xuICBpZiAoRE5TLmFkZHJlc3NfbWFwLmFkZHJzW25hbWVdKSB7XG4gICBhZGRyID0gRE5TLmFkZHJlc3NfbWFwLmFkZHJzW25hbWVdO1xuICB9IGVsc2Uge1xuICAgdmFyIGlkID0gRE5TLmFkZHJlc3NfbWFwLmlkKys7XG4gICBhc3NlcnQoaWQgPCA2NTUzNSwgXCJleGNlZWRlZCBtYXggYWRkcmVzcyBtYXBwaW5ncyBvZiA2NTUzNVwiKTtcbiAgIGFkZHIgPSBcIjE3Mi4yOS5cIiArIChpZCAmIDI1NSkgKyBcIi5cIiArIChpZCAmIDY1MjgwKTtcbiAgIEROUy5hZGRyZXNzX21hcC5uYW1lc1thZGRyXSA9IG5hbWU7XG4gICBETlMuYWRkcmVzc19tYXAuYWRkcnNbbmFtZV0gPSBhZGRyO1xuICB9XG4gIHJldHVybiBhZGRyO1xuIH0sXG4gbG9va3VwX2FkZHI6IGZ1bmN0aW9uKGFkZHIpIHtcbiAgaWYgKEROUy5hZGRyZXNzX21hcC5uYW1lc1thZGRyXSkge1xuICAgcmV0dXJuIEROUy5hZGRyZXNzX21hcC5uYW1lc1thZGRyXTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbiB9XG59O1xuXG5mdW5jdGlvbiBnZXRTb2NrZXRBZGRyZXNzKGFkZHJwLCBhZGRybGVuLCBhbGxvd051bGwpIHtcbiBpZiAoYWxsb3dOdWxsICYmIGFkZHJwID09PSAwKSByZXR1cm4gbnVsbDtcbiB2YXIgaW5mbyA9IHJlYWRTb2NrYWRkcihhZGRycCwgYWRkcmxlbik7XG4gaWYgKGluZm8uZXJybm8pIHRocm93IG5ldyBGUy5FcnJub0Vycm9yKGluZm8uZXJybm8pO1xuIGluZm8uYWRkciA9IEROUy5sb29rdXBfYWRkcihpbmZvLmFkZHIpIHx8IGluZm8uYWRkcjtcbiByZXR1cm4gaW5mbztcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9iaW5kKGZkLCBhZGRyLCBhZGRybGVuKSB7XG4gdmFyIHNvY2sgPSBnZXRTb2NrZXRGcm9tRkQoZmQpO1xuIHZhciBpbmZvID0gZ2V0U29ja2V0QWRkcmVzcyhhZGRyLCBhZGRybGVuKTtcbiBzb2NrLnNvY2tfb3BzLmJpbmQoc29jaywgaW5mby5hZGRyLCBpbmZvLnBvcnQpO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2Nvbm5lY3QoZmQsIGFkZHIsIGFkZHJsZW4pIHtcbiB2YXIgc29jayA9IGdldFNvY2tldEZyb21GRChmZCk7XG4gdmFyIGluZm8gPSBnZXRTb2NrZXRBZGRyZXNzKGFkZHIsIGFkZHJsZW4pO1xuIHNvY2suc29ja19vcHMuY29ubmVjdChzb2NrLCBpbmZvLmFkZHIsIGluZm8ucG9ydCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfZmFjY2Vzc2F0KGRpcmZkLCBwYXRoLCBhbW9kZSwgZmxhZ3MpIHtcbiBwYXRoID0gU1lTQ0FMTFMuZ2V0U3RyKHBhdGgpO1xuIGFzc2VydChmbGFncyA9PT0gMCk7XG4gcGF0aCA9IFNZU0NBTExTLmNhbGN1bGF0ZUF0KGRpcmZkLCBwYXRoKTtcbiByZXR1cm4gU1lTQ0FMTFMuZG9BY2Nlc3MocGF0aCwgYW1vZGUpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2ZjbnRsNjQoZmQsIGNtZCwgdmFyYXJncykge1xuIFNZU0NBTExTLnZhcmFyZ3MgPSB2YXJhcmdzO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2ZzdGF0NjQoZmQsIGJ1Zikge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0KGZkLCBsZW5ndGhfbG93LCBsZW5ndGhfaGlnaCkge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2dldGRlbnRzNjQoZmQsIGRpcnAsIGNvdW50KSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIHplcm9NZW1vcnkoYWRkcmVzcywgc2l6ZSkge1xuIEhFQVBVOC5maWxsKDAsIGFkZHJlc3MsIGFkZHJlc3MgKyBzaXplKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVTb2NrYWRkcihzYSwgZmFtaWx5LCBhZGRyLCBwb3J0LCBhZGRybGVuKSB7XG4gc3dpdGNoIChmYW1pbHkpIHtcbiBjYXNlIDI6XG4gIGFkZHIgPSBpbmV0UHRvbjQoYWRkcik7XG4gIHplcm9NZW1vcnkoc2EsIDE2KTtcbiAgaWYgKGFkZHJsZW4pIHtcbiAgIFNBRkVfSEVBUF9TVE9SRShhZGRybGVuIHwgMCwgMTYgfCAwLCA0KTtcbiAgfVxuICBTQUZFX0hFQVBfU1RPUkUoc2EgfCAwLCBmYW1pbHkgfCAwLCAyKTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgNCB8IDAsIGFkZHIgfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgMiB8IDAsIF9odG9ucyhwb3J0KSB8IDAsIDIpO1xuICBicmVhaztcblxuIGNhc2UgMTA6XG4gIGFkZHIgPSBpbmV0UHRvbjYoYWRkcik7XG4gIHplcm9NZW1vcnkoc2EsIDI4KTtcbiAgaWYgKGFkZHJsZW4pIHtcbiAgIFNBRkVfSEVBUF9TVE9SRShhZGRybGVuIHwgMCwgMjggfCAwLCA0KTtcbiAgfVxuICBTQUZFX0hFQVBfU1RPUkUoc2EgfCAwLCBmYW1pbHkgfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgOCB8IDAsIGFkZHJbMF0gfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgMTIgfCAwLCBhZGRyWzFdIHwgMCwgNCk7XG4gIFNBRkVfSEVBUF9TVE9SRShzYSArIDE2IHwgMCwgYWRkclsyXSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyAyMCB8IDAsIGFkZHJbM10gfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgMiB8IDAsIF9odG9ucyhwb3J0KSB8IDAsIDIpO1xuICBicmVhaztcblxuIGRlZmF1bHQ6XG4gIHJldHVybiA1O1xuIH1cbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9nZXRwZWVybmFtZShmZCwgYWRkciwgYWRkcmxlbikge1xuIHZhciBzb2NrID0gZ2V0U29ja2V0RnJvbUZEKGZkKTtcbiBpZiAoIXNvY2suZGFkZHIpIHtcbiAgcmV0dXJuIC01MztcbiB9XG4gdmFyIGVycm5vID0gd3JpdGVTb2NrYWRkcihhZGRyLCBzb2NrLmZhbWlseSwgRE5TLmxvb2t1cF9uYW1lKHNvY2suZGFkZHIpLCBzb2NrLmRwb3J0LCBhZGRybGVuKTtcbiBhc3NlcnQoIWVycm5vKTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9nZXRzb2Nrb3B0KGZkLCBsZXZlbCwgb3B0bmFtZSwgb3B0dmFsLCBvcHRsZW4pIHtcbiB2YXIgc29jayA9IGdldFNvY2tldEZyb21GRChmZCk7XG4gaWYgKGxldmVsID09PSAxKSB7XG4gIGlmIChvcHRuYW1lID09PSA0KSB7XG4gICBTQUZFX0hFQVBfU1RPUkUob3B0dmFsIHwgMCwgc29jay5lcnJvciB8IDAsIDQpO1xuICAgU0FGRV9IRUFQX1NUT1JFKG9wdGxlbiB8IDAsIDQgfCAwLCA0KTtcbiAgIHNvY2suZXJyb3IgPSBudWxsO1xuICAgcmV0dXJuIDA7XG4gIH1cbiB9XG4gcmV0dXJuIC01MDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9pb2N0bChmZCwgb3AsIHZhcmFyZ3MpIHtcbiBTWVNDQUxMUy52YXJhcmdzID0gdmFyYXJncztcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9sc3RhdDY0KHBhdGgsIGJ1Zikge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX21rZGlyYXQoZGlyZmQsIHBhdGgsIG1vZGUpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9uZXdmc3RhdGF0KGRpcmZkLCBwYXRoLCBidWYsIGZsYWdzKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfb3BlbmF0KGRpcmZkLCBwYXRoLCBmbGFncywgdmFyYXJncykge1xuIFNZU0NBTExTLnZhcmFyZ3MgPSB2YXJhcmdzO1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX3JlY3Zmcm9tKGZkLCBidWYsIGxlbiwgZmxhZ3MsIGFkZHIsIGFkZHJsZW4pIHtcbiB2YXIgc29jayA9IGdldFNvY2tldEZyb21GRChmZCk7XG4gdmFyIG1zZyA9IHNvY2suc29ja19vcHMucmVjdm1zZyhzb2NrLCBsZW4pO1xuIGlmICghbXNnKSByZXR1cm4gMDtcbiBpZiAoYWRkcikge1xuICB2YXIgZXJybm8gPSB3cml0ZVNvY2thZGRyKGFkZHIsIHNvY2suZmFtaWx5LCBETlMubG9va3VwX25hbWUobXNnLmFkZHIpLCBtc2cucG9ydCwgYWRkcmxlbik7XG4gIGFzc2VydCghZXJybm8pO1xuIH1cbiBIRUFQVTguc2V0KG1zZy5idWZmZXIsIGJ1ZiA+Pj4gMCk7XG4gcmV0dXJuIG1zZy5idWZmZXIuYnl0ZUxlbmd0aDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9yZW5hbWVhdChvbGRkaXJmZCwgb2xkcGF0aCwgbmV3ZGlyZmQsIG5ld3BhdGgpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9ybWRpcihwYXRoKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfc2VuZHRvKGZkLCBtZXNzYWdlLCBsZW5ndGgsIGZsYWdzLCBhZGRyLCBhZGRyX2xlbikge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX3NvY2tldChkb21haW4sIHR5cGUsIHByb3RvY29sKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfc3RhdDY0KHBhdGgsIGJ1Zikge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX3VubGlua2F0KGRpcmZkLCBwYXRoLCBmbGFncykge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX2RsaW5pdChtYWluX2Rzb19oYW5kbGUpIHt9XG5cbnZhciBkbG9wZW5NaXNzaW5nRXJyb3IgPSBcIlRvIHVzZSBkbG9wZW4sIHlvdSBuZWVkIGVuYWJsZSBkeW5hbWljIGxpbmtpbmcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZW1zY3JpcHRlbi1jb3JlL2Vtc2NyaXB0ZW4vd2lraS9MaW5raW5nXCI7XG5cbmZ1bmN0aW9uIF9fZGxvcGVuX2pzKGZpbGVuYW1lLCBmbGFnKSB7XG4gYWJvcnQoZGxvcGVuTWlzc2luZ0Vycm9yKTtcbn1cblxuZnVuY3Rpb24gX19kbHN5bV9qcyhoYW5kbGUsIHN5bWJvbCkge1xuIGFib3J0KGRsb3Blbk1pc3NpbmdFcnJvcik7XG59XG5cbmZ1bmN0aW9uIF9fZW1zY3JpcHRlbl9kYXRlX25vdygpIHtcbiByZXR1cm4gRGF0ZS5ub3coKTtcbn1cblxudmFyIG5vd0lzTW9ub3RvbmljID0gdHJ1ZTtcblxuZnVuY3Rpb24gX19lbXNjcmlwdGVuX2dldF9ub3dfaXNfbW9ub3RvbmljKCkge1xuIHJldHVybiBub3dJc01vbm90b25pYztcbn1cblxuZnVuY3Rpb24gX2Fib3J0KCkge1xuIGFib3J0KFwibmF0aXZlIGNvZGUgY2FsbGVkIGFib3J0KClcIik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9jcmVhdGUocGF0aCwgcGF0aExlbikge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNyZWF0ZURpcmVjdG9yeShNb2R1bGUsIHBhdGgsIHBhdGhMZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfZXhpc3RzKHBhdGgsIHBhdGhMZW4pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jaGVja0RpcmVjdG9yeShNb2R1bGUsIHBhdGgsIHBhdGhMZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfbGlzdF9maWxlcyhwYXRoLCBwYXRoTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUubGlzdERpcmVjdG9yeUVudHJpZXMoTW9kdWxlLCBwYXRoLCBwYXRoTGVuKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZShwYXRoLCBwYXRoTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUucmVtb3ZlRGlyZWN0b3J5KE1vZHVsZSwgcGF0aCwgcGF0aExlbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfY2xvc2UoZmlsZUlkKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2xvc2VGaWxlKE1vZHVsZSwgZmlsZUlkKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9leGlzdHMocGF0aCwgcGF0aExlbikge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNoZWNrRmlsZShNb2R1bGUsIHBhdGgsIHBhdGhMZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWUoZmlsZUlkKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lKE1vZHVsZSwgZmlsZUlkKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlKGZyb20sIGZyb21MZW4sIHRvLCB0b0xlbikge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLm1vdmVGaWxlKE1vZHVsZSwgZnJvbSwgZnJvbUxlbiwgdG8sIHRvTGVuKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9vcGVuKGZpbGVJZCwgZmxhZ3MpIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5vcGVuRmlsZShNb2R1bGUsIGZpbGVJZCwgZmxhZ3MpO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX3JlYWQoZmlsZUlkLCBidWYsIHNpemUsIGxvY2F0aW9uKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUucmVhZEZpbGUoTW9kdWxlLCBmaWxlSWQsIGJ1Ziwgc2l6ZSwgbG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX3RydW5jYXRlKGZpbGVJZCwgbmV3U2l6ZSkge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnRydW5jYXRlRmlsZShNb2R1bGUsIGZpbGVJZCwgbmV3U2l6ZSk7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfd3JpdGUoZmlsZUlkLCBidWYsIHNpemUsIGxvY2F0aW9uKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUud3JpdGVGaWxlKE1vZHVsZSwgZmlsZUlkLCBidWYsIHNpemUsIGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZ2xvYihwYXRoLCBwYXRoTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuZ2xvYihNb2R1bGUsIHBhdGgsIHBhdGhMZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmUoZmVhdHVyZSkge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnRlc3RQbGF0Zm9ybUZlYXR1cmUoTW9kdWxlLCBmZWF0dXJlKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsKGZ1bmNJZCwgZGVzY1B0ciwgZGVzY1NpemUsIHB0cnNQdHIsIHB0cnNTaXplLCByZXNwb25zZSkge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNhbGxTY2FsYXJVREYoTW9kdWxlLCBmdW5jSWQsIGRlc2NQdHIsIGRlc2NTaXplLCBwdHJzUHRyLCBwdHJzU2l6ZSwgcmVzcG9uc2UpO1xufVxuXG5mdW5jdGlvbiBfZW1zY3JpcHRlbl9jb25zb2xlX2Vycm9yKHN0cikge1xuIGFzc2VydCh0eXBlb2Ygc3RyID09IFwibnVtYmVyXCIpO1xuIGNvbnNvbGUuZXJyb3IoVVRGOFRvU3RyaW5nKHN0cikpO1xufVxuXG5mdW5jdGlvbiBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgoKSB7XG4gcmV0dXJuIDQyOTQ5MDE3NjA7XG59XG5cbnZhciBfZW1zY3JpcHRlbl9nZXRfbm93O1xuXG5pZiAoRU5WSVJPTk1FTlRfSVNfTk9ERSkge1xuIF9lbXNjcmlwdGVuX2dldF9ub3cgPSAoKCkgPT4ge1xuICB2YXIgdCA9IHByb2Nlc3NbXCJocnRpbWVcIl0oKTtcbiAgcmV0dXJuIHRbMF0gKiAxZTMgKyB0WzFdIC8gMWU2O1xuIH0pO1xufSBlbHNlIF9lbXNjcmlwdGVuX2dldF9ub3cgPSAoKCkgPT4gcGVyZm9ybWFuY2Uubm93KCkpO1xuXG5mdW5jdGlvbiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnKGRlc3QsIHNyYywgbnVtKSB7XG4gSEVBUFU4LmNvcHlXaXRoaW4oZGVzdCA+Pj4gMCwgc3JjID4+PiAwLCBzcmMgKyBudW0gPj4+IDApO1xufVxuXG5mdW5jdGlvbiBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKHNpemUpIHtcbiB0cnkge1xuICB3YXNtTWVtb3J5Lmdyb3coc2l6ZSAtIGJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUgPj4+IDE2KTtcbiAgdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpO1xuICByZXR1cm4gMTtcbiB9IGNhdGNoIChlKSB7XG4gIGVycihcImVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXI6IEF0dGVtcHRlZCB0byBncm93IGhlYXAgZnJvbSBcIiArIGJ1ZmZlci5ieXRlTGVuZ3RoICsgXCIgYnl0ZXMgdG8gXCIgKyBzaXplICsgXCIgYnl0ZXMsIGJ1dCBnb3QgZXJyb3I6IFwiICsgZSk7XG4gfVxufVxuXG5mdW5jdGlvbiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcChyZXF1ZXN0ZWRTaXplKSB7XG4gdmFyIG9sZFNpemUgPSBIRUFQVTgubGVuZ3RoO1xuIHJlcXVlc3RlZFNpemUgPSByZXF1ZXN0ZWRTaXplID4+PiAwO1xuIGFzc2VydChyZXF1ZXN0ZWRTaXplID4gb2xkU2l6ZSk7XG4gdmFyIG1heEhlYXBTaXplID0gX2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfbWF4KCk7XG4gaWYgKHJlcXVlc3RlZFNpemUgPiBtYXhIZWFwU2l6ZSkge1xuICBlcnIoXCJDYW5ub3QgZW5sYXJnZSBtZW1vcnksIGFza2VkIHRvIGdvIHVwIHRvIFwiICsgcmVxdWVzdGVkU2l6ZSArIFwiIGJ5dGVzLCBidXQgdGhlIGxpbWl0IGlzIFwiICsgbWF4SGVhcFNpemUgKyBcIiBieXRlcyFcIik7XG4gIHJldHVybiBmYWxzZTtcbiB9XG4gbGV0IGFsaWduVXAgPSAoeCwgbXVsdGlwbGUpID0+IHggKyAobXVsdGlwbGUgLSB4ICUgbXVsdGlwbGUpICUgbXVsdGlwbGU7XG4gZm9yICh2YXIgY3V0RG93biA9IDE7IGN1dERvd24gPD0gNDsgY3V0RG93biAqPSAyKSB7XG4gIHZhciBvdmVyR3Jvd25IZWFwU2l6ZSA9IG9sZFNpemUgKiAoMSArIC4yIC8gY3V0RG93bik7XG4gIG92ZXJHcm93bkhlYXBTaXplID0gTWF0aC5taW4ob3Zlckdyb3duSGVhcFNpemUsIHJlcXVlc3RlZFNpemUgKyAxMDA2NjMyOTYpO1xuICB2YXIgbmV3U2l6ZSA9IE1hdGgubWluKG1heEhlYXBTaXplLCBhbGlnblVwKE1hdGgubWF4KHJlcXVlc3RlZFNpemUsIG92ZXJHcm93bkhlYXBTaXplKSwgNjU1MzYpKTtcbiAgdmFyIHJlcGxhY2VtZW50ID0gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihuZXdTaXplKTtcbiAgaWYgKHJlcGxhY2VtZW50KSB7XG4gICByZXR1cm4gdHJ1ZTtcbiAgfVxuIH1cbiBlcnIoXCJGYWlsZWQgdG8gZ3JvdyB0aGUgaGVhcCBmcm9tIFwiICsgb2xkU2l6ZSArIFwiIGJ5dGVzIHRvIFwiICsgbmV3U2l6ZSArIFwiIGJ5dGVzLCBub3QgZW5vdWdoIG1lbW9yeSFcIik7XG4gcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgRU5WID0ge307XG5cbmZ1bmN0aW9uIGdldEV4ZWN1dGFibGVOYW1lKCkge1xuIHJldHVybiB0aGlzUHJvZ3JhbSB8fCBcIi4vdGhpcy5wcm9ncmFtXCI7XG59XG5cbmZ1bmN0aW9uIGdldEVudlN0cmluZ3MoKSB7XG4gaWYgKCFnZXRFbnZTdHJpbmdzLnN0cmluZ3MpIHtcbiAgdmFyIGxhbmcgPSAodHlwZW9mIG5hdmlnYXRvciA9PSBcIm9iamVjdFwiICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBcIkNcIikucmVwbGFjZShcIi1cIiwgXCJfXCIpICsgXCIuVVRGLThcIjtcbiAgdmFyIGVudiA9IHtcbiAgIFwiVVNFUlwiOiBcIndlYl91c2VyXCIsXG4gICBcIkxPR05BTUVcIjogXCJ3ZWJfdXNlclwiLFxuICAgXCJQQVRIXCI6IFwiL1wiLFxuICAgXCJQV0RcIjogXCIvXCIsXG4gICBcIkhPTUVcIjogXCIvaG9tZS93ZWJfdXNlclwiLFxuICAgXCJMQU5HXCI6IGxhbmcsXG4gICBcIl9cIjogZ2V0RXhlY3V0YWJsZU5hbWUoKVxuICB9O1xuICBmb3IgKHZhciB4IGluIEVOVikge1xuICAgaWYgKEVOVlt4XSA9PT0gdW5kZWZpbmVkKSBkZWxldGUgZW52W3hdOyBlbHNlIGVudlt4XSA9IEVOVlt4XTtcbiAgfVxuICB2YXIgc3RyaW5ncyA9IFtdO1xuICBmb3IgKHZhciB4IGluIGVudikge1xuICAgc3RyaW5ncy5wdXNoKHggKyBcIj1cIiArIGVudlt4XSk7XG4gIH1cbiAgZ2V0RW52U3RyaW5ncy5zdHJpbmdzID0gc3RyaW5ncztcbiB9XG4gcmV0dXJuIGdldEVudlN0cmluZ3Muc3RyaW5ncztcbn1cblxuZnVuY3Rpb24gX2Vudmlyb25fZ2V0KF9fZW52aXJvbiwgZW52aXJvbl9idWYpIHtcbiB2YXIgYnVmU2l6ZSA9IDA7XG4gZ2V0RW52U3RyaW5ncygpLmZvckVhY2goZnVuY3Rpb24oc3RyaW5nLCBpKSB7XG4gIHZhciBwdHIgPSBlbnZpcm9uX2J1ZiArIGJ1ZlNpemU7XG4gIFNBRkVfSEVBUF9TVE9SRShfX2Vudmlyb24gKyBpICogNCB8IDAsIHB0ciB8IDAsIDQpO1xuICB3cml0ZUFzY2lpVG9NZW1vcnkoc3RyaW5nLCBwdHIpO1xuICBidWZTaXplICs9IHN0cmluZy5sZW5ndGggKyAxO1xuIH0pO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfZW52aXJvbl9zaXplc19nZXQocGVudmlyb25fY291bnQsIHBlbnZpcm9uX2J1Zl9zaXplKSB7XG4gdmFyIHN0cmluZ3MgPSBnZXRFbnZTdHJpbmdzKCk7XG4gU0FGRV9IRUFQX1NUT1JFKHBlbnZpcm9uX2NvdW50IHwgMCwgc3RyaW5ncy5sZW5ndGggfCAwLCA0KTtcbiB2YXIgYnVmU2l6ZSA9IDA7XG4gc3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZykge1xuICBidWZTaXplICs9IHN0cmluZy5sZW5ndGggKyAxO1xuIH0pO1xuIFNBRkVfSEVBUF9TVE9SRShwZW52aXJvbl9idWZfc2l6ZSB8IDAsIGJ1ZlNpemUgfCAwLCA0KTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9mZF9wcmVhZChmZCwgaW92LCBpb3ZjbnQsIG9mZnNldF9sb3csIG9mZnNldF9oaWdoLCBwbnVtKSB7XG4gYXNzZXJ0KCFvZmZzZXRfaGlnaCwgXCJvZmZzZXRzIG92ZXIgMl4zMiBub3QgeWV0IHN1cHBvcnRlZFwiKTtcbiB2YXIgc3RyZWFtID0gU1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtcbiB2YXIgbnVtID0gU1lTQ0FMTFMuZG9SZWFkdihzdHJlYW0sIGlvdiwgaW92Y250LCBvZmZzZXRfbG93KTtcbiBTQUZFX0hFQVBfU1RPUkUocG51bSB8IDAsIG51bSB8IDAsIDQpO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfZmRfcHdyaXRlKGZkLCBpb3YsIGlvdmNudCwgb2Zmc2V0X2xvdywgb2Zmc2V0X2hpZ2gsIHBudW0pIHtcbiB2YXIgc3RyZWFtID0gU1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtcbiBhc3NlcnQoIW9mZnNldF9oaWdoLCBcIm9mZnNldHMgb3ZlciAyXjMyIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO1xuIHZhciBudW0gPSBTWVNDQUxMUy5kb1dyaXRldihzdHJlYW0sIGlvdiwgaW92Y250LCBvZmZzZXRfbG93KTtcbiBTQUZFX0hFQVBfU1RPUkUocG51bSB8IDAsIG51bSB8IDAsIDQpO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfZmRfcmVhZChmZCwgaW92LCBpb3ZjbnQsIHBudW0pIHtcbiB2YXIgc3RyZWFtID0gU1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtcbiB2YXIgbnVtID0gU1lTQ0FMTFMuZG9SZWFkdihzdHJlYW0sIGlvdiwgaW92Y250KTtcbiBTQUZFX0hFQVBfU1RPUkUocG51bSB8IDAsIG51bSB8IDAsIDQpO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfZmRfc2VlayhmZCwgb2Zmc2V0X2xvdywgb2Zmc2V0X2hpZ2gsIHdoZW5jZSwgbmV3T2Zmc2V0KSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9mZF9zeW5jKGZkKSB7XG4gdmFyIHN0cmVhbSA9IFNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7XG4gaWYgKHN0cmVhbS5zdHJlYW1fb3BzICYmIHN0cmVhbS5zdHJlYW1fb3BzLmZzeW5jKSB7XG4gIHJldHVybiAtc3RyZWFtLnN0cmVhbV9vcHMuZnN5bmMoc3RyZWFtKTtcbiB9XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGZsdXNoX05PX0ZJTEVTWVNURU0oKSB7XG4gX19fc3RkaW9fZXhpdCgpO1xuIHZhciBidWZmZXJzID0gU1lTQ0FMTFMuYnVmZmVycztcbiBpZiAoYnVmZmVyc1sxXS5sZW5ndGgpIFNZU0NBTExTLnByaW50Q2hhcigxLCAxMCk7XG4gaWYgKGJ1ZmZlcnNbMl0ubGVuZ3RoKSBTWVNDQUxMUy5wcmludENoYXIoMiwgMTApO1xufVxuXG5mdW5jdGlvbiBfZmRfd3JpdGUoZmQsIGlvdiwgaW92Y250LCBwbnVtKSB7XG4gdmFyIG51bSA9IDA7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBpb3ZjbnQ7IGkrKykge1xuICB2YXIgcHRyID0gU0FGRV9IRUFQX0xPQUQoaW92IHwgMCwgNCwgMCkgfCAwO1xuICB2YXIgbGVuID0gU0FGRV9IRUFQX0xPQUQoaW92ICsgNCB8IDAsIDQsIDApIHwgMDtcbiAgaW92ICs9IDg7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgIFNZU0NBTExTLnByaW50Q2hhcihmZCwgU0FGRV9IRUFQX0xPQUQocHRyICsgaiA+Pj4gMCwgMSwgMSkpO1xuICB9XG4gIG51bSArPSBsZW47XG4gfVxuIFNBRkVfSEVBUF9TVE9SRShwbnVtIHwgMCwgbnVtIHwgMCwgNCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9nZXRhZGRyaW5mbyhub2RlLCBzZXJ2aWNlLCBoaW50LCBvdXQpIHtcbiB2YXIgYWRkcnMgPSBbXTtcbiB2YXIgY2Fub24gPSBudWxsO1xuIHZhciBhZGRyID0gMDtcbiB2YXIgcG9ydCA9IDA7XG4gdmFyIGZsYWdzID0gMDtcbiB2YXIgZmFtaWx5ID0gMDtcbiB2YXIgdHlwZSA9IDA7XG4gdmFyIHByb3RvID0gMDtcbiB2YXIgYWksIGxhc3Q7XG4gZnVuY3Rpb24gYWxsb2NhZGRyaW5mbyhmYW1pbHksIHR5cGUsIHByb3RvLCBjYW5vbiwgYWRkciwgcG9ydCkge1xuICB2YXIgc2EsIHNhbGVuLCBhaTtcbiAgdmFyIGVycm5vO1xuICBzYWxlbiA9IGZhbWlseSA9PT0gMTAgPyAyOCA6IDE2O1xuICBhZGRyID0gZmFtaWx5ID09PSAxMCA/IGluZXROdG9wNihhZGRyKSA6IGluZXROdG9wNChhZGRyKTtcbiAgc2EgPSBfbWFsbG9jKHNhbGVuKTtcbiAgZXJybm8gPSB3cml0ZVNvY2thZGRyKHNhLCBmYW1pbHksIGFkZHIsIHBvcnQpO1xuICBhc3NlcnQoIWVycm5vKTtcbiAgYWkgPSBfbWFsbG9jKDMyKTtcbiAgU0FGRV9IRUFQX1NUT1JFKGFpICsgNCB8IDAsIGZhbWlseSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoYWkgKyA4IHwgMCwgdHlwZSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoYWkgKyAxMiB8IDAsIHByb3RvIHwgMCwgNCk7XG4gIFNBRkVfSEVBUF9TVE9SRShhaSArIDI0IHwgMCwgY2Fub24gfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKGFpICsgMjAgfCAwLCBzYSB8IDAsIDQpO1xuICBpZiAoZmFtaWx5ID09PSAxMCkge1xuICAgU0FGRV9IRUFQX1NUT1JFKGFpICsgMTYgfCAwLCAyOCB8IDAsIDQpO1xuICB9IGVsc2Uge1xuICAgU0FGRV9IRUFQX1NUT1JFKGFpICsgMTYgfCAwLCAxNiB8IDAsIDQpO1xuICB9XG4gIFNBRkVfSEVBUF9TVE9SRShhaSArIDI4IHwgMCwgMCB8IDAsIDQpO1xuICByZXR1cm4gYWk7XG4gfVxuIGlmIChoaW50KSB7XG4gIGZsYWdzID0gU0FGRV9IRUFQX0xPQUQoaGludCB8IDAsIDQsIDApIHwgMDtcbiAgZmFtaWx5ID0gU0FGRV9IRUFQX0xPQUQoaGludCArIDQgfCAwLCA0LCAwKSB8IDA7XG4gIHR5cGUgPSBTQUZFX0hFQVBfTE9BRChoaW50ICsgOCB8IDAsIDQsIDApIHwgMDtcbiAgcHJvdG8gPSBTQUZFX0hFQVBfTE9BRChoaW50ICsgMTIgfCAwLCA0LCAwKSB8IDA7XG4gfVxuIGlmICh0eXBlICYmICFwcm90bykge1xuICBwcm90byA9IHR5cGUgPT09IDIgPyAxNyA6IDY7XG4gfVxuIGlmICghdHlwZSAmJiBwcm90bykge1xuICB0eXBlID0gcHJvdG8gPT09IDE3ID8gMiA6IDE7XG4gfVxuIGlmIChwcm90byA9PT0gMCkge1xuICBwcm90byA9IDY7XG4gfVxuIGlmICh0eXBlID09PSAwKSB7XG4gIHR5cGUgPSAxO1xuIH1cbiBpZiAoIW5vZGUgJiYgIXNlcnZpY2UpIHtcbiAgcmV0dXJuIC0yO1xuIH1cbiBpZiAoZmxhZ3MgJiB+KDEgfCAyIHwgNCB8IDEwMjQgfCA4IHwgMTYgfCAzMikpIHtcbiAgcmV0dXJuIC0xO1xuIH1cbiBpZiAoaGludCAhPT0gMCAmJiAoU0FGRV9IRUFQX0xPQUQoaGludCB8IDAsIDQsIDApIHwgMCkgJiAyICYmICFub2RlKSB7XG4gIHJldHVybiAtMTtcbiB9XG4gaWYgKGZsYWdzICYgMzIpIHtcbiAgcmV0dXJuIC0yO1xuIH1cbiBpZiAodHlwZSAhPT0gMCAmJiB0eXBlICE9PSAxICYmIHR5cGUgIT09IDIpIHtcbiAgcmV0dXJuIC03O1xuIH1cbiBpZiAoZmFtaWx5ICE9PSAwICYmIGZhbWlseSAhPT0gMiAmJiBmYW1pbHkgIT09IDEwKSB7XG4gIHJldHVybiAtNjtcbiB9XG4gaWYgKHNlcnZpY2UpIHtcbiAgc2VydmljZSA9IFVURjhUb1N0cmluZyhzZXJ2aWNlKTtcbiAgcG9ydCA9IHBhcnNlSW50KHNlcnZpY2UsIDEwKTtcbiAgaWYgKGlzTmFOKHBvcnQpKSB7XG4gICBpZiAoZmxhZ3MgJiAxMDI0KSB7XG4gICAgcmV0dXJuIC0yO1xuICAgfVxuICAgcmV0dXJuIC04O1xuICB9XG4gfVxuIGlmICghbm9kZSkge1xuICBpZiAoZmFtaWx5ID09PSAwKSB7XG4gICBmYW1pbHkgPSAyO1xuICB9XG4gIGlmICgoZmxhZ3MgJiAxKSA9PT0gMCkge1xuICAgaWYgKGZhbWlseSA9PT0gMikge1xuICAgIGFkZHIgPSBfaHRvbmwoMjEzMDcwNjQzMyk7XG4gICB9IGVsc2Uge1xuICAgIGFkZHIgPSBbIDAsIDAsIDAsIDEgXTtcbiAgIH1cbiAgfVxuICBhaSA9IGFsbG9jYWRkcmluZm8oZmFtaWx5LCB0eXBlLCBwcm90bywgbnVsbCwgYWRkciwgcG9ydCk7XG4gIFNBRkVfSEVBUF9TVE9SRShvdXQgfCAwLCBhaSB8IDAsIDQpO1xuICByZXR1cm4gMDtcbiB9XG4gbm9kZSA9IFVURjhUb1N0cmluZyhub2RlKTtcbiBhZGRyID0gaW5ldFB0b240KG5vZGUpO1xuIGlmIChhZGRyICE9PSBudWxsKSB7XG4gIGlmIChmYW1pbHkgPT09IDAgfHwgZmFtaWx5ID09PSAyKSB7XG4gICBmYW1pbHkgPSAyO1xuICB9IGVsc2UgaWYgKGZhbWlseSA9PT0gMTAgJiYgZmxhZ3MgJiA4KSB7XG4gICBhZGRyID0gWyAwLCAwLCBfaHRvbmwoNjU1MzUpLCBhZGRyIF07XG4gICBmYW1pbHkgPSAxMDtcbiAgfSBlbHNlIHtcbiAgIHJldHVybiAtMjtcbiAgfVxuIH0gZWxzZSB7XG4gIGFkZHIgPSBpbmV0UHRvbjYobm9kZSk7XG4gIGlmIChhZGRyICE9PSBudWxsKSB7XG4gICBpZiAoZmFtaWx5ID09PSAwIHx8IGZhbWlseSA9PT0gMTApIHtcbiAgICBmYW1pbHkgPSAxMDtcbiAgIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0yO1xuICAgfVxuICB9XG4gfVxuIGlmIChhZGRyICE9IG51bGwpIHtcbiAgYWkgPSBhbGxvY2FkZHJpbmZvKGZhbWlseSwgdHlwZSwgcHJvdG8sIG5vZGUsIGFkZHIsIHBvcnQpO1xuICBTQUZFX0hFQVBfU1RPUkUob3V0IHwgMCwgYWkgfCAwLCA0KTtcbiAgcmV0dXJuIDA7XG4gfVxuIGlmIChmbGFncyAmIDQpIHtcbiAgcmV0dXJuIC0yO1xuIH1cbiBub2RlID0gRE5TLmxvb2t1cF9uYW1lKG5vZGUpO1xuIGFkZHIgPSBpbmV0UHRvbjQobm9kZSk7XG4gaWYgKGZhbWlseSA9PT0gMCkge1xuICBmYW1pbHkgPSAyO1xuIH0gZWxzZSBpZiAoZmFtaWx5ID09PSAxMCkge1xuICBhZGRyID0gWyAwLCAwLCBfaHRvbmwoNjU1MzUpLCBhZGRyIF07XG4gfVxuIGFpID0gYWxsb2NhZGRyaW5mbyhmYW1pbHksIHR5cGUsIHByb3RvLCBudWxsLCBhZGRyLCBwb3J0KTtcbiBTQUZFX0hFQVBfU1RPUkUob3V0IHwgMCwgYWkgfCAwLCA0KTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZG9tRGV2aWNlKCkge1xuIGlmICh0eXBlb2YgY3J5cHRvID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGNyeXB0b1tcImdldFJhbmRvbVZhbHVlc1wiXSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgdmFyIHJhbmRvbUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJhbmRvbUJ1ZmZlcik7XG4gICByZXR1cm4gcmFuZG9tQnVmZmVyWzBdO1xuICB9O1xuIH0gZWxzZSBpZiAoRU5WSVJPTk1FTlRfSVNfTk9ERSkge1xuICB0cnkge1xuICAgdmFyIGNyeXB0b19tb2R1bGUgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjcnlwdG9fbW9kdWxlW1wicmFuZG9tQnl0ZXNcIl0oMSlbMF07XG4gICB9O1xuICB9IGNhdGNoIChlKSB7fVxuIH1cbiByZXR1cm4gZnVuY3Rpb24oKSB7XG4gIGFib3J0KFwibm8gY3J5cHRvZ3JhcGhpYyBzdXBwb3J0IGZvdW5kIGZvciByYW5kb21EZXZpY2UuIGNvbnNpZGVyIHBvbHlmaWxsaW5nIGl0IGlmIHlvdSB3YW50IHRvIHVzZSBzb21ldGhpbmcgaW5zZWN1cmUgbGlrZSBNYXRoLnJhbmRvbSgpLCBlLmcuIHB1dCB0aGlzIGluIGEgLS1wcmUtanM6IHZhciBjcnlwdG8gPSB7IGdldFJhbmRvbVZhbHVlczogZnVuY3Rpb24oYXJyYXkpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgYXJyYXlbaV0gPSAoTWF0aC5yYW5kb20oKSoyNTYpfDAgfSB9O1wiKTtcbiB9O1xufVxuXG5mdW5jdGlvbiBfZ2V0ZW50cm9weShidWZmZXIsIHNpemUpIHtcbiBpZiAoIV9nZXRlbnRyb3B5LnJhbmRvbURldmljZSkge1xuICBfZ2V0ZW50cm9weS5yYW5kb21EZXZpY2UgPSBnZXRSYW5kb21EZXZpY2UoKTtcbiB9XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgU0FGRV9IRUFQX1NUT1JFKGJ1ZmZlciArIGkgfCAwLCBfZ2V0ZW50cm9weS5yYW5kb21EZXZpY2UoKSB8IDAsIDEpO1xuIH1cbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX2dldG5hbWVpbmZvKHNhLCBzYWxlbiwgbm9kZSwgbm9kZWxlbiwgc2Vydiwgc2VydmxlbiwgZmxhZ3MpIHtcbiB2YXIgaW5mbyA9IHJlYWRTb2NrYWRkcihzYSwgc2FsZW4pO1xuIGlmIChpbmZvLmVycm5vKSB7XG4gIHJldHVybiAtNjtcbiB9XG4gdmFyIHBvcnQgPSBpbmZvLnBvcnQ7XG4gdmFyIGFkZHIgPSBpbmZvLmFkZHI7XG4gdmFyIG92ZXJmbG93ZWQgPSBmYWxzZTtcbiBpZiAobm9kZSAmJiBub2RlbGVuKSB7XG4gIHZhciBsb29rdXA7XG4gIGlmIChmbGFncyAmIDEgfHwgIShsb29rdXAgPSBETlMubG9va3VwX2FkZHIoYWRkcikpKSB7XG4gICBpZiAoZmxhZ3MgJiA4KSB7XG4gICAgcmV0dXJuIC0yO1xuICAgfVxuICB9IGVsc2Uge1xuICAgYWRkciA9IGxvb2t1cDtcbiAgfVxuICB2YXIgbnVtQnl0ZXNXcml0dGVuRXhjbE51bGwgPSBzdHJpbmdUb1VURjgoYWRkciwgbm9kZSwgbm9kZWxlbik7XG4gIGlmIChudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbCArIDEgPj0gbm9kZWxlbikge1xuICAgb3ZlcmZsb3dlZCA9IHRydWU7XG4gIH1cbiB9XG4gaWYgKHNlcnYgJiYgc2Vydmxlbikge1xuICBwb3J0ID0gXCJcIiArIHBvcnQ7XG4gIHZhciBudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbCA9IHN0cmluZ1RvVVRGOChwb3J0LCBzZXJ2LCBzZXJ2bGVuKTtcbiAgaWYgKG51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsICsgMSA+PSBzZXJ2bGVuKSB7XG4gICBvdmVyZmxvd2VkID0gdHJ1ZTtcbiAgfVxuIH1cbiBpZiAob3ZlcmZsb3dlZCkge1xuICByZXR1cm4gLTEyO1xuIH1cbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX3NldFRlbXBSZXQwKHZhbCkge1xuIHNldFRlbXBSZXQwKHZhbCk7XG59XG5cbmZ1bmN0aW9uIF9faXNMZWFwWWVhcih5ZWFyKSB7XG4gcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuXG5mdW5jdGlvbiBfX2FycmF5U3VtKGFycmF5LCBpbmRleCkge1xuIHZhciBzdW0gPSAwO1xuIGZvciAodmFyIGkgPSAwOyBpIDw9IGluZGV4OyBzdW0gKz0gYXJyYXlbaSsrXSkge31cbiByZXR1cm4gc3VtO1xufVxuXG52YXIgX19NT05USF9EQVlTX0xFQVAgPSBbIDMxLCAyOSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzEgXTtcblxudmFyIF9fTU9OVEhfREFZU19SRUdVTEFSID0gWyAzMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxIF07XG5cbmZ1bmN0aW9uIF9fYWRkRGF5cyhkYXRlLCBkYXlzKSB7XG4gdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gd2hpbGUgKGRheXMgPiAwKSB7XG4gIHZhciBsZWFwID0gX19pc0xlYXBZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHZhciBjdXJyZW50TW9udGggPSBuZXdEYXRlLmdldE1vbnRoKCk7XG4gIHZhciBkYXlzSW5DdXJyZW50TW9udGggPSAobGVhcCA/IF9fTU9OVEhfREFZU19MRUFQIDogX19NT05USF9EQVlTX1JFR1VMQVIpW2N1cnJlbnRNb250aF07XG4gIGlmIChkYXlzID4gZGF5c0luQ3VycmVudE1vbnRoIC0gbmV3RGF0ZS5nZXREYXRlKCkpIHtcbiAgIGRheXMgLT0gZGF5c0luQ3VycmVudE1vbnRoIC0gbmV3RGF0ZS5nZXREYXRlKCkgKyAxO1xuICAgbmV3RGF0ZS5zZXREYXRlKDEpO1xuICAgaWYgKGN1cnJlbnRNb250aCA8IDExKSB7XG4gICAgbmV3RGF0ZS5zZXRNb250aChjdXJyZW50TW9udGggKyAxKTtcbiAgIH0gZWxzZSB7XG4gICAgbmV3RGF0ZS5zZXRNb250aCgwKTtcbiAgICBuZXdEYXRlLnNldEZ1bGxZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSArIDEpO1xuICAgfVxuICB9IGVsc2Uge1xuICAgbmV3RGF0ZS5zZXREYXRlKG5ld0RhdGUuZ2V0RGF0ZSgpICsgZGF5cyk7XG4gICByZXR1cm4gbmV3RGF0ZTtcbiAgfVxuIH1cbiByZXR1cm4gbmV3RGF0ZTtcbn1cblxuZnVuY3Rpb24gX3N0cmZ0aW1lKHMsIG1heHNpemUsIGZvcm1hdCwgdG0pIHtcbiB2YXIgdG1fem9uZSA9IFNBRkVfSEVBUF9MT0FEKHRtICsgNDAgfCAwLCA0LCAwKSB8IDA7XG4gdmFyIGRhdGUgPSB7XG4gIHRtX3NlYzogU0FGRV9IRUFQX0xPQUQodG0gfCAwLCA0LCAwKSB8IDAsXG4gIHRtX21pbjogU0FGRV9IRUFQX0xPQUQodG0gKyA0IHwgMCwgNCwgMCkgfCAwLFxuICB0bV9ob3VyOiBTQUZFX0hFQVBfTE9BRCh0bSArIDggfCAwLCA0LCAwKSB8IDAsXG4gIHRtX21kYXk6IFNBRkVfSEVBUF9MT0FEKHRtICsgMTIgfCAwLCA0LCAwKSB8IDAsXG4gIHRtX21vbjogU0FGRV9IRUFQX0xPQUQodG0gKyAxNiB8IDAsIDQsIDApIHwgMCxcbiAgdG1feWVhcjogU0FGRV9IRUFQX0xPQUQodG0gKyAyMCB8IDAsIDQsIDApIHwgMCxcbiAgdG1fd2RheTogU0FGRV9IRUFQX0xPQUQodG0gKyAyNCB8IDAsIDQsIDApIHwgMCxcbiAgdG1feWRheTogU0FGRV9IRUFQX0xPQUQodG0gKyAyOCB8IDAsIDQsIDApIHwgMCxcbiAgdG1faXNkc3Q6IFNBRkVfSEVBUF9MT0FEKHRtICsgMzIgfCAwLCA0LCAwKSB8IDAsXG4gIHRtX2dtdG9mZjogU0FGRV9IRUFQX0xPQUQodG0gKyAzNiB8IDAsIDQsIDApIHwgMCxcbiAgdG1fem9uZTogdG1fem9uZSA/IFVURjhUb1N0cmluZyh0bV96b25lKSA6IFwiXCJcbiB9O1xuIHZhciBwYXR0ZXJuID0gVVRGOFRvU3RyaW5nKGZvcm1hdCk7XG4gdmFyIEVYUEFOU0lPTl9SVUxFU18xID0ge1xuICBcIiVjXCI6IFwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcbiAgXCIlRFwiOiBcIiVtLyVkLyV5XCIsXG4gIFwiJUZcIjogXCIlWS0lbS0lZFwiLFxuICBcIiVoXCI6IFwiJWJcIixcbiAgXCIlclwiOiBcIiVJOiVNOiVTICVwXCIsXG4gIFwiJVJcIjogXCIlSDolTVwiLFxuICBcIiVUXCI6IFwiJUg6JU06JVNcIixcbiAgXCIleFwiOiBcIiVtLyVkLyV5XCIsXG4gIFwiJVhcIjogXCIlSDolTTolU1wiLFxuICBcIiVFY1wiOiBcIiVjXCIsXG4gIFwiJUVDXCI6IFwiJUNcIixcbiAgXCIlRXhcIjogXCIlbS8lZC8leVwiLFxuICBcIiVFWFwiOiBcIiVIOiVNOiVTXCIsXG4gIFwiJUV5XCI6IFwiJXlcIixcbiAgXCIlRVlcIjogXCIlWVwiLFxuICBcIiVPZFwiOiBcIiVkXCIsXG4gIFwiJU9lXCI6IFwiJWVcIixcbiAgXCIlT0hcIjogXCIlSFwiLFxuICBcIiVPSVwiOiBcIiVJXCIsXG4gIFwiJU9tXCI6IFwiJW1cIixcbiAgXCIlT01cIjogXCIlTVwiLFxuICBcIiVPU1wiOiBcIiVTXCIsXG4gIFwiJU91XCI6IFwiJXVcIixcbiAgXCIlT1VcIjogXCIlVVwiLFxuICBcIiVPVlwiOiBcIiVWXCIsXG4gIFwiJU93XCI6IFwiJXdcIixcbiAgXCIlT1dcIjogXCIlV1wiLFxuICBcIiVPeVwiOiBcIiV5XCJcbiB9O1xuIGZvciAodmFyIHJ1bGUgaW4gRVhQQU5TSU9OX1JVTEVTXzEpIHtcbiAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShuZXcgUmVnRXhwKHJ1bGUsIFwiZ1wiKSwgRVhQQU5TSU9OX1JVTEVTXzFbcnVsZV0pO1xuIH1cbiB2YXIgV0VFS0RBWVMgPSBbIFwiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiBdO1xuIHZhciBNT05USFMgPSBbIFwiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIiBdO1xuIGZ1bmN0aW9uIGxlYWRpbmdTb21ldGhpbmcodmFsdWUsIGRpZ2l0cywgY2hhcmFjdGVyKSB7XG4gIHZhciBzdHIgPSB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZSB8fCBcIlwiO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA8IGRpZ2l0cykge1xuICAgc3RyID0gY2hhcmFjdGVyWzBdICsgc3RyO1xuICB9XG4gIHJldHVybiBzdHI7XG4gfVxuIGZ1bmN0aW9uIGxlYWRpbmdOdWxscyh2YWx1ZSwgZGlnaXRzKSB7XG4gIHJldHVybiBsZWFkaW5nU29tZXRoaW5nKHZhbHVlLCBkaWdpdHMsIFwiMFwiKTtcbiB9XG4gZnVuY3Rpb24gY29tcGFyZUJ5RGF5KGRhdGUxLCBkYXRlMikge1xuICBmdW5jdGlvbiBzZ24odmFsdWUpIHtcbiAgIHJldHVybiB2YWx1ZSA8IDAgPyAtMSA6IHZhbHVlID4gMCA/IDEgOiAwO1xuICB9XG4gIHZhciBjb21wYXJlO1xuICBpZiAoKGNvbXBhcmUgPSBzZ24oZGF0ZTEuZ2V0RnVsbFllYXIoKSAtIGRhdGUyLmdldEZ1bGxZZWFyKCkpKSA9PT0gMCkge1xuICAgaWYgKChjb21wYXJlID0gc2duKGRhdGUxLmdldE1vbnRoKCkgLSBkYXRlMi5nZXRNb250aCgpKSkgPT09IDApIHtcbiAgICBjb21wYXJlID0gc2duKGRhdGUxLmdldERhdGUoKSAtIGRhdGUyLmdldERhdGUoKSk7XG4gICB9XG4gIH1cbiAgcmV0dXJuIGNvbXBhcmU7XG4gfVxuIGZ1bmN0aW9uIGdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGgpIHtcbiAgc3dpdGNoIChqYW5Gb3VydGguZ2V0RGF5KCkpIHtcbiAgY2FzZSAwOlxuICAgcmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDI5KTtcblxuICBjYXNlIDE6XG4gICByZXR1cm4gamFuRm91cnRoO1xuXG4gIGNhc2UgMjpcbiAgIHJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwgMCwgMyk7XG5cbiAgY2FzZSAzOlxuICAgcmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLCAwLCAyKTtcblxuICBjYXNlIDQ6XG4gICByZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuXG4gIGNhc2UgNTpcbiAgIHJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG5cbiAgY2FzZSA2OlxuICAgcmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMwKTtcbiAgfVxuIH1cbiBmdW5jdGlvbiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpIHtcbiAgdmFyIHRoaXNEYXRlID0gX19hZGREYXlzKG5ldyBEYXRlKGRhdGUudG1feWVhciArIDE5MDAsIDAsIDEpLCBkYXRlLnRtX3lkYXkpO1xuICB2YXIgamFuRm91cnRoVGhpc1llYXIgPSBuZXcgRGF0ZSh0aGlzRGF0ZS5nZXRGdWxsWWVhcigpLCAwLCA0KTtcbiAgdmFyIGphbkZvdXJ0aE5leHRZZWFyID0gbmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICB2YXIgZmlyc3RXZWVrU3RhcnRUaGlzWWVhciA9IGdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGhUaGlzWWVhcik7XG4gIHZhciBmaXJzdFdlZWtTdGFydE5leHRZZWFyID0gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aE5leHRZZWFyKTtcbiAgaWYgKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydFRoaXNZZWFyLCB0aGlzRGF0ZSkgPD0gMCkge1xuICAgaWYgKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydE5leHRZZWFyLCB0aGlzRGF0ZSkgPD0gMCkge1xuICAgIHJldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpICsgMTtcbiAgIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICB9XG4gIH0gZWxzZSB7XG4gICByZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKSAtIDE7XG4gIH1cbiB9XG4gdmFyIEVYUEFOU0lPTl9SVUxFU18yID0ge1xuICBcIiVhXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBXRUVLREFZU1tkYXRlLnRtX3dkYXldLnN1YnN0cmluZygwLCAzKTtcbiAgfSxcbiAgXCIlQVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XTtcbiAgfSxcbiAgXCIlYlwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gTU9OVEhTW2RhdGUudG1fbW9uXS5zdWJzdHJpbmcoMCwgMyk7XG4gIH0sXG4gIFwiJUJcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl07XG4gIH0sXG4gIFwiJUNcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgdmFyIHllYXIgPSBkYXRlLnRtX3llYXIgKyAxOTAwO1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyh5ZWFyIC8gMTAwIHwgMCwgMik7XG4gIH0sXG4gIFwiJWRcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21kYXksIDIpO1xuICB9LFxuICBcIiVlXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBsZWFkaW5nU29tZXRoaW5nKGRhdGUudG1fbWRheSwgMiwgXCIgXCIpO1xuICB9LFxuICBcIiVnXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpO1xuICB9LFxuICBcIiVHXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpO1xuICB9LFxuICBcIiVIXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9ob3VyLCAyKTtcbiAgfSxcbiAgXCIlSVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgdHdlbHZlSG91ciA9IGRhdGUudG1faG91cjtcbiAgIGlmICh0d2VsdmVIb3VyID09IDApIHR3ZWx2ZUhvdXIgPSAxMjsgZWxzZSBpZiAodHdlbHZlSG91ciA+IDEyKSB0d2VsdmVIb3VyIC09IDEyO1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyh0d2VsdmVIb3VyLCAyKTtcbiAgfSxcbiAgXCIlalwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWRheSArIF9fYXJyYXlTdW0oX19pc0xlYXBZZWFyKGRhdGUudG1feWVhciArIDE5MDApID8gX19NT05USF9EQVlTX0xFQVAgOiBfX01PTlRIX0RBWVNfUkVHVUxBUiwgZGF0ZS50bV9tb24gLSAxKSwgMyk7XG4gIH0sXG4gIFwiJW1cIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21vbiArIDEsIDIpO1xuICB9LFxuICBcIiVNXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9taW4sIDIpO1xuICB9LFxuICBcIiVuXCI6IGZ1bmN0aW9uKCkge1xuICAgcmV0dXJuIFwiXFxuXCI7XG4gIH0sXG4gIFwiJXBcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgaWYgKGRhdGUudG1faG91ciA+PSAwICYmIGRhdGUudG1faG91ciA8IDEyKSB7XG4gICAgcmV0dXJuIFwiQU1cIjtcbiAgIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiUE1cIjtcbiAgIH1cbiAgfSxcbiAgXCIlU1wiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fc2VjLCAyKTtcbiAgfSxcbiAgXCIldFwiOiBmdW5jdGlvbigpIHtcbiAgIHJldHVybiBcIlxcdFwiO1xuICB9LFxuICBcIiV1XCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBkYXRlLnRtX3dkYXkgfHwgNztcbiAgfSxcbiAgXCIlVVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgZGF5cyA9IGRhdGUudG1feWRheSArIDcgLSBkYXRlLnRtX3dkYXk7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKE1hdGguZmxvb3IoZGF5cyAvIDcpLCAyKTtcbiAgfSxcbiAgXCIlVlwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgdmFsID0gTWF0aC5mbG9vcigoZGF0ZS50bV95ZGF5ICsgNyAtIChkYXRlLnRtX3dkYXkgKyA2KSAlIDcpIC8gNyk7XG4gICBpZiAoKGRhdGUudG1fd2RheSArIDM3MSAtIGRhdGUudG1feWRheSAtIDIpICUgNyA8PSAyKSB7XG4gICAgdmFsKys7XG4gICB9XG4gICBpZiAoIXZhbCkge1xuICAgIHZhbCA9IDUyO1xuICAgIHZhciBkZWMzMSA9IChkYXRlLnRtX3dkYXkgKyA3IC0gZGF0ZS50bV95ZGF5IC0gMSkgJSA3O1xuICAgIGlmIChkZWMzMSA9PSA0IHx8IGRlYzMxID09IDUgJiYgX19pc0xlYXBZZWFyKGRhdGUudG1feWVhciAlIDQwMCAtIDEpKSB7XG4gICAgIHZhbCsrO1xuICAgIH1cbiAgIH0gZWxzZSBpZiAodmFsID09IDUzKSB7XG4gICAgdmFyIGphbjEgPSAoZGF0ZS50bV93ZGF5ICsgMzcxIC0gZGF0ZS50bV95ZGF5KSAlIDc7XG4gICAgaWYgKGphbjEgIT0gNCAmJiAoamFuMSAhPSAzIHx8ICFfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyKSkpIHZhbCA9IDE7XG4gICB9XG4gICByZXR1cm4gbGVhZGluZ051bGxzKHZhbCwgMik7XG4gIH0sXG4gIFwiJXdcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGRhdGUudG1fd2RheTtcbiAgfSxcbiAgXCIlV1wiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgZGF5cyA9IGRhdGUudG1feWRheSArIDcgLSAoZGF0ZS50bV93ZGF5ICsgNikgJSA3O1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyhNYXRoLmZsb29yKGRheXMgLyA3KSwgMik7XG4gIH0sXG4gIFwiJXlcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIChkYXRlLnRtX3llYXIgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKTtcbiAgfSxcbiAgXCIlWVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gZGF0ZS50bV95ZWFyICsgMTkwMDtcbiAgfSxcbiAgXCIlelwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgb2ZmID0gZGF0ZS50bV9nbXRvZmY7XG4gICB2YXIgYWhlYWQgPSBvZmYgPj0gMDtcbiAgIG9mZiA9IE1hdGguYWJzKG9mZikgLyA2MDtcbiAgIG9mZiA9IG9mZiAvIDYwICogMTAwICsgb2ZmICUgNjA7XG4gICByZXR1cm4gKGFoZWFkID8gXCIrXCIgOiBcIi1cIikgKyBTdHJpbmcoXCIwMDAwXCIgKyBvZmYpLnNsaWNlKC00KTtcbiAgfSxcbiAgXCIlWlwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gZGF0ZS50bV96b25lO1xuICB9LFxuICBcIiUlXCI6IGZ1bmN0aW9uKCkge1xuICAgcmV0dXJuIFwiJVwiO1xuICB9XG4gfTtcbiBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC8lJS9nLCBcIlxcMFxcMFwiKTtcbiBmb3IgKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18yKSB7XG4gIGlmIChwYXR0ZXJuLmluY2x1ZGVzKHJ1bGUpKSB7XG4gICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSwgXCJnXCIpLCBFWFBBTlNJT05fUlVMRVNfMltydWxlXShkYXRlKSk7XG4gIH1cbiB9XG4gcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwwXFwwL2csIFwiJVwiKTtcbiB2YXIgYnl0ZXMgPSBpbnRBcnJheUZyb21TdHJpbmcocGF0dGVybiwgZmFsc2UpO1xuIGlmIChieXRlcy5sZW5ndGggPiBtYXhzaXplKSB7XG4gIHJldHVybiAwO1xuIH1cbiB3cml0ZUFycmF5VG9NZW1vcnkoYnl0ZXMsIHMpO1xuIHJldHVybiBieXRlcy5sZW5ndGggLSAxO1xufVxuXG5mdW5jdGlvbiBfc3RyZnRpbWVfbChzLCBtYXhzaXplLCBmb3JtYXQsIHRtKSB7XG4gcmV0dXJuIF9zdHJmdGltZShzLCBtYXhzaXplLCBmb3JtYXQsIHRtKTtcbn1cblxudmFyIEFTU0VSVElPTlMgPSB0cnVlO1xuXG5mdW5jdGlvbiBpbnRBcnJheUZyb21TdHJpbmcoc3RyaW5neSwgZG9udEFkZE51bGwsIGxlbmd0aCkge1xuIHZhciBsZW4gPSBsZW5ndGggPiAwID8gbGVuZ3RoIDogbGVuZ3RoQnl0ZXNVVEY4KHN0cmluZ3kpICsgMTtcbiB2YXIgdThhcnJheSA9IG5ldyBBcnJheShsZW4pO1xuIHZhciBudW1CeXRlc1dyaXR0ZW4gPSBzdHJpbmdUb1VURjhBcnJheShzdHJpbmd5LCB1OGFycmF5LCAwLCB1OGFycmF5Lmxlbmd0aCk7XG4gaWYgKGRvbnRBZGROdWxsKSB1OGFycmF5Lmxlbmd0aCA9IG51bUJ5dGVzV3JpdHRlbjtcbiByZXR1cm4gdThhcnJheTtcbn1cblxuZnVuY3Rpb24gaW50QXJyYXlUb1N0cmluZyhhcnJheSkge1xuIHZhciByZXQgPSBbXTtcbiBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gIHZhciBjaHIgPSBhcnJheVtpXTtcbiAgaWYgKGNociA+IDI1NSkge1xuICAgaWYgKEFTU0VSVElPTlMpIHtcbiAgICBhc3NlcnQoZmFsc2UsIFwiQ2hhcmFjdGVyIGNvZGUgXCIgKyBjaHIgKyBcIiAoXCIgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikgKyBcIikgIGF0IG9mZnNldCBcIiArIGkgKyBcIiBub3QgaW4gMHgwMC0weEZGLlwiKTtcbiAgIH1cbiAgIGNociAmPSAyNTU7XG4gIH1cbiAgcmV0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpKTtcbiB9XG4gcmV0dXJuIHJldC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBjaGVja0luY29taW5nTW9kdWxlQVBJKCkge1xuIGlnbm9yZWRNb2R1bGVQcm9wKFwiZmV0Y2hTZXR0aW5nc1wiKTtcbn1cblxudmFyIGFzbUxpYnJhcnlBcmcgPSB7XG4gXCJfX2Fzc2VydF9mYWlsXCI6IF9fX2Fzc2VydF9mYWlsLFxuIFwiX19zeXNjYWxsX19uZXdzZWxlY3RcIjogX19fc3lzY2FsbF9fbmV3c2VsZWN0LFxuIFwiX19zeXNjYWxsX2JpbmRcIjogX19fc3lzY2FsbF9iaW5kLFxuIFwiX19zeXNjYWxsX2Nvbm5lY3RcIjogX19fc3lzY2FsbF9jb25uZWN0LFxuIFwiX19zeXNjYWxsX2ZhY2Nlc3NhdFwiOiBfX19zeXNjYWxsX2ZhY2Nlc3NhdCxcbiBcIl9fc3lzY2FsbF9mY250bDY0XCI6IF9fX3N5c2NhbGxfZmNudGw2NCxcbiBcIl9fc3lzY2FsbF9mc3RhdDY0XCI6IF9fX3N5c2NhbGxfZnN0YXQ2NCxcbiBcIl9fc3lzY2FsbF9mdHJ1bmNhdGU2NFwiOiBfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0LFxuIFwiX19zeXNjYWxsX2dldGRlbnRzNjRcIjogX19fc3lzY2FsbF9nZXRkZW50czY0LFxuIFwiX19zeXNjYWxsX2dldHBlZXJuYW1lXCI6IF9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUsXG4gXCJfX3N5c2NhbGxfZ2V0c29ja29wdFwiOiBfX19zeXNjYWxsX2dldHNvY2tvcHQsXG4gXCJfX3N5c2NhbGxfaW9jdGxcIjogX19fc3lzY2FsbF9pb2N0bCxcbiBcIl9fc3lzY2FsbF9sc3RhdDY0XCI6IF9fX3N5c2NhbGxfbHN0YXQ2NCxcbiBcIl9fc3lzY2FsbF9ta2RpcmF0XCI6IF9fX3N5c2NhbGxfbWtkaXJhdCxcbiBcIl9fc3lzY2FsbF9uZXdmc3RhdGF0XCI6IF9fX3N5c2NhbGxfbmV3ZnN0YXRhdCxcbiBcIl9fc3lzY2FsbF9vcGVuYXRcIjogX19fc3lzY2FsbF9vcGVuYXQsXG4gXCJfX3N5c2NhbGxfcmVjdmZyb21cIjogX19fc3lzY2FsbF9yZWN2ZnJvbSxcbiBcIl9fc3lzY2FsbF9yZW5hbWVhdFwiOiBfX19zeXNjYWxsX3JlbmFtZWF0LFxuIFwiX19zeXNjYWxsX3JtZGlyXCI6IF9fX3N5c2NhbGxfcm1kaXIsXG4gXCJfX3N5c2NhbGxfc2VuZHRvXCI6IF9fX3N5c2NhbGxfc2VuZHRvLFxuIFwiX19zeXNjYWxsX3NvY2tldFwiOiBfX19zeXNjYWxsX3NvY2tldCxcbiBcIl9fc3lzY2FsbF9zdGF0NjRcIjogX19fc3lzY2FsbF9zdGF0NjQsXG4gXCJfX3N5c2NhbGxfdW5saW5rYXRcIjogX19fc3lzY2FsbF91bmxpbmthdCxcbiBcIl9kbGluaXRcIjogX19kbGluaXQsXG4gXCJfZGxvcGVuX2pzXCI6IF9fZGxvcGVuX2pzLFxuIFwiX2Rsc3ltX2pzXCI6IF9fZGxzeW1fanMsXG4gXCJfZW1zY3JpcHRlbl9kYXRlX25vd1wiOiBfX2Vtc2NyaXB0ZW5fZGF0ZV9ub3csXG4gXCJfZW1zY3JpcHRlbl9nZXRfbm93X2lzX21vbm90b25pY1wiOiBfX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMsXG4gXCJhYm9ydFwiOiBfYWJvcnQsXG4gXCJhbGlnbmZhdWx0XCI6IGFsaWduZmF1bHQsXG4gXCJkdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9jcmVhdGVcIjogX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZSxcbiBcImR1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2V4aXN0c1wiOiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfZXhpc3RzLFxuIFwiZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfbGlzdF9maWxlc1wiOiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfbGlzdF9maWxlcyxcbiBcImR1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZVwiOiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfcmVtb3ZlLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfY2xvc2UsXG4gXCJkdWNrZGJfd2ViX2ZzX2ZpbGVfZXhpc3RzXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfZXhpc3RzLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWVcIjogX2R1Y2tkYl93ZWJfZnNfZmlsZV9nZXRfbGFzdF9tb2RpZmllZF90aW1lLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX21vdmVcIjogX2R1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX29wZW5cIjogX2R1Y2tkYl93ZWJfZnNfZmlsZV9vcGVuLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX3JlYWRcIjogX2R1Y2tkYl93ZWJfZnNfZmlsZV9yZWFkLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX3RydW5jYXRlXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUsXG4gXCJkdWNrZGJfd2ViX2ZzX2ZpbGVfd3JpdGVcIjogX2R1Y2tkYl93ZWJfZnNfZmlsZV93cml0ZSxcbiBcImR1Y2tkYl93ZWJfZnNfZ2xvYlwiOiBfZHVja2RiX3dlYl9mc19nbG9iLFxuIFwiZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmVcIjogX2R1Y2tkYl93ZWJfdGVzdF9wbGF0Zm9ybV9mZWF0dXJlLFxuIFwiZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NhbGxcIjogX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsLFxuIFwiZW1zY3JpcHRlbl9jb25zb2xlX2Vycm9yXCI6IF9lbXNjcmlwdGVuX2NvbnNvbGVfZXJyb3IsXG4gXCJlbXNjcmlwdGVuX2dldF9oZWFwX21heFwiOiBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgsXG4gXCJlbXNjcmlwdGVuX2dldF9ub3dcIjogX2Vtc2NyaXB0ZW5fZ2V0X25vdyxcbiBcImVtc2NyaXB0ZW5fbWVtY3B5X2JpZ1wiOiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnLFxuIFwiZW1zY3JpcHRlbl9yZXNpemVfaGVhcFwiOiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCxcbiBcImVudmlyb25fZ2V0XCI6IF9lbnZpcm9uX2dldCxcbiBcImVudmlyb25fc2l6ZXNfZ2V0XCI6IF9lbnZpcm9uX3NpemVzX2dldCxcbiBcImZkX2Nsb3NlXCI6IF9mZF9jbG9zZSxcbiBcImZkX3ByZWFkXCI6IF9mZF9wcmVhZCxcbiBcImZkX3B3cml0ZVwiOiBfZmRfcHdyaXRlLFxuIFwiZmRfcmVhZFwiOiBfZmRfcmVhZCxcbiBcImZkX3NlZWtcIjogX2ZkX3NlZWssXG4gXCJmZF9zeW5jXCI6IF9mZF9zeW5jLFxuIFwiZmRfd3JpdGVcIjogX2ZkX3dyaXRlLFxuIFwiZ2V0YWRkcmluZm9cIjogX2dldGFkZHJpbmZvLFxuIFwiZ2V0ZW50cm9weVwiOiBfZ2V0ZW50cm9weSxcbiBcImdldG5hbWVpbmZvXCI6IF9nZXRuYW1laW5mbyxcbiBcInNlZ2ZhdWx0XCI6IHNlZ2ZhdWx0LFxuIFwic2V0VGVtcFJldDBcIjogX3NldFRlbXBSZXQwLFxuIFwic3RyZnRpbWVfbFwiOiBfc3RyZnRpbWVfbFxufTtcblxudmFyIGFzbSA9IGNyZWF0ZVdhc20oKTtcblxudmFyIF9fX3dhc21fY2FsbF9jdG9ycyA9IE1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJfX3dhc21fY2FsbF9jdG9yc1wiKTtcblxudmFyIF9tYWluID0gTW9kdWxlW1wiX21haW5cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwibWFpblwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGggPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2VcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZhaWxfd2l0aCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZhaWxfd2l0aFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZhaWxfd2l0aFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3Jlc2V0ID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcmVzZXRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9yZXNldFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2Nvbm5lY3QgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9jb25uZWN0XCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfY29ubmVjdFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3QgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZGlzY29ubmVjdFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXNcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGUgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZmx1c2hfZmlsZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX29wZW4gPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9vcGVuXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfb3BlblwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mb1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cyA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0c1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZSA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXMgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZHJvcF9maWxlc1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvcyA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWQgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZSA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX3NldF9maWxlX2Rlc2NyaXB0b3IgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfc2V0X2ZpbGVfZGVzY3JpcHRvclwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmxcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXJcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXIgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb25cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9nZXRfdmVyc2lvblwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3NcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX3Rva2VuaXplID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl90b2tlbml6ZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGVcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZSA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2VcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9wcmVwYXJlZF9jbG9zZVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1biA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1blwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3ByZXBhcmVkX3J1blwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3F1ZXJ5X3J1biA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1blwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3F1ZXJ5X3J1blwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0XCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWxcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHMgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0c1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lc1wiKTtcblxudmFyIF9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW0gPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbVwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGhcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aFwiKTtcblxudmFyIF9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aFwiKTtcblxudmFyIF9fX2Vycm5vX2xvY2F0aW9uID0gTW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiX19lcnJub19sb2NhdGlvblwiKTtcblxudmFyIF9fX3N0ZGlvX2V4aXQgPSBNb2R1bGVbXCJfX19zdGRpb19leGl0XCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcIl9fc3RkaW9fZXhpdFwiKTtcblxudmFyIF9fX2RsX3NldGVyciA9IE1vZHVsZVtcIl9fX2RsX3NldGVyclwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJfX2RsX3NldGVyclwiKTtcblxudmFyIF9odG9ubCA9IE1vZHVsZVtcIl9odG9ubFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJodG9ubFwiKTtcblxudmFyIF9odG9ucyA9IE1vZHVsZVtcIl9odG9uc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJodG9uc1wiKTtcblxudmFyIF9udG9ocyA9IE1vZHVsZVtcIl9udG9oc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJudG9oc1wiKTtcblxudmFyIF9tYWxsb2MgPSBNb2R1bGVbXCJfbWFsbG9jXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcIm1hbGxvY1wiKTtcblxudmFyIF9mcmVlID0gTW9kdWxlW1wiX2ZyZWVcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZnJlZVwiKTtcblxudmFyIF9lbXNjcmlwdGVuX2dldF9zYnJrX3B0ciA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX2dldF9zYnJrX3B0clwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJlbXNjcmlwdGVuX2dldF9zYnJrX3B0clwiKTtcblxudmFyIF9zYnJrID0gTW9kdWxlW1wiX3NicmtcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwic2Jya1wiKTtcblxudmFyIF9zZXRUaHJldyA9IE1vZHVsZVtcIl9zZXRUaHJld1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJzZXRUaHJld1wiKTtcblxudmFyIF9lbXNjcmlwdGVuX3N0YWNrX2luaXQgPSBNb2R1bGVbXCJfZW1zY3JpcHRlbl9zdGFja19pbml0XCJdID0gZnVuY3Rpb24oKSB7XG4gcmV0dXJuIChfZW1zY3JpcHRlbl9zdGFja19pbml0ID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfaW5pdFwiXSA9IE1vZHVsZVtcImFzbVwiXVtcImVtc2NyaXB0ZW5fc3RhY2tfaW5pdFwiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cbnZhciBfZW1zY3JpcHRlbl9zdGFja19nZXRfZnJlZSA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlXCJdID0gZnVuY3Rpb24oKSB7XG4gcmV0dXJuIChfZW1zY3JpcHRlbl9zdGFja19nZXRfZnJlZSA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlXCJdID0gTW9kdWxlW1wiYXNtXCJdW1wiZW1zY3JpcHRlbl9zdGFja19nZXRfZnJlZVwiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cbnZhciBfZW1zY3JpcHRlbl9zdGFja19nZXRfYmFzZSA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlXCJdID0gZnVuY3Rpb24oKSB7XG4gcmV0dXJuIChfZW1zY3JpcHRlbl9zdGFja19nZXRfYmFzZSA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlXCJdID0gTW9kdWxlW1wiYXNtXCJdW1wiZW1zY3JpcHRlbl9zdGFja19nZXRfYmFzZVwiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cbnZhciBfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZFwiXSA9IGZ1bmN0aW9uKCkge1xuIHJldHVybiAoX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZCA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9lbmRcIl0gPSBNb2R1bGVbXCJhc21cIl1bXCJlbXNjcmlwdGVuX3N0YWNrX2dldF9lbmRcIl0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuXG52YXIgc3RhY2tTYXZlID0gTW9kdWxlW1wic3RhY2tTYXZlXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcInN0YWNrU2F2ZVwiKTtcblxudmFyIHN0YWNrUmVzdG9yZSA9IE1vZHVsZVtcInN0YWNrUmVzdG9yZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJzdGFja1Jlc3RvcmVcIik7XG5cbnZhciBzdGFja0FsbG9jID0gTW9kdWxlW1wic3RhY2tBbGxvY1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJzdGFja0FsbG9jXCIpO1xuXG52YXIgZHluQ2FsbF9qaWppID0gTW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWpqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpalwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaSA9IE1vZHVsZVtcImR5bkNhbGxfamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqXCIpO1xuXG52YXIgZHluQ2FsbF9qID0gTW9kdWxlW1wiZHluQ2FsbF9qXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfalwiKTtcblxudmFyIGR5bkNhbGxfamlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlcIik7XG5cbnZhciBkeW5DYWxsX2ppaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9qaWogPSBNb2R1bGVbXCJkeW5DYWxsX2ppalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppalwiKTtcblxudmFyIGR5bkNhbGxfaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpalwiKTtcblxudmFyIGR5bkNhbGxfamlqamlqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWpqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWpqaWpcIik7XG5cbnZhciBkeW5DYWxsX2lqamogPSBNb2R1bGVbXCJkeW5DYWxsX2lqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9pampqXCIpO1xuXG52YXIgZHluQ2FsbF9qampkID0gTW9kdWxlW1wiZHluQ2FsbF9qampkXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfampqZFwiKTtcblxudmFyIGR5bkNhbGxfampqampqZCA9IE1vZHVsZVtcImR5bkNhbGxfampqampqZFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2pqampqamRcIik7XG5cbnZhciBkeW5DYWxsX3ZqamlqaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZqamlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92amppamlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWpqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpampqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpampqaVwiKTtcblxudmFyIGR5bkNhbGxfdmpqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZqamlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmpqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWpqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWpqalwiKTtcblxudmFyIGR5bkNhbGxfamlpamlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2ppamlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWppaWlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlpaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpamlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWppaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpalwiKTtcblxudmFyIGR5bkNhbGxfamlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpamlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlpalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpamppXCIpO1xuXG52YXIgZHluQ2FsbF92aWppaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWlpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlpaWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpamogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpalwiKTtcblxudmFyIGR5bkNhbGxfamlqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWppXCIpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaW50QXJyYXlGcm9tU3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImludEFycmF5VG9TdHJpbmdcIiwgZmFsc2UpO1xuXG5Nb2R1bGVbXCJjY2FsbFwiXSA9IGNjYWxsO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY3dyYXBcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2V0VmFsdWVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0VmFsdWVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWxsb2NhdGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiVVRGOEFycmF5VG9TdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiVVRGOFRvU3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0cmluZ1RvVVRGOEFycmF5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0cmluZ1RvVVRGOFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJsZW5ndGhCeXRlc1VURjhcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RhY2tUcmFjZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhZGRPblByZVJ1blwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhZGRPbkluaXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWRkT25QcmVNYWluXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFkZE9uRXhpdFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhZGRPblBvc3RSdW5cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVTdHJpbmdUb01lbW9yeVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUFycmF5VG9NZW1vcnlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVBc2NpaVRvTWVtb3J5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFkZFJ1bkRlcGVuZGVuY3lcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZW1vdmVSdW5EZXBlbmRlbmN5XCIsIHRydWUpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfY3JlYXRlRm9sZGVyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTX2NyZWF0ZVBhdGhcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU19jcmVhdGVEYXRhRmlsZVwiLCB0cnVlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTX2NyZWF0ZVByZWxvYWRlZEZpbGVcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU19jcmVhdGVMYXp5RmlsZVwiLCB0cnVlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTX2NyZWF0ZUxpbmtcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfY3JlYXRlRGV2aWNlXCIsIHRydWUpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfdW5saW5rXCIsIHRydWUpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0TEVCXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImdldEZ1bmN0aW9uVGFibGVzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFsaWduRnVuY3Rpb25UYWJsZXNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJGdW5jdGlvbnNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWRkRnVuY3Rpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVtb3ZlRnVuY3Rpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicHJldHR5UHJpbnRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZHluQ2FsbFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRDb21waWxlclNldHRpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicHJpbnRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicHJpbnRFcnJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0VGVtcFJldDBcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2V0VGVtcFJldDBcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY2FsbE1haW5cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWJvcnRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwia2VlcFJ1bnRpbWVBbGl2ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJwdHJUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ6ZXJvTWVtb3J5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0cmluZ1RvTmV3VVRGOFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkVOVlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJFUlJOT19DT0RFU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJFUlJOT19NRVNTQUdFU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRFcnJOb1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJpbmV0UHRvbjRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaW5ldE50b3A0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImluZXRQdG9uNlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJpbmV0TnRvcDZcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVhZFNvY2thZGRyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndyaXRlU29ja2FkZHJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRE5TXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImdldEhvc3RCeU5hbWVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiUHJvdG9jb2xzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNvY2tldHNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0UmFuZG9tRGV2aWNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInRyYXZlcnNlU3RhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiVU5XSU5EX0NBQ0hFXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImNvbnZlcnRQQ3RvU291cmNlTG9jYXRpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVhZEFzbUNvbnN0QXJnc0FycmF5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlYWRBc21Db25zdEFyZ3NcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwibWFpblRocmVhZEVNX0FTTVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJqc3RvaV9xXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImpzdG9pX3NcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0RXhlY3V0YWJsZU5hbWVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwibGlzdGVuT25jZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhdXRvUmVzdW1lQXVkaW9Db250ZXh0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImR5bkNhbGxMZWdhY3lcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0RHluQ2FsbGVyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImR5bkNhbGxcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaGFuZGxlRXhjZXB0aW9uXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJ1bnRpbWVLZWVwYWxpdmVQdXNoXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJ1bnRpbWVLZWVwYWxpdmVQb3BcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY2FsbFVzZXJDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJtYXliZUV4aXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2FmZVNldFRpbWVvdXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYXNtanNNYW5nbGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYXN5bmNMb2FkXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFsaWduTWVtb3J5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIm1tYXBBbGxvY1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWFsbHlOZWdhdGl2ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ1blNpZ25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVTaWduXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZvcm1hdFN0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJQQVRIXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlBBVEhfRlNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU1lTQ0FMTFNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0U29ja2V0RnJvbUZEXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImdldFNvY2tldEFkZHJlc3NcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiSlNFdmVudHNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJLZXlFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInNwZWNpYWxIVE1MVGFyZ2V0c1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJtYXliZUNTdHJpbmdUb0pzU3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbmRFdmVudFRhcmdldFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaW5kQ2FudmFzRXZlbnRUYXJnZXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxNb3VzZUV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3Rlck1vdXNlRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlcldoZWVsRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclVpRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlckZvY3VzRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsRGV2aWNlT3JpZW50YXRpb25FdmVudERhdGFcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJEZXZpY2VPcmllbnRhdGlvbkV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmlsbERldmljZU1vdGlvbkV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlckRldmljZU1vdGlvbkV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2NyZWVuT3JpZW50YXRpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmlsbE9yaWVudGF0aW9uQ2hhbmdlRXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyT3JpZW50YXRpb25DaGFuZ2VFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxGdWxsc2NyZWVuQ2hhbmdlRXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyRnVsbHNjcmVlbkNoYW5nZUV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJSZXN0b3JlT2xkU3R5bGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaGlkZUV2ZXJ5dGhpbmdFeGNlcHRHaXZlbkVsZW1lbnRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVzdG9yZUhpZGRlbkVsZW1lbnRzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInNldExldHRlcmJveFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjdXJyZW50RnVsbHNjcmVlblN0cmF0ZWd5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlc3RvcmVPbGRXaW5kb3dlZFN0eWxlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInNvZnRGdWxsc2NyZWVuUmVzaXplV2ViR0xSZW5kZXJUYXJnZXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZG9SZXF1ZXN0RnVsbHNjcmVlblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsUG9pbnRlcmxvY2tDaGFuZ2VFdmVudERhdGFcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJQb2ludGVybG9ja0NoYW5nZUV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJQb2ludGVybG9ja0Vycm9yRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZXF1ZXN0UG9pbnRlckxvY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmlsbFZpc2liaWxpdHlDaGFuZ2VFdmVudERhdGFcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJWaXNpYmlsaXR5Q2hhbmdlRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclRvdWNoRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsR2FtZXBhZEV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlckdhbWVwYWRFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyQmVmb3JlVW5sb2FkRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsQmF0dGVyeUV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJiYXR0ZXJ5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyQmF0dGVyeUV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2V0Q2FudmFzRWxlbWVudFNpemVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0Q2FudmFzRWxlbWVudFNpemVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZGVtYW5nbGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZGVtYW5nbGVBbGxcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwianNTdGFja1RyYWNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0YWNrVHJhY2VcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0RW52U3RyaW5nc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjaGVja1dhc2lDbG9ja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmbHVzaF9OT19GSUxFU1lTVEVNXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndyaXRlSTUzVG9JNjRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVJNTNUb0k2NENsYW1wZWRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVJNTNUb0k2NFNpZ25hbGluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUk1M1RvVTY0Q2xhbXBlZFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUk1M1RvVTY0U2lnbmFsaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlYWRJNTNGcm9tSTY0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlYWRJNTNGcm9tVTY0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImNvbnZlcnRJMzJQYWlyVG9JNTNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY29udmVydFUzMlBhaXJUb0k1M1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJkbG9wZW5NaXNzaW5nRXJyb3JcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2V0SW1tZWRpYXRlV3JhcHBlZFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjbGVhckltbWVkaWF0ZVdyYXBwZWRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicG9seWZpbGxTZXRJbW1lZGlhdGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiQnJvd3NlclwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRNYWluTG9vcFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3Z2V0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInRlbXBGaXhlZExlbmd0aEFycmF5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIm1pbmlUZW1wV2ViR0xGbG9hdEJ1ZmZlcnNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaGVhcE9iamVjdEZvcldlYkdMVHlwZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJoZWFwQWNjZXNzU2hpZnRGb3JXZWJHTEhlYXBcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiR0xcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZW1zY3JpcHRlbldlYkdMR2V0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImNvbXB1dGVVbnBhY2tBbGlnbmVkSW1hZ2VTaXplXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImVtc2NyaXB0ZW5XZWJHTEdldFRleFBpeGVsRGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJlbXNjcmlwdGVuV2ViR0xHZXRVbmlmb3JtXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndlYmdsR2V0VW5pZm9ybUxvY2F0aW9uXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndlYmdsUHJlcGFyZVVuaWZvcm1Mb2NhdGlvbnNCZWZvcmVGaXJzdFVzZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3ZWJnbEdldExlZnRCcmFjZVBvc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJlbXNjcmlwdGVuV2ViR0xHZXRWZXJ0ZXhBdHRyaWJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVHTEFycmF5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkFMXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNETF91bmljb2RlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNETF90dGZDb250ZXh0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNETF9hdWRpb1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJTRExcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU0RMX2dmeFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJHTFVUXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkVHTFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJHTEZXX1dpbmRvd1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJHTEZXXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkdMRVdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiSURCU3RvcmVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicnVuQW5kQWJvcnRJZkVycm9yXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNPQ0tGU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3YXJuT25jZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdGFja1NhdmVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RhY2tSZXN0b3JlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0YWNrQWxsb2NcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiQXNjaWlUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdHJpbmdUb0FzY2lpXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlVURjE2VG9TdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RyaW5nVG9VVEYxNlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJsZW5ndGhCeXRlc1VURjE2XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlVURjMyVG9TdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RyaW5nVG9VVEYzMlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJsZW5ndGhCeXRlc1VURjMyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFsbG9jYXRlVVRGOFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhbGxvY2F0ZVVURjhPblN0YWNrXCIsIGZhbHNlKTtcblxuTW9kdWxlW1wid3JpdGVTdGFja0Nvb2tpZVwiXSA9IHdyaXRlU3RhY2tDb29raWU7XG5cbk1vZHVsZVtcImNoZWNrU3RhY2tDb29raWVcIl0gPSBjaGVja1N0YWNrQ29va2llO1xuXG51bmV4cG9ydGVkUnVudGltZVN5bWJvbChcIkFMTE9DX05PUk1BTFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lU3ltYm9sKFwiQUxMT0NfU1RBQ0tcIiwgZmFsc2UpO1xuXG52YXIgY2FsbGVkUnVuO1xuXG5mdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cykge1xuIHRoaXMubmFtZSA9IFwiRXhpdFN0YXR1c1wiO1xuIHRoaXMubWVzc2FnZSA9IFwiUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdChcIiArIHN0YXR1cyArIFwiKVwiO1xuIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xufVxuXG52YXIgY2FsbGVkTWFpbiA9IGZhbHNlO1xuXG5kZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBmdW5jdGlvbiBydW5DYWxsZXIoKSB7XG4gaWYgKCFjYWxsZWRSdW4pIHJ1bigpO1xuIGlmICghY2FsbGVkUnVuKSBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBydW5DYWxsZXI7XG59O1xuXG5mdW5jdGlvbiBjYWxsTWFpbihhcmdzKSB7XG4gYXNzZXJ0KHJ1bkRlcGVuZGVuY2llcyA9PSAwLCAnY2Fubm90IGNhbGwgbWFpbiB3aGVuIGFzeW5jIGRlcGVuZGVuY2llcyByZW1haW4hIChsaXN0ZW4gb24gTW9kdWxlW1wib25SdW50aW1lSW5pdGlhbGl6ZWRcIl0pJyk7XG4gYXNzZXJ0KF9fQVRQUkVSVU5fXy5sZW5ndGggPT0gMCwgXCJjYW5ub3QgY2FsbCBtYWluIHdoZW4gcHJlUnVuIGZ1bmN0aW9ucyByZW1haW4gdG8gYmUgY2FsbGVkXCIpO1xuIHZhciBlbnRyeUZ1bmN0aW9uID0gTW9kdWxlW1wiX21haW5cIl07XG4gYXJncyA9IGFyZ3MgfHwgW107XG4gdmFyIGFyZ2MgPSBhcmdzLmxlbmd0aCArIDE7XG4gdmFyIGFyZ3YgPSBzdGFja0FsbG9jKChhcmdjICsgMSkgKiA0KTtcbiBTQUZFX0hFQVBfU1RPUkUoKGFyZ3YgPj4+IDIpICogNCwgYWxsb2NhdGVVVEY4T25TdGFjayh0aGlzUHJvZ3JhbSksIDQpO1xuIGZvciAodmFyIGkgPSAxOyBpIDwgYXJnYzsgaSsrKSB7XG4gIFNBRkVfSEVBUF9TVE9SRSgoKGFyZ3YgPj4gMikgKyBpID4+PiAwKSAqIDQsIGFsbG9jYXRlVVRGOE9uU3RhY2soYXJnc1tpIC0gMV0pLCA0KTtcbiB9XG4gU0FGRV9IRUFQX1NUT1JFKCgoYXJndiA+PiAyKSArIGFyZ2MgPj4+IDApICogNCwgMCwgNCk7XG4gdHJ5IHtcbiAgdmFyIHJldCA9IGVudHJ5RnVuY3Rpb24oYXJnYywgYXJndik7XG4gIGV4aXQocmV0LCB0cnVlKTtcbiAgcmV0dXJuIHJldDtcbiB9IGNhdGNoIChlKSB7XG4gIHJldHVybiBoYW5kbGVFeGNlcHRpb24oZSk7XG4gfSBmaW5hbGx5IHtcbiAgY2FsbGVkTWFpbiA9IHRydWU7XG4gfVxufVxuXG5mdW5jdGlvbiBzdGFja0NoZWNrSW5pdCgpIHtcbiBfZW1zY3JpcHRlbl9zdGFja19pbml0KCk7XG4gd3JpdGVTdGFja0Nvb2tpZSgpO1xufVxuXG5mdW5jdGlvbiBydW4oYXJncykge1xuIGFyZ3MgPSBhcmdzIHx8IGFyZ3VtZW50c187XG4gaWYgKHJ1bkRlcGVuZGVuY2llcyA+IDApIHtcbiAgcmV0dXJuO1xuIH1cbiBzdGFja0NoZWNrSW5pdCgpO1xuIHByZVJ1bigpO1xuIGlmIChydW5EZXBlbmRlbmNpZXMgPiAwKSB7XG4gIHJldHVybjtcbiB9XG4gZnVuY3Rpb24gZG9SdW4oKSB7XG4gIGlmIChjYWxsZWRSdW4pIHJldHVybjtcbiAgY2FsbGVkUnVuID0gdHJ1ZTtcbiAgTW9kdWxlW1wiY2FsbGVkUnVuXCJdID0gdHJ1ZTtcbiAgaWYgKEFCT1JUKSByZXR1cm47XG4gIGluaXRSdW50aW1lKCk7XG4gIHByZU1haW4oKTtcbiAgcmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO1xuICBpZiAoTW9kdWxlW1wib25SdW50aW1lSW5pdGlhbGl6ZWRcIl0pIE1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKCk7XG4gIGlmIChzaG91bGRSdW5Ob3cpIGNhbGxNYWluKGFyZ3MpO1xuICBwb3N0UnVuKCk7XG4gfVxuIGlmIChNb2R1bGVbXCJzZXRTdGF0dXNcIl0pIHtcbiAgTW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiUnVubmluZy4uLlwiKTtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgTW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiXCIpO1xuICAgfSwgMSk7XG4gICBkb1J1bigpO1xuICB9LCAxKTtcbiB9IGVsc2Uge1xuICBkb1J1bigpO1xuIH1cbiBjaGVja1N0YWNrQ29va2llKCk7XG59XG5cbk1vZHVsZVtcInJ1blwiXSA9IHJ1bjtcblxuZnVuY3Rpb24gY2hlY2tVbmZsdXNoZWRDb250ZW50KCkge1xuIHZhciBvbGRPdXQgPSBvdXQ7XG4gdmFyIG9sZEVyciA9IGVycjtcbiB2YXIgaGFzID0gZmFsc2U7XG4gb3V0ID0gZXJyID0gKHggPT4ge1xuICBoYXMgPSB0cnVlO1xuIH0pO1xuIHRyeSB7XG4gIHZhciBmbHVzaCA9IGZsdXNoX05PX0ZJTEVTWVNURU07XG4gIGlmIChmbHVzaCkgZmx1c2goKTtcbiB9IGNhdGNoIChlKSB7fVxuIG91dCA9IG9sZE91dDtcbiBlcnIgPSBvbGRFcnI7XG4gaWYgKGhhcykge1xuICB3YXJuT25jZShcInN0ZGlvIHN0cmVhbXMgaGFkIGNvbnRlbnQgaW4gdGhlbSB0aGF0IHdhcyBub3QgZmx1c2hlZC4geW91IHNob3VsZCBzZXQgRVhJVF9SVU5USU1FIHRvIDEgKHNlZSB0aGUgRkFRKSwgb3IgbWFrZSBzdXJlIHRvIGVtaXQgYSBuZXdsaW5lIHdoZW4geW91IHByaW50ZiBldGMuXCIpO1xuICB3YXJuT25jZShcIih0aGlzIG1heSBhbHNvIGJlIGR1ZSB0byBub3QgaW5jbHVkaW5nIGZ1bGwgZmlsZXN5c3RlbSBzdXBwb3J0IC0gdHJ5IGJ1aWxkaW5nIHdpdGggLXNGT1JDRV9GSUxFU1lTVEVNKVwiKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGV4aXQoc3RhdHVzLCBpbXBsaWNpdCkge1xuIEVYSVRTVEFUVVMgPSBzdGF0dXM7XG4gY2hlY2tVbmZsdXNoZWRDb250ZW50KCk7XG4gaWYgKGtlZXBSdW50aW1lQWxpdmUoKSAmJiAhaW1wbGljaXQpIHtcbiAgdmFyIG1zZyA9IFwicHJvZ3JhbSBleGl0ZWQgKHdpdGggc3RhdHVzOiBcIiArIHN0YXR1cyArIFwiKSwgYnV0IEVYSVRfUlVOVElNRSBpcyBub3Qgc2V0LCBzbyBoYWx0aW5nIGV4ZWN1dGlvbiBidXQgbm90IGV4aXRpbmcgdGhlIHJ1bnRpbWUgb3IgcHJldmVudGluZyBmdXJ0aGVyIGFzeW5jIGV4ZWN1dGlvbiAoYnVpbGQgd2l0aCBFWElUX1JVTlRJTUU9MSwgaWYgeW91IHdhbnQgYSB0cnVlIHNodXRkb3duKVwiO1xuICByZWFkeVByb21pc2VSZWplY3QobXNnKTtcbiAgZXJyKG1zZyk7XG4gfVxuIHByb2NFeGl0KHN0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHByb2NFeGl0KGNvZGUpIHtcbiBFWElUU1RBVFVTID0gY29kZTtcbiBpZiAoIWtlZXBSdW50aW1lQWxpdmUoKSkge1xuICBpZiAoTW9kdWxlW1wib25FeGl0XCJdKSBNb2R1bGVbXCJvbkV4aXRcIl0oY29kZSk7XG4gIEFCT1JUID0gdHJ1ZTtcbiB9XG4gcXVpdF8oY29kZSwgbmV3IEV4aXRTdGF0dXMoY29kZSkpO1xufVxuXG5pZiAoTW9kdWxlW1wicHJlSW5pdFwiXSkge1xuIGlmICh0eXBlb2YgTW9kdWxlW1wicHJlSW5pdFwiXSA9PSBcImZ1bmN0aW9uXCIpIE1vZHVsZVtcInByZUluaXRcIl0gPSBbIE1vZHVsZVtcInByZUluaXRcIl0gXTtcbiB3aGlsZSAoTW9kdWxlW1wicHJlSW5pdFwiXS5sZW5ndGggPiAwKSB7XG4gIE1vZHVsZVtcInByZUluaXRcIl0ucG9wKCkoKTtcbiB9XG59XG5cbnZhciBzaG91bGRSdW5Ob3cgPSB0cnVlO1xuXG5pZiAoTW9kdWxlW1wibm9Jbml0aWFsUnVuXCJdKSBzaG91bGRSdW5Ob3cgPSBmYWxzZTtcblxucnVuKCk7XG5cblxuICByZXR1cm4gRHVja0RCLnJlYWR5XG59XG4pO1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IER1Y2tEQjsiLCAiXG52YXIgRHVja0RCID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSBpbXBvcnQubWV0YS51cmw7XG4gIFxuICByZXR1cm4gKFxuZnVuY3Rpb24oRHVja0RCKSB7XG4gIER1Y2tEQiA9IER1Y2tEQiB8fCB7fTtcblxudmFyIE1vZHVsZSA9IHR5cGVvZiBEdWNrREIgIT0gXCJ1bmRlZmluZWRcIiA/IER1Y2tEQiA6IHt9O1xuXG52YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSwgcmVhZHlQcm9taXNlUmVqZWN0O1xuXG5Nb2R1bGVbXCJyZWFkeVwiXSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIHJlYWR5UHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuIHJlYWR5UHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbn0pO1xuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX21haW5cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX21haW5cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfbWFpbiBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfbWFpblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9tYWluIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfbWFsbG9jXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9tYWxsb2NcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfbWFsbG9jIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9tYWxsb2NcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfbWFsbG9jIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZnJlZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZnJlZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9mcmVlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9mcmVlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2ZyZWUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2Ugb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2VcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHMgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2Nvbm5lY3RcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29ubmVjdFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2Nvbm5lY3Qgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29ubmVjdFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2Nvbm5lY3Qgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXJcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXIgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXIgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZGlzY29ubmVjdFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZGlzY29ubmVjdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZGlzY29ubmVjdCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0cyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0c1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mYWlsX3dpdGhcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZmFpbF93aXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZmFpbF93aXRoIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZhaWxfd2l0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZhaWxfd2l0aCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXNcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mbHVzaF9maWxlcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlc1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGhcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3NcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3Mgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmxcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZnNfc2V0X2ZpbGVfZGVzY3JpcHRvclwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZnNfc2V0X2ZpbGVfZGVzY3JpcHRvciBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZnNfc2V0X2ZpbGVfZGVzY3JpcHRvciBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3NcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3NcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mb1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mb1wiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm8gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXMgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lcyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb25cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb25cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9nZXRfdmVyc2lvbiBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9nZXRfdmVyc2lvblwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGhcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGggb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9vcGVuXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX29wZW5cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9vcGVuIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX29wZW5cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9vcGVuIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWwgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGxcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGwgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0XCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0IG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0IG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jbG9zZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jbG9zZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2Ugb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW5cIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1blwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1biBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZFwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0c1wiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cyBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1blwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3F1ZXJ5X3J1biBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl9xdWVyeV9ydW5cIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9xdWVyeV9ydW4gb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3Jlc2V0XCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3Jlc2V0XCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgX2R1Y2tkYl93ZWJfcmVzZXQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfcmVzZXRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBfZHVja2RiX3dlYl9yZXNldCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG5pZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgZ2V0dGluZyBfZHVja2RiX3dlYl90b2tlbml6ZSBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl90b2tlbml6ZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9kdWNrZGJfd2ViX3Rva2VuaXplIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG59XG5cbmlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZVwiKSkge1xuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGVbXCJyZWFkeVwiXSwgXCJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZVwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzXCIpO1xuICB9XG4gfSk7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBzZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIHNldHRpbmcgX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGUgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIl9fX3N0ZGlvX2V4aXRcIikpIHtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX19fc3RkaW9fZXhpdFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBnZXR0aW5nIF9fX3N0ZGlvX2V4aXQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwiX19fc3RkaW9fZXhpdFwiLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbigpIHtcbiAgIGFib3J0KFwiWW91IGFyZSBzZXR0aW5nIF9fX3N0ZGlvX2V4aXQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZVtcInJlYWR5XCJdLCBcIm9uUnVudGltZUluaXRpYWxpemVkXCIpKSB7XG4gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZVtcInJlYWR5XCJdLCBcIm9uUnVudGltZUluaXRpYWxpemVkXCIsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgYWJvcnQoXCJZb3UgYXJlIGdldHRpbmcgb25SdW50aW1lSW5pdGlhbGl6ZWQgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanNcIik7XG4gIH1cbiB9KTtcbiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlW1wicmVhZHlcIl0sIFwib25SdW50aW1lSW5pdGlhbGl6ZWRcIiwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHNldDogZnVuY3Rpb24oKSB7XG4gICBhYm9ydChcIllvdSBhcmUgc2V0dGluZyBvblJ1bnRpbWVJbml0aWFsaXplZCBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKTtcbiAgfVxuIH0pO1xufVxuXG52YXIgbW9kdWxlT3ZlcnJpZGVzID0gT2JqZWN0LmFzc2lnbih7fSwgTW9kdWxlKTtcblxudmFyIGFyZ3VtZW50c18gPSBbXTtcblxudmFyIHRoaXNQcm9ncmFtID0gXCIuL3RoaXMucHJvZ3JhbVwiO1xuXG52YXIgcXVpdF8gPSAoc3RhdHVzLCB0b1Rocm93KSA9PiB7XG4gdGhyb3cgdG9UaHJvdztcbn07XG5cbnZhciBFTlZJUk9OTUVOVF9JU19XRUIgPSB0eXBlb2Ygd2luZG93ID09IFwib2JqZWN0XCI7XG5cbnZhciBFTlZJUk9OTUVOVF9JU19XT1JLRVIgPSB0eXBlb2YgaW1wb3J0U2NyaXB0cyA9PSBcImZ1bmN0aW9uXCI7XG5cbnZhciBFTlZJUk9OTUVOVF9JU19OT0RFID0gdHlwZW9mIHByb2Nlc3MgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgPT0gXCJzdHJpbmdcIjtcblxudmFyIEVOVklST05NRU5UX0lTX1NIRUxMID0gIUVOVklST05NRU5UX0lTX1dFQiAmJiAhRU5WSVJPTk1FTlRfSVNfTk9ERSAmJiAhRU5WSVJPTk1FTlRfSVNfV09SS0VSO1xuXG5pZiAoTW9kdWxlW1wiRU5WSVJPTk1FTlRcIl0pIHtcbiB0aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUuRU5WSVJPTk1FTlQgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVG8gZm9yY2UgdGhlIGVudmlyb25tZW50LCB1c2UgdGhlIEVOVklST05NRU5UIGNvbXBpbGUtdGltZSBvcHRpb24gKGZvciBleGFtcGxlLCAtc0VOVklST05NRU5UPXdlYiBvciAtc0VOVklST05NRU5UPW5vZGUpXCIpO1xufVxuXG52YXIgc2NyaXB0RGlyZWN0b3J5ID0gXCJcIjtcblxuZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKSB7XG4gaWYgKE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pIHtcbiAgcmV0dXJuIE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0ocGF0aCwgc2NyaXB0RGlyZWN0b3J5KTtcbiB9XG4gcmV0dXJuIHNjcmlwdERpcmVjdG9yeSArIHBhdGg7XG59XG5cbnZhciByZWFkXywgcmVhZEFzeW5jLCByZWFkQmluYXJ5LCBzZXRXaW5kb3dUaXRsZTtcblxuZnVuY3Rpb24gbG9nRXhjZXB0aW9uT25FeGl0KGUpIHtcbiBpZiAoZSBpbnN0YW5jZW9mIEV4aXRTdGF0dXMpIHJldHVybjtcbiBsZXQgdG9Mb2cgPSBlO1xuIGlmIChlICYmIHR5cGVvZiBlID09IFwib2JqZWN0XCIgJiYgZS5zdGFjaykge1xuICB0b0xvZyA9IFsgZSwgZS5zdGFjayBdO1xuIH1cbiBlcnIoXCJleGl0aW5nIGR1ZSB0byBleGNlcHRpb246IFwiICsgdG9Mb2cpO1xufVxuXG52YXIgZnM7XG5cbnZhciBub2RlUGF0aDtcblxudmFyIHJlcXVpcmVOb2RlRlM7XG5cbmlmIChFTlZJUk9OTUVOVF9JU19OT0RFKSB7XG4gaWYgKCEodHlwZW9mIHByb2Nlc3MgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVxdWlyZSA9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgRXJyb3IoXCJub3QgY29tcGlsZWQgZm9yIHRoaXMgZW52aXJvbm1lbnQgKGRpZCB5b3UgYnVpbGQgdG8gSFRNTCBhbmQgdHJ5IHRvIHJ1biBpdCBub3Qgb24gdGhlIHdlYiwgb3Igc2V0IEVOVklST05NRU5UIHRvIHNvbWV0aGluZyAtIGxpa2Ugbm9kZSAtIGFuZCBydW4gaXQgc29tZXBsYWNlIGVsc2UgLSBsaWtlIG9uIHRoZSB3ZWI/KVwiKTtcbiBpZiAoRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IHJlcXVpcmUoXCJwYXRoXCIpLmRpcm5hbWUoc2NyaXB0RGlyZWN0b3J5KSArIFwiL1wiO1xuIH0gZWxzZSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IF9fZGlybmFtZSArIFwiL1wiO1xuIH1cbiByZXF1aXJlTm9kZUZTID0gKCgpID0+IHtcbiAgaWYgKCFub2RlUGF0aCkge1xuICAgZnMgPSByZXF1aXJlKFwiZnNcIik7XG4gICBub2RlUGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuICB9XG4gfSk7XG4gcmVhZF8gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKGZpbGVuYW1lLCBiaW5hcnkpIHtcbiAgcmVxdWlyZU5vZGVGUygpO1xuICBmaWxlbmFtZSA9IG5vZGVQYXRoW1wibm9ybWFsaXplXCJdKGZpbGVuYW1lKTtcbiAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgYmluYXJ5ID8gdW5kZWZpbmVkIDogXCJ1dGY4XCIpO1xuIH07XG4gcmVhZEJpbmFyeSA9IChmaWxlbmFtZSA9PiB7XG4gIHZhciByZXQgPSByZWFkXyhmaWxlbmFtZSwgdHJ1ZSk7XG4gIGlmICghcmV0LmJ1ZmZlcikge1xuICAgcmV0ID0gbmV3IFVpbnQ4QXJyYXkocmV0KTtcbiAgfVxuICBhc3NlcnQocmV0LmJ1ZmZlcik7XG4gIHJldHVybiByZXQ7XG4gfSk7XG4gcmVhZEFzeW5jID0gKChmaWxlbmFtZSwgb25sb2FkLCBvbmVycm9yKSA9PiB7XG4gIHJlcXVpcmVOb2RlRlMoKTtcbiAgZmlsZW5hbWUgPSBub2RlUGF0aFtcIm5vcm1hbGl6ZVwiXShmaWxlbmFtZSk7XG4gIGZzLnJlYWRGaWxlKGZpbGVuYW1lLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgIGlmIChlcnIpIG9uZXJyb3IoZXJyKTsgZWxzZSBvbmxvYWQoZGF0YS5idWZmZXIpO1xuICB9KTtcbiB9KTtcbiBpZiAocHJvY2Vzc1tcImFyZ3ZcIl0ubGVuZ3RoID4gMSkge1xuICB0aGlzUHJvZ3JhbSA9IHByb2Nlc3NbXCJhcmd2XCJdWzFdLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xuIH1cbiBhcmd1bWVudHNfID0gcHJvY2Vzc1tcImFyZ3ZcIl0uc2xpY2UoMik7XG4gcHJvY2Vzc1tcIm9uXCJdKFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZnVuY3Rpb24oZXgpIHtcbiAgaWYgKCEoZXggaW5zdGFuY2VvZiBFeGl0U3RhdHVzKSkge1xuICAgdGhyb3cgZXg7XG4gIH1cbiB9KTtcbiBwcm9jZXNzW1wib25cIl0oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgZnVuY3Rpb24ocmVhc29uKSB7XG4gIHRocm93IHJlYXNvbjtcbiB9KTtcbiBxdWl0XyA9ICgoc3RhdHVzLCB0b1Rocm93KSA9PiB7XG4gIGlmIChrZWVwUnVudGltZUFsaXZlKCkpIHtcbiAgIHByb2Nlc3NbXCJleGl0Q29kZVwiXSA9IHN0YXR1cztcbiAgIHRocm93IHRvVGhyb3c7XG4gIH1cbiAgbG9nRXhjZXB0aW9uT25FeGl0KHRvVGhyb3cpO1xuICBwcm9jZXNzW1wiZXhpdFwiXShzdGF0dXMpO1xuIH0pO1xuIE1vZHVsZVtcImluc3BlY3RcIl0gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiB9O1xufSBlbHNlIGlmIChFTlZJUk9OTUVOVF9JU19TSEVMTCkge1xuIGlmICh0eXBlb2YgcHJvY2VzcyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHdpbmRvdyA9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBpbXBvcnRTY3JpcHRzID09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPylcIik7XG4gaWYgKHR5cGVvZiByZWFkICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgcmVhZF8gPSBmdW5jdGlvbiBzaGVsbF9yZWFkKGYpIHtcbiAgIHJldHVybiByZWFkKGYpO1xuICB9O1xuIH1cbiByZWFkQmluYXJ5ID0gZnVuY3Rpb24gcmVhZEJpbmFyeShmKSB7XG4gIGxldCBkYXRhO1xuICBpZiAodHlwZW9mIHJlYWRidWZmZXIgPT0gXCJmdW5jdGlvblwiKSB7XG4gICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihmKSk7XG4gIH1cbiAgZGF0YSA9IHJlYWQoZiwgXCJiaW5hcnlcIik7XG4gIGFzc2VydCh0eXBlb2YgZGF0YSA9PSBcIm9iamVjdFwiKTtcbiAgcmV0dXJuIGRhdGE7XG4gfTtcbiByZWFkQXN5bmMgPSBmdW5jdGlvbiByZWFkQXN5bmMoZiwgb25sb2FkLCBvbmVycm9yKSB7XG4gIHNldFRpbWVvdXQoKCkgPT4gb25sb2FkKHJlYWRCaW5hcnkoZikpLCAwKTtcbiB9O1xuIGlmICh0eXBlb2Ygc2NyaXB0QXJncyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gIGFyZ3VtZW50c18gPSBzY3JpcHRBcmdzO1xuIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50cyAhPSBcInVuZGVmaW5lZFwiKSB7XG4gIGFyZ3VtZW50c18gPSBhcmd1bWVudHM7XG4gfVxuIGlmICh0eXBlb2YgcXVpdCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgcXVpdF8gPSAoKHN0YXR1cywgdG9UaHJvdykgPT4ge1xuICAgbG9nRXhjZXB0aW9uT25FeGl0KHRvVGhyb3cpO1xuICAgcXVpdChzdGF0dXMpO1xuICB9KTtcbiB9XG4gaWYgKHR5cGVvZiBwcmludCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSA9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlID0ge307XG4gIGNvbnNvbGUubG9nID0gcHJpbnQ7XG4gIGNvbnNvbGUud2FybiA9IGNvbnNvbGUuZXJyb3IgPSB0eXBlb2YgcHJpbnRFcnIgIT0gXCJ1bmRlZmluZWRcIiA/IHByaW50RXJyIDogcHJpbnQ7XG4gfVxufSBlbHNlIGlmIChFTlZJUk9OTUVOVF9JU19XRUIgfHwgRU5WSVJPTk1FTlRfSVNfV09SS0VSKSB7XG4gaWYgKEVOVklST05NRU5UX0lTX1dPUktFUikge1xuICBzY3JpcHREaXJlY3RvcnkgPSBzZWxmLmxvY2F0aW9uLmhyZWY7XG4gfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gIHNjcmlwdERpcmVjdG9yeSA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuIH1cbiBpZiAoX3NjcmlwdERpcikge1xuICBzY3JpcHREaXJlY3RvcnkgPSBfc2NyaXB0RGlyO1xuIH1cbiBpZiAoc2NyaXB0RGlyZWN0b3J5LmluZGV4T2YoXCJibG9iOlwiKSAhPT0gMCkge1xuICBzY3JpcHREaXJlY3RvcnkgPSBzY3JpcHREaXJlY3Rvcnkuc3Vic3RyKDAsIHNjcmlwdERpcmVjdG9yeS5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiB9IGVsc2Uge1xuICBzY3JpcHREaXJlY3RvcnkgPSBcIlwiO1xuIH1cbiBpZiAoISh0eXBlb2Ygd2luZG93ID09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGltcG9ydFNjcmlwdHMgPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IEVycm9yKFwibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPylcIik7XG4ge1xuICByZWFkXyA9ICh1cmwgPT4ge1xuICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgeGhyLm9wZW4oXCJHRVRcIiwgdXJsLCBmYWxzZSk7XG4gICB4aHIuc2VuZChudWxsKTtcbiAgIHJldHVybiB4aHIucmVzcG9uc2VUZXh0O1xuICB9KTtcbiAgaWYgKEVOVklST05NRU5UX0lTX1dPUktFUikge1xuICAgcmVhZEJpbmFyeSA9ICh1cmwgPT4ge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIGZhbHNlKTtcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgIHhoci5zZW5kKG51bGwpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UpO1xuICAgfSk7XG4gIH1cbiAgcmVhZEFzeW5jID0gKCh1cmwsIG9ubG9hZCwgb25lcnJvcikgPT4ge1xuICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgeGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcbiAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICB4aHIub25sb2FkID0gKCgpID0+IHtcbiAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDAgfHwgeGhyLnN0YXR1cyA9PSAwICYmIHhoci5yZXNwb25zZSkge1xuICAgICBvbmxvYWQoeGhyLnJlc3BvbnNlKTtcbiAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbmVycm9yKCk7XG4gICB9KTtcbiAgIHhoci5vbmVycm9yID0gb25lcnJvcjtcbiAgIHhoci5zZW5kKG51bGwpO1xuICB9KTtcbiB9XG4gc2V0V2luZG93VGl0bGUgPSAodGl0bGUgPT4gZG9jdW1lbnQudGl0bGUgPSB0aXRsZSk7XG59IGVsc2Uge1xuIHRocm93IG5ldyBFcnJvcihcImVudmlyb25tZW50IGRldGVjdGlvbiBlcnJvclwiKTtcbn1cblxudmFyIG91dCA9IE1vZHVsZVtcInByaW50XCJdIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG5cbnZhciBlcnIgPSBNb2R1bGVbXCJwcmludEVyclwiXSB8fCBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcblxuT2JqZWN0LmFzc2lnbihNb2R1bGUsIG1vZHVsZU92ZXJyaWRlcyk7XG5cbm1vZHVsZU92ZXJyaWRlcyA9IG51bGw7XG5cbmNoZWNrSW5jb21pbmdNb2R1bGVBUEkoKTtcblxuaWYgKE1vZHVsZVtcImFyZ3VtZW50c1wiXSkgYXJndW1lbnRzXyA9IE1vZHVsZVtcImFyZ3VtZW50c1wiXTtcblxubGVnYWN5TW9kdWxlUHJvcChcImFyZ3VtZW50c1wiLCBcImFyZ3VtZW50c19cIik7XG5cbmlmIChNb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXSkgdGhpc1Byb2dyYW0gPSBNb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXTtcblxubGVnYWN5TW9kdWxlUHJvcChcInRoaXNQcm9ncmFtXCIsIFwidGhpc1Byb2dyYW1cIik7XG5cbmlmIChNb2R1bGVbXCJxdWl0XCJdKSBxdWl0XyA9IE1vZHVsZVtcInF1aXRcIl07XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJxdWl0XCIsIFwicXVpdF9cIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wibWVtb3J5SW5pdGlhbGl6ZXJQcmVmaXhVUkxcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUubWVtb3J5SW5pdGlhbGl6ZXJQcmVmaXhVUkwgb3B0aW9uIHdhcyByZW1vdmVkLCB1c2UgTW9kdWxlLmxvY2F0ZUZpbGUgaW5zdGVhZFwiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJwdGhyZWFkTWFpblByZWZpeFVSTFwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5wdGhyZWFkTWFpblByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcImNkSW5pdGlhbGl6ZXJQcmVmaXhVUkxcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUuY2RJbml0aWFsaXplclByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcImZpbGVQYWNrYWdlUHJlZml4VVJMXCJdID09IFwidW5kZWZpbmVkXCIsIFwiTW9kdWxlLmZpbGVQYWNrYWdlUHJlZml4VVJMIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIE1vZHVsZS5sb2NhdGVGaWxlIGluc3RlYWRcIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wicmVhZFwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5yZWFkIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHJlYWRfIGluIEpTKVwiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJyZWFkQXN5bmNcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUucmVhZEFzeW5jIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHJlYWRBc3luYyBpbiBKUylcIik7XG5cbmFzc2VydCh0eXBlb2YgTW9kdWxlW1wicmVhZEJpbmFyeVwiXSA9PSBcInVuZGVmaW5lZFwiLCBcIk1vZHVsZS5yZWFkQmluYXJ5IG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHJlYWRCaW5hcnkgaW4gSlMpXCIpO1xuXG5hc3NlcnQodHlwZW9mIE1vZHVsZVtcInNldFdpbmRvd1RpdGxlXCJdID09IFwidW5kZWZpbmVkXCIsIFwiTW9kdWxlLnNldFdpbmRvd1RpdGxlIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHNldFdpbmRvd1RpdGxlIGluIEpTKVwiKTtcblxuYXNzZXJ0KHR5cGVvZiBNb2R1bGVbXCJUT1RBTF9NRU1PUllcIl0gPT0gXCJ1bmRlZmluZWRcIiwgXCJNb2R1bGUuVE9UQUxfTUVNT1JZIGhhcyBiZWVuIHJlbmFtZWQgTW9kdWxlLklOSVRJQUxfTUVNT1JZXCIpO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwicmVhZFwiLCBcInJlYWRfXCIpO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwicmVhZEFzeW5jXCIsIFwicmVhZEFzeW5jXCIpO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwicmVhZEJpbmFyeVwiLCBcInJlYWRCaW5hcnlcIik7XG5cbmxlZ2FjeU1vZHVsZVByb3AoXCJzZXRXaW5kb3dUaXRsZVwiLCBcInNldFdpbmRvd1RpdGxlXCIpO1xuXG52YXIgSURCRlMgPSBcIklEQkZTIGlzIG5vIGxvbmdlciBpbmNsdWRlZCBieSBkZWZhdWx0OyBidWlsZCB3aXRoIC1saWRiZnMuanNcIjtcblxudmFyIFBST1hZRlMgPSBcIlBST1hZRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxwcm94eWZzLmpzXCI7XG5cbnZhciBXT1JLRVJGUyA9IFwiV09SS0VSRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWx3b3JrZXJmcy5qc1wiO1xuXG52YXIgTk9ERUZTID0gXCJOT0RFRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxub2RlZnMuanNcIjtcblxuZnVuY3Rpb24gYWxpZ25NZW1vcnkoKSB7XG4gYWJvcnQoXCJgYWxpZ25NZW1vcnlgIGlzIG5vdyBhIGxpYnJhcnkgZnVuY3Rpb24gYW5kIG5vdCBpbmNsdWRlZCBieSBkZWZhdWx0OyBhZGQgaXQgdG8geW91ciBsaWJyYXJ5LmpzIF9fZGVwcyBvciB0byBERUZBVUxUX0xJQlJBUllfRlVOQ1NfVE9fSU5DTFVERSBvbiB0aGUgY29tbWFuZCBsaW5lXCIpO1xufVxuXG5hc3NlcnQoIUVOVklST05NRU5UX0lTX1NIRUxMLCBcInNoZWxsIGVudmlyb25tZW50IGRldGVjdGVkIGJ1dCBub3QgZW5hYmxlZCBhdCBidWlsZCB0aW1lLiAgQWRkICdzaGVsbCcgdG8gYC1zRU5WSVJPTk1FTlRgIHRvIGVuYWJsZS5cIik7XG5cbnZhciBTVEFDS19BTElHTiA9IDE2O1xuXG52YXIgUE9JTlRFUl9TSVpFID0gNDtcblxuZnVuY3Rpb24gZ2V0TmF0aXZlVHlwZVNpemUodHlwZSkge1xuIHN3aXRjaCAodHlwZSkge1xuIGNhc2UgXCJpMVwiOlxuIGNhc2UgXCJpOFwiOlxuICByZXR1cm4gMTtcblxuIGNhc2UgXCJpMTZcIjpcbiAgcmV0dXJuIDI7XG5cbiBjYXNlIFwiaTMyXCI6XG4gIHJldHVybiA0O1xuXG4gY2FzZSBcImk2NFwiOlxuICByZXR1cm4gODtcblxuIGNhc2UgXCJmbG9hdFwiOlxuICByZXR1cm4gNDtcblxuIGNhc2UgXCJkb3VibGVcIjpcbiAgcmV0dXJuIDg7XG5cbiBkZWZhdWx0OlxuICB7XG4gICBpZiAodHlwZVt0eXBlLmxlbmd0aCAtIDFdID09PSBcIipcIikge1xuICAgIHJldHVybiBQT0lOVEVSX1NJWkU7XG4gICB9IGVsc2UgaWYgKHR5cGVbMF0gPT09IFwiaVwiKSB7XG4gICAgY29uc3QgYml0cyA9IE51bWJlcih0eXBlLnN1YnN0cigxKSk7XG4gICAgYXNzZXJ0KGJpdHMgJSA4ID09PSAwLCBcImdldE5hdGl2ZVR5cGVTaXplIGludmFsaWQgYml0cyBcIiArIGJpdHMgKyBcIiwgdHlwZSBcIiArIHR5cGUpO1xuICAgIHJldHVybiBiaXRzIC8gODtcbiAgIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gICB9XG4gIH1cbiB9XG59XG5cbmZ1bmN0aW9uIHdhcm5PbmNlKHRleHQpIHtcbiBpZiAoIXdhcm5PbmNlLnNob3duKSB3YXJuT25jZS5zaG93biA9IHt9O1xuIGlmICghd2Fybk9uY2Uuc2hvd25bdGV4dF0pIHtcbiAgd2Fybk9uY2Uuc2hvd25bdGV4dF0gPSAxO1xuICBlcnIodGV4dCk7XG4gfVxufVxuXG5mdW5jdGlvbiB1bGViMTI4RW5jb2RlKG4pIHtcbiBhc3NlcnQobiA8IDE2Mzg0KTtcbiBpZiAobiA8IDEyOCkge1xuICByZXR1cm4gWyBuIF07XG4gfVxuIHJldHVybiBbIG4gJSAxMjggfCAxMjgsIG4gPj4gNyBdO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0SnNGdW5jdGlvblRvV2FzbShmdW5jLCBzaWcpIHtcbiBpZiAodHlwZW9mIFdlYkFzc2VtYmx5LkZ1bmN0aW9uID09IFwiZnVuY3Rpb25cIikge1xuICB2YXIgdHlwZU5hbWVzID0ge1xuICAgXCJpXCI6IFwiaTMyXCIsXG4gICBcImpcIjogXCJpNjRcIixcbiAgIFwiZlwiOiBcImYzMlwiLFxuICAgXCJkXCI6IFwiZjY0XCJcbiAgfTtcbiAgdmFyIHR5cGUgPSB7XG4gICBwYXJhbWV0ZXJzOiBbXSxcbiAgIHJlc3VsdHM6IHNpZ1swXSA9PSBcInZcIiA/IFtdIDogWyB0eXBlTmFtZXNbc2lnWzBdXSBdXG4gIH07XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgc2lnLmxlbmd0aDsgKytpKSB7XG4gICB0eXBlLnBhcmFtZXRlcnMucHVzaCh0eXBlTmFtZXNbc2lnW2ldXSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBXZWJBc3NlbWJseS5GdW5jdGlvbih0eXBlLCBmdW5jKTtcbiB9XG4gdmFyIHR5cGVTZWN0aW9uID0gWyAxLCA5NiBdO1xuIHZhciBzaWdSZXQgPSBzaWcuc2xpY2UoMCwgMSk7XG4gdmFyIHNpZ1BhcmFtID0gc2lnLnNsaWNlKDEpO1xuIHZhciB0eXBlQ29kZXMgPSB7XG4gIFwiaVwiOiAxMjcsXG4gIFwialwiOiAxMjYsXG4gIFwiZlwiOiAxMjUsXG4gIFwiZFwiOiAxMjRcbiB9O1xuIHR5cGVTZWN0aW9uID0gdHlwZVNlY3Rpb24uY29uY2F0KHVsZWIxMjhFbmNvZGUoc2lnUGFyYW0ubGVuZ3RoKSk7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdQYXJhbS5sZW5ndGg7ICsraSkge1xuICB0eXBlU2VjdGlvbi5wdXNoKHR5cGVDb2Rlc1tzaWdQYXJhbVtpXV0pO1xuIH1cbiBpZiAoc2lnUmV0ID09IFwidlwiKSB7XG4gIHR5cGVTZWN0aW9uLnB1c2goMCk7XG4gfSBlbHNlIHtcbiAgdHlwZVNlY3Rpb24gPSB0eXBlU2VjdGlvbi5jb25jYXQoWyAxLCB0eXBlQ29kZXNbc2lnUmV0XSBdKTtcbiB9XG4gdHlwZVNlY3Rpb24gPSBbIDEgXS5jb25jYXQodWxlYjEyOEVuY29kZSh0eXBlU2VjdGlvbi5sZW5ndGgpLCB0eXBlU2VjdGlvbik7XG4gdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoWyAwLCA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAgXS5jb25jYXQodHlwZVNlY3Rpb24sIFsgMiwgNywgMSwgMSwgMTAxLCAxLCAxMDIsIDAsIDAsIDcsIDUsIDEsIDEsIDEwMiwgMCwgMCBdKSk7XG4gdmFyIG1vZHVsZSA9IG5ldyBXZWJBc3NlbWJseS5Nb2R1bGUoYnl0ZXMpO1xuIHZhciBpbnN0YW5jZSA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsIHtcbiAgXCJlXCI6IHtcbiAgIFwiZlwiOiBmdW5jXG4gIH1cbiB9KTtcbiB2YXIgd3JhcHBlZEZ1bmMgPSBpbnN0YW5jZS5leHBvcnRzW1wiZlwiXTtcbiByZXR1cm4gd3JhcHBlZEZ1bmM7XG59XG5cbnZhciBmcmVlVGFibGVJbmRleGVzID0gW107XG5cbnZhciBmdW5jdGlvbnNJblRhYmxlTWFwO1xuXG5mdW5jdGlvbiBnZXRFbXB0eVRhYmxlU2xvdCgpIHtcbiBpZiAoZnJlZVRhYmxlSW5kZXhlcy5sZW5ndGgpIHtcbiAgcmV0dXJuIGZyZWVUYWJsZUluZGV4ZXMucG9wKCk7XG4gfVxuIHRyeSB7XG4gIHdhc21UYWJsZS5ncm93KDEpO1xuIH0gY2F0Y2ggKGVycikge1xuICBpZiAoIShlcnIgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSkge1xuICAgdGhyb3cgZXJyO1xuICB9XG4gIHRocm93IFwiVW5hYmxlIHRvIGdyb3cgd2FzbSB0YWJsZS4gU2V0IEFMTE9XX1RBQkxFX0dST1dUSC5cIjtcbiB9XG4gcmV0dXJuIHdhc21UYWJsZS5sZW5ndGggLSAxO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVUYWJsZU1hcChvZmZzZXQsIGNvdW50KSB7XG4gZm9yICh2YXIgaSA9IG9mZnNldDsgaSA8IG9mZnNldCArIGNvdW50OyBpKyspIHtcbiAgdmFyIGl0ZW0gPSBnZXRXYXNtVGFibGVFbnRyeShpKTtcbiAgaWYgKGl0ZW0pIHtcbiAgIGZ1bmN0aW9uc0luVGFibGVNYXAuc2V0KGl0ZW0sIGkpO1xuICB9XG4gfVxufVxuXG5mdW5jdGlvbiBhZGRGdW5jdGlvbihmdW5jLCBzaWcpIHtcbiBhc3NlcnQodHlwZW9mIGZ1bmMgIT0gXCJ1bmRlZmluZWRcIik7XG4gaWYgKCFmdW5jdGlvbnNJblRhYmxlTWFwKSB7XG4gIGZ1bmN0aW9uc0luVGFibGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuICB1cGRhdGVUYWJsZU1hcCgwLCB3YXNtVGFibGUubGVuZ3RoKTtcbiB9XG4gaWYgKGZ1bmN0aW9uc0luVGFibGVNYXAuaGFzKGZ1bmMpKSB7XG4gIHJldHVybiBmdW5jdGlvbnNJblRhYmxlTWFwLmdldChmdW5jKTtcbiB9XG4gdmFyIHJldCA9IGdldEVtcHR5VGFibGVTbG90KCk7XG4gdHJ5IHtcbiAgc2V0V2FzbVRhYmxlRW50cnkocmV0LCBmdW5jKTtcbiB9IGNhdGNoIChlcnIpIHtcbiAgaWYgKCEoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yKSkge1xuICAgdGhyb3cgZXJyO1xuICB9XG4gIGFzc2VydCh0eXBlb2Ygc2lnICE9IFwidW5kZWZpbmVkXCIsIFwiTWlzc2luZyBzaWduYXR1cmUgYXJndW1lbnQgdG8gYWRkRnVuY3Rpb246IFwiICsgZnVuYyk7XG4gIHZhciB3cmFwcGVkID0gY29udmVydEpzRnVuY3Rpb25Ub1dhc20oZnVuYywgc2lnKTtcbiAgc2V0V2FzbVRhYmxlRW50cnkocmV0LCB3cmFwcGVkKTtcbiB9XG4gZnVuY3Rpb25zSW5UYWJsZU1hcC5zZXQoZnVuYywgcmV0KTtcbiByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpbmRleCkge1xuIGZ1bmN0aW9uc0luVGFibGVNYXAuZGVsZXRlKGdldFdhc21UYWJsZUVudHJ5KGluZGV4KSk7XG4gZnJlZVRhYmxlSW5kZXhlcy5wdXNoKGluZGV4KTtcbn1cblxuZnVuY3Rpb24gbGVnYWN5TW9kdWxlUHJvcChwcm9wLCBuZXdOYW1lKSB7XG4gaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZSwgcHJvcCkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZSwgcHJvcCwge1xuICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBhYm9ydChcIk1vZHVsZS5cIiArIHByb3AgKyBcIiBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIHBsYWluIFwiICsgbmV3TmFtZSArIFwiICh0aGUgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgcHJvdmlkZWQgb24gTW9kdWxlLCBidXQgYWZ0ZXIgc3RhcnR1cCB0aGUgdmFsdWUgaXMgb25seSBsb29rZWQgZm9yIG9uIGEgbG9jYWwgdmFyaWFibGUgb2YgdGhhdCBuYW1lKVwiKTtcbiAgIH1cbiAgfSk7XG4gfVxufVxuXG5mdW5jdGlvbiBpZ25vcmVkTW9kdWxlUHJvcChwcm9wKSB7XG4gaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTW9kdWxlLCBwcm9wKSkge1xuICBhYm9ydChcImBNb2R1bGUuXCIgKyBwcm9wICsgXCJgIHdhcyBzdXBwbGllZCBidXQgYFwiICsgcHJvcCArIFwiYCBub3QgaW5jbHVkZWQgaW4gSU5DT01JTkdfTU9EVUxFX0pTX0FQSVwiKTtcbiB9XG59XG5cbmZ1bmN0aW9uIHVuZXhwb3J0ZWRNZXNzYWdlKHN5bSwgaXNGU1N5Ym9sKSB7XG4gdmFyIG1zZyA9IFwiJ1wiICsgc3ltICsgXCInIHdhcyBub3QgZXhwb3J0ZWQuIGFkZCBpdCB0byBFWFBPUlRFRF9SVU5USU1FX01FVEhPRFMgKHNlZSB0aGUgRkFRKVwiO1xuIGlmIChpc0ZTU3lib2wpIHtcbiAgbXNnICs9IFwiLiBBbHRlcm5hdGl2ZWx5LCBmb3JjaW5nIGZpbGVzeXN0ZW0gc3VwcG9ydCAoLXNGT1JDRV9GSUxFU1lTVEVNKSBjYW4gZXhwb3J0IHRoaXMgZm9yIHlvdVwiO1xuIH1cbiByZXR1cm4gbXNnO1xufVxuXG5mdW5jdGlvbiB1bmV4cG9ydGVkUnVudGltZVN5bWJvbChzeW0sIGlzRlNTeWJvbCkge1xuIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGUsIHN5bSkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZSwgc3ltLCB7XG4gICBjb25maWd1cmFibGU6IHRydWUsXG4gICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGFib3J0KHVuZXhwb3J0ZWRNZXNzYWdlKHN5bSwgaXNGU1N5Ym9sKSk7XG4gICB9XG4gIH0pO1xuIH1cbn1cblxuZnVuY3Rpb24gdW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihzeW0sIGlzRlNTeWJvbCkge1xuIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNb2R1bGUsIHN5bSkpIHtcbiAgTW9kdWxlW3N5bV0gPSAoKCkgPT4gYWJvcnQodW5leHBvcnRlZE1lc3NhZ2Uoc3ltLCBpc0ZTU3lib2wpKSk7XG4gfVxufVxuXG52YXIgdGVtcFJldDAgPSAwO1xuXG52YXIgc2V0VGVtcFJldDAgPSB2YWx1ZSA9PiB7XG4gdGVtcFJldDAgPSB2YWx1ZTtcbn07XG5cbnZhciBnZXRUZW1wUmV0MCA9ICgpID0+IHRlbXBSZXQwO1xuXG52YXIgd2FzbUJpbmFyeTtcblxuaWYgKE1vZHVsZVtcIndhc21CaW5hcnlcIl0pIHdhc21CaW5hcnkgPSBNb2R1bGVbXCJ3YXNtQmluYXJ5XCJdO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwid2FzbUJpbmFyeVwiLCBcIndhc21CaW5hcnlcIik7XG5cbnZhciBub0V4aXRSdW50aW1lID0gTW9kdWxlW1wibm9FeGl0UnVudGltZVwiXSB8fCB0cnVlO1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwibm9FeGl0UnVudGltZVwiLCBcIm5vRXhpdFJ1bnRpbWVcIik7XG5cbmlmICh0eXBlb2YgV2ViQXNzZW1ibHkgIT0gXCJvYmplY3RcIikge1xuIGFib3J0KFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTtcbn1cblxuZnVuY3Rpb24gc2V0VmFsdWUocHRyLCB2YWx1ZSwgdHlwZSA9IFwiaThcIiwgbm9TYWZlKSB7XG4gaWYgKHR5cGUuY2hhckF0KHR5cGUubGVuZ3RoIC0gMSkgPT09IFwiKlwiKSB0eXBlID0gXCJpMzJcIjtcbiBpZiAobm9TYWZlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICBjYXNlIFwiaTFcIjpcbiAgIEhFQVA4W3B0ciA+Pj4gMF0gPSB2YWx1ZTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpOFwiOlxuICAgSEVBUDhbcHRyID4+PiAwXSA9IHZhbHVlO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImkxNlwiOlxuICAgSEVBUDE2W3B0ciA+Pj4gMV0gPSB2YWx1ZTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpMzJcIjpcbiAgIEhFQVAzMltwdHIgPj4+IDJdID0gdmFsdWU7XG4gICBicmVhaztcblxuICBjYXNlIFwiaTY0XCI6XG4gICB0ZW1wSTY0ID0gWyB2YWx1ZSA+Pj4gMCwgKHRlbXBEb3VibGUgPSB2YWx1ZSwgK01hdGguYWJzKHRlbXBEb3VibGUpID49IDEgPyB0ZW1wRG91YmxlID4gMCA/IChNYXRoLm1pbigrTWF0aC5mbG9vcih0ZW1wRG91YmxlIC8gNDI5NDk2NzI5NiksIDQyOTQ5NjcyOTUpIHwgMCkgPj4+IDAgOiB+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUgLSArKH5+dGVtcERvdWJsZSA+Pj4gMCkpIC8gNDI5NDk2NzI5NikgPj4+IDAgOiAwKSBdLCBcbiAgIEhFQVAzMltwdHIgPj4+IDJdID0gdGVtcEk2NFswXSwgSEVBUDMyW3B0ciArIDQgPj4+IDJdID0gdGVtcEk2NFsxXTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJmbG9hdFwiOlxuICAgSEVBUEYzMltwdHIgPj4+IDJdID0gdmFsdWU7XG4gICBicmVhaztcblxuICBjYXNlIFwiZG91YmxlXCI6XG4gICBIRUFQRjY0W3B0ciA+Pj4gM10gPSB2YWx1ZTtcbiAgIGJyZWFrO1xuXG4gIGRlZmF1bHQ6XG4gICBhYm9ydChcImludmFsaWQgdHlwZSBmb3Igc2V0VmFsdWU6IFwiICsgdHlwZSk7XG4gIH1cbiB9IGVsc2Uge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgY2FzZSBcImkxXCI6XG4gICBTQUZFX0hFQVBfU1RPUkUocHRyIHwgMCwgdmFsdWUgfCAwLCAxKTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpOFwiOlxuICAgU0FGRV9IRUFQX1NUT1JFKHB0ciB8IDAsIHZhbHVlIHwgMCwgMSk7XG4gICBicmVhaztcblxuICBjYXNlIFwiaTE2XCI6XG4gICBTQUZFX0hFQVBfU1RPUkUocHRyIHwgMCwgdmFsdWUgfCAwLCAyKTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJpMzJcIjpcbiAgIFNBRkVfSEVBUF9TVE9SRShwdHIgfCAwLCB2YWx1ZSB8IDAsIDQpO1xuICAgYnJlYWs7XG5cbiAgY2FzZSBcImk2NFwiOlxuICAgdGVtcEk2NCA9IFsgdmFsdWUgPj4+IDAsICh0ZW1wRG91YmxlID0gdmFsdWUsICtNYXRoLmFicyh0ZW1wRG91YmxlKSA+PSAxID8gdGVtcERvdWJsZSA+IDAgPyAoTWF0aC5taW4oK01hdGguZmxvb3IodGVtcERvdWJsZSAvIDQyOTQ5NjcyOTYpLCA0Mjk0OTY3Mjk1KSB8IDApID4+PiAwIDogfn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlIC0gKyh+fnRlbXBEb3VibGUgPj4+IDApKSAvIDQyOTQ5NjcyOTYpID4+PiAwIDogMCkgXSwgXG4gICBTQUZFX0hFQVBfU1RPUkUocHRyIHwgMCwgdGVtcEk2NFswXSB8IDAsIDQpLCBTQUZFX0hFQVBfU1RPUkUocHRyICsgNCB8IDAsIHRlbXBJNjRbMV0gfCAwLCA0KTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJmbG9hdFwiOlxuICAgU0FGRV9IRUFQX1NUT1JFX0QocHRyIHwgMCwgTWF0aC5mcm91bmQodmFsdWUpLCA0KTtcbiAgIGJyZWFrO1xuXG4gIGNhc2UgXCJkb3VibGVcIjpcbiAgIFNBRkVfSEVBUF9TVE9SRV9EKHB0ciB8IDAsICt2YWx1ZSwgOCk7XG4gICBicmVhaztcblxuICBkZWZhdWx0OlxuICAgYWJvcnQoXCJpbnZhbGlkIHR5cGUgZm9yIHNldFZhbHVlOiBcIiArIHR5cGUpO1xuICB9XG4gfVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZShwdHIsIHR5cGUgPSBcImk4XCIsIG5vU2FmZSkge1xuIGlmICh0eXBlLmNoYXJBdCh0eXBlLmxlbmd0aCAtIDEpID09PSBcIipcIikgdHlwZSA9IFwiaTMyXCI7XG4gaWYgKG5vU2FmZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgY2FzZSBcImkxXCI6XG4gICByZXR1cm4gSEVBUDhbcHRyID4+PiAwXTtcblxuICBjYXNlIFwiaThcIjpcbiAgIHJldHVybiBIRUFQOFtwdHIgPj4+IDBdO1xuXG4gIGNhc2UgXCJpMTZcIjpcbiAgIHJldHVybiBIRUFQMTZbcHRyID4+PiAxXTtcblxuICBjYXNlIFwiaTMyXCI6XG4gICByZXR1cm4gSEVBUDMyW3B0ciA+Pj4gMl07XG5cbiAgY2FzZSBcImk2NFwiOlxuICAgcmV0dXJuIEhFQVAzMltwdHIgPj4+IDJdO1xuXG4gIGNhc2UgXCJmbG9hdFwiOlxuICAgcmV0dXJuIEhFQVBGMzJbcHRyID4+PiAyXTtcblxuICBjYXNlIFwiZG91YmxlXCI6XG4gICByZXR1cm4gTnVtYmVyKEhFQVBGNjRbcHRyID4+PiAzXSk7XG5cbiAgZGVmYXVsdDpcbiAgIGFib3J0KFwiaW52YWxpZCB0eXBlIGZvciBnZXRWYWx1ZTogXCIgKyB0eXBlKTtcbiAgfVxuIH0gZWxzZSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICBjYXNlIFwiaTFcIjpcbiAgIHJldHVybiBTQUZFX0hFQVBfTE9BRChwdHIgfCAwLCAxLCAwKSB8IDA7XG5cbiAgY2FzZSBcImk4XCI6XG4gICByZXR1cm4gU0FGRV9IRUFQX0xPQUQocHRyIHwgMCwgMSwgMCkgfCAwO1xuXG4gIGNhc2UgXCJpMTZcIjpcbiAgIHJldHVybiBTQUZFX0hFQVBfTE9BRChwdHIgfCAwLCAyLCAwKSB8IDA7XG5cbiAgY2FzZSBcImkzMlwiOlxuICAgcmV0dXJuIFNBRkVfSEVBUF9MT0FEKHB0ciB8IDAsIDQsIDApIHwgMDtcblxuICBjYXNlIFwiaTY0XCI6XG4gICByZXR1cm4gU0FGRV9IRUFQX0xPQUQocHRyIHwgMCwgOCwgMCkgfCAwO1xuXG4gIGNhc2UgXCJmbG9hdFwiOlxuICAgcmV0dXJuIE1hdGguZnJvdW5kKFNBRkVfSEVBUF9MT0FEX0QocHRyIHwgMCwgNCwgMCkpO1xuXG4gIGNhc2UgXCJkb3VibGVcIjpcbiAgIHJldHVybiArU0FGRV9IRUFQX0xPQURfRChwdHIgfCAwLCA4LCAwKTtcblxuICBkZWZhdWx0OlxuICAgYWJvcnQoXCJpbnZhbGlkIHR5cGUgZm9yIGdldFZhbHVlOiBcIiArIHR5cGUpO1xuICB9XG4gfVxuIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRTYWZlSGVhcFR5cGUoYnl0ZXMsIGlzRmxvYXQpIHtcbiBzd2l0Y2ggKGJ5dGVzKSB7XG4gY2FzZSAxOlxuICByZXR1cm4gXCJpOFwiO1xuXG4gY2FzZSAyOlxuICByZXR1cm4gXCJpMTZcIjtcblxuIGNhc2UgNDpcbiAgcmV0dXJuIGlzRmxvYXQgPyBcImZsb2F0XCIgOiBcImkzMlwiO1xuXG4gY2FzZSA4OlxuICByZXR1cm4gaXNGbG9hdCA/IFwiZG91YmxlXCIgOiBcImk2NFwiO1xuXG4gZGVmYXVsdDpcbiAgYXNzZXJ0KDApO1xuIH1cbn1cblxuZnVuY3Rpb24gU0FGRV9IRUFQX1NUT1JFKGRlc3QsIHZhbHVlLCBieXRlcywgaXNGbG9hdCkge1xuIGRlc3QgPj4+PSAwO1xuIGlmIChkZXN0IDw9IDApIGFib3J0KFwic2VnbWVudGF0aW9uIGZhdWx0IHN0b3JpbmcgXCIgKyBieXRlcyArIFwiIGJ5dGVzIHRvIGFkZHJlc3MgXCIgKyBkZXN0KTtcbiBpZiAoZGVzdCAlIGJ5dGVzICE9PSAwKSBhYm9ydChcImFsaWdubWVudCBlcnJvciBzdG9yaW5nIHRvIGFkZHJlc3MgXCIgKyBkZXN0ICsgXCIsIHdoaWNoIHdhcyBleHBlY3RlZCB0byBiZSBhbGlnbmVkIHRvIGEgbXVsdGlwbGUgb2YgXCIgKyBieXRlcyk7XG4gaWYgKHJ1bnRpbWVJbml0aWFsaXplZCkge1xuICB2YXIgYnJrID0gX3NicmsoKSA+Pj4gMDtcbiAgaWYgKGRlc3QgKyBieXRlcyA+IGJyaykgYWJvcnQoXCJzZWdtZW50YXRpb24gZmF1bHQsIGV4Y2VlZGVkIHRoZSB0b3Agb2YgdGhlIGF2YWlsYWJsZSBkeW5hbWljIGhlYXAgd2hlbiBzdG9yaW5nIFwiICsgYnl0ZXMgKyBcIiBieXRlcyB0byBhZGRyZXNzIFwiICsgZGVzdCArIFwiLiBEWU5BTUlDVE9QPVwiICsgYnJrKTtcbiAgYXNzZXJ0KGJyayA+PSBfZW1zY3JpcHRlbl9zdGFja19nZXRfYmFzZSgpKTtcbiAgYXNzZXJ0KGJyayA8PSBIRUFQOC5sZW5ndGgpO1xuIH1cbiBzZXRWYWx1ZShkZXN0LCB2YWx1ZSwgZ2V0U2FmZUhlYXBUeXBlKGJ5dGVzLCBpc0Zsb2F0KSwgMSk7XG4gcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBTQUZFX0hFQVBfU1RPUkVfRChkZXN0LCB2YWx1ZSwgYnl0ZXMpIHtcbiByZXR1cm4gU0FGRV9IRUFQX1NUT1JFKGRlc3QsIHZhbHVlLCBieXRlcywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIFNBRkVfSEVBUF9MT0FEKGRlc3QsIGJ5dGVzLCB1bnNpZ25lZCwgaXNGbG9hdCkge1xuIGRlc3QgPj4+PSAwO1xuIGlmIChkZXN0IDw9IDApIGFib3J0KFwic2VnbWVudGF0aW9uIGZhdWx0IGxvYWRpbmcgXCIgKyBieXRlcyArIFwiIGJ5dGVzIGZyb20gYWRkcmVzcyBcIiArIGRlc3QpO1xuIGlmIChkZXN0ICUgYnl0ZXMgIT09IDApIGFib3J0KFwiYWxpZ25tZW50IGVycm9yIGxvYWRpbmcgZnJvbSBhZGRyZXNzIFwiICsgZGVzdCArIFwiLCB3aGljaCB3YXMgZXhwZWN0ZWQgdG8gYmUgYWxpZ25lZCB0byBhIG11bHRpcGxlIG9mIFwiICsgYnl0ZXMpO1xuIGlmIChydW50aW1lSW5pdGlhbGl6ZWQpIHtcbiAgdmFyIGJyayA9IF9zYnJrKCkgPj4+IDA7XG4gIGlmIChkZXN0ICsgYnl0ZXMgPiBicmspIGFib3J0KFwic2VnbWVudGF0aW9uIGZhdWx0LCBleGNlZWRlZCB0aGUgdG9wIG9mIHRoZSBhdmFpbGFibGUgZHluYW1pYyBoZWFwIHdoZW4gbG9hZGluZyBcIiArIGJ5dGVzICsgXCIgYnl0ZXMgZnJvbSBhZGRyZXNzIFwiICsgZGVzdCArIFwiLiBEWU5BTUlDVE9QPVwiICsgYnJrKTtcbiAgYXNzZXJ0KGJyayA+PSBfZW1zY3JpcHRlbl9zdGFja19nZXRfYmFzZSgpKTtcbiAgYXNzZXJ0KGJyayA8PSBIRUFQOC5sZW5ndGgpO1xuIH1cbiB2YXIgdHlwZSA9IGdldFNhZmVIZWFwVHlwZShieXRlcywgaXNGbG9hdCk7XG4gdmFyIHJldCA9IGdldFZhbHVlKGRlc3QsIHR5cGUsIDEpO1xuIGlmICh1bnNpZ25lZCkgcmV0ID0gdW5TaWduKHJldCwgcGFyc2VJbnQodHlwZS5zdWJzdHIoMSksIDEwKSk7XG4gcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gU0FGRV9IRUFQX0xPQURfRChkZXN0LCBieXRlcywgdW5zaWduZWQpIHtcbiByZXR1cm4gU0FGRV9IRUFQX0xPQUQoZGVzdCwgYnl0ZXMsIHVuc2lnbmVkLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gU0FGRV9GVF9NQVNLKHZhbHVlLCBtYXNrKSB7XG4gdmFyIHJldCA9IHZhbHVlICYgbWFzaztcbiBpZiAocmV0ICE9PSB2YWx1ZSkge1xuICBhYm9ydChcIkZ1bmN0aW9uIHRhYmxlIG1hc2sgZXJyb3I6IGZ1bmN0aW9uIHBvaW50ZXIgaXMgXCIgKyB2YWx1ZSArIFwiIHdoaWNoIGlzIG1hc2tlZCBieSBcIiArIG1hc2sgKyBcIiwgdGhlIGxpa2VseSBjYXVzZSBvZiB0aGlzIGlzIHRoYXQgdGhlIGZ1bmN0aW9uIHBvaW50ZXIgaXMgYmVpbmcgY2FsbGVkIGJ5IHRoZSB3cm9uZyB0eXBlLlwiKTtcbiB9XG4gcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2VnZmF1bHQoKSB7XG4gYWJvcnQoXCJzZWdtZW50YXRpb24gZmF1bHRcIik7XG59XG5cbmZ1bmN0aW9uIGFsaWduZmF1bHQoKSB7XG4gYWJvcnQoXCJhbGlnbm1lbnQgZmF1bHRcIik7XG59XG5cbnZhciB3YXNtTWVtb3J5O1xuXG52YXIgQUJPUlQgPSBmYWxzZTtcblxudmFyIEVYSVRTVEFUVVM7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIHRleHQpIHtcbiBpZiAoIWNvbmRpdGlvbikge1xuICBhYm9ydChcIkFzc2VydGlvbiBmYWlsZWRcIiArICh0ZXh0ID8gXCI6IFwiICsgdGV4dCA6IFwiXCIpKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGdldENGdW5jKGlkZW50KSB7XG4gdmFyIGZ1bmMgPSBNb2R1bGVbXCJfXCIgKyBpZGVudF07XG4gYXNzZXJ0KGZ1bmMsIFwiQ2Fubm90IGNhbGwgdW5rbm93biBmdW5jdGlvbiBcIiArIGlkZW50ICsgXCIsIG1ha2Ugc3VyZSBpdCBpcyBleHBvcnRlZFwiKTtcbiByZXR1cm4gZnVuYztcbn1cblxuZnVuY3Rpb24gY2NhbGwoaWRlbnQsIHJldHVyblR5cGUsIGFyZ1R5cGVzLCBhcmdzLCBvcHRzKSB7XG4gdmFyIHRvQyA9IHtcbiAgXCJzdHJpbmdcIjogZnVuY3Rpb24oc3RyKSB7XG4gICB2YXIgcmV0ID0gMDtcbiAgIGlmIChzdHIgIT09IG51bGwgJiYgc3RyICE9PSB1bmRlZmluZWQgJiYgc3RyICE9PSAwKSB7XG4gICAgdmFyIGxlbiA9IChzdHIubGVuZ3RoIDw8IDIpICsgMTtcbiAgICByZXQgPSBzdGFja0FsbG9jKGxlbik7XG4gICAgc3RyaW5nVG9VVEY4KHN0ciwgcmV0LCBsZW4pO1xuICAgfVxuICAgcmV0dXJuIHJldDtcbiAgfSxcbiAgXCJhcnJheVwiOiBmdW5jdGlvbihhcnIpIHtcbiAgIHZhciByZXQgPSBzdGFja0FsbG9jKGFyci5sZW5ndGgpO1xuICAgd3JpdGVBcnJheVRvTWVtb3J5KGFyciwgcmV0KTtcbiAgIHJldHVybiByZXQ7XG4gIH1cbiB9O1xuIGZ1bmN0aW9uIGNvbnZlcnRSZXR1cm5WYWx1ZShyZXQpIHtcbiAgaWYgKHJldHVyblR5cGUgPT09IFwic3RyaW5nXCIpIHJldHVybiBVVEY4VG9TdHJpbmcocmV0KTtcbiAgaWYgKHJldHVyblR5cGUgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gQm9vbGVhbihyZXQpO1xuICByZXR1cm4gcmV0O1xuIH1cbiB2YXIgZnVuYyA9IGdldENGdW5jKGlkZW50KTtcbiB2YXIgY0FyZ3MgPSBbXTtcbiB2YXIgc3RhY2sgPSAwO1xuIGFzc2VydChyZXR1cm5UeXBlICE9PSBcImFycmF5XCIsICdSZXR1cm4gdHlwZSBzaG91bGQgbm90IGJlIFwiYXJyYXlcIi4nKTtcbiBpZiAoYXJncykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgIHZhciBjb252ZXJ0ZXIgPSB0b0NbYXJnVHlwZXNbaV1dO1xuICAgaWYgKGNvbnZlcnRlcikge1xuICAgIGlmIChzdGFjayA9PT0gMCkgc3RhY2sgPSBzdGFja1NhdmUoKTtcbiAgICBjQXJnc1tpXSA9IGNvbnZlcnRlcihhcmdzW2ldKTtcbiAgIH0gZWxzZSB7XG4gICAgY0FyZ3NbaV0gPSBhcmdzW2ldO1xuICAgfVxuICB9XG4gfVxuIHZhciByZXQgPSBmdW5jLmFwcGx5KG51bGwsIGNBcmdzKTtcbiBmdW5jdGlvbiBvbkRvbmUocmV0KSB7XG4gIGlmIChzdGFjayAhPT0gMCkgc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgcmV0dXJuIGNvbnZlcnRSZXR1cm5WYWx1ZShyZXQpO1xuIH1cbiByZXQgPSBvbkRvbmUocmV0KTtcbiByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjd3JhcChpZGVudCwgcmV0dXJuVHlwZSwgYXJnVHlwZXMsIG9wdHMpIHtcbiByZXR1cm4gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjY2FsbChpZGVudCwgcmV0dXJuVHlwZSwgYXJnVHlwZXMsIGFyZ3VtZW50cywgb3B0cyk7XG4gfTtcbn1cblxudmFyIEFMTE9DX05PUk1BTCA9IDA7XG5cbnZhciBBTExPQ19TVEFDSyA9IDE7XG5cbmZ1bmN0aW9uIGFsbG9jYXRlKHNsYWIsIGFsbG9jYXRvcikge1xuIHZhciByZXQ7XG4gYXNzZXJ0KHR5cGVvZiBhbGxvY2F0b3IgPT0gXCJudW1iZXJcIiwgXCJhbGxvY2F0ZSBubyBsb25nZXIgdGFrZXMgYSB0eXBlIGFyZ3VtZW50XCIpO1xuIGFzc2VydCh0eXBlb2Ygc2xhYiAhPSBcIm51bWJlclwiLCBcImFsbG9jYXRlIG5vIGxvbmdlciB0YWtlcyBhIG51bWJlciBhcyBhcmcwXCIpO1xuIGlmIChhbGxvY2F0b3IgPT0gQUxMT0NfU1RBQ0spIHtcbiAgcmV0ID0gc3RhY2tBbGxvYyhzbGFiLmxlbmd0aCk7XG4gfSBlbHNlIHtcbiAgcmV0ID0gX21hbGxvYyhzbGFiLmxlbmd0aCk7XG4gfVxuIGlmICghc2xhYi5zdWJhcnJheSAmJiAhc2xhYi5zbGljZSkge1xuICBzbGFiID0gbmV3IFVpbnQ4QXJyYXkoc2xhYik7XG4gfVxuIEhFQVBVOC5zZXQoc2xhYiwgcmV0ID4+PiAwKTtcbiByZXR1cm4gcmV0O1xufVxuXG52YXIgVVRGOERlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgIT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIikgOiB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIFVURjhBcnJheVRvU3RyaW5nKGhlYXBPckFycmF5LCBpZHgsIG1heEJ5dGVzVG9SZWFkKSB7XG4gaWR4ID4+Pj0gMDtcbiB2YXIgZW5kSWR4ID0gaWR4ICsgbWF4Qnl0ZXNUb1JlYWQ7XG4gdmFyIGVuZFB0ciA9IGlkeDtcbiB3aGlsZSAoaGVhcE9yQXJyYXlbZW5kUHRyXSAmJiAhKGVuZFB0ciA+PSBlbmRJZHgpKSArK2VuZFB0cjtcbiBpZiAoZW5kUHRyIC0gaWR4ID4gMTYgJiYgaGVhcE9yQXJyYXkuYnVmZmVyICYmIFVURjhEZWNvZGVyKSB7XG4gIHJldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcE9yQXJyYXkuc3ViYXJyYXkoaWR4LCBlbmRQdHIpKTtcbiB9IGVsc2Uge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgd2hpbGUgKGlkeCA8IGVuZFB0cikge1xuICAgdmFyIHUwID0gaGVhcE9yQXJyYXlbaWR4KytdO1xuICAgaWYgKCEodTAgJiAxMjgpKSB7XG4gICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodTApO1xuICAgIGNvbnRpbnVlO1xuICAgfVxuICAgdmFyIHUxID0gaGVhcE9yQXJyYXlbaWR4KytdICYgNjM7XG4gICBpZiAoKHUwICYgMjI0KSA9PSAxOTIpIHtcbiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgodTAgJiAzMSkgPDwgNiB8IHUxKTtcbiAgICBjb250aW51ZTtcbiAgIH1cbiAgIHZhciB1MiA9IGhlYXBPckFycmF5W2lkeCsrXSAmIDYzO1xuICAgaWYgKCh1MCAmIDI0MCkgPT0gMjI0KSB7XG4gICAgdTAgPSAodTAgJiAxNSkgPDwgMTIgfCB1MSA8PCA2IHwgdTI7XG4gICB9IGVsc2Uge1xuICAgIGlmICgodTAgJiAyNDgpICE9IDI0MCkgd2Fybk9uY2UoXCJJbnZhbGlkIFVURi04IGxlYWRpbmcgYnl0ZSAweFwiICsgdTAudG9TdHJpbmcoMTYpICsgXCIgZW5jb3VudGVyZWQgd2hlbiBkZXNlcmlhbGl6aW5nIGEgVVRGLTggc3RyaW5nIGluIHdhc20gbWVtb3J5IHRvIGEgSlMgc3RyaW5nIVwiKTtcbiAgICB1MCA9ICh1MCAmIDcpIDw8IDE4IHwgdTEgPDwgMTIgfCB1MiA8PCA2IHwgaGVhcE9yQXJyYXlbaWR4KytdICYgNjM7XG4gICB9XG4gICBpZiAodTAgPCA2NTUzNikge1xuICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTtcbiAgIH0gZWxzZSB7XG4gICAgdmFyIGNoID0gdTAgLSA2NTUzNjtcbiAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGNoID4+IDEwLCA1NjMyMCB8IGNoICYgMTAyMyk7XG4gICB9XG4gIH1cbiB9XG4gcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gVVRGOFRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHtcbiBwdHIgPj4+PSAwO1xuIHJldHVybiBwdHIgPyBVVEY4QXJyYXlUb1N0cmluZyhIRUFQVTgsIHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIDogXCJcIjtcbn1cblxuZnVuY3Rpb24gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLCBoZWFwLCBvdXRJZHgsIG1heEJ5dGVzVG9Xcml0ZSkge1xuIG91dElkeCA+Pj49IDA7XG4gaWYgKCEobWF4Qnl0ZXNUb1dyaXRlID4gMCkpIHJldHVybiAwO1xuIHZhciBzdGFydElkeCA9IG91dElkeDtcbiB2YXIgZW5kSWR4ID0gb3V0SWR4ICsgbWF4Qnl0ZXNUb1dyaXRlIC0gMTtcbiBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICB2YXIgdSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICBpZiAodSA+PSA1NTI5NiAmJiB1IDw9IDU3MzQzKSB7XG4gICB2YXIgdTEgPSBzdHIuY2hhckNvZGVBdCgrK2kpO1xuICAgdSA9IDY1NTM2ICsgKCh1ICYgMTAyMykgPDwgMTApIHwgdTEgJiAxMDIzO1xuICB9XG4gIGlmICh1IDw9IDEyNykge1xuICAgaWYgKG91dElkeCA+PSBlbmRJZHgpIGJyZWFrO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSB1O1xuICB9IGVsc2UgaWYgKHUgPD0gMjA0Nykge1xuICAgaWYgKG91dElkeCArIDEgPj0gZW5kSWR4KSBicmVhaztcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMTkyIHwgdSA+PiA2O1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxMjggfCB1ICYgNjM7XG4gIH0gZWxzZSBpZiAodSA8PSA2NTUzNSkge1xuICAgaWYgKG91dElkeCArIDIgPj0gZW5kSWR4KSBicmVhaztcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMjI0IHwgdSA+PiAxMjtcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMTI4IHwgdSA+PiA2ICYgNjM7XG4gICBoZWFwW291dElkeCsrID4+PiAwXSA9IDEyOCB8IHUgJiA2MztcbiAgfSBlbHNlIHtcbiAgIGlmIChvdXRJZHggKyAzID49IGVuZElkeCkgYnJlYWs7XG4gICBpZiAodSA+IDExMTQxMTEpIHdhcm5PbmNlKFwiSW52YWxpZCBVbmljb2RlIGNvZGUgcG9pbnQgMHhcIiArIHUudG9TdHJpbmcoMTYpICsgXCIgZW5jb3VudGVyZWQgd2hlbiBzZXJpYWxpemluZyBhIEpTIHN0cmluZyB0byBhIFVURi04IHN0cmluZyBpbiB3YXNtIG1lbW9yeSEgKFZhbGlkIHVuaWNvZGUgY29kZSBwb2ludHMgc2hvdWxkIGJlIGluIHJhbmdlIDAtMHgxMEZGRkYpLlwiKTtcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMjQwIHwgdSA+PiAxODtcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMTI4IHwgdSA+PiAxMiAmIDYzO1xuICAgaGVhcFtvdXRJZHgrKyA+Pj4gMF0gPSAxMjggfCB1ID4+IDYgJiA2MztcbiAgIGhlYXBbb3V0SWR4KysgPj4+IDBdID0gMTI4IHwgdSAmIDYzO1xuICB9XG4gfVxuIGhlYXBbb3V0SWR4ID4+PiAwXSA9IDA7XG4gcmV0dXJuIG91dElkeCAtIHN0YXJ0SWR4O1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb1VURjgoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkge1xuIGFzc2VydCh0eXBlb2YgbWF4Qnl0ZXNUb1dyaXRlID09IFwibnVtYmVyXCIsIFwic3RyaW5nVG9VVEY4KHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIGlzIG1pc3NpbmcgdGhlIHRoaXJkIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbGVuZ3RoIG9mIHRoZSBvdXRwdXQgYnVmZmVyIVwiKTtcbiByZXR1cm4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLCBIRUFQVTgsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cikge1xuIHZhciBsZW4gPSAwO1xuIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gIHZhciB1ID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIGlmICh1ID49IDU1Mjk2ICYmIHUgPD0gNTczNDMpIHUgPSA2NTUzNiArICgodSAmIDEwMjMpIDw8IDEwKSB8IHN0ci5jaGFyQ29kZUF0KCsraSkgJiAxMDIzO1xuICBpZiAodSA8PSAxMjcpICsrbGVuOyBlbHNlIGlmICh1IDw9IDIwNDcpIGxlbiArPSAyOyBlbHNlIGlmICh1IDw9IDY1NTM1KSBsZW4gKz0gMzsgZWxzZSBsZW4gKz0gNDtcbiB9XG4gcmV0dXJuIGxlbjtcbn1cblxuZnVuY3Rpb24gQXNjaWlUb1N0cmluZyhwdHIpIHtcbiBwdHIgPj4+PSAwO1xuIHZhciBzdHIgPSBcIlwiO1xuIHdoaWxlICgxKSB7XG4gIHZhciBjaCA9IFNBRkVfSEVBUF9MT0FEKHB0cisrIHwgMCwgMSwgMSkgPj4+IDA7XG4gIGlmICghY2gpIHJldHVybiBzdHI7XG4gIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcbiB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQXNjaWkoc3RyLCBvdXRQdHIpIHtcbiByZXR1cm4gd3JpdGVBc2NpaVRvTWVtb3J5KHN0ciwgb3V0UHRyLCBmYWxzZSk7XG59XG5cbnZhciBVVEYxNkRlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgIT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNmxlXCIpIDogdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBVVEYxNlRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHtcbiBhc3NlcnQocHRyICUgMiA9PSAwLCBcIlBvaW50ZXIgcGFzc2VkIHRvIFVURjE2VG9TdHJpbmcgbXVzdCBiZSBhbGlnbmVkIHRvIHR3byBieXRlcyFcIik7XG4gdmFyIGVuZFB0ciA9IHB0cjtcbiB2YXIgaWR4ID0gZW5kUHRyID4+IDE7XG4gdmFyIG1heElkeCA9IGlkeCArIG1heEJ5dGVzVG9SZWFkIC8gMjtcbiB3aGlsZSAoIShpZHggPj0gbWF4SWR4KSAmJiBTQUZFX0hFQVBfTE9BRCgoaWR4ID4+PiAwKSAqIDIsIDIsIDEpKSArK2lkeDtcbiBlbmRQdHIgPSBpZHggPDwgMTtcbiBpZiAoZW5kUHRyIC0gcHRyID4gMzIgJiYgVVRGMTZEZWNvZGVyKSB7XG4gIHJldHVybiBVVEYxNkRlY29kZXIuZGVjb2RlKEhFQVBVOC5zdWJhcnJheShwdHIgPj4+IDAsIGVuZFB0ciA+Pj4gMCkpO1xuIH0gZWxzZSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgIShpID49IG1heEJ5dGVzVG9SZWFkIC8gMik7ICsraSkge1xuICAgdmFyIGNvZGVVbml0ID0gU0FGRV9IRUFQX0xPQUQocHRyICsgaSAqIDIgfCAwLCAyLCAwKSB8IDA7XG4gICBpZiAoY29kZVVuaXQgPT0gMCkgYnJlYWs7XG4gICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlVW5pdCk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbiB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvVVRGMTYoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkge1xuIGFzc2VydChvdXRQdHIgJSAyID09IDAsIFwiUG9pbnRlciBwYXNzZWQgdG8gc3RyaW5nVG9VVEYxNiBtdXN0IGJlIGFsaWduZWQgdG8gdHdvIGJ5dGVzIVwiKTtcbiBhc3NlcnQodHlwZW9mIG1heEJ5dGVzVG9Xcml0ZSA9PSBcIm51bWJlclwiLCBcInN0cmluZ1RvVVRGMTYoc3RyLCBvdXRQdHIsIG1heEJ5dGVzVG9Xcml0ZSkgaXMgbWlzc2luZyB0aGUgdGhpcmQgcGFyYW1ldGVyIHRoYXQgc3BlY2lmaWVzIHRoZSBsZW5ndGggb2YgdGhlIG91dHB1dCBidWZmZXIhXCIpO1xuIGlmIChtYXhCeXRlc1RvV3JpdGUgPT09IHVuZGVmaW5lZCkge1xuICBtYXhCeXRlc1RvV3JpdGUgPSAyMTQ3NDgzNjQ3O1xuIH1cbiBpZiAobWF4Qnl0ZXNUb1dyaXRlIDwgMikgcmV0dXJuIDA7XG4gbWF4Qnl0ZXNUb1dyaXRlIC09IDI7XG4gdmFyIHN0YXJ0UHRyID0gb3V0UHRyO1xuIHZhciBudW1DaGFyc1RvV3JpdGUgPSBtYXhCeXRlc1RvV3JpdGUgPCBzdHIubGVuZ3RoICogMiA/IG1heEJ5dGVzVG9Xcml0ZSAvIDIgOiBzdHIubGVuZ3RoO1xuIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQ2hhcnNUb1dyaXRlOyArK2kpIHtcbiAgdmFyIGNvZGVVbml0ID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIFNBRkVfSEVBUF9TVE9SRShvdXRQdHIgfCAwLCBjb2RlVW5pdCB8IDAsIDIpO1xuICBvdXRQdHIgKz0gMjtcbiB9XG4gU0FGRV9IRUFQX1NUT1JFKG91dFB0ciB8IDAsIDAgfCAwLCAyKTtcbiByZXR1cm4gb3V0UHRyIC0gc3RhcnRQdHI7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMTYoc3RyKSB7XG4gcmV0dXJuIHN0ci5sZW5ndGggKiAyO1xufVxuXG5mdW5jdGlvbiBVVEYzMlRvU3RyaW5nKHB0ciwgbWF4Qnl0ZXNUb1JlYWQpIHtcbiBhc3NlcnQocHRyICUgNCA9PSAwLCBcIlBvaW50ZXIgcGFzc2VkIHRvIFVURjMyVG9TdHJpbmcgbXVzdCBiZSBhbGlnbmVkIHRvIGZvdXIgYnl0ZXMhXCIpO1xuIHZhciBpID0gMDtcbiB2YXIgc3RyID0gXCJcIjtcbiB3aGlsZSAoIShpID49IG1heEJ5dGVzVG9SZWFkIC8gNCkpIHtcbiAgdmFyIHV0ZjMyID0gU0FGRV9IRUFQX0xPQUQocHRyICsgaSAqIDQgfCAwLCA0LCAwKSB8IDA7XG4gIGlmICh1dGYzMiA9PSAwKSBicmVhaztcbiAgKytpO1xuICBpZiAodXRmMzIgPj0gNjU1MzYpIHtcbiAgIHZhciBjaCA9IHV0ZjMyIC0gNjU1MzY7XG4gICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGNoID4+IDEwLCA1NjMyMCB8IGNoICYgMTAyMyk7XG4gIH0gZWxzZSB7XG4gICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1dGYzMik7XG4gIH1cbiB9XG4gcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gc3RyaW5nVG9VVEYzMihzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSB7XG4gb3V0UHRyID4+Pj0gMDtcbiBhc3NlcnQob3V0UHRyICUgNCA9PSAwLCBcIlBvaW50ZXIgcGFzc2VkIHRvIHN0cmluZ1RvVVRGMzIgbXVzdCBiZSBhbGlnbmVkIHRvIGZvdXIgYnl0ZXMhXCIpO1xuIGFzc2VydCh0eXBlb2YgbWF4Qnl0ZXNUb1dyaXRlID09IFwibnVtYmVyXCIsIFwic3RyaW5nVG9VVEYzMihzdHIsIG91dFB0ciwgbWF4Qnl0ZXNUb1dyaXRlKSBpcyBtaXNzaW5nIHRoZSB0aGlyZCBwYXJhbWV0ZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGxlbmd0aCBvZiB0aGUgb3V0cHV0IGJ1ZmZlciFcIik7XG4gaWYgKG1heEJ5dGVzVG9Xcml0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gIG1heEJ5dGVzVG9Xcml0ZSA9IDIxNDc0ODM2NDc7XG4gfVxuIGlmIChtYXhCeXRlc1RvV3JpdGUgPCA0KSByZXR1cm4gMDtcbiB2YXIgc3RhcnRQdHIgPSBvdXRQdHI7XG4gdmFyIGVuZFB0ciA9IHN0YXJ0UHRyICsgbWF4Qnl0ZXNUb1dyaXRlIC0gNDtcbiBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICB2YXIgY29kZVVuaXQgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgaWYgKGNvZGVVbml0ID49IDU1Mjk2ICYmIGNvZGVVbml0IDw9IDU3MzQzKSB7XG4gICB2YXIgdHJhaWxTdXJyb2dhdGUgPSBzdHIuY2hhckNvZGVBdCgrK2kpO1xuICAgY29kZVVuaXQgPSA2NTUzNiArICgoY29kZVVuaXQgJiAxMDIzKSA8PCAxMCkgfCB0cmFpbFN1cnJvZ2F0ZSAmIDEwMjM7XG4gIH1cbiAgU0FGRV9IRUFQX1NUT1JFKG91dFB0ciB8IDAsIGNvZGVVbml0IHwgMCwgNCk7XG4gIG91dFB0ciArPSA0O1xuICBpZiAob3V0UHRyICsgNCA+IGVuZFB0cikgYnJlYWs7XG4gfVxuIFNBRkVfSEVBUF9TVE9SRShvdXRQdHIgfCAwLCAwIHwgMCwgNCk7XG4gcmV0dXJuIG91dFB0ciAtIHN0YXJ0UHRyO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjMyKHN0cikge1xuIHZhciBsZW4gPSAwO1xuIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gIHZhciBjb2RlVW5pdCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICBpZiAoY29kZVVuaXQgPj0gNTUyOTYgJiYgY29kZVVuaXQgPD0gNTczNDMpICsraTtcbiAgbGVuICs9IDQ7XG4gfVxuIHJldHVybiBsZW47XG59XG5cbmZ1bmN0aW9uIGFsbG9jYXRlVVRGOChzdHIpIHtcbiB2YXIgc2l6ZSA9IGxlbmd0aEJ5dGVzVVRGOChzdHIpICsgMTtcbiB2YXIgcmV0ID0gX21hbGxvYyhzaXplKTtcbiBpZiAocmV0KSBzdHJpbmdUb1VURjhBcnJheShzdHIsIEhFQVA4LCByZXQsIHNpemUpO1xuIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFsbG9jYXRlVVRGOE9uU3RhY2soc3RyKSB7XG4gdmFyIHNpemUgPSBsZW5ndGhCeXRlc1VURjgoc3RyKSArIDE7XG4gdmFyIHJldCA9IHN0YWNrQWxsb2Moc2l6ZSk7XG4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLCBIRUFQOCwgcmV0LCBzaXplKTtcbiByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ1RvTWVtb3J5KHN0cmluZywgYnVmZmVyLCBkb250QWRkTnVsbCkge1xuIHdhcm5PbmNlKFwid3JpdGVTdHJpbmdUb01lbW9yeSBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCEgVXNlIHN0cmluZ1RvVVRGOCgpIGluc3RlYWQhXCIpO1xuIHZhciBsYXN0Q2hhciwgZW5kO1xuIGlmIChkb250QWRkTnVsbCkge1xuICBlbmQgPSBidWZmZXIgKyBsZW5ndGhCeXRlc1VURjgoc3RyaW5nKTtcbiAgbGFzdENoYXIgPSBTQUZFX0hFQVBfTE9BRChlbmQgPj4+IDAsIDEsIDApO1xuIH1cbiBzdHJpbmdUb1VURjgoc3RyaW5nLCBidWZmZXIsIEluZmluaXR5KTtcbiBpZiAoZG9udEFkZE51bGwpIFNBRkVfSEVBUF9TVE9SRShlbmQgPj4+IDAsIGxhc3RDaGFyLCAxKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVBcnJheVRvTWVtb3J5KGFycmF5LCBidWZmZXIpIHtcbiBhc3NlcnQoYXJyYXkubGVuZ3RoID49IDAsIFwid3JpdGVBcnJheVRvTWVtb3J5IGFycmF5IG11c3QgaGF2ZSBhIGxlbmd0aCAoc2hvdWxkIGJlIGFuIGFycmF5IG9yIHR5cGVkIGFycmF5KVwiKTtcbiBIRUFQOC5zZXQoYXJyYXksIGJ1ZmZlciA+Pj4gMCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQXNjaWlUb01lbW9yeShzdHIsIGJ1ZmZlciwgZG9udEFkZE51bGwpIHtcbiBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICBhc3NlcnQoc3RyLmNoYXJDb2RlQXQoaSkgPT09IChzdHIuY2hhckNvZGVBdChpKSAmIDI1NSkpO1xuICBTQUZFX0hFQVBfU1RPUkUoYnVmZmVyKysgfCAwLCBzdHIuY2hhckNvZGVBdChpKSB8IDAsIDEpO1xuIH1cbiBpZiAoIWRvbnRBZGROdWxsKSBTQUZFX0hFQVBfU1RPUkUoYnVmZmVyIHwgMCwgMCB8IDAsIDEpO1xufVxuXG52YXIgSEVBUCwgYnVmZmVyLCBIRUFQOCwgSEVBUFU4LCBIRUFQMTYsIEhFQVBVMTYsIEhFQVAzMiwgSEVBUFUzMiwgSEVBUEYzMiwgSEVBUEY2NDtcblxuZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MoYnVmKSB7XG4gYnVmZmVyID0gYnVmO1xuIE1vZHVsZVtcIkhFQVA4XCJdID0gSEVBUDggPSBuZXcgSW50OEFycmF5KGJ1Zik7XG4gTW9kdWxlW1wiSEVBUDE2XCJdID0gSEVBUDE2ID0gbmV3IEludDE2QXJyYXkoYnVmKTtcbiBNb2R1bGVbXCJIRUFQMzJcIl0gPSBIRUFQMzIgPSBuZXcgSW50MzJBcnJheShidWYpO1xuIE1vZHVsZVtcIkhFQVBVOFwiXSA9IEhFQVBVOCA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gTW9kdWxlW1wiSEVBUFUxNlwiXSA9IEhFQVBVMTYgPSBuZXcgVWludDE2QXJyYXkoYnVmKTtcbiBNb2R1bGVbXCJIRUFQVTMyXCJdID0gSEVBUFUzMiA9IG5ldyBVaW50MzJBcnJheShidWYpO1xuIE1vZHVsZVtcIkhFQVBGMzJcIl0gPSBIRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShidWYpO1xuIE1vZHVsZVtcIkhFQVBGNjRcIl0gPSBIRUFQRjY0ID0gbmV3IEZsb2F0NjRBcnJheShidWYpO1xufVxuXG52YXIgVE9UQUxfU1RBQ0sgPSA1MjQyODgwO1xuXG5pZiAoTW9kdWxlW1wiVE9UQUxfU1RBQ0tcIl0pIGFzc2VydChUT1RBTF9TVEFDSyA9PT0gTW9kdWxlW1wiVE9UQUxfU1RBQ0tcIl0sIFwidGhlIHN0YWNrIHNpemUgY2FuIG5vIGxvbmdlciBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcIik7XG5cbnZhciBJTklUSUFMX01FTU9SWSA9IE1vZHVsZVtcIklOSVRJQUxfTUVNT1JZXCJdIHx8IDE2Nzc3MjE2O1xuXG5sZWdhY3lNb2R1bGVQcm9wKFwiSU5JVElBTF9NRU1PUllcIiwgXCJJTklUSUFMX01FTU9SWVwiKTtcblxuYXNzZXJ0KElOSVRJQUxfTUVNT1JZID49IFRPVEFMX1NUQUNLLCBcIklOSVRJQUxfTUVNT1JZIHNob3VsZCBiZSBsYXJnZXIgdGhhbiBUT1RBTF9TVEFDSywgd2FzIFwiICsgSU5JVElBTF9NRU1PUlkgKyBcIiEgKFRPVEFMX1NUQUNLPVwiICsgVE9UQUxfU1RBQ0sgKyBcIilcIik7XG5cbmFzc2VydCh0eXBlb2YgSW50MzJBcnJheSAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBGbG9hdDY0QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgSW50MzJBcnJheS5wcm90b3R5cGUuc3ViYXJyYXkgIT0gdW5kZWZpbmVkICYmIEludDMyQXJyYXkucHJvdG90eXBlLnNldCAhPSB1bmRlZmluZWQsIFwiSlMgZW5naW5lIGRvZXMgbm90IHByb3ZpZGUgZnVsbCB0eXBlZCBhcnJheSBzdXBwb3J0XCIpO1xuXG5hc3NlcnQoIU1vZHVsZVtcIndhc21NZW1vcnlcIl0sIFwiVXNlIG9mIGB3YXNtTWVtb3J5YCBkZXRlY3RlZC4gIFVzZSAtc0lNUE9SVEVEX01FTU9SWSB0byBkZWZpbmUgd2FzbU1lbW9yeSBleHRlcm5hbGx5XCIpO1xuXG5hc3NlcnQoSU5JVElBTF9NRU1PUlkgPT0gMTY3NzcyMTYsIFwiRGV0ZWN0ZWQgcnVudGltZSBJTklUSUFMX01FTU9SWSBzZXR0aW5nLiAgVXNlIC1zSU1QT1JURURfTUVNT1JZIHRvIGRlZmluZSB3YXNtTWVtb3J5IGR5bmFtaWNhbGx5XCIpO1xuXG52YXIgd2FzbVRhYmxlO1xuXG5mdW5jdGlvbiB3cml0ZVN0YWNrQ29va2llKCkge1xuIHZhciBtYXggPSBfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kKCk7XG4gYXNzZXJ0KChtYXggJiAzKSA9PSAwKTtcbiBTQUZFX0hFQVBfU1RPUkUobWF4IHwgMCwgMzQ4MjEyMjMgfCAwLCA0KTtcbiBTQUZFX0hFQVBfU1RPUkUobWF4ICsgNCB8IDAsIDIzMTA3MjEwMjIgfCAwLCA0KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tTdGFja0Nvb2tpZSgpIHtcbiBpZiAoQUJPUlQpIHJldHVybjtcbiB2YXIgbWF4ID0gX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZCgpO1xuIHZhciBjb29raWUxID0gU0FGRV9IRUFQX0xPQUQobWF4IHwgMCwgNCwgMSkgPj4+IDA7XG4gdmFyIGNvb2tpZTIgPSBTQUZFX0hFQVBfTE9BRChtYXggKyA0IHwgMCwgNCwgMSkgPj4+IDA7XG4gaWYgKGNvb2tpZTEgIT0gMzQ4MjEyMjMgfHwgY29va2llMiAhPSAyMzEwNzIxMDIyKSB7XG4gIGFib3J0KFwiU3RhY2sgb3ZlcmZsb3chIFN0YWNrIGNvb2tpZSBoYXMgYmVlbiBvdmVyd3JpdHRlbiwgZXhwZWN0ZWQgaGV4IGR3b3JkcyAweDg5QkFDREZFIGFuZCAweDIxMzU0NjcsIGJ1dCByZWNlaXZlZCAweFwiICsgY29va2llMi50b1N0cmluZygxNikgKyBcIiAweFwiICsgY29va2llMS50b1N0cmluZygxNikpO1xuIH1cbn1cblxuKGZ1bmN0aW9uKCkge1xuIHZhciBoMTYgPSBuZXcgSW50MTZBcnJheSgxKTtcbiB2YXIgaDggPSBuZXcgSW50OEFycmF5KGgxNi5idWZmZXIpO1xuIGgxNlswXSA9IDI1NDU5O1xuIGlmIChoOFswXSAhPT0gMTE1IHx8IGg4WzFdICE9PSA5OSkgdGhyb3cgXCJSdW50aW1lIGVycm9yOiBleHBlY3RlZCB0aGUgc3lzdGVtIHRvIGJlIGxpdHRsZS1lbmRpYW4hIChSdW4gd2l0aCAtc1NVUFBPUlRfQklHX0VORElBTiB0byBieXBhc3MpXCI7XG59KSgpO1xuXG52YXIgX19BVFBSRVJVTl9fID0gW107XG5cbnZhciBfX0FUSU5JVF9fID0gW107XG5cbnZhciBfX0FUTUFJTl9fID0gW107XG5cbnZhciBfX0FURVhJVF9fID0gW107XG5cbnZhciBfX0FUUE9TVFJVTl9fID0gW107XG5cbnZhciBydW50aW1lSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24ga2VlcFJ1bnRpbWVBbGl2ZSgpIHtcbiByZXR1cm4gbm9FeGl0UnVudGltZTtcbn1cblxuZnVuY3Rpb24gcHJlUnVuKCkge1xuIGlmIChNb2R1bGVbXCJwcmVSdW5cIl0pIHtcbiAgaWYgKHR5cGVvZiBNb2R1bGVbXCJwcmVSdW5cIl0gPT0gXCJmdW5jdGlvblwiKSBNb2R1bGVbXCJwcmVSdW5cIl0gPSBbIE1vZHVsZVtcInByZVJ1blwiXSBdO1xuICB3aGlsZSAoTW9kdWxlW1wicHJlUnVuXCJdLmxlbmd0aCkge1xuICAgYWRkT25QcmVSdW4oTW9kdWxlW1wicHJlUnVuXCJdLnNoaWZ0KCkpO1xuICB9XG4gfVxuIGNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyk7XG59XG5cbmZ1bmN0aW9uIGluaXRSdW50aW1lKCkge1xuIGNoZWNrU3RhY2tDb29raWUoKTtcbiBhc3NlcnQoIXJ1bnRpbWVJbml0aWFsaXplZCk7XG4gcnVudGltZUluaXRpYWxpemVkID0gdHJ1ZTtcbiBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKTtcbn1cblxuZnVuY3Rpb24gcHJlTWFpbigpIHtcbiBjaGVja1N0YWNrQ29va2llKCk7XG4gY2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXyk7XG59XG5cbmZ1bmN0aW9uIHBvc3RSdW4oKSB7XG4gY2hlY2tTdGFja0Nvb2tpZSgpO1xuIGlmIChNb2R1bGVbXCJwb3N0UnVuXCJdKSB7XG4gIGlmICh0eXBlb2YgTW9kdWxlW1wicG9zdFJ1blwiXSA9PSBcImZ1bmN0aW9uXCIpIE1vZHVsZVtcInBvc3RSdW5cIl0gPSBbIE1vZHVsZVtcInBvc3RSdW5cIl0gXTtcbiAgd2hpbGUgKE1vZHVsZVtcInBvc3RSdW5cIl0ubGVuZ3RoKSB7XG4gICBhZGRPblBvc3RSdW4oTW9kdWxlW1wicG9zdFJ1blwiXS5zaGlmdCgpKTtcbiAgfVxuIH1cbiBjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKTtcbn1cblxuZnVuY3Rpb24gYWRkT25QcmVSdW4oY2IpIHtcbiBfX0FUUFJFUlVOX18udW5zaGlmdChjYik7XG59XG5cbmZ1bmN0aW9uIGFkZE9uSW5pdChjYikge1xuIF9fQVRJTklUX18udW5zaGlmdChjYik7XG59XG5cbmZ1bmN0aW9uIGFkZE9uUHJlTWFpbihjYikge1xuIF9fQVRNQUlOX18udW5zaGlmdChjYik7XG59XG5cbmZ1bmN0aW9uIGFkZE9uRXhpdChjYikge31cblxuZnVuY3Rpb24gYWRkT25Qb3N0UnVuKGNiKSB7XG4gX19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKTtcbn1cblxuYXNzZXJ0KE1hdGguaW11bCwgXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmltdWwoKSwgYnVpbGQgd2l0aCBMRUdBQ1lfVk1fU1VQUE9SVCBvciBQT0xZRklMTF9PTERfTUFUSF9GVU5DVElPTlMgdG8gYWRkIGluIGEgcG9seWZpbGxcIik7XG5cbmFzc2VydChNYXRoLmZyb3VuZCwgXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmZyb3VuZCgpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbFwiKTtcblxuYXNzZXJ0KE1hdGguY2x6MzIsIFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWF0aC5jbHozMigpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbFwiKTtcblxuYXNzZXJ0KE1hdGgudHJ1bmMsIFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWF0aC50cnVuYygpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbFwiKTtcblxudmFyIHJ1bkRlcGVuZGVuY2llcyA9IDA7XG5cbnZhciBydW5EZXBlbmRlbmN5V2F0Y2hlciA9IG51bGw7XG5cbnZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQgPSBudWxsO1xuXG52YXIgcnVuRGVwZW5kZW5jeVRyYWNraW5nID0ge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZVJ1bkRlcGVuZGVuY3koaWQpIHtcbiB2YXIgb3JpZyA9IGlkO1xuIHdoaWxlICgxKSB7XG4gIGlmICghcnVuRGVwZW5kZW5jeVRyYWNraW5nW2lkXSkgcmV0dXJuIGlkO1xuICBpZCA9IG9yaWcgKyBNYXRoLnJhbmRvbSgpO1xuIH1cbn1cblxuZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCkge1xuIHJ1bkRlcGVuZGVuY2llcysrO1xuIGlmIChNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKSB7XG4gIE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKTtcbiB9XG4gaWYgKGlkKSB7XG4gIGFzc2VydCghcnVuRGVwZW5kZW5jeVRyYWNraW5nW2lkXSk7XG4gIHJ1bkRlcGVuZGVuY3lUcmFja2luZ1tpZF0gPSAxO1xuICBpZiAocnVuRGVwZW5kZW5jeVdhdGNoZXIgPT09IG51bGwgJiYgdHlwZW9mIHNldEludGVydmFsICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgIHJ1bkRlcGVuZGVuY3lXYXRjaGVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgaWYgKEFCT1JUKSB7XG4gICAgIGNsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpO1xuICAgICBydW5EZXBlbmRlbmN5V2F0Y2hlciA9IG51bGw7XG4gICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNob3duID0gZmFsc2U7XG4gICAgZm9yICh2YXIgZGVwIGluIHJ1bkRlcGVuZGVuY3lUcmFja2luZykge1xuICAgICBpZiAoIXNob3duKSB7XG4gICAgICBzaG93biA9IHRydWU7XG4gICAgICBlcnIoXCJzdGlsbCB3YWl0aW5nIG9uIHJ1biBkZXBlbmRlbmNpZXM6XCIpO1xuICAgICB9XG4gICAgIGVycihcImRlcGVuZGVuY3k6IFwiICsgZGVwKTtcbiAgICB9XG4gICAgaWYgKHNob3duKSB7XG4gICAgIGVycihcIihlbmQgb2YgbGlzdClcIik7XG4gICAgfVxuICAgfSwgMWU0KTtcbiAgfVxuIH0gZWxzZSB7XG4gIGVycihcIndhcm5pbmc6IHJ1biBkZXBlbmRlbmN5IGFkZGVkIHdpdGhvdXQgSURcIik7XG4gfVxufVxuXG5mdW5jdGlvbiByZW1vdmVSdW5EZXBlbmRlbmN5KGlkKSB7XG4gcnVuRGVwZW5kZW5jaWVzLS07XG4gaWYgKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pIHtcbiAgTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpO1xuIH1cbiBpZiAoaWQpIHtcbiAgYXNzZXJ0KHJ1bkRlcGVuZGVuY3lUcmFja2luZ1tpZF0pO1xuICBkZWxldGUgcnVuRGVwZW5kZW5jeVRyYWNraW5nW2lkXTtcbiB9IGVsc2Uge1xuICBlcnIoXCJ3YXJuaW5nOiBydW4gZGVwZW5kZW5jeSByZW1vdmVkIHdpdGhvdXQgSURcIik7XG4gfVxuIGlmIChydW5EZXBlbmRlbmNpZXMgPT0gMCkge1xuICBpZiAocnVuRGVwZW5kZW5jeVdhdGNoZXIgIT09IG51bGwpIHtcbiAgIGNsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpO1xuICAgcnVuRGVwZW5kZW5jeVdhdGNoZXIgPSBudWxsO1xuICB9XG4gIGlmIChkZXBlbmRlbmNpZXNGdWxmaWxsZWQpIHtcbiAgIHZhciBjYWxsYmFjayA9IGRlcGVuZGVuY2llc0Z1bGZpbGxlZDtcbiAgIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IG51bGw7XG4gICBjYWxsYmFjaygpO1xuICB9XG4gfVxufVxuXG5mdW5jdGlvbiBhYm9ydCh3aGF0KSB7XG4ge1xuICBpZiAoTW9kdWxlW1wib25BYm9ydFwiXSkge1xuICAgTW9kdWxlW1wib25BYm9ydFwiXSh3aGF0KTtcbiAgfVxuIH1cbiB3aGF0ID0gXCJBYm9ydGVkKFwiICsgd2hhdCArIFwiKVwiO1xuIGVycih3aGF0KTtcbiBBQk9SVCA9IHRydWU7XG4gRVhJVFNUQVRVUyA9IDE7XG4gdmFyIGUgPSBuZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO1xuIHJlYWR5UHJvbWlzZVJlamVjdChlKTtcbiB0aHJvdyBlO1xufVxuXG52YXIgZGF0YVVSSVByZWZpeCA9IFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO1xuXG5mdW5jdGlvbiBpc0RhdGFVUkkoZmlsZW5hbWUpIHtcbiByZXR1cm4gZmlsZW5hbWUuc3RhcnRzV2l0aChkYXRhVVJJUHJlZml4KTtcbn1cblxuZnVuY3Rpb24gaXNGaWxlVVJJKGZpbGVuYW1lKSB7XG4gcmV0dXJuIGZpbGVuYW1lLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFeHBvcnRXcmFwcGVyKG5hbWUsIGZpeGVkYXNtKSB7XG4gcmV0dXJuIGZ1bmN0aW9uKCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBuYW1lO1xuICB2YXIgYXNtID0gZml4ZWRhc207XG4gIGlmICghZml4ZWRhc20pIHtcbiAgIGFzbSA9IE1vZHVsZVtcImFzbVwiXTtcbiAgfVxuICBhc3NlcnQocnVudGltZUluaXRpYWxpemVkLCBcIm5hdGl2ZSBmdW5jdGlvbiBgXCIgKyBkaXNwbGF5TmFtZSArIFwiYCBjYWxsZWQgYmVmb3JlIHJ1bnRpbWUgaW5pdGlhbGl6YXRpb25cIik7XG4gIGlmICghYXNtW25hbWVdKSB7XG4gICBhc3NlcnQoYXNtW25hbWVdLCBcImV4cG9ydGVkIG5hdGl2ZSBmdW5jdGlvbiBgXCIgKyBkaXNwbGF5TmFtZSArIFwiYCBub3QgZm91bmRcIik7XG4gIH1cbiAgcmV0dXJuIGFzbVtuYW1lXS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuIH07XG59XG5cbnZhciB3YXNtQmluYXJ5RmlsZTtcblxuaWYgKE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0pIHtcbiB3YXNtQmluYXJ5RmlsZSA9IFwiLi9kdWNrZGItbXZwLndhc21cIjtcbiBpZiAoIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkpIHtcbiAgd2FzbUJpbmFyeUZpbGUgPSBsb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKTtcbiB9XG59IGVsc2Uge1xuIHdhc21CaW5hcnlGaWxlID0gbmV3IFVSTChcIi4vZHVja2RiLW12cC53YXNtXCIsIGltcG9ydC5tZXRhLnVybCkudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gZ2V0QmluYXJ5KGZpbGUpIHtcbiB0cnkge1xuICBpZiAoZmlsZSA9PSB3YXNtQmluYXJ5RmlsZSAmJiB3YXNtQmluYXJ5KSB7XG4gICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkod2FzbUJpbmFyeSk7XG4gIH1cbiAgaWYgKHJlYWRCaW5hcnkpIHtcbiAgIHJldHVybiByZWFkQmluYXJ5KGZpbGUpO1xuICB9IGVsc2Uge1xuICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICB9XG4gfSBjYXRjaCAoZXJyKSB7XG4gIGFib3J0KGVycik7XG4gfVxufVxuXG5mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCkge1xuIGlmICghd2FzbUJpbmFyeSAmJiAoRU5WSVJPTk1FTlRfSVNfV0VCIHx8IEVOVklST05NRU5UX0lTX1dPUktFUikpIHtcbiAgaWYgKHR5cGVvZiBmZXRjaCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIHJldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSwge1xuICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlW1wib2tcIl0pIHtcbiAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIHdhc21CaW5hcnlGaWxlICsgXCInXCI7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZVtcImFycmF5QnVmZmVyXCJdKCk7XG4gICB9KS5jYXRjaChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTtcbiAgIH0pO1xuICB9XG4gfVxuIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKTtcbiB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV2FzbSgpIHtcbiB2YXIgaW5mbyA9IHtcbiAgXCJlbnZcIjogYXNtTGlicmFyeUFyZyxcbiAgXCJ3YXNpX3NuYXBzaG90X3ByZXZpZXcxXCI6IGFzbUxpYnJhcnlBcmdcbiB9O1xuIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSwgbW9kdWxlKSB7XG4gIHZhciBleHBvcnRzID0gaW5zdGFuY2UuZXhwb3J0cztcbiAgTW9kdWxlW1wiYXNtXCJdID0gZXhwb3J0cztcbiAgd2FzbU1lbW9yeSA9IE1vZHVsZVtcImFzbVwiXVtcIm1lbW9yeVwiXTtcbiAgYXNzZXJ0KHdhc21NZW1vcnksIFwibWVtb3J5IG5vdCBmb3VuZCBpbiB3YXNtIGV4cG9ydHNcIik7XG4gIHVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKHdhc21NZW1vcnkuYnVmZmVyKTtcbiAgd2FzbVRhYmxlID0gTW9kdWxlW1wiYXNtXCJdW1wiX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZVwiXTtcbiAgYXNzZXJ0KHdhc21UYWJsZSwgXCJ0YWJsZSBub3QgZm91bmQgaW4gd2FzbSBleHBvcnRzXCIpO1xuICBhZGRPbkluaXQoTW9kdWxlW1wiYXNtXCJdW1wiX193YXNtX2NhbGxfY3RvcnNcIl0pO1xuICByZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtcbiB9XG4gYWRkUnVuRGVwZW5kZW5jeShcIndhc20taW5zdGFudGlhdGVcIik7XG4gdmFyIHRydWVNb2R1bGUgPSBNb2R1bGU7XG4gZnVuY3Rpb24gcmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQocmVzdWx0KSB7XG4gIGFzc2VydChNb2R1bGUgPT09IHRydWVNb2R1bGUsIFwidGhlIE1vZHVsZSBvYmplY3Qgc2hvdWxkIG5vdCBiZSByZXBsYWNlZCBkdXJpbmcgYXN5bmMgY29tcGlsYXRpb24gLSBwZXJoYXBzIHRoZSBvcmRlciBvZiBIVE1MIGVsZW1lbnRzIGlzIHdyb25nP1wiKTtcbiAgdHJ1ZU1vZHVsZSA9IG51bGw7XG4gIHJlY2VpdmVJbnN0YW5jZShyZXN1bHRbXCJpbnN0YW5jZVwiXSk7XG4gfVxuIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZXIpIHtcbiAgcmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSkge1xuICAgcmV0dXJuIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJpbmFyeSwgaW5mbyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSkudGhlbihyZWNlaXZlciwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICBlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIiArIHJlYXNvbik7XG4gICBpZiAoaXNGaWxlVVJJKHdhc21CaW5hcnlGaWxlKSkge1xuICAgIGVycihcIndhcm5pbmc6IExvYWRpbmcgZnJvbSBhIGZpbGUgVVJJIChcIiArIHdhc21CaW5hcnlGaWxlICsgXCIpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbW9zdCBicm93c2Vycy4gU2VlIGh0dHBzOi8vZW1zY3JpcHRlbi5vcmcvZG9jcy9nZXR0aW5nX3N0YXJ0ZWQvRkFRLmh0bWwjaG93LWRvLWktcnVuLWEtbG9jYWwtd2Vic2VydmVyLWZvci10ZXN0aW5nLXdoeS1kb2VzLW15LXByb2dyYW0tc3RhbGwtaW4tZG93bmxvYWRpbmctb3ItcHJlcGFyaW5nXCIpO1xuICAgfVxuICAgYWJvcnQocmVhc29uKTtcbiAgfSk7XG4gfVxuIGZ1bmN0aW9uIGluc3RhbnRpYXRlQXN5bmMoKSB7XG4gIGlmICghd2FzbUJpbmFyeSAmJiB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT0gXCJmdW5jdGlvblwiICYmICFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpICYmIHR5cGVvZiBmZXRjaCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIHJldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSwge1xuICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICB2YXIgcmVzdWx0ID0gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsIGluZm8pO1xuICAgIHJldHVybiByZXN1bHQudGhlbihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgIGVycihcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIiArIHJlYXNvbik7XG4gICAgIGVycihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO1xuICAgICByZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCk7XG4gICAgfSk7XG4gICB9KTtcbiAgfSBlbHNlIHtcbiAgIHJldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KTtcbiAgfVxuIH1cbiBpZiAoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKSB7XG4gIHRyeSB7XG4gICB2YXIgZXhwb3J0cyA9IE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLCByZWNlaXZlSW5zdGFuY2UpO1xuICAgcmV0dXJuIGV4cG9ydHM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgIGVycihcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgZSk7XG4gICByZXR1cm4gZmFsc2U7XG4gIH1cbiB9XG4gaW5zdGFudGlhdGVBc3luYygpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7XG4gcmV0dXJuIHt9O1xufVxuXG52YXIgdGVtcERvdWJsZTtcblxudmFyIHRlbXBJNjQ7XG5cbnZhciBBU01fQ09OU1RTID0ge307XG5cbmZ1bmN0aW9uIGNhbGxSdW50aW1lQ2FsbGJhY2tzKGNhbGxiYWNrcykge1xuIHdoaWxlIChjYWxsYmFja3MubGVuZ3RoID4gMCkge1xuICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3Muc2hpZnQoKTtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgIGNhbGxiYWNrKE1vZHVsZSk7XG4gICBjb250aW51ZTtcbiAgfVxuICB2YXIgZnVuYyA9IGNhbGxiYWNrLmZ1bmM7XG4gIGlmICh0eXBlb2YgZnVuYyA9PSBcIm51bWJlclwiKSB7XG4gICBpZiAoY2FsbGJhY2suYXJnID09PSB1bmRlZmluZWQpIHtcbiAgICBnZXRXYXNtVGFibGVFbnRyeShmdW5jKSgpO1xuICAgfSBlbHNlIHtcbiAgICBnZXRXYXNtVGFibGVFbnRyeShmdW5jKShjYWxsYmFjay5hcmcpO1xuICAgfVxuICB9IGVsc2Uge1xuICAgZnVuYyhjYWxsYmFjay5hcmcgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjay5hcmcpO1xuICB9XG4gfVxufVxuXG5mdW5jdGlvbiB3aXRoU3RhY2tTYXZlKGYpIHtcbiB2YXIgc3RhY2sgPSBzdGFja1NhdmUoKTtcbiB2YXIgcmV0ID0gZigpO1xuIHN0YWNrUmVzdG9yZShzdGFjayk7XG4gcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZGVtYW5nbGUoZnVuYykge1xuIHdhcm5PbmNlKFwid2FybmluZzogYnVpbGQgd2l0aCAtc0RFTUFOR0xFX1NVUFBPUlQgdG8gbGluayBpbiBsaWJjeHhhYmkgZGVtYW5nbGluZ1wiKTtcbiByZXR1cm4gZnVuYztcbn1cblxuZnVuY3Rpb24gZGVtYW5nbGVBbGwodGV4dCkge1xuIHZhciByZWdleCA9IC9cXGJfWltcXHdcXGRfXSsvZztcbiByZXR1cm4gdGV4dC5yZXBsYWNlKHJlZ2V4LCBmdW5jdGlvbih4KSB7XG4gIHZhciB5ID0gZGVtYW5nbGUoeCk7XG4gIHJldHVybiB4ID09PSB5ID8geCA6IHkgKyBcIiBbXCIgKyB4ICsgXCJdXCI7XG4gfSk7XG59XG5cbnZhciB3YXNtVGFibGVNaXJyb3IgPSBbXTtcblxuZnVuY3Rpb24gZ2V0V2FzbVRhYmxlRW50cnkoZnVuY1B0cikge1xuIHZhciBmdW5jID0gd2FzbVRhYmxlTWlycm9yW2Z1bmNQdHJdO1xuIGlmICghZnVuYykge1xuICBpZiAoZnVuY1B0ciA+PSB3YXNtVGFibGVNaXJyb3IubGVuZ3RoKSB3YXNtVGFibGVNaXJyb3IubGVuZ3RoID0gZnVuY1B0ciArIDE7XG4gIHdhc21UYWJsZU1pcnJvcltmdW5jUHRyXSA9IGZ1bmMgPSB3YXNtVGFibGUuZ2V0KGZ1bmNQdHIpO1xuIH1cbiBhc3NlcnQod2FzbVRhYmxlLmdldChmdW5jUHRyKSA9PSBmdW5jLCBcIkphdmFTY3JpcHQtc2lkZSBXYXNtIGZ1bmN0aW9uIHRhYmxlIG1pcnJvciBpcyBvdXQgb2YgZGF0ZSFcIik7XG4gcmV0dXJuIGZ1bmM7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV4Y2VwdGlvbihlKSB7XG4gaWYgKGUgaW5zdGFuY2VvZiBFeGl0U3RhdHVzIHx8IGUgPT0gXCJ1bndpbmRcIikge1xuICByZXR1cm4gRVhJVFNUQVRVUztcbiB9XG4gcXVpdF8oMSwgZSk7XG59XG5cbmZ1bmN0aW9uIGpzU3RhY2tUcmFjZSgpIHtcbiB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiBpZiAoIWVycm9yLnN0YWNrKSB7XG4gIHRyeSB7XG4gICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgZXJyb3IgPSBlO1xuICB9XG4gIGlmICghZXJyb3Iuc3RhY2spIHtcbiAgIHJldHVybiBcIihubyBzdGFjayB0cmFjZSBhdmFpbGFibGUpXCI7XG4gIH1cbiB9XG4gcmV0dXJuIGVycm9yLnN0YWNrLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIHNldFdhc21UYWJsZUVudHJ5KGlkeCwgZnVuYykge1xuIHdhc21UYWJsZS5zZXQoaWR4LCBmdW5jKTtcbiB3YXNtVGFibGVNaXJyb3JbaWR4XSA9IHdhc21UYWJsZS5nZXQoaWR4KTtcbn1cblxuZnVuY3Rpb24gc3RhY2tUcmFjZSgpIHtcbiB2YXIganMgPSBqc1N0YWNrVHJhY2UoKTtcbiBpZiAoTW9kdWxlW1wiZXh0cmFTdGFja1RyYWNlXCJdKSBqcyArPSBcIlxcblwiICsgTW9kdWxlW1wiZXh0cmFTdGFja1RyYWNlXCJdKCk7XG4gcmV0dXJuIGRlbWFuZ2xlQWxsKGpzKTtcbn1cblxuZnVuY3Rpb24gdW5TaWduKHZhbHVlLCBiaXRzKSB7XG4gaWYgKHZhbHVlID49IDApIHtcbiAgcmV0dXJuIHZhbHVlO1xuIH1cbiByZXR1cm4gYml0cyA8PSAzMiA/IDIgKiBNYXRoLmFicygxIDw8IGJpdHMgLSAxKSArIHZhbHVlIDogTWF0aC5wb3coMiwgYml0cykgKyB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gX19fYXNzZXJ0X2ZhaWwoY29uZGl0aW9uLCBmaWxlbmFtZSwgbGluZSwgZnVuYykge1xuIGFib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyBVVEY4VG9TdHJpbmcoY29uZGl0aW9uKSArIFwiLCBhdDogXCIgKyBbIGZpbGVuYW1lID8gVVRGOFRvU3RyaW5nKGZpbGVuYW1lKSA6IFwidW5rbm93biBmaWxlbmFtZVwiLCBsaW5lLCBmdW5jID8gVVRGOFRvU3RyaW5nKGZ1bmMpIDogXCJ1bmtub3duIGZ1bmN0aW9uXCIgXSk7XG59XG5cbmZ1bmN0aW9uIF9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24oc2l6ZSkge1xuIHJldHVybiBfbWFsbG9jKHNpemUgKyAyNCkgKyAyNDtcbn1cblxudmFyIGV4Y2VwdGlvbkNhdWdodCA9IFtdO1xuXG5mdW5jdGlvbiBleGNlcHRpb25fYWRkUmVmKGluZm8pIHtcbiBpbmZvLmFkZF9yZWYoKTtcbn1cblxudmFyIHVuY2F1Z2h0RXhjZXB0aW9uQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBfX19jeGFfYmVnaW5fY2F0Y2gocHRyKSB7XG4gdmFyIGluZm8gPSBuZXcgRXhjZXB0aW9uSW5mbyhwdHIpO1xuIGlmICghaW5mby5nZXRfY2F1Z2h0KCkpIHtcbiAgaW5mby5zZXRfY2F1Z2h0KHRydWUpO1xuICB1bmNhdWdodEV4Y2VwdGlvbkNvdW50LS07XG4gfVxuIGluZm8uc2V0X3JldGhyb3duKGZhbHNlKTtcbiBleGNlcHRpb25DYXVnaHQucHVzaChpbmZvKTtcbiBleGNlcHRpb25fYWRkUmVmKGluZm8pO1xuIHJldHVybiBpbmZvLmdldF9leGNlcHRpb25fcHRyKCk7XG59XG5cbnZhciBleGNlcHRpb25MYXN0ID0gMDtcblxuZnVuY3Rpb24gRXhjZXB0aW9uSW5mbyhleGNQdHIpIHtcbiB0aGlzLmV4Y1B0ciA9IGV4Y1B0cjtcbiB0aGlzLnB0ciA9IGV4Y1B0ciAtIDI0O1xuIHRoaXMuc2V0X3R5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gIFNBRkVfSEVBUF9TVE9SRSh0aGlzLnB0ciArIDQgfCAwLCB0eXBlIHwgMCwgNCk7XG4gfTtcbiB0aGlzLmdldF90eXBlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBTQUZFX0hFQVBfTE9BRCh0aGlzLnB0ciArIDQgfCAwLCA0LCAwKSB8IDA7XG4gfTtcbiB0aGlzLnNldF9kZXN0cnVjdG9yID0gZnVuY3Rpb24oZGVzdHJ1Y3Rvcikge1xuICBTQUZFX0hFQVBfU1RPUkUodGhpcy5wdHIgKyA4IHwgMCwgZGVzdHJ1Y3RvciB8IDAsIDQpO1xuIH07XG4gdGhpcy5nZXRfZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gU0FGRV9IRUFQX0xPQUQodGhpcy5wdHIgKyA4IHwgMCwgNCwgMCkgfCAwO1xuIH07XG4gdGhpcy5zZXRfcmVmY291bnQgPSBmdW5jdGlvbihyZWZjb3VudCkge1xuICBTQUZFX0hFQVBfU1RPUkUodGhpcy5wdHIgfCAwLCByZWZjb3VudCB8IDAsIDQpO1xuIH07XG4gdGhpcy5zZXRfY2F1Z2h0ID0gZnVuY3Rpb24oY2F1Z2h0KSB7XG4gIGNhdWdodCA9IGNhdWdodCA/IDEgOiAwO1xuICBTQUZFX0hFQVBfU1RPUkUodGhpcy5wdHIgKyAxMiB8IDAsIGNhdWdodCB8IDAsIDEpO1xuIH07XG4gdGhpcy5nZXRfY2F1Z2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAoU0FGRV9IRUFQX0xPQUQodGhpcy5wdHIgKyAxMiB8IDAsIDEsIDApIHwgMCkgIT0gMDtcbiB9O1xuIHRoaXMuc2V0X3JldGhyb3duID0gZnVuY3Rpb24ocmV0aHJvd24pIHtcbiAgcmV0aHJvd24gPSByZXRocm93biA/IDEgOiAwO1xuICBTQUZFX0hFQVBfU1RPUkUodGhpcy5wdHIgKyAxMyB8IDAsIHJldGhyb3duIHwgMCwgMSk7XG4gfTtcbiB0aGlzLmdldF9yZXRocm93biA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFNBRkVfSEVBUF9MT0FEKHRoaXMucHRyICsgMTMgfCAwLCAxLCAwKSB8IDApICE9IDA7XG4gfTtcbiB0aGlzLmluaXQgPSBmdW5jdGlvbih0eXBlLCBkZXN0cnVjdG9yKSB7XG4gIHRoaXMuc2V0X2FkanVzdGVkX3B0cigwKTtcbiAgdGhpcy5zZXRfdHlwZSh0eXBlKTtcbiAgdGhpcy5zZXRfZGVzdHJ1Y3RvcihkZXN0cnVjdG9yKTtcbiAgdGhpcy5zZXRfcmVmY291bnQoMCk7XG4gIHRoaXMuc2V0X2NhdWdodChmYWxzZSk7XG4gIHRoaXMuc2V0X3JldGhyb3duKGZhbHNlKTtcbiB9O1xuIHRoaXMuYWRkX3JlZiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBTQUZFX0hFQVBfTE9BRCh0aGlzLnB0ciB8IDAsIDQsIDApIHwgMDtcbiAgU0FGRV9IRUFQX1NUT1JFKHRoaXMucHRyIHwgMCwgdmFsdWUgKyAxIHwgMCwgNCk7XG4gfTtcbiB0aGlzLnJlbGVhc2VfcmVmID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwcmV2ID0gU0FGRV9IRUFQX0xPQUQodGhpcy5wdHIgfCAwLCA0LCAwKSB8IDA7XG4gIFNBRkVfSEVBUF9TVE9SRSh0aGlzLnB0ciB8IDAsIHByZXYgLSAxIHwgMCwgNCk7XG4gIGFzc2VydChwcmV2ID4gMCk7XG4gIHJldHVybiBwcmV2ID09PSAxO1xuIH07XG4gdGhpcy5zZXRfYWRqdXN0ZWRfcHRyID0gZnVuY3Rpb24oYWRqdXN0ZWRQdHIpIHtcbiAgU0FGRV9IRUFQX1NUT1JFKHRoaXMucHRyICsgMTYgfCAwLCBhZGp1c3RlZFB0ciB8IDAsIDQpO1xuIH07XG4gdGhpcy5nZXRfYWRqdXN0ZWRfcHRyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBTQUZFX0hFQVBfTE9BRCh0aGlzLnB0ciArIDE2IHwgMCwgNCwgMCkgfCAwO1xuIH07XG4gdGhpcy5nZXRfZXhjZXB0aW9uX3B0ciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXNQb2ludGVyID0gX19fY3hhX2lzX3BvaW50ZXJfdHlwZSh0aGlzLmdldF90eXBlKCkpO1xuICBpZiAoaXNQb2ludGVyKSB7XG4gICByZXR1cm4gU0FGRV9IRUFQX0xPQUQodGhpcy5leGNQdHIgfCAwLCA0LCAwKSB8IDA7XG4gIH1cbiAgdmFyIGFkanVzdGVkID0gdGhpcy5nZXRfYWRqdXN0ZWRfcHRyKCk7XG4gIGlmIChhZGp1c3RlZCAhPT0gMCkgcmV0dXJuIGFkanVzdGVkO1xuICByZXR1cm4gdGhpcy5leGNQdHI7XG4gfTtcbn1cblxuZnVuY3Rpb24gX19fY3hhX2ZyZWVfZXhjZXB0aW9uKHB0cikge1xuIHRyeSB7XG4gIHJldHVybiBfZnJlZShuZXcgRXhjZXB0aW9uSW5mbyhwdHIpLnB0cik7XG4gfSBjYXRjaCAoZSkge1xuICBlcnIoXCJleGNlcHRpb24gZHVyaW5nIF9fY3hhX2ZyZWVfZXhjZXB0aW9uOiBcIiArIGUpO1xuIH1cbn1cblxuZnVuY3Rpb24gZXhjZXB0aW9uX2RlY1JlZihpbmZvKSB7XG4gaWYgKGluZm8ucmVsZWFzZV9yZWYoKSAmJiAhaW5mby5nZXRfcmV0aHJvd24oKSkge1xuICB2YXIgZGVzdHJ1Y3RvciA9IGluZm8uZ2V0X2Rlc3RydWN0b3IoKTtcbiAgaWYgKGRlc3RydWN0b3IpIHtcbiAgIGdldFdhc21UYWJsZUVudHJ5KGRlc3RydWN0b3IpKGluZm8uZXhjUHRyKTtcbiAgfVxuICBfX19jeGFfZnJlZV9leGNlcHRpb24oaW5mby5leGNQdHIpO1xuIH1cbn1cblxuZnVuY3Rpb24gX19fY3hhX2VuZF9jYXRjaCgpIHtcbiBfc2V0VGhyZXcoMCk7XG4gYXNzZXJ0KGV4Y2VwdGlvbkNhdWdodC5sZW5ndGggPiAwKTtcbiB2YXIgaW5mbyA9IGV4Y2VwdGlvbkNhdWdodC5wb3AoKTtcbiBleGNlcHRpb25fZGVjUmVmKGluZm8pO1xuIGV4Y2VwdGlvbkxhc3QgPSAwO1xufVxuXG5mdW5jdGlvbiBfX19yZXN1bWVFeGNlcHRpb24ocHRyKSB7XG4gaWYgKCFleGNlcHRpb25MYXN0KSB7XG4gIGV4Y2VwdGlvbkxhc3QgPSBwdHI7XG4gfVxuIHRocm93IHB0cjtcbn1cblxuZnVuY3Rpb24gX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfMigpIHtcbiB2YXIgdGhyb3duID0gZXhjZXB0aW9uTGFzdDtcbiBpZiAoIXRocm93bikge1xuICBzZXRUZW1wUmV0MCgwKTtcbiAgcmV0dXJuIDAgfCAwO1xuIH1cbiB2YXIgaW5mbyA9IG5ldyBFeGNlcHRpb25JbmZvKHRocm93bik7XG4gaW5mby5zZXRfYWRqdXN0ZWRfcHRyKHRocm93bik7XG4gdmFyIHRocm93blR5cGUgPSBpbmZvLmdldF90eXBlKCk7XG4gaWYgKCF0aHJvd25UeXBlKSB7XG4gIHNldFRlbXBSZXQwKDApO1xuICByZXR1cm4gdGhyb3duIHwgMDtcbiB9XG4gdmFyIHR5cGVBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgdmFyIGNhdWdodFR5cGUgPSB0eXBlQXJyYXlbaV07XG4gIGlmIChjYXVnaHRUeXBlID09PSAwIHx8IGNhdWdodFR5cGUgPT09IHRocm93blR5cGUpIHtcbiAgIGJyZWFrO1xuICB9XG4gIHZhciBhZGp1c3RlZF9wdHJfYWRkciA9IGluZm8ucHRyICsgMTY7XG4gIGlmIChfX19jeGFfY2FuX2NhdGNoKGNhdWdodFR5cGUsIHRocm93blR5cGUsIGFkanVzdGVkX3B0cl9hZGRyKSkge1xuICAgc2V0VGVtcFJldDAoY2F1Z2h0VHlwZSk7XG4gICByZXR1cm4gdGhyb3duIHwgMDtcbiAgfVxuIH1cbiBzZXRUZW1wUmV0MCh0aHJvd25UeXBlKTtcbiByZXR1cm4gdGhyb3duIHwgMDtcbn1cblxuZnVuY3Rpb24gX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfMygpIHtcbiB2YXIgdGhyb3duID0gZXhjZXB0aW9uTGFzdDtcbiBpZiAoIXRocm93bikge1xuICBzZXRUZW1wUmV0MCgwKTtcbiAgcmV0dXJuIDAgfCAwO1xuIH1cbiB2YXIgaW5mbyA9IG5ldyBFeGNlcHRpb25JbmZvKHRocm93bik7XG4gaW5mby5zZXRfYWRqdXN0ZWRfcHRyKHRocm93bik7XG4gdmFyIHRocm93blR5cGUgPSBpbmZvLmdldF90eXBlKCk7XG4gaWYgKCF0aHJvd25UeXBlKSB7XG4gIHNldFRlbXBSZXQwKDApO1xuICByZXR1cm4gdGhyb3duIHwgMDtcbiB9XG4gdmFyIHR5cGVBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgdmFyIGNhdWdodFR5cGUgPSB0eXBlQXJyYXlbaV07XG4gIGlmIChjYXVnaHRUeXBlID09PSAwIHx8IGNhdWdodFR5cGUgPT09IHRocm93blR5cGUpIHtcbiAgIGJyZWFrO1xuICB9XG4gIHZhciBhZGp1c3RlZF9wdHJfYWRkciA9IGluZm8ucHRyICsgMTY7XG4gIGlmIChfX19jeGFfY2FuX2NhdGNoKGNhdWdodFR5cGUsIHRocm93blR5cGUsIGFkanVzdGVkX3B0cl9hZGRyKSkge1xuICAgc2V0VGVtcFJldDAoY2F1Z2h0VHlwZSk7XG4gICByZXR1cm4gdGhyb3duIHwgMDtcbiAgfVxuIH1cbiBzZXRUZW1wUmV0MCh0aHJvd25UeXBlKTtcbiByZXR1cm4gdGhyb3duIHwgMDtcbn1cblxuZnVuY3Rpb24gX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfNCgpIHtcbiB2YXIgdGhyb3duID0gZXhjZXB0aW9uTGFzdDtcbiBpZiAoIXRocm93bikge1xuICBzZXRUZW1wUmV0MCgwKTtcbiAgcmV0dXJuIDAgfCAwO1xuIH1cbiB2YXIgaW5mbyA9IG5ldyBFeGNlcHRpb25JbmZvKHRocm93bik7XG4gaW5mby5zZXRfYWRqdXN0ZWRfcHRyKHRocm93bik7XG4gdmFyIHRocm93blR5cGUgPSBpbmZvLmdldF90eXBlKCk7XG4gaWYgKCF0aHJvd25UeXBlKSB7XG4gIHNldFRlbXBSZXQwKDApO1xuICByZXR1cm4gdGhyb3duIHwgMDtcbiB9XG4gdmFyIHR5cGVBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgdmFyIGNhdWdodFR5cGUgPSB0eXBlQXJyYXlbaV07XG4gIGlmIChjYXVnaHRUeXBlID09PSAwIHx8IGNhdWdodFR5cGUgPT09IHRocm93blR5cGUpIHtcbiAgIGJyZWFrO1xuICB9XG4gIHZhciBhZGp1c3RlZF9wdHJfYWRkciA9IGluZm8ucHRyICsgMTY7XG4gIGlmIChfX19jeGFfY2FuX2NhdGNoKGNhdWdodFR5cGUsIHRocm93blR5cGUsIGFkanVzdGVkX3B0cl9hZGRyKSkge1xuICAgc2V0VGVtcFJldDAoY2F1Z2h0VHlwZSk7XG4gICByZXR1cm4gdGhyb3duIHwgMDtcbiAgfVxuIH1cbiBzZXRUZW1wUmV0MCh0aHJvd25UeXBlKTtcbiByZXR1cm4gdGhyb3duIHwgMDtcbn1cblxuZnVuY3Rpb24gX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfNSgpIHtcbiB2YXIgdGhyb3duID0gZXhjZXB0aW9uTGFzdDtcbiBpZiAoIXRocm93bikge1xuICBzZXRUZW1wUmV0MCgwKTtcbiAgcmV0dXJuIDAgfCAwO1xuIH1cbiB2YXIgaW5mbyA9IG5ldyBFeGNlcHRpb25JbmZvKHRocm93bik7XG4gaW5mby5zZXRfYWRqdXN0ZWRfcHRyKHRocm93bik7XG4gdmFyIHRocm93blR5cGUgPSBpbmZvLmdldF90eXBlKCk7XG4gaWYgKCF0aHJvd25UeXBlKSB7XG4gIHNldFRlbXBSZXQwKDApO1xuICByZXR1cm4gdGhyb3duIHwgMDtcbiB9XG4gdmFyIHR5cGVBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgdmFyIGNhdWdodFR5cGUgPSB0eXBlQXJyYXlbaV07XG4gIGlmIChjYXVnaHRUeXBlID09PSAwIHx8IGNhdWdodFR5cGUgPT09IHRocm93blR5cGUpIHtcbiAgIGJyZWFrO1xuICB9XG4gIHZhciBhZGp1c3RlZF9wdHJfYWRkciA9IGluZm8ucHRyICsgMTY7XG4gIGlmIChfX19jeGFfY2FuX2NhdGNoKGNhdWdodFR5cGUsIHRocm93blR5cGUsIGFkanVzdGVkX3B0cl9hZGRyKSkge1xuICAgc2V0VGVtcFJldDAoY2F1Z2h0VHlwZSk7XG4gICByZXR1cm4gdGhyb3duIHwgMDtcbiAgfVxuIH1cbiBzZXRUZW1wUmV0MCh0aHJvd25UeXBlKTtcbiByZXR1cm4gdGhyb3duIHwgMDtcbn1cblxuZnVuY3Rpb24gX19fY3hhX3JldGhyb3coKSB7XG4gdmFyIGluZm8gPSBleGNlcHRpb25DYXVnaHQucG9wKCk7XG4gaWYgKCFpbmZvKSB7XG4gIGFib3J0KFwibm8gZXhjZXB0aW9uIHRvIHRocm93XCIpO1xuIH1cbiB2YXIgcHRyID0gaW5mby5leGNQdHI7XG4gaWYgKCFpbmZvLmdldF9yZXRocm93bigpKSB7XG4gIGV4Y2VwdGlvbkNhdWdodC5wdXNoKGluZm8pO1xuICBpbmZvLnNldF9yZXRocm93bih0cnVlKTtcbiAgaW5mby5zZXRfY2F1Z2h0KGZhbHNlKTtcbiAgdW5jYXVnaHRFeGNlcHRpb25Db3VudCsrO1xuIH1cbiBleGNlcHRpb25MYXN0ID0gcHRyO1xuIHRocm93IHB0cjtcbn1cblxuZnVuY3Rpb24gX19fY3hhX3Rocm93KHB0ciwgdHlwZSwgZGVzdHJ1Y3Rvcikge1xuIHZhciBpbmZvID0gbmV3IEV4Y2VwdGlvbkluZm8ocHRyKTtcbiBpbmZvLmluaXQodHlwZSwgZGVzdHJ1Y3Rvcik7XG4gZXhjZXB0aW9uTGFzdCA9IHB0cjtcbiB1bmNhdWdodEV4Y2VwdGlvbkNvdW50Kys7XG4gdGhyb3cgcHRyO1xufVxuXG5mdW5jdGlvbiBfX19jeGFfdW5jYXVnaHRfZXhjZXB0aW9ucygpIHtcbiByZXR1cm4gdW5jYXVnaHRFeGNlcHRpb25Db3VudDtcbn1cblxudmFyIFNZU0NBTExTID0ge1xuIGJ1ZmZlcnM6IFsgbnVsbCwgW10sIFtdIF0sXG4gcHJpbnRDaGFyOiBmdW5jdGlvbihzdHJlYW0sIGN1cnIpIHtcbiAgdmFyIGJ1ZmZlciA9IFNZU0NBTExTLmJ1ZmZlcnNbc3RyZWFtXTtcbiAgYXNzZXJ0KGJ1ZmZlcik7XG4gIGlmIChjdXJyID09PSAwIHx8IGN1cnIgPT09IDEwKSB7XG4gICAoc3RyZWFtID09PSAxID8gb3V0IDogZXJyKShVVEY4QXJyYXlUb1N0cmluZyhidWZmZXIsIDApKTtcbiAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICB9IGVsc2Uge1xuICAgYnVmZmVyLnB1c2goY3Vycik7XG4gIH1cbiB9LFxuIHZhcmFyZ3M6IHVuZGVmaW5lZCxcbiBnZXQ6IGZ1bmN0aW9uKCkge1xuICBhc3NlcnQoU1lTQ0FMTFMudmFyYXJncyAhPSB1bmRlZmluZWQpO1xuICBTWVNDQUxMUy52YXJhcmdzICs9IDQ7XG4gIHZhciByZXQgPSBTQUZFX0hFQVBfTE9BRChTWVNDQUxMUy52YXJhcmdzIC0gNCB8IDAsIDQsIDApIHwgMDtcbiAgcmV0dXJuIHJldDtcbiB9LFxuIGdldFN0cjogZnVuY3Rpb24ocHRyKSB7XG4gIHZhciByZXQgPSBVVEY4VG9TdHJpbmcocHRyKTtcbiAgcmV0dXJuIHJldDtcbiB9XG59O1xuXG5mdW5jdGlvbiBfX19zeXNjYWxsX19uZXdzZWxlY3QobmZkcywgcmVhZGZkcywgd3JpdGVmZHMsIGV4Y2VwdGZkcywgdGltZW91dCkge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBTT0NLRlMoKSB7XG4gZXJyKFwibWlzc2luZyBmdW5jdGlvbjogJFNPQ0tGU1wiKTtcbiBhYm9ydCgtMSk7XG59XG5cbmZ1bmN0aW9uIEZTKCkge1xuIGVycihcIm1pc3NpbmcgZnVuY3Rpb246ICRGU1wiKTtcbiBhYm9ydCgtMSk7XG59XG5cbmZ1bmN0aW9uIGdldFNvY2tldEZyb21GRChmZCkge1xuIHZhciBzb2NrZXQgPSBTT0NLRlMuZ2V0U29ja2V0KGZkKTtcbiBpZiAoIXNvY2tldCkgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCk7XG4gcmV0dXJuIHNvY2tldDtcbn1cblxuZnVuY3Rpb24gc2V0RXJyTm8odmFsdWUpIHtcbiBTQUZFX0hFQVBfU1RPUkUoX19fZXJybm9fbG9jYXRpb24oKSB8IDAsIHZhbHVlIHwgMCwgNCk7XG4gcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgU29ja2V0cyA9IHtcbiBCVUZGRVJfU0laRTogMTAyNDAsXG4gTUFYX0JVRkZFUl9TSVpFOiAxMDQ4NTc2MCxcbiBuZXh0RmQ6IDEsXG4gZmRzOiB7fSxcbiBuZXh0cG9ydDogMSxcbiBtYXhwb3J0OiA2NTUzNSxcbiBwZWVyOiBudWxsLFxuIGNvbm5lY3Rpb25zOiB7fSxcbiBwb3J0bWFwOiB7fSxcbiBsb2NhbEFkZHI6IDQyNjE0MTI4NzQsXG4gYWRkclBvb2w6IFsgMzM1NTQ0NDIsIDUwMzMxNjU4LCA2NzEwODg3NCwgODM4ODYwOTAsIDEwMDY2MzMwNiwgMTE3NDQwNTIyLCAxMzQyMTc3MzgsIDE1MDk5NDk1NCwgMTY3NzcyMTcwLCAxODQ1NDkzODYsIDIwMTMyNjYwMiwgMjE4MTAzODE4LCAyMzQ4ODEwMzQgXVxufTtcblxuZnVuY3Rpb24gaW5ldE50b3A0KGFkZHIpIHtcbiByZXR1cm4gKGFkZHIgJiAyNTUpICsgXCIuXCIgKyAoYWRkciA+PiA4ICYgMjU1KSArIFwiLlwiICsgKGFkZHIgPj4gMTYgJiAyNTUpICsgXCIuXCIgKyAoYWRkciA+PiAyNCAmIDI1NSk7XG59XG5cbmZ1bmN0aW9uIGluZXROdG9wNihpbnRzKSB7XG4gdmFyIHN0ciA9IFwiXCI7XG4gdmFyIHdvcmQgPSAwO1xuIHZhciBsb25nZXN0ID0gMDtcbiB2YXIgbGFzdHplcm8gPSAwO1xuIHZhciB6c3RhcnQgPSAwO1xuIHZhciBsZW4gPSAwO1xuIHZhciBpID0gMDtcbiB2YXIgcGFydHMgPSBbIGludHNbMF0gJiA2NTUzNSwgaW50c1swXSA+PiAxNiwgaW50c1sxXSAmIDY1NTM1LCBpbnRzWzFdID4+IDE2LCBpbnRzWzJdICYgNjU1MzUsIGludHNbMl0gPj4gMTYsIGludHNbM10gJiA2NTUzNSwgaW50c1szXSA+PiAxNiBdO1xuIHZhciBoYXNpcHY0ID0gdHJ1ZTtcbiB2YXIgdjRwYXJ0ID0gXCJcIjtcbiBmb3IgKGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gIGlmIChwYXJ0c1tpXSAhPT0gMCkge1xuICAgaGFzaXB2NCA9IGZhbHNlO1xuICAgYnJlYWs7XG4gIH1cbiB9XG4gaWYgKGhhc2lwdjQpIHtcbiAgdjRwYXJ0ID0gaW5ldE50b3A0KHBhcnRzWzZdIHwgcGFydHNbN10gPDwgMTYpO1xuICBpZiAocGFydHNbNV0gPT09IC0xKSB7XG4gICBzdHIgPSBcIjo6ZmZmZjpcIjtcbiAgIHN0ciArPSB2NHBhcnQ7XG4gICByZXR1cm4gc3RyO1xuICB9XG4gIGlmIChwYXJ0c1s1XSA9PT0gMCkge1xuICAgc3RyID0gXCI6OlwiO1xuICAgaWYgKHY0cGFydCA9PT0gXCIwLjAuMC4wXCIpIHY0cGFydCA9IFwiXCI7XG4gICBpZiAodjRwYXJ0ID09PSBcIjAuMC4wLjFcIikgdjRwYXJ0ID0gXCIxXCI7XG4gICBzdHIgKz0gdjRwYXJ0O1xuICAgcmV0dXJuIHN0cjtcbiAgfVxuIH1cbiBmb3IgKHdvcmQgPSAwOyB3b3JkIDwgODsgd29yZCsrKSB7XG4gIGlmIChwYXJ0c1t3b3JkXSA9PT0gMCkge1xuICAgaWYgKHdvcmQgLSBsYXN0emVybyA+IDEpIHtcbiAgICBsZW4gPSAwO1xuICAgfVxuICAgbGFzdHplcm8gPSB3b3JkO1xuICAgbGVuKys7XG4gIH1cbiAgaWYgKGxlbiA+IGxvbmdlc3QpIHtcbiAgIGxvbmdlc3QgPSBsZW47XG4gICB6c3RhcnQgPSB3b3JkIC0gbG9uZ2VzdCArIDE7XG4gIH1cbiB9XG4gZm9yICh3b3JkID0gMDsgd29yZCA8IDg7IHdvcmQrKykge1xuICBpZiAobG9uZ2VzdCA+IDEpIHtcbiAgIGlmIChwYXJ0c1t3b3JkXSA9PT0gMCAmJiB3b3JkID49IHpzdGFydCAmJiB3b3JkIDwgenN0YXJ0ICsgbG9uZ2VzdCkge1xuICAgIGlmICh3b3JkID09PSB6c3RhcnQpIHtcbiAgICAgc3RyICs9IFwiOlwiO1xuICAgICBpZiAoenN0YXJ0ID09PSAwKSBzdHIgKz0gXCI6XCI7XG4gICAgfVxuICAgIGNvbnRpbnVlO1xuICAgfVxuICB9XG4gIHN0ciArPSBOdW1iZXIoX250b2hzKHBhcnRzW3dvcmRdICYgNjU1MzUpKS50b1N0cmluZygxNik7XG4gIHN0ciArPSB3b3JkIDwgNyA/IFwiOlwiIDogXCJcIjtcbiB9XG4gcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gcmVhZFNvY2thZGRyKHNhLCBzYWxlbikge1xuIHZhciBmYW1pbHkgPSBTQUZFX0hFQVBfTE9BRChzYSB8IDAsIDIsIDApIHwgMDtcbiB2YXIgcG9ydCA9IF9udG9ocyhTQUZFX0hFQVBfTE9BRChzYSArIDIgfCAwLCAyLCAxKSA+Pj4gMCk7XG4gdmFyIGFkZHI7XG4gc3dpdGNoIChmYW1pbHkpIHtcbiBjYXNlIDI6XG4gIGlmIChzYWxlbiAhPT0gMTYpIHtcbiAgIHJldHVybiB7XG4gICAgZXJybm86IDI4XG4gICB9O1xuICB9XG4gIGFkZHIgPSBTQUZFX0hFQVBfTE9BRChzYSArIDQgfCAwLCA0LCAwKSB8IDA7XG4gIGFkZHIgPSBpbmV0TnRvcDQoYWRkcik7XG4gIGJyZWFrO1xuXG4gY2FzZSAxMDpcbiAgaWYgKHNhbGVuICE9PSAyOCkge1xuICAgcmV0dXJuIHtcbiAgICBlcnJubzogMjhcbiAgIH07XG4gIH1cbiAgYWRkciA9IFsgU0FGRV9IRUFQX0xPQUQoc2EgKyA4IHwgMCwgNCwgMCkgfCAwLCBTQUZFX0hFQVBfTE9BRChzYSArIDEyIHwgMCwgNCwgMCkgfCAwLCBTQUZFX0hFQVBfTE9BRChzYSArIDE2IHwgMCwgNCwgMCkgfCAwLCBTQUZFX0hFQVBfTE9BRChzYSArIDIwIHwgMCwgNCwgMCkgfCAwIF07XG4gIGFkZHIgPSBpbmV0TnRvcDYoYWRkcik7XG4gIGJyZWFrO1xuXG4gZGVmYXVsdDpcbiAgcmV0dXJuIHtcbiAgIGVycm5vOiA1XG4gIH07XG4gfVxuIHJldHVybiB7XG4gIGZhbWlseTogZmFtaWx5LFxuICBhZGRyOiBhZGRyLFxuICBwb3J0OiBwb3J0XG4gfTtcbn1cblxuZnVuY3Rpb24gaW5ldFB0b240KHN0cikge1xuIHZhciBiID0gc3RyLnNwbGl0KFwiLlwiKTtcbiBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICB2YXIgdG1wID0gTnVtYmVyKGJbaV0pO1xuICBpZiAoaXNOYU4odG1wKSkgcmV0dXJuIG51bGw7XG4gIGJbaV0gPSB0bXA7XG4gfVxuIHJldHVybiAoYlswXSB8IGJbMV0gPDwgOCB8IGJbMl0gPDwgMTYgfCBiWzNdIDw8IDI0KSA+Pj4gMDtcbn1cblxuZnVuY3Rpb24ganN0b2lfcShzdHIpIHtcbiByZXR1cm4gcGFyc2VJbnQoc3RyKTtcbn1cblxuZnVuY3Rpb24gaW5ldFB0b242KHN0cikge1xuIHZhciB3b3JkcztcbiB2YXIgdywgb2Zmc2V0LCB6LCBpO1xuIHZhciB2YWxpZDZyZWd4ID0gL14oKD89Lio6OikoPyEuKjo6Lis6OikoOjopPyhbXFxkQS1GXXsxLDR9Oig6fFxcYil8KXs1fXwoW1xcZEEtRl17MSw0fTopezZ9KSgoKFtcXGRBLUZdezEsNH0oKD8hXFwzKTo6fDpcXGJ8JCkpfCg/IVxcMlxcMykpezJ9fCgoKDJbMC00XXwxXFxkfFsxLTldKT9cXGR8MjVbMC01XSlcXC4/XFxiKXs0fSkkL2k7XG4gdmFyIHBhcnRzID0gW107XG4gaWYgKCF2YWxpZDZyZWd4LnRlc3Qoc3RyKSkge1xuICByZXR1cm4gbnVsbDtcbiB9XG4gaWYgKHN0ciA9PT0gXCI6OlwiKSB7XG4gIHJldHVybiBbIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgXTtcbiB9XG4gaWYgKHN0ci5zdGFydHNXaXRoKFwiOjpcIikpIHtcbiAgc3RyID0gc3RyLnJlcGxhY2UoXCI6OlwiLCBcIlo6XCIpO1xuIH0gZWxzZSB7XG4gIHN0ciA9IHN0ci5yZXBsYWNlKFwiOjpcIiwgXCI6WjpcIik7XG4gfVxuIGlmIChzdHIuaW5kZXhPZihcIi5cIikgPiAwKSB7XG4gIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLl1cIiwgXCJnXCIpLCBcIjpcIik7XG4gIHdvcmRzID0gc3RyLnNwbGl0KFwiOlwiKTtcbiAgd29yZHNbd29yZHMubGVuZ3RoIC0gNF0gPSBqc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aCAtIDRdKSArIGpzdG9pX3Eod29yZHNbd29yZHMubGVuZ3RoIC0gM10pICogMjU2O1xuICB3b3Jkc1t3b3Jkcy5sZW5ndGggLSAzXSA9IGpzdG9pX3Eod29yZHNbd29yZHMubGVuZ3RoIC0gMl0pICsganN0b2lfcSh3b3Jkc1t3b3Jkcy5sZW5ndGggLSAxXSkgKiAyNTY7XG4gIHdvcmRzID0gd29yZHMuc2xpY2UoMCwgd29yZHMubGVuZ3RoIC0gMik7XG4gfSBlbHNlIHtcbiAgd29yZHMgPSBzdHIuc3BsaXQoXCI6XCIpO1xuIH1cbiBvZmZzZXQgPSAwO1xuIHogPSAwO1xuIGZvciAodyA9IDA7IHcgPCB3b3Jkcy5sZW5ndGg7IHcrKykge1xuICBpZiAodHlwZW9mIHdvcmRzW3ddID09IFwic3RyaW5nXCIpIHtcbiAgIGlmICh3b3Jkc1t3XSA9PT0gXCJaXCIpIHtcbiAgICBmb3IgKHogPSAwOyB6IDwgOCAtIHdvcmRzLmxlbmd0aCArIDE7IHorKykge1xuICAgICBwYXJ0c1t3ICsgel0gPSAwO1xuICAgIH1cbiAgICBvZmZzZXQgPSB6IC0gMTtcbiAgIH0gZWxzZSB7XG4gICAgcGFydHNbdyArIG9mZnNldF0gPSBfaHRvbnMocGFyc2VJbnQod29yZHNbd10sIDE2KSk7XG4gICB9XG4gIH0gZWxzZSB7XG4gICBwYXJ0c1t3ICsgb2Zmc2V0XSA9IHdvcmRzW3ddO1xuICB9XG4gfVxuIHJldHVybiBbIHBhcnRzWzFdIDw8IDE2IHwgcGFydHNbMF0sIHBhcnRzWzNdIDw8IDE2IHwgcGFydHNbMl0sIHBhcnRzWzVdIDw8IDE2IHwgcGFydHNbNF0sIHBhcnRzWzddIDw8IDE2IHwgcGFydHNbNl0gXTtcbn1cblxudmFyIEROUyA9IHtcbiBhZGRyZXNzX21hcDoge1xuICBpZDogMSxcbiAgYWRkcnM6IHt9LFxuICBuYW1lczoge31cbiB9LFxuIGxvb2t1cF9uYW1lOiBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciByZXMgPSBpbmV0UHRvbjQobmFtZSk7XG4gIGlmIChyZXMgIT09IG51bGwpIHtcbiAgIHJldHVybiBuYW1lO1xuICB9XG4gIHJlcyA9IGluZXRQdG9uNihuYW1lKTtcbiAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgcmV0dXJuIG5hbWU7XG4gIH1cbiAgdmFyIGFkZHI7XG4gIGlmIChETlMuYWRkcmVzc19tYXAuYWRkcnNbbmFtZV0pIHtcbiAgIGFkZHIgPSBETlMuYWRkcmVzc19tYXAuYWRkcnNbbmFtZV07XG4gIH0gZWxzZSB7XG4gICB2YXIgaWQgPSBETlMuYWRkcmVzc19tYXAuaWQrKztcbiAgIGFzc2VydChpZCA8IDY1NTM1LCBcImV4Y2VlZGVkIG1heCBhZGRyZXNzIG1hcHBpbmdzIG9mIDY1NTM1XCIpO1xuICAgYWRkciA9IFwiMTcyLjI5LlwiICsgKGlkICYgMjU1KSArIFwiLlwiICsgKGlkICYgNjUyODApO1xuICAgRE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdID0gbmFtZTtcbiAgIEROUy5hZGRyZXNzX21hcC5hZGRyc1tuYW1lXSA9IGFkZHI7XG4gIH1cbiAgcmV0dXJuIGFkZHI7XG4gfSxcbiBsb29rdXBfYWRkcjogZnVuY3Rpb24oYWRkcikge1xuICBpZiAoRE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdKSB7XG4gICByZXR1cm4gRE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdO1xuICB9XG4gIHJldHVybiBudWxsO1xuIH1cbn07XG5cbmZ1bmN0aW9uIGdldFNvY2tldEFkZHJlc3MoYWRkcnAsIGFkZHJsZW4sIGFsbG93TnVsbCkge1xuIGlmIChhbGxvd051bGwgJiYgYWRkcnAgPT09IDApIHJldHVybiBudWxsO1xuIHZhciBpbmZvID0gcmVhZFNvY2thZGRyKGFkZHJwLCBhZGRybGVuKTtcbiBpZiAoaW5mby5lcnJubykgdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoaW5mby5lcnJubyk7XG4gaW5mby5hZGRyID0gRE5TLmxvb2t1cF9hZGRyKGluZm8uYWRkcikgfHwgaW5mby5hZGRyO1xuIHJldHVybiBpbmZvO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2JpbmQoZmQsIGFkZHIsIGFkZHJsZW4pIHtcbiB2YXIgc29jayA9IGdldFNvY2tldEZyb21GRChmZCk7XG4gdmFyIGluZm8gPSBnZXRTb2NrZXRBZGRyZXNzKGFkZHIsIGFkZHJsZW4pO1xuIHNvY2suc29ja19vcHMuYmluZChzb2NrLCBpbmZvLmFkZHIsIGluZm8ucG9ydCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfY29ubmVjdChmZCwgYWRkciwgYWRkcmxlbikge1xuIHZhciBzb2NrID0gZ2V0U29ja2V0RnJvbUZEKGZkKTtcbiB2YXIgaW5mbyA9IGdldFNvY2tldEFkZHJlc3MoYWRkciwgYWRkcmxlbik7XG4gc29jay5zb2NrX29wcy5jb25uZWN0KHNvY2ssIGluZm8uYWRkciwgaW5mby5wb3J0KTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9mYWNjZXNzYXQoZGlyZmQsIHBhdGgsIGFtb2RlLCBmbGFncykge1xuIHBhdGggPSBTWVNDQUxMUy5nZXRTdHIocGF0aCk7XG4gYXNzZXJ0KGZsYWdzID09PSAwKTtcbiBwYXRoID0gU1lTQ0FMTFMuY2FsY3VsYXRlQXQoZGlyZmQsIHBhdGgpO1xuIHJldHVybiBTWVNDQUxMUy5kb0FjY2VzcyhwYXRoLCBhbW9kZSk7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfZmNudGw2NChmZCwgY21kLCB2YXJhcmdzKSB7XG4gU1lTQ0FMTFMudmFyYXJncyA9IHZhcmFyZ3M7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfZnN0YXQ2NChmZCwgYnVmKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfZnRydW5jYXRlNjQoZmQsIGxlbmd0aF9sb3csIGxlbmd0aF9oaWdoKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfZ2V0ZGVudHM2NChmZCwgZGlycCwgY291bnQpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gemVyb01lbW9yeShhZGRyZXNzLCBzaXplKSB7XG4gSEVBUFU4LmZpbGwoMCwgYWRkcmVzcywgYWRkcmVzcyArIHNpemUpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVNvY2thZGRyKHNhLCBmYW1pbHksIGFkZHIsIHBvcnQsIGFkZHJsZW4pIHtcbiBzd2l0Y2ggKGZhbWlseSkge1xuIGNhc2UgMjpcbiAgYWRkciA9IGluZXRQdG9uNChhZGRyKTtcbiAgemVyb01lbW9yeShzYSwgMTYpO1xuICBpZiAoYWRkcmxlbikge1xuICAgU0FGRV9IRUFQX1NUT1JFKGFkZHJsZW4gfCAwLCAxNiB8IDAsIDQpO1xuICB9XG4gIFNBRkVfSEVBUF9TVE9SRShzYSB8IDAsIGZhbWlseSB8IDAsIDIpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyA0IHwgMCwgYWRkciB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyAyIHwgMCwgX2h0b25zKHBvcnQpIHwgMCwgMik7XG4gIGJyZWFrO1xuXG4gY2FzZSAxMDpcbiAgYWRkciA9IGluZXRQdG9uNihhZGRyKTtcbiAgemVyb01lbW9yeShzYSwgMjgpO1xuICBpZiAoYWRkcmxlbikge1xuICAgU0FGRV9IRUFQX1NUT1JFKGFkZHJsZW4gfCAwLCAyOCB8IDAsIDQpO1xuICB9XG4gIFNBRkVfSEVBUF9TVE9SRShzYSB8IDAsIGZhbWlseSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyA4IHwgMCwgYWRkclswXSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyAxMiB8IDAsIGFkZHJbMV0gfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKHNhICsgMTYgfCAwLCBhZGRyWzJdIHwgMCwgNCk7XG4gIFNBRkVfSEVBUF9TVE9SRShzYSArIDIwIHwgMCwgYWRkclszXSB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoc2EgKyAyIHwgMCwgX2h0b25zKHBvcnQpIHwgMCwgMik7XG4gIGJyZWFrO1xuXG4gZGVmYXVsdDpcbiAgcmV0dXJuIDU7XG4gfVxuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2dldHBlZXJuYW1lKGZkLCBhZGRyLCBhZGRybGVuKSB7XG4gdmFyIHNvY2sgPSBnZXRTb2NrZXRGcm9tRkQoZmQpO1xuIGlmICghc29jay5kYWRkcikge1xuICByZXR1cm4gLTUzO1xuIH1cbiB2YXIgZXJybm8gPSB3cml0ZVNvY2thZGRyKGFkZHIsIHNvY2suZmFtaWx5LCBETlMubG9va3VwX25hbWUoc29jay5kYWRkciksIHNvY2suZHBvcnQsIGFkZHJsZW4pO1xuIGFzc2VydCghZXJybm8pO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2dldHNvY2tvcHQoZmQsIGxldmVsLCBvcHRuYW1lLCBvcHR2YWwsIG9wdGxlbikge1xuIHZhciBzb2NrID0gZ2V0U29ja2V0RnJvbUZEKGZkKTtcbiBpZiAobGV2ZWwgPT09IDEpIHtcbiAgaWYgKG9wdG5hbWUgPT09IDQpIHtcbiAgIFNBRkVfSEVBUF9TVE9SRShvcHR2YWwgfCAwLCBzb2NrLmVycm9yIHwgMCwgNCk7XG4gICBTQUZFX0hFQVBfU1RPUkUob3B0bGVuIHwgMCwgNCB8IDAsIDQpO1xuICAgc29jay5lcnJvciA9IG51bGw7XG4gICByZXR1cm4gMDtcbiAgfVxuIH1cbiByZXR1cm4gLTUwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2lvY3RsKGZkLCBvcCwgdmFyYXJncykge1xuIFNZU0NBTExTLnZhcmFyZ3MgPSB2YXJhcmdzO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX2xzdGF0NjQocGF0aCwgYnVmKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfbWtkaXJhdChkaXJmZCwgcGF0aCwgbW9kZSkge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX25ld2ZzdGF0YXQoZGlyZmQsIHBhdGgsIGJ1ZiwgZmxhZ3MpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9vcGVuYXQoZGlyZmQsIHBhdGgsIGZsYWdzLCB2YXJhcmdzKSB7XG4gU1lTQ0FMTFMudmFyYXJncyA9IHZhcmFyZ3M7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfcmVjdmZyb20oZmQsIGJ1ZiwgbGVuLCBmbGFncywgYWRkciwgYWRkcmxlbikge1xuIHZhciBzb2NrID0gZ2V0U29ja2V0RnJvbUZEKGZkKTtcbiB2YXIgbXNnID0gc29jay5zb2NrX29wcy5yZWN2bXNnKHNvY2ssIGxlbik7XG4gaWYgKCFtc2cpIHJldHVybiAwO1xuIGlmIChhZGRyKSB7XG4gIHZhciBlcnJubyA9IHdyaXRlU29ja2FkZHIoYWRkciwgc29jay5mYW1pbHksIEROUy5sb29rdXBfbmFtZShtc2cuYWRkciksIG1zZy5wb3J0LCBhZGRybGVuKTtcbiAgYXNzZXJ0KCFlcnJubyk7XG4gfVxuIEhFQVBVOC5zZXQobXNnLmJ1ZmZlciwgYnVmID4+PiAwKTtcbiByZXR1cm4gbXNnLmJ1ZmZlci5ieXRlTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX3JlbmFtZWF0KG9sZGRpcmZkLCBvbGRwYXRoLCBuZXdkaXJmZCwgbmV3cGF0aCkge1xuIGFib3J0KFwiaXQgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBvcGVyYXRlIG9uIHN0cmVhbXMgd2hlbiAhU1lTQ0FMTFNfUkVRVUlSRV9GSUxFU1lTVEVNXCIpO1xufVxuXG5mdW5jdGlvbiBfX19zeXNjYWxsX3JtZGlyKHBhdGgpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9zZW5kdG8oZmQsIG1lc3NhZ2UsIGxlbmd0aCwgZmxhZ3MsIGFkZHIsIGFkZHJfbGVuKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfc29ja2V0KGRvbWFpbiwgdHlwZSwgcHJvdG9jb2wpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX19fc3lzY2FsbF9zdGF0NjQocGF0aCwgYnVmKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fX3N5c2NhbGxfdW5saW5rYXQoZGlyZmQsIHBhdGgsIGZsYWdzKSB7XG4gYWJvcnQoXCJpdCBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG9wZXJhdGUgb24gc3RyZWFtcyB3aGVuICFTWVNDQUxMU19SRVFVSVJFX0ZJTEVTWVNURU1cIik7XG59XG5cbmZ1bmN0aW9uIF9fZGxpbml0KG1haW5fZHNvX2hhbmRsZSkge31cblxudmFyIGRsb3Blbk1pc3NpbmdFcnJvciA9IFwiVG8gdXNlIGRsb3BlbiwgeW91IG5lZWQgZW5hYmxlIGR5bmFtaWMgbGlua2luZywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbXNjcmlwdGVuLWNvcmUvZW1zY3JpcHRlbi93aWtpL0xpbmtpbmdcIjtcblxuZnVuY3Rpb24gX19kbG9wZW5fanMoZmlsZW5hbWUsIGZsYWcpIHtcbiBhYm9ydChkbG9wZW5NaXNzaW5nRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBfX2Rsc3ltX2pzKGhhbmRsZSwgc3ltYm9sKSB7XG4gYWJvcnQoZGxvcGVuTWlzc2luZ0Vycm9yKTtcbn1cblxuZnVuY3Rpb24gX19lbXNjcmlwdGVuX2RhdGVfbm93KCkge1xuIHJldHVybiBEYXRlLm5vdygpO1xufVxuXG52YXIgbm93SXNNb25vdG9uaWMgPSB0cnVlO1xuXG5mdW5jdGlvbiBfX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMoKSB7XG4gcmV0dXJuIG5vd0lzTW9ub3RvbmljO1xufVxuXG5mdW5jdGlvbiBfYWJvcnQoKSB7XG4gYWJvcnQoXCJuYXRpdmUgY29kZSBjYWxsZWQgYWJvcnQoKVwiKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZShwYXRoLCBwYXRoTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY3JlYXRlRGlyZWN0b3J5KE1vZHVsZSwgcGF0aCwgcGF0aExlbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9leGlzdHMocGF0aCwgcGF0aExlbikge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNoZWNrRGlyZWN0b3J5KE1vZHVsZSwgcGF0aCwgcGF0aExlbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9saXN0X2ZpbGVzKHBhdGgsIHBhdGhMZW4pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5saXN0RGlyZWN0b3J5RW50cmllcyhNb2R1bGUsIHBhdGgsIHBhdGhMZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfcmVtb3ZlKHBhdGgsIHBhdGhMZW4pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5yZW1vdmVEaXJlY3RvcnkoTW9kdWxlLCBwYXRoLCBwYXRoTGVuKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9jbG9zZShmaWxlSWQpIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jbG9zZUZpbGUoTW9kdWxlLCBmaWxlSWQpO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyhwYXRoLCBwYXRoTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2hlY2tGaWxlKE1vZHVsZSwgcGF0aCwgcGF0aExlbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfZ2V0X2xhc3RfbW9kaWZpZWRfdGltZShmaWxlSWQpIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5nZXRMYXN0RmlsZU1vZGlmaWNhdGlvblRpbWUoTW9kdWxlLCBmaWxlSWQpO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX21vdmUoZnJvbSwgZnJvbUxlbiwgdG8sIHRvTGVuKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUubW92ZUZpbGUoTW9kdWxlLCBmcm9tLCBmcm9tTGVuLCB0bywgdG9MZW4pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX29wZW4oZmlsZUlkLCBmbGFncykge1xuIHJldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLm9wZW5GaWxlKE1vZHVsZSwgZmlsZUlkLCBmbGFncyk7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfcmVhZChmaWxlSWQsIGJ1Ziwgc2l6ZSwgbG9jYXRpb24pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5yZWFkRmlsZShNb2R1bGUsIGZpbGVJZCwgYnVmLCBzaXplLCBsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUoZmlsZUlkLCBuZXdTaXplKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUudHJ1bmNhdGVGaWxlKE1vZHVsZSwgZmlsZUlkLCBuZXdTaXplKTtcbn1cblxuZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV93cml0ZShmaWxlSWQsIGJ1Ziwgc2l6ZSwgbG9jYXRpb24pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS53cml0ZUZpbGUoTW9kdWxlLCBmaWxlSWQsIGJ1Ziwgc2l6ZSwgbG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19nbG9iKHBhdGgsIHBhdGhMZW4pIHtcbiByZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5nbG9iKE1vZHVsZSwgcGF0aCwgcGF0aExlbik7XG59XG5cbmZ1bmN0aW9uIF9kdWNrZGJfd2ViX3Rlc3RfcGxhdGZvcm1fZmVhdHVyZShmZWF0dXJlKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUudGVzdFBsYXRmb3JtRmVhdHVyZShNb2R1bGUsIGZlYXR1cmUpO1xufVxuXG5mdW5jdGlvbiBfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NhbGwoZnVuY0lkLCBkZXNjUHRyLCBkZXNjU2l6ZSwgcHRyc1B0ciwgcHRyc1NpemUsIHJlc3BvbnNlKSB7XG4gcmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2FsbFNjYWxhclVERihNb2R1bGUsIGZ1bmNJZCwgZGVzY1B0ciwgZGVzY1NpemUsIHB0cnNQdHIsIHB0cnNTaXplLCByZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIF9lbXNjcmlwdGVuX2NvbnNvbGVfZXJyb3Ioc3RyKSB7XG4gYXNzZXJ0KHR5cGVvZiBzdHIgPT0gXCJudW1iZXJcIik7XG4gY29uc29sZS5lcnJvcihVVEY4VG9TdHJpbmcoc3RyKSk7XG59XG5cbmZ1bmN0aW9uIF9lbXNjcmlwdGVuX2dldF9oZWFwX21heCgpIHtcbiByZXR1cm4gNDI5NDkwMTc2MDtcbn1cblxudmFyIF9lbXNjcmlwdGVuX2dldF9ub3c7XG5cbmlmIChFTlZJUk9OTUVOVF9JU19OT0RFKSB7XG4gX2Vtc2NyaXB0ZW5fZ2V0X25vdyA9ICgoKSA9PiB7XG4gIHZhciB0ID0gcHJvY2Vzc1tcImhydGltZVwiXSgpO1xuICByZXR1cm4gdFswXSAqIDFlMyArIHRbMV0gLyAxZTY7XG4gfSk7XG59IGVsc2UgX2Vtc2NyaXB0ZW5fZ2V0X25vdyA9ICgoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSk7XG5cbmZ1bmN0aW9uIF9lbXNjcmlwdGVuX21lbWNweV9iaWcoZGVzdCwgc3JjLCBudW0pIHtcbiBIRUFQVTguY29weVdpdGhpbihkZXN0ID4+PiAwLCBzcmMgPj4+IDAsIHNyYyArIG51bSA+Pj4gMCk7XG59XG5cbmZ1bmN0aW9uIGVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIoc2l6ZSkge1xuIHRyeSB7XG4gIHdhc21NZW1vcnkuZ3JvdyhzaXplIC0gYnVmZmVyLmJ5dGVMZW5ndGggKyA2NTUzNSA+Pj4gMTYpO1xuICB1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7XG4gIHJldHVybiAxO1xuIH0gY2F0Y2ggKGUpIHtcbiAgZXJyKFwiZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcjogQXR0ZW1wdGVkIHRvIGdyb3cgaGVhcCBmcm9tIFwiICsgYnVmZmVyLmJ5dGVMZW5ndGggKyBcIiBieXRlcyB0byBcIiArIHNpemUgKyBcIiBieXRlcywgYnV0IGdvdCBlcnJvcjogXCIgKyBlKTtcbiB9XG59XG5cbmZ1bmN0aW9uIF9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwKHJlcXVlc3RlZFNpemUpIHtcbiB2YXIgb2xkU2l6ZSA9IEhFQVBVOC5sZW5ndGg7XG4gcmVxdWVzdGVkU2l6ZSA9IHJlcXVlc3RlZFNpemUgPj4+IDA7XG4gYXNzZXJ0KHJlcXVlc3RlZFNpemUgPiBvbGRTaXplKTtcbiB2YXIgbWF4SGVhcFNpemUgPSBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgoKTtcbiBpZiAocmVxdWVzdGVkU2l6ZSA+IG1heEhlYXBTaXplKSB7XG4gIGVycihcIkNhbm5vdCBlbmxhcmdlIG1lbW9yeSwgYXNrZWQgdG8gZ28gdXAgdG8gXCIgKyByZXF1ZXN0ZWRTaXplICsgXCIgYnl0ZXMsIGJ1dCB0aGUgbGltaXQgaXMgXCIgKyBtYXhIZWFwU2l6ZSArIFwiIGJ5dGVzIVwiKTtcbiAgcmV0dXJuIGZhbHNlO1xuIH1cbiBsZXQgYWxpZ25VcCA9ICh4LCBtdWx0aXBsZSkgPT4geCArIChtdWx0aXBsZSAtIHggJSBtdWx0aXBsZSkgJSBtdWx0aXBsZTtcbiBmb3IgKHZhciBjdXREb3duID0gMTsgY3V0RG93biA8PSA0OyBjdXREb3duICo9IDIpIHtcbiAgdmFyIG92ZXJHcm93bkhlYXBTaXplID0gb2xkU2l6ZSAqICgxICsgLjIgLyBjdXREb3duKTtcbiAgb3Zlckdyb3duSGVhcFNpemUgPSBNYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSwgcmVxdWVzdGVkU2l6ZSArIDEwMDY2MzI5Nik7XG4gIHZhciBuZXdTaXplID0gTWF0aC5taW4obWF4SGVhcFNpemUsIGFsaWduVXAoTWF0aC5tYXgocmVxdWVzdGVkU2l6ZSwgb3Zlckdyb3duSGVhcFNpemUpLCA2NTUzNikpO1xuICB2YXIgcmVwbGFjZW1lbnQgPSBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKG5ld1NpemUpO1xuICBpZiAocmVwbGFjZW1lbnQpIHtcbiAgIHJldHVybiB0cnVlO1xuICB9XG4gfVxuIGVycihcIkZhaWxlZCB0byBncm93IHRoZSBoZWFwIGZyb20gXCIgKyBvbGRTaXplICsgXCIgYnl0ZXMgdG8gXCIgKyBuZXdTaXplICsgXCIgYnl0ZXMsIG5vdCBlbm91Z2ggbWVtb3J5IVwiKTtcbiByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBFTlYgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RXhlY3V0YWJsZU5hbWUoKSB7XG4gcmV0dXJuIHRoaXNQcm9ncmFtIHx8IFwiLi90aGlzLnByb2dyYW1cIjtcbn1cblxuZnVuY3Rpb24gZ2V0RW52U3RyaW5ncygpIHtcbiBpZiAoIWdldEVudlN0cmluZ3Muc3RyaW5ncykge1xuICB2YXIgbGFuZyA9ICh0eXBlb2YgbmF2aWdhdG9yID09IFwib2JqZWN0XCIgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFwiLVwiLCBcIl9cIikgKyBcIi5VVEYtOFwiO1xuICB2YXIgZW52ID0ge1xuICAgXCJVU0VSXCI6IFwid2ViX3VzZXJcIixcbiAgIFwiTE9HTkFNRVwiOiBcIndlYl91c2VyXCIsXG4gICBcIlBBVEhcIjogXCIvXCIsXG4gICBcIlBXRFwiOiBcIi9cIixcbiAgIFwiSE9NRVwiOiBcIi9ob21lL3dlYl91c2VyXCIsXG4gICBcIkxBTkdcIjogbGFuZyxcbiAgIFwiX1wiOiBnZXRFeGVjdXRhYmxlTmFtZSgpXG4gIH07XG4gIGZvciAodmFyIHggaW4gRU5WKSB7XG4gICBpZiAoRU5WW3hdID09PSB1bmRlZmluZWQpIGRlbGV0ZSBlbnZbeF07IGVsc2UgZW52W3hdID0gRU5WW3hdO1xuICB9XG4gIHZhciBzdHJpbmdzID0gW107XG4gIGZvciAodmFyIHggaW4gZW52KSB7XG4gICBzdHJpbmdzLnB1c2goeCArIFwiPVwiICsgZW52W3hdKTtcbiAgfVxuICBnZXRFbnZTdHJpbmdzLnN0cmluZ3MgPSBzdHJpbmdzO1xuIH1cbiByZXR1cm4gZ2V0RW52U3RyaW5ncy5zdHJpbmdzO1xufVxuXG5mdW5jdGlvbiBfZW52aXJvbl9nZXQoX19lbnZpcm9uLCBlbnZpcm9uX2J1Zikge1xuIHZhciBidWZTaXplID0gMDtcbiBnZXRFbnZTdHJpbmdzKCkuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcsIGkpIHtcbiAgdmFyIHB0ciA9IGVudmlyb25fYnVmICsgYnVmU2l6ZTtcbiAgU0FGRV9IRUFQX1NUT1JFKF9fZW52aXJvbiArIGkgKiA0IHwgMCwgcHRyIHwgMCwgNCk7XG4gIHdyaXRlQXNjaWlUb01lbW9yeShzdHJpbmcsIHB0cik7XG4gIGJ1ZlNpemUgKz0gc3RyaW5nLmxlbmd0aCArIDE7XG4gfSk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9lbnZpcm9uX3NpemVzX2dldChwZW52aXJvbl9jb3VudCwgcGVudmlyb25fYnVmX3NpemUpIHtcbiB2YXIgc3RyaW5ncyA9IGdldEVudlN0cmluZ3MoKTtcbiBTQUZFX0hFQVBfU1RPUkUocGVudmlyb25fY291bnQgfCAwLCBzdHJpbmdzLmxlbmd0aCB8IDAsIDQpO1xuIHZhciBidWZTaXplID0gMDtcbiBzdHJpbmdzLmZvckVhY2goZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGJ1ZlNpemUgKz0gc3RyaW5nLmxlbmd0aCArIDE7XG4gfSk7XG4gU0FGRV9IRUFQX1NUT1JFKHBlbnZpcm9uX2J1Zl9zaXplIHwgMCwgYnVmU2l6ZSB8IDAsIDQpO1xuIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBfZmRfY2xvc2UoZmQpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX2ZkX3ByZWFkKGZkLCBpb3YsIGlvdmNudCwgb2Zmc2V0X2xvdywgb2Zmc2V0X2hpZ2gsIHBudW0pIHtcbiBhc3NlcnQoIW9mZnNldF9oaWdoLCBcIm9mZnNldHMgb3ZlciAyXjMyIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO1xuIHZhciBzdHJlYW0gPSBTWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO1xuIHZhciBudW0gPSBTWVNDQUxMUy5kb1JlYWR2KHN0cmVhbSwgaW92LCBpb3ZjbnQsIG9mZnNldF9sb3cpO1xuIFNBRkVfSEVBUF9TVE9SRShwbnVtIHwgMCwgbnVtIHwgMCwgNCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9mZF9wd3JpdGUoZmQsIGlvdiwgaW92Y250LCBvZmZzZXRfbG93LCBvZmZzZXRfaGlnaCwgcG51bSkge1xuIHZhciBzdHJlYW0gPSBTWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO1xuIGFzc2VydCghb2Zmc2V0X2hpZ2gsIFwib2Zmc2V0cyBvdmVyIDJeMzIgbm90IHlldCBzdXBwb3J0ZWRcIik7XG4gdmFyIG51bSA9IFNZU0NBTExTLmRvV3JpdGV2KHN0cmVhbSwgaW92LCBpb3ZjbnQsIG9mZnNldF9sb3cpO1xuIFNBRkVfSEVBUF9TVE9SRShwbnVtIHwgMCwgbnVtIHwgMCwgNCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9mZF9yZWFkKGZkLCBpb3YsIGlvdmNudCwgcG51bSkge1xuIHZhciBzdHJlYW0gPSBTWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO1xuIHZhciBudW0gPSBTWVNDQUxMUy5kb1JlYWR2KHN0cmVhbSwgaW92LCBpb3ZjbnQpO1xuIFNBRkVfSEVBUF9TVE9SRShwbnVtIHwgMCwgbnVtIHwgMCwgNCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9mZF9zZWVrKGZkLCBvZmZzZXRfbG93LCBvZmZzZXRfaGlnaCwgd2hlbmNlLCBuZXdPZmZzZXQpIHtcbiBhYm9ydChcIml0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gb3BlcmF0ZSBvbiBzdHJlYW1zIHdoZW4gIVNZU0NBTExTX1JFUVVJUkVfRklMRVNZU1RFTVwiKTtcbn1cblxuZnVuY3Rpb24gX2ZkX3N5bmMoZmQpIHtcbiB2YXIgc3RyZWFtID0gU1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtcbiBpZiAoc3RyZWFtLnN0cmVhbV9vcHMgJiYgc3RyZWFtLnN0cmVhbV9vcHMuZnN5bmMpIHtcbiAgcmV0dXJuIC1zdHJlYW0uc3RyZWFtX29wcy5mc3luYyhzdHJlYW0pO1xuIH1cbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZmx1c2hfTk9fRklMRVNZU1RFTSgpIHtcbiBfX19zdGRpb19leGl0KCk7XG4gdmFyIGJ1ZmZlcnMgPSBTWVNDQUxMUy5idWZmZXJzO1xuIGlmIChidWZmZXJzWzFdLmxlbmd0aCkgU1lTQ0FMTFMucHJpbnRDaGFyKDEsIDEwKTtcbiBpZiAoYnVmZmVyc1syXS5sZW5ndGgpIFNZU0NBTExTLnByaW50Q2hhcigyLCAxMCk7XG59XG5cbmZ1bmN0aW9uIF9mZF93cml0ZShmZCwgaW92LCBpb3ZjbnQsIHBudW0pIHtcbiB2YXIgbnVtID0gMDtcbiBmb3IgKHZhciBpID0gMDsgaSA8IGlvdmNudDsgaSsrKSB7XG4gIHZhciBwdHIgPSBTQUZFX0hFQVBfTE9BRChpb3YgfCAwLCA0LCAwKSB8IDA7XG4gIHZhciBsZW4gPSBTQUZFX0hFQVBfTE9BRChpb3YgKyA0IHwgMCwgNCwgMCkgfCAwO1xuICBpb3YgKz0gODtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgU1lTQ0FMTFMucHJpbnRDaGFyKGZkLCBTQUZFX0hFQVBfTE9BRChwdHIgKyBqID4+PiAwLCAxLCAxKSk7XG4gIH1cbiAgbnVtICs9IGxlbjtcbiB9XG4gU0FGRV9IRUFQX1NUT1JFKHBudW0gfCAwLCBudW0gfCAwLCA0KTtcbiByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gX2dldFRlbXBSZXQwKCkge1xuIHJldHVybiBnZXRUZW1wUmV0MCgpO1xufVxuXG5mdW5jdGlvbiBfZ2V0YWRkcmluZm8obm9kZSwgc2VydmljZSwgaGludCwgb3V0KSB7XG4gdmFyIGFkZHJzID0gW107XG4gdmFyIGNhbm9uID0gbnVsbDtcbiB2YXIgYWRkciA9IDA7XG4gdmFyIHBvcnQgPSAwO1xuIHZhciBmbGFncyA9IDA7XG4gdmFyIGZhbWlseSA9IDA7XG4gdmFyIHR5cGUgPSAwO1xuIHZhciBwcm90byA9IDA7XG4gdmFyIGFpLCBsYXN0O1xuIGZ1bmN0aW9uIGFsbG9jYWRkcmluZm8oZmFtaWx5LCB0eXBlLCBwcm90bywgY2Fub24sIGFkZHIsIHBvcnQpIHtcbiAgdmFyIHNhLCBzYWxlbiwgYWk7XG4gIHZhciBlcnJubztcbiAgc2FsZW4gPSBmYW1pbHkgPT09IDEwID8gMjggOiAxNjtcbiAgYWRkciA9IGZhbWlseSA9PT0gMTAgPyBpbmV0TnRvcDYoYWRkcikgOiBpbmV0TnRvcDQoYWRkcik7XG4gIHNhID0gX21hbGxvYyhzYWxlbik7XG4gIGVycm5vID0gd3JpdGVTb2NrYWRkcihzYSwgZmFtaWx5LCBhZGRyLCBwb3J0KTtcbiAgYXNzZXJ0KCFlcnJubyk7XG4gIGFpID0gX21hbGxvYygzMik7XG4gIFNBRkVfSEVBUF9TVE9SRShhaSArIDQgfCAwLCBmYW1pbHkgfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKGFpICsgOCB8IDAsIHR5cGUgfCAwLCA0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKGFpICsgMTIgfCAwLCBwcm90byB8IDAsIDQpO1xuICBTQUZFX0hFQVBfU1RPUkUoYWkgKyAyNCB8IDAsIGNhbm9uIHwgMCwgNCk7XG4gIFNBRkVfSEVBUF9TVE9SRShhaSArIDIwIHwgMCwgc2EgfCAwLCA0KTtcbiAgaWYgKGZhbWlseSA9PT0gMTApIHtcbiAgIFNBRkVfSEVBUF9TVE9SRShhaSArIDE2IHwgMCwgMjggfCAwLCA0KTtcbiAgfSBlbHNlIHtcbiAgIFNBRkVfSEVBUF9TVE9SRShhaSArIDE2IHwgMCwgMTYgfCAwLCA0KTtcbiAgfVxuICBTQUZFX0hFQVBfU1RPUkUoYWkgKyAyOCB8IDAsIDAgfCAwLCA0KTtcbiAgcmV0dXJuIGFpO1xuIH1cbiBpZiAoaGludCkge1xuICBmbGFncyA9IFNBRkVfSEVBUF9MT0FEKGhpbnQgfCAwLCA0LCAwKSB8IDA7XG4gIGZhbWlseSA9IFNBRkVfSEVBUF9MT0FEKGhpbnQgKyA0IHwgMCwgNCwgMCkgfCAwO1xuICB0eXBlID0gU0FGRV9IRUFQX0xPQUQoaGludCArIDggfCAwLCA0LCAwKSB8IDA7XG4gIHByb3RvID0gU0FGRV9IRUFQX0xPQUQoaGludCArIDEyIHwgMCwgNCwgMCkgfCAwO1xuIH1cbiBpZiAodHlwZSAmJiAhcHJvdG8pIHtcbiAgcHJvdG8gPSB0eXBlID09PSAyID8gMTcgOiA2O1xuIH1cbiBpZiAoIXR5cGUgJiYgcHJvdG8pIHtcbiAgdHlwZSA9IHByb3RvID09PSAxNyA/IDIgOiAxO1xuIH1cbiBpZiAocHJvdG8gPT09IDApIHtcbiAgcHJvdG8gPSA2O1xuIH1cbiBpZiAodHlwZSA9PT0gMCkge1xuICB0eXBlID0gMTtcbiB9XG4gaWYgKCFub2RlICYmICFzZXJ2aWNlKSB7XG4gIHJldHVybiAtMjtcbiB9XG4gaWYgKGZsYWdzICYgfigxIHwgMiB8IDQgfCAxMDI0IHwgOCB8IDE2IHwgMzIpKSB7XG4gIHJldHVybiAtMTtcbiB9XG4gaWYgKGhpbnQgIT09IDAgJiYgKFNBRkVfSEVBUF9MT0FEKGhpbnQgfCAwLCA0LCAwKSB8IDApICYgMiAmJiAhbm9kZSkge1xuICByZXR1cm4gLTE7XG4gfVxuIGlmIChmbGFncyAmIDMyKSB7XG4gIHJldHVybiAtMjtcbiB9XG4gaWYgKHR5cGUgIT09IDAgJiYgdHlwZSAhPT0gMSAmJiB0eXBlICE9PSAyKSB7XG4gIHJldHVybiAtNztcbiB9XG4gaWYgKGZhbWlseSAhPT0gMCAmJiBmYW1pbHkgIT09IDIgJiYgZmFtaWx5ICE9PSAxMCkge1xuICByZXR1cm4gLTY7XG4gfVxuIGlmIChzZXJ2aWNlKSB7XG4gIHNlcnZpY2UgPSBVVEY4VG9TdHJpbmcoc2VydmljZSk7XG4gIHBvcnQgPSBwYXJzZUludChzZXJ2aWNlLCAxMCk7XG4gIGlmIChpc05hTihwb3J0KSkge1xuICAgaWYgKGZsYWdzICYgMTAyNCkge1xuICAgIHJldHVybiAtMjtcbiAgIH1cbiAgIHJldHVybiAtODtcbiAgfVxuIH1cbiBpZiAoIW5vZGUpIHtcbiAgaWYgKGZhbWlseSA9PT0gMCkge1xuICAgZmFtaWx5ID0gMjtcbiAgfVxuICBpZiAoKGZsYWdzICYgMSkgPT09IDApIHtcbiAgIGlmIChmYW1pbHkgPT09IDIpIHtcbiAgICBhZGRyID0gX2h0b25sKDIxMzA3MDY0MzMpO1xuICAgfSBlbHNlIHtcbiAgICBhZGRyID0gWyAwLCAwLCAwLCAxIF07XG4gICB9XG4gIH1cbiAgYWkgPSBhbGxvY2FkZHJpbmZvKGZhbWlseSwgdHlwZSwgcHJvdG8sIG51bGwsIGFkZHIsIHBvcnQpO1xuICBTQUZFX0hFQVBfU1RPUkUob3V0IHwgMCwgYWkgfCAwLCA0KTtcbiAgcmV0dXJuIDA7XG4gfVxuIG5vZGUgPSBVVEY4VG9TdHJpbmcobm9kZSk7XG4gYWRkciA9IGluZXRQdG9uNChub2RlKTtcbiBpZiAoYWRkciAhPT0gbnVsbCkge1xuICBpZiAoZmFtaWx5ID09PSAwIHx8IGZhbWlseSA9PT0gMikge1xuICAgZmFtaWx5ID0gMjtcbiAgfSBlbHNlIGlmIChmYW1pbHkgPT09IDEwICYmIGZsYWdzICYgOCkge1xuICAgYWRkciA9IFsgMCwgMCwgX2h0b25sKDY1NTM1KSwgYWRkciBdO1xuICAgZmFtaWx5ID0gMTA7XG4gIH0gZWxzZSB7XG4gICByZXR1cm4gLTI7XG4gIH1cbiB9IGVsc2Uge1xuICBhZGRyID0gaW5ldFB0b242KG5vZGUpO1xuICBpZiAoYWRkciAhPT0gbnVsbCkge1xuICAgaWYgKGZhbWlseSA9PT0gMCB8fCBmYW1pbHkgPT09IDEwKSB7XG4gICAgZmFtaWx5ID0gMTA7XG4gICB9IGVsc2Uge1xuICAgIHJldHVybiAtMjtcbiAgIH1cbiAgfVxuIH1cbiBpZiAoYWRkciAhPSBudWxsKSB7XG4gIGFpID0gYWxsb2NhZGRyaW5mbyhmYW1pbHksIHR5cGUsIHByb3RvLCBub2RlLCBhZGRyLCBwb3J0KTtcbiAgU0FGRV9IRUFQX1NUT1JFKG91dCB8IDAsIGFpIHwgMCwgNCk7XG4gIHJldHVybiAwO1xuIH1cbiBpZiAoZmxhZ3MgJiA0KSB7XG4gIHJldHVybiAtMjtcbiB9XG4gbm9kZSA9IEROUy5sb29rdXBfbmFtZShub2RlKTtcbiBhZGRyID0gaW5ldFB0b240KG5vZGUpO1xuIGlmIChmYW1pbHkgPT09IDApIHtcbiAgZmFtaWx5ID0gMjtcbiB9IGVsc2UgaWYgKGZhbWlseSA9PT0gMTApIHtcbiAgYWRkciA9IFsgMCwgMCwgX2h0b25sKDY1NTM1KSwgYWRkciBdO1xuIH1cbiBhaSA9IGFsbG9jYWRkcmluZm8oZmFtaWx5LCB0eXBlLCBwcm90bywgbnVsbCwgYWRkciwgcG9ydCk7XG4gU0FGRV9IRUFQX1NUT1JFKG91dCB8IDAsIGFpIHwgMCwgNCk7XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmRvbURldmljZSgpIHtcbiBpZiAodHlwZW9mIGNyeXB0byA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBjcnlwdG9bXCJnZXRSYW5kb21WYWx1ZXNcIl0gPT0gXCJmdW5jdGlvblwiKSB7XG4gIHZhciByYW5kb21CdWZmZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYW5kb21CdWZmZXIpO1xuICAgcmV0dXJuIHJhbmRvbUJ1ZmZlclswXTtcbiAgfTtcbiB9IGVsc2UgaWYgKEVOVklST05NRU5UX0lTX05PREUpIHtcbiAgdHJ5IHtcbiAgIHZhciBjcnlwdG9fbW9kdWxlID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbiAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY3J5cHRvX21vZHVsZVtcInJhbmRvbUJ5dGVzXCJdKDEpWzBdO1xuICAgfTtcbiAgfSBjYXRjaCAoZSkge31cbiB9XG4gcmV0dXJuIGZ1bmN0aW9uKCkge1xuICBhYm9ydChcIm5vIGNyeXB0b2dyYXBoaWMgc3VwcG9ydCBmb3VuZCBmb3IgcmFuZG9tRGV2aWNlLiBjb25zaWRlciBwb2x5ZmlsbGluZyBpdCBpZiB5b3Ugd2FudCB0byB1c2Ugc29tZXRoaW5nIGluc2VjdXJlIGxpa2UgTWF0aC5yYW5kb20oKSwgZS5nLiBwdXQgdGhpcyBpbiBhIC0tcHJlLWpzOiB2YXIgY3J5cHRvID0geyBnZXRSYW5kb21WYWx1ZXM6IGZ1bmN0aW9uKGFycmF5KSB7IGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIGFycmF5W2ldID0gKE1hdGgucmFuZG9tKCkqMjU2KXwwIH0gfTtcIik7XG4gfTtcbn1cblxuZnVuY3Rpb24gX2dldGVudHJvcHkoYnVmZmVyLCBzaXplKSB7XG4gaWYgKCFfZ2V0ZW50cm9weS5yYW5kb21EZXZpY2UpIHtcbiAgX2dldGVudHJvcHkucmFuZG9tRGV2aWNlID0gZ2V0UmFuZG9tRGV2aWNlKCk7XG4gfVxuIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gIFNBRkVfSEVBUF9TVE9SRShidWZmZXIgKyBpIHwgMCwgX2dldGVudHJvcHkucmFuZG9tRGV2aWNlKCkgfCAwLCAxKTtcbiB9XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9nZXRuYW1laW5mbyhzYSwgc2FsZW4sIG5vZGUsIG5vZGVsZW4sIHNlcnYsIHNlcnZsZW4sIGZsYWdzKSB7XG4gdmFyIGluZm8gPSByZWFkU29ja2FkZHIoc2EsIHNhbGVuKTtcbiBpZiAoaW5mby5lcnJubykge1xuICByZXR1cm4gLTY7XG4gfVxuIHZhciBwb3J0ID0gaW5mby5wb3J0O1xuIHZhciBhZGRyID0gaW5mby5hZGRyO1xuIHZhciBvdmVyZmxvd2VkID0gZmFsc2U7XG4gaWYgKG5vZGUgJiYgbm9kZWxlbikge1xuICB2YXIgbG9va3VwO1xuICBpZiAoZmxhZ3MgJiAxIHx8ICEobG9va3VwID0gRE5TLmxvb2t1cF9hZGRyKGFkZHIpKSkge1xuICAgaWYgKGZsYWdzICYgOCkge1xuICAgIHJldHVybiAtMjtcbiAgIH1cbiAgfSBlbHNlIHtcbiAgIGFkZHIgPSBsb29rdXA7XG4gIH1cbiAgdmFyIG51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsID0gc3RyaW5nVG9VVEY4KGFkZHIsIG5vZGUsIG5vZGVsZW4pO1xuICBpZiAobnVtQnl0ZXNXcml0dGVuRXhjbE51bGwgKyAxID49IG5vZGVsZW4pIHtcbiAgIG92ZXJmbG93ZWQgPSB0cnVlO1xuICB9XG4gfVxuIGlmIChzZXJ2ICYmIHNlcnZsZW4pIHtcbiAgcG9ydCA9IFwiXCIgKyBwb3J0O1xuICB2YXIgbnVtQnl0ZXNXcml0dGVuRXhjbE51bGwgPSBzdHJpbmdUb1VURjgocG9ydCwgc2Vydiwgc2Vydmxlbik7XG4gIGlmIChudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbCArIDEgPj0gc2Vydmxlbikge1xuICAgb3ZlcmZsb3dlZCA9IHRydWU7XG4gIH1cbiB9XG4gaWYgKG92ZXJmbG93ZWQpIHtcbiAgcmV0dXJuIC0xMjtcbiB9XG4gcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIF9sbHZtX2VoX3R5cGVpZF9mb3IodHlwZSkge1xuIHJldHVybiB0eXBlO1xufVxuXG5mdW5jdGlvbiBfc2V0VGVtcFJldDAodmFsKSB7XG4gc2V0VGVtcFJldDAodmFsKTtcbn1cblxuZnVuY3Rpb24gX19pc0xlYXBZZWFyKHllYXIpIHtcbiByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59XG5cbmZ1bmN0aW9uIF9fYXJyYXlTdW0oYXJyYXksIGluZGV4KSB7XG4gdmFyIHN1bSA9IDA7XG4gZm9yICh2YXIgaSA9IDA7IGkgPD0gaW5kZXg7IHN1bSArPSBhcnJheVtpKytdKSB7fVxuIHJldHVybiBzdW07XG59XG5cbnZhciBfX01PTlRIX0RBWVNfTEVBUCA9IFsgMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMSBdO1xuXG52YXIgX19NT05USF9EQVlTX1JFR1VMQVIgPSBbIDMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzEgXTtcblxuZnVuY3Rpb24gX19hZGREYXlzKGRhdGUsIGRheXMpIHtcbiB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiB3aGlsZSAoZGF5cyA+IDApIHtcbiAgdmFyIGxlYXAgPSBfX2lzTGVhcFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgdmFyIGN1cnJlbnRNb250aCA9IG5ld0RhdGUuZ2V0TW9udGgoKTtcbiAgdmFyIGRheXNJbkN1cnJlbnRNb250aCA9IChsZWFwID8gX19NT05USF9EQVlTX0xFQVAgOiBfX01PTlRIX0RBWVNfUkVHVUxBUilbY3VycmVudE1vbnRoXTtcbiAgaWYgKGRheXMgPiBkYXlzSW5DdXJyZW50TW9udGggLSBuZXdEYXRlLmdldERhdGUoKSkge1xuICAgZGF5cyAtPSBkYXlzSW5DdXJyZW50TW9udGggLSBuZXdEYXRlLmdldERhdGUoKSArIDE7XG4gICBuZXdEYXRlLnNldERhdGUoMSk7XG4gICBpZiAoY3VycmVudE1vbnRoIDwgMTEpIHtcbiAgICBuZXdEYXRlLnNldE1vbnRoKGN1cnJlbnRNb250aCArIDEpO1xuICAgfSBlbHNlIHtcbiAgICBuZXdEYXRlLnNldE1vbnRoKDApO1xuICAgIG5ld0RhdGUuc2V0RnVsbFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpICsgMSk7XG4gICB9XG4gIH0gZWxzZSB7XG4gICBuZXdEYXRlLnNldERhdGUobmV3RGF0ZS5nZXREYXRlKCkgKyBkYXlzKTtcbiAgIHJldHVybiBuZXdEYXRlO1xuICB9XG4gfVxuIHJldHVybiBuZXdEYXRlO1xufVxuXG5mdW5jdGlvbiBfc3RyZnRpbWUocywgbWF4c2l6ZSwgZm9ybWF0LCB0bSkge1xuIHZhciB0bV96b25lID0gU0FGRV9IRUFQX0xPQUQodG0gKyA0MCB8IDAsIDQsIDApIHwgMDtcbiB2YXIgZGF0ZSA9IHtcbiAgdG1fc2VjOiBTQUZFX0hFQVBfTE9BRCh0bSB8IDAsIDQsIDApIHwgMCxcbiAgdG1fbWluOiBTQUZFX0hFQVBfTE9BRCh0bSArIDQgfCAwLCA0LCAwKSB8IDAsXG4gIHRtX2hvdXI6IFNBRkVfSEVBUF9MT0FEKHRtICsgOCB8IDAsIDQsIDApIHwgMCxcbiAgdG1fbWRheTogU0FGRV9IRUFQX0xPQUQodG0gKyAxMiB8IDAsIDQsIDApIHwgMCxcbiAgdG1fbW9uOiBTQUZFX0hFQVBfTE9BRCh0bSArIDE2IHwgMCwgNCwgMCkgfCAwLFxuICB0bV95ZWFyOiBTQUZFX0hFQVBfTE9BRCh0bSArIDIwIHwgMCwgNCwgMCkgfCAwLFxuICB0bV93ZGF5OiBTQUZFX0hFQVBfTE9BRCh0bSArIDI0IHwgMCwgNCwgMCkgfCAwLFxuICB0bV95ZGF5OiBTQUZFX0hFQVBfTE9BRCh0bSArIDI4IHwgMCwgNCwgMCkgfCAwLFxuICB0bV9pc2RzdDogU0FGRV9IRUFQX0xPQUQodG0gKyAzMiB8IDAsIDQsIDApIHwgMCxcbiAgdG1fZ210b2ZmOiBTQUZFX0hFQVBfTE9BRCh0bSArIDM2IHwgMCwgNCwgMCkgfCAwLFxuICB0bV96b25lOiB0bV96b25lID8gVVRGOFRvU3RyaW5nKHRtX3pvbmUpIDogXCJcIlxuIH07XG4gdmFyIHBhdHRlcm4gPSBVVEY4VG9TdHJpbmcoZm9ybWF0KTtcbiB2YXIgRVhQQU5TSU9OX1JVTEVTXzEgPSB7XG4gIFwiJWNcIjogXCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFxuICBcIiVEXCI6IFwiJW0vJWQvJXlcIixcbiAgXCIlRlwiOiBcIiVZLSVtLSVkXCIsXG4gIFwiJWhcIjogXCIlYlwiLFxuICBcIiVyXCI6IFwiJUk6JU06JVMgJXBcIixcbiAgXCIlUlwiOiBcIiVIOiVNXCIsXG4gIFwiJVRcIjogXCIlSDolTTolU1wiLFxuICBcIiV4XCI6IFwiJW0vJWQvJXlcIixcbiAgXCIlWFwiOiBcIiVIOiVNOiVTXCIsXG4gIFwiJUVjXCI6IFwiJWNcIixcbiAgXCIlRUNcIjogXCIlQ1wiLFxuICBcIiVFeFwiOiBcIiVtLyVkLyV5XCIsXG4gIFwiJUVYXCI6IFwiJUg6JU06JVNcIixcbiAgXCIlRXlcIjogXCIleVwiLFxuICBcIiVFWVwiOiBcIiVZXCIsXG4gIFwiJU9kXCI6IFwiJWRcIixcbiAgXCIlT2VcIjogXCIlZVwiLFxuICBcIiVPSFwiOiBcIiVIXCIsXG4gIFwiJU9JXCI6IFwiJUlcIixcbiAgXCIlT21cIjogXCIlbVwiLFxuICBcIiVPTVwiOiBcIiVNXCIsXG4gIFwiJU9TXCI6IFwiJVNcIixcbiAgXCIlT3VcIjogXCIldVwiLFxuICBcIiVPVVwiOiBcIiVVXCIsXG4gIFwiJU9WXCI6IFwiJVZcIixcbiAgXCIlT3dcIjogXCIld1wiLFxuICBcIiVPV1wiOiBcIiVXXCIsXG4gIFwiJU95XCI6IFwiJXlcIlxuIH07XG4gZm9yICh2YXIgcnVsZSBpbiBFWFBBTlNJT05fUlVMRVNfMSkge1xuICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSwgXCJnXCIpLCBFWFBBTlNJT05fUlVMRVNfMVtydWxlXSk7XG4gfVxuIHZhciBXRUVLREFZUyA9IFsgXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiIF07XG4gdmFyIE1PTlRIUyA9IFsgXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiIF07XG4gZnVuY3Rpb24gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSwgZGlnaXRzLCBjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0ciA9IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlIHx8IFwiXCI7XG4gIHdoaWxlIChzdHIubGVuZ3RoIDwgZGlnaXRzKSB7XG4gICBzdHIgPSBjaGFyYWN0ZXJbMF0gKyBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbiB9XG4gZnVuY3Rpb24gbGVhZGluZ051bGxzKHZhbHVlLCBkaWdpdHMpIHtcbiAgcmV0dXJuIGxlYWRpbmdTb21ldGhpbmcodmFsdWUsIGRpZ2l0cywgXCIwXCIpO1xuIH1cbiBmdW5jdGlvbiBjb21wYXJlQnlEYXkoZGF0ZTEsIGRhdGUyKSB7XG4gIGZ1bmN0aW9uIHNnbih2YWx1ZSkge1xuICAgcmV0dXJuIHZhbHVlIDwgMCA/IC0xIDogdmFsdWUgPiAwID8gMSA6IDA7XG4gIH1cbiAgdmFyIGNvbXBhcmU7XG4gIGlmICgoY29tcGFyZSA9IHNnbihkYXRlMS5nZXRGdWxsWWVhcigpIC0gZGF0ZTIuZ2V0RnVsbFllYXIoKSkpID09PSAwKSB7XG4gICBpZiAoKGNvbXBhcmUgPSBzZ24oZGF0ZTEuZ2V0TW9udGgoKSAtIGRhdGUyLmdldE1vbnRoKCkpKSA9PT0gMCkge1xuICAgIGNvbXBhcmUgPSBzZ24oZGF0ZTEuZ2V0RGF0ZSgpIC0gZGF0ZTIuZ2V0RGF0ZSgpKTtcbiAgIH1cbiAgfVxuICByZXR1cm4gY29tcGFyZTtcbiB9XG4gZnVuY3Rpb24gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aCkge1xuICBzd2l0Y2ggKGphbkZvdXJ0aC5nZXREYXkoKSkge1xuICBjYXNlIDA6XG4gICByZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMjkpO1xuXG4gIGNhc2UgMTpcbiAgIHJldHVybiBqYW5Gb3VydGg7XG5cbiAgY2FzZSAyOlxuICAgcmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLCAwLCAzKTtcblxuICBjYXNlIDM6XG4gICByZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksIDAsIDIpO1xuXG4gIGNhc2UgNDpcbiAgIHJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG5cbiAgY2FzZSA1OlxuICAgcmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMxKTtcblxuICBjYXNlIDY6XG4gICByZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzApO1xuICB9XG4gfVxuIGZ1bmN0aW9uIGdldFdlZWtCYXNlZFllYXIoZGF0ZSkge1xuICB2YXIgdGhpc0RhdGUgPSBfX2FkZERheXMobmV3IERhdGUoZGF0ZS50bV95ZWFyICsgMTkwMCwgMCwgMSksIGRhdGUudG1feWRheSk7XG4gIHZhciBqYW5Gb3VydGhUaGlzWWVhciA9IG5ldyBEYXRlKHRoaXNEYXRlLmdldEZ1bGxZZWFyKCksIDAsIDQpO1xuICB2YXIgamFuRm91cnRoTmV4dFllYXIgPSBuZXcgRGF0ZSh0aGlzRGF0ZS5nZXRGdWxsWWVhcigpICsgMSwgMCwgNCk7XG4gIHZhciBmaXJzdFdlZWtTdGFydFRoaXNZZWFyID0gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTtcbiAgdmFyIGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIgPSBnZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO1xuICBpZiAoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0VGhpc1llYXIsIHRoaXNEYXRlKSA8PSAwKSB7XG4gICBpZiAoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsIHRoaXNEYXRlKSA8PSAwKSB7XG4gICAgcmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCkgKyAxO1xuICAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgIH1cbiAgfSBlbHNlIHtcbiAgIHJldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpIC0gMTtcbiAgfVxuIH1cbiB2YXIgRVhQQU5TSU9OX1JVTEVTXzIgPSB7XG4gIFwiJWFcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIFdFRUtEQVlTW2RhdGUudG1fd2RheV0uc3Vic3RyaW5nKDAsIDMpO1xuICB9LFxuICBcIiVBXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBXRUVLREFZU1tkYXRlLnRtX3dkYXldO1xuICB9LFxuICBcIiViXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBNT05USFNbZGF0ZS50bV9tb25dLnN1YnN0cmluZygwLCAzKTtcbiAgfSxcbiAgXCIlQlwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gTU9OVEhTW2RhdGUudG1fbW9uXTtcbiAgfSxcbiAgXCIlQ1wiOiBmdW5jdGlvbihkYXRlKSB7XG4gICB2YXIgeWVhciA9IGRhdGUudG1feWVhciArIDE5MDA7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKHllYXIgLyAxMDAgfCAwLCAyKTtcbiAgfSxcbiAgXCIlZFwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWRheSwgMik7XG4gIH0sXG4gIFwiJWVcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGxlYWRpbmdTb21ldGhpbmcoZGF0ZS50bV9tZGF5LCAyLCBcIiBcIik7XG4gIH0sXG4gIFwiJWdcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMik7XG4gIH0sXG4gIFwiJUdcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSk7XG4gIH0sXG4gIFwiJUhcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX2hvdXIsIDIpO1xuICB9LFxuICBcIiVJXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHZhciB0d2VsdmVIb3VyID0gZGF0ZS50bV9ob3VyO1xuICAgaWYgKHR3ZWx2ZUhvdXIgPT0gMCkgdHdlbHZlSG91ciA9IDEyOyBlbHNlIGlmICh0d2VsdmVIb3VyID4gMTIpIHR3ZWx2ZUhvdXIgLT0gMTI7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKHR3ZWx2ZUhvdXIsIDIpO1xuICB9LFxuICBcIiVqXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5ICsgX19hcnJheVN1bShfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyICsgMTkwMCkgPyBfX01PTlRIX0RBWVNfTEVBUCA6IF9fTU9OVEhfREFZU19SRUdVTEFSLCBkYXRlLnRtX21vbiAtIDEpLCAzKTtcbiAgfSxcbiAgXCIlbVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbW9uICsgMSwgMik7XG4gIH0sXG4gIFwiJU1cIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21pbiwgMik7XG4gIH0sXG4gIFwiJW5cIjogZnVuY3Rpb24oKSB7XG4gICByZXR1cm4gXCJcXG5cIjtcbiAgfSxcbiAgXCIlcFwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICBpZiAoZGF0ZS50bV9ob3VyID49IDAgJiYgZGF0ZS50bV9ob3VyIDwgMTIpIHtcbiAgICByZXR1cm4gXCJBTVwiO1xuICAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJQTVwiO1xuICAgfVxuICB9LFxuICBcIiVTXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9zZWMsIDIpO1xuICB9LFxuICBcIiV0XCI6IGZ1bmN0aW9uKCkge1xuICAgcmV0dXJuIFwiXFx0XCI7XG4gIH0sXG4gIFwiJXVcIjogZnVuY3Rpb24oZGF0ZSkge1xuICAgcmV0dXJuIGRhdGUudG1fd2RheSB8fCA3O1xuICB9LFxuICBcIiVVXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHZhciBkYXlzID0gZGF0ZS50bV95ZGF5ICsgNyAtIGRhdGUudG1fd2RheTtcbiAgIHJldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5mbG9vcihkYXlzIC8gNyksIDIpO1xuICB9LFxuICBcIiVWXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHZhciB2YWwgPSBNYXRoLmZsb29yKChkYXRlLnRtX3lkYXkgKyA3IC0gKGRhdGUudG1fd2RheSArIDYpICUgNykgLyA3KTtcbiAgIGlmICgoZGF0ZS50bV93ZGF5ICsgMzcxIC0gZGF0ZS50bV95ZGF5IC0gMikgJSA3IDw9IDIpIHtcbiAgICB2YWwrKztcbiAgIH1cbiAgIGlmICghdmFsKSB7XG4gICAgdmFsID0gNTI7XG4gICAgdmFyIGRlYzMxID0gKGRhdGUudG1fd2RheSArIDcgLSBkYXRlLnRtX3lkYXkgLSAxKSAlIDc7XG4gICAgaWYgKGRlYzMxID09IDQgfHwgZGVjMzEgPT0gNSAmJiBfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyICUgNDAwIC0gMSkpIHtcbiAgICAgdmFsKys7XG4gICAgfVxuICAgfSBlbHNlIGlmICh2YWwgPT0gNTMpIHtcbiAgICB2YXIgamFuMSA9IChkYXRlLnRtX3dkYXkgKyAzNzEgLSBkYXRlLnRtX3lkYXkpICUgNztcbiAgICBpZiAoamFuMSAhPSA0ICYmIChqYW4xICE9IDMgfHwgIV9faXNMZWFwWWVhcihkYXRlLnRtX3llYXIpKSkgdmFsID0gMTtcbiAgIH1cbiAgIHJldHVybiBsZWFkaW5nTnVsbHModmFsLCAyKTtcbiAgfSxcbiAgXCIld1wiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gZGF0ZS50bV93ZGF5O1xuICB9LFxuICBcIiVXXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHZhciBkYXlzID0gZGF0ZS50bV95ZGF5ICsgNyAtIChkYXRlLnRtX3dkYXkgKyA2KSAlIDc7XG4gICByZXR1cm4gbGVhZGluZ051bGxzKE1hdGguZmxvb3IoZGF5cyAvIDcpLCAyKTtcbiAgfSxcbiAgXCIleVwiOiBmdW5jdGlvbihkYXRlKSB7XG4gICByZXR1cm4gKGRhdGUudG1feWVhciArIDE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpO1xuICB9LFxuICBcIiVZXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBkYXRlLnRtX3llYXIgKyAxOTAwO1xuICB9LFxuICBcIiV6XCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHZhciBvZmYgPSBkYXRlLnRtX2dtdG9mZjtcbiAgIHZhciBhaGVhZCA9IG9mZiA+PSAwO1xuICAgb2ZmID0gTWF0aC5hYnMob2ZmKSAvIDYwO1xuICAgb2ZmID0gb2ZmIC8gNjAgKiAxMDAgKyBvZmYgJSA2MDtcbiAgIHJldHVybiAoYWhlYWQgPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIG9mZikuc2xpY2UoLTQpO1xuICB9LFxuICBcIiVaXCI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgIHJldHVybiBkYXRlLnRtX3pvbmU7XG4gIH0sXG4gIFwiJSVcIjogZnVuY3Rpb24oKSB7XG4gICByZXR1cm4gXCIlXCI7XG4gIH1cbiB9O1xuIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLyUlL2csIFwiXFwwXFwwXCIpO1xuIGZvciAodmFyIHJ1bGUgaW4gRVhQQU5TSU9OX1JVTEVTXzIpIHtcbiAgaWYgKHBhdHRlcm4uaW5jbHVkZXMocnVsZSkpIHtcbiAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UobmV3IFJlZ0V4cChydWxlLCBcImdcIiksIEVYUEFOU0lPTl9SVUxFU18yW3J1bGVdKGRhdGUpKTtcbiAgfVxuIH1cbiBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXDBcXDAvZywgXCIlXCIpO1xuIHZhciBieXRlcyA9IGludEFycmF5RnJvbVN0cmluZyhwYXR0ZXJuLCBmYWxzZSk7XG4gaWYgKGJ5dGVzLmxlbmd0aCA+IG1heHNpemUpIHtcbiAgcmV0dXJuIDA7XG4gfVxuIHdyaXRlQXJyYXlUb01lbW9yeShieXRlcywgcyk7XG4gcmV0dXJuIGJ5dGVzLmxlbmd0aCAtIDE7XG59XG5cbmZ1bmN0aW9uIF9zdHJmdGltZV9sKHMsIG1heHNpemUsIGZvcm1hdCwgdG0pIHtcbiByZXR1cm4gX3N0cmZ0aW1lKHMsIG1heHNpemUsIGZvcm1hdCwgdG0pO1xufVxuXG52YXIgQVNTRVJUSU9OUyA9IHRydWU7XG5cbmZ1bmN0aW9uIGludEFycmF5RnJvbVN0cmluZyhzdHJpbmd5LCBkb250QWRkTnVsbCwgbGVuZ3RoKSB7XG4gdmFyIGxlbiA9IGxlbmd0aCA+IDAgPyBsZW5ndGggOiBsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkgKyAxO1xuIHZhciB1OGFycmF5ID0gbmV3IEFycmF5KGxlbik7XG4gdmFyIG51bUJ5dGVzV3JpdHRlbiA9IHN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksIHU4YXJyYXksIDAsIHU4YXJyYXkubGVuZ3RoKTtcbiBpZiAoZG9udEFkZE51bGwpIHU4YXJyYXkubGVuZ3RoID0gbnVtQnl0ZXNXcml0dGVuO1xuIHJldHVybiB1OGFycmF5O1xufVxuXG5mdW5jdGlvbiBpbnRBcnJheVRvU3RyaW5nKGFycmF5KSB7XG4gdmFyIHJldCA9IFtdO1xuIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgdmFyIGNociA9IGFycmF5W2ldO1xuICBpZiAoY2hyID4gMjU1KSB7XG4gICBpZiAoQVNTRVJUSU9OUykge1xuICAgIGFzc2VydChmYWxzZSwgXCJDaGFyYWN0ZXIgY29kZSBcIiArIGNociArIFwiIChcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKSArIFwiKSAgYXQgb2Zmc2V0IFwiICsgaSArIFwiIG5vdCBpbiAweDAwLTB4RkYuXCIpO1xuICAgfVxuICAgY2hyICY9IDI1NTtcbiAgfVxuICByZXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikpO1xuIH1cbiByZXR1cm4gcmV0LmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5jb21pbmdNb2R1bGVBUEkoKSB7XG4gaWdub3JlZE1vZHVsZVByb3AoXCJmZXRjaFNldHRpbmdzXCIpO1xufVxuXG52YXIgYXNtTGlicmFyeUFyZyA9IHtcbiBcIl9fYXNzZXJ0X2ZhaWxcIjogX19fYXNzZXJ0X2ZhaWwsXG4gXCJfX2N4YV9hbGxvY2F0ZV9leGNlcHRpb25cIjogX19fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbixcbiBcIl9fY3hhX2JlZ2luX2NhdGNoXCI6IF9fX2N4YV9iZWdpbl9jYXRjaCxcbiBcIl9fY3hhX2VuZF9jYXRjaFwiOiBfX19jeGFfZW5kX2NhdGNoLFxuIFwiX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF8yXCI6IF9fX2N4YV9maW5kX21hdGNoaW5nX2NhdGNoXzIsXG4gXCJfX2N4YV9maW5kX21hdGNoaW5nX2NhdGNoXzNcIjogX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfMyxcbiBcIl9fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfNFwiOiBfX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF80LFxuIFwiX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF81XCI6IF9fX2N4YV9maW5kX21hdGNoaW5nX2NhdGNoXzUsXG4gXCJfX2N4YV9mcmVlX2V4Y2VwdGlvblwiOiBfX19jeGFfZnJlZV9leGNlcHRpb24sXG4gXCJfX2N4YV9yZXRocm93XCI6IF9fX2N4YV9yZXRocm93LFxuIFwiX19jeGFfdGhyb3dcIjogX19fY3hhX3Rocm93LFxuIFwiX19jeGFfdW5jYXVnaHRfZXhjZXB0aW9uc1wiOiBfX19jeGFfdW5jYXVnaHRfZXhjZXB0aW9ucyxcbiBcIl9fcmVzdW1lRXhjZXB0aW9uXCI6IF9fX3Jlc3VtZUV4Y2VwdGlvbixcbiBcIl9fc3lzY2FsbF9fbmV3c2VsZWN0XCI6IF9fX3N5c2NhbGxfX25ld3NlbGVjdCxcbiBcIl9fc3lzY2FsbF9iaW5kXCI6IF9fX3N5c2NhbGxfYmluZCxcbiBcIl9fc3lzY2FsbF9jb25uZWN0XCI6IF9fX3N5c2NhbGxfY29ubmVjdCxcbiBcIl9fc3lzY2FsbF9mYWNjZXNzYXRcIjogX19fc3lzY2FsbF9mYWNjZXNzYXQsXG4gXCJfX3N5c2NhbGxfZmNudGw2NFwiOiBfX19zeXNjYWxsX2ZjbnRsNjQsXG4gXCJfX3N5c2NhbGxfZnN0YXQ2NFwiOiBfX19zeXNjYWxsX2ZzdGF0NjQsXG4gXCJfX3N5c2NhbGxfZnRydW5jYXRlNjRcIjogX19fc3lzY2FsbF9mdHJ1bmNhdGU2NCxcbiBcIl9fc3lzY2FsbF9nZXRkZW50czY0XCI6IF9fX3N5c2NhbGxfZ2V0ZGVudHM2NCxcbiBcIl9fc3lzY2FsbF9nZXRwZWVybmFtZVwiOiBfX19zeXNjYWxsX2dldHBlZXJuYW1lLFxuIFwiX19zeXNjYWxsX2dldHNvY2tvcHRcIjogX19fc3lzY2FsbF9nZXRzb2Nrb3B0LFxuIFwiX19zeXNjYWxsX2lvY3RsXCI6IF9fX3N5c2NhbGxfaW9jdGwsXG4gXCJfX3N5c2NhbGxfbHN0YXQ2NFwiOiBfX19zeXNjYWxsX2xzdGF0NjQsXG4gXCJfX3N5c2NhbGxfbWtkaXJhdFwiOiBfX19zeXNjYWxsX21rZGlyYXQsXG4gXCJfX3N5c2NhbGxfbmV3ZnN0YXRhdFwiOiBfX19zeXNjYWxsX25ld2ZzdGF0YXQsXG4gXCJfX3N5c2NhbGxfb3BlbmF0XCI6IF9fX3N5c2NhbGxfb3BlbmF0LFxuIFwiX19zeXNjYWxsX3JlY3Zmcm9tXCI6IF9fX3N5c2NhbGxfcmVjdmZyb20sXG4gXCJfX3N5c2NhbGxfcmVuYW1lYXRcIjogX19fc3lzY2FsbF9yZW5hbWVhdCxcbiBcIl9fc3lzY2FsbF9ybWRpclwiOiBfX19zeXNjYWxsX3JtZGlyLFxuIFwiX19zeXNjYWxsX3NlbmR0b1wiOiBfX19zeXNjYWxsX3NlbmR0byxcbiBcIl9fc3lzY2FsbF9zb2NrZXRcIjogX19fc3lzY2FsbF9zb2NrZXQsXG4gXCJfX3N5c2NhbGxfc3RhdDY0XCI6IF9fX3N5c2NhbGxfc3RhdDY0LFxuIFwiX19zeXNjYWxsX3VubGlua2F0XCI6IF9fX3N5c2NhbGxfdW5saW5rYXQsXG4gXCJfZGxpbml0XCI6IF9fZGxpbml0LFxuIFwiX2Rsb3Blbl9qc1wiOiBfX2Rsb3Blbl9qcyxcbiBcIl9kbHN5bV9qc1wiOiBfX2Rsc3ltX2pzLFxuIFwiX2Vtc2NyaXB0ZW5fZGF0ZV9ub3dcIjogX19lbXNjcmlwdGVuX2RhdGVfbm93LFxuIFwiX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWNcIjogX19lbXNjcmlwdGVuX2dldF9ub3dfaXNfbW9ub3RvbmljLFxuIFwiYWJvcnRcIjogX2Fib3J0LFxuIFwiYWxpZ25mYXVsdFwiOiBhbGlnbmZhdWx0LFxuIFwiZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfY3JlYXRlXCI6IF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9jcmVhdGUsXG4gXCJkdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9leGlzdHNcIjogX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2V4aXN0cyxcbiBcImR1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXNcIjogX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMsXG4gXCJkdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9yZW1vdmVcIjogX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZSxcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV9jbG9zZVwiOiBfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX2V4aXN0c1wiOiBfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyxcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV9nZXRfbGFzdF9tb2RpZmllZF90aW1lXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfZ2V0X2xhc3RfbW9kaWZpZWRfdGltZSxcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfbW92ZSxcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV9vcGVuXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfb3BlbixcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV9yZWFkXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfcmVhZCxcbiBcImR1Y2tkYl93ZWJfZnNfZmlsZV90cnVuY2F0ZVwiOiBfZHVja2RiX3dlYl9mc19maWxlX3RydW5jYXRlLFxuIFwiZHVja2RiX3dlYl9mc19maWxlX3dyaXRlXCI6IF9kdWNrZGJfd2ViX2ZzX2ZpbGVfd3JpdGUsXG4gXCJkdWNrZGJfd2ViX2ZzX2dsb2JcIjogX2R1Y2tkYl93ZWJfZnNfZ2xvYixcbiBcImR1Y2tkYl93ZWJfdGVzdF9wbGF0Zm9ybV9mZWF0dXJlXCI6IF9kdWNrZGJfd2ViX3Rlc3RfcGxhdGZvcm1fZmVhdHVyZSxcbiBcImR1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsXCI6IF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY2FsbCxcbiBcImVtc2NyaXB0ZW5fY29uc29sZV9lcnJvclwiOiBfZW1zY3JpcHRlbl9jb25zb2xlX2Vycm9yLFxuIFwiZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXhcIjogX2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfbWF4LFxuIFwiZW1zY3JpcHRlbl9nZXRfbm93XCI6IF9lbXNjcmlwdGVuX2dldF9ub3csXG4gXCJlbXNjcmlwdGVuX21lbWNweV9iaWdcIjogX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyxcbiBcImVtc2NyaXB0ZW5fcmVzaXplX2hlYXBcIjogX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAsXG4gXCJlbnZpcm9uX2dldFwiOiBfZW52aXJvbl9nZXQsXG4gXCJlbnZpcm9uX3NpemVzX2dldFwiOiBfZW52aXJvbl9zaXplc19nZXQsXG4gXCJmZF9jbG9zZVwiOiBfZmRfY2xvc2UsXG4gXCJmZF9wcmVhZFwiOiBfZmRfcHJlYWQsXG4gXCJmZF9wd3JpdGVcIjogX2ZkX3B3cml0ZSxcbiBcImZkX3JlYWRcIjogX2ZkX3JlYWQsXG4gXCJmZF9zZWVrXCI6IF9mZF9zZWVrLFxuIFwiZmRfc3luY1wiOiBfZmRfc3luYyxcbiBcImZkX3dyaXRlXCI6IF9mZF93cml0ZSxcbiBcImdldFRlbXBSZXQwXCI6IF9nZXRUZW1wUmV0MCxcbiBcImdldGFkZHJpbmZvXCI6IF9nZXRhZGRyaW5mbyxcbiBcImdldGVudHJvcHlcIjogX2dldGVudHJvcHksXG4gXCJnZXRuYW1laW5mb1wiOiBfZ2V0bmFtZWluZm8sXG4gXCJpbnZva2VfZFwiOiBpbnZva2VfZCxcbiBcImludm9rZV9kaVwiOiBpbnZva2VfZGksXG4gXCJpbnZva2VfZGlpXCI6IGludm9rZV9kaWksXG4gXCJpbnZva2VfZGlpaVwiOiBpbnZva2VfZGlpaSxcbiBcImludm9rZV9kaWlqaWlcIjogaW52b2tlX2RpaWppaSxcbiBcImludm9rZV9mXCI6IGludm9rZV9mLFxuIFwiaW52b2tlX2ZpXCI6IGludm9rZV9maSxcbiBcImludm9rZV9maWlpXCI6IGludm9rZV9maWlpLFxuIFwiaW52b2tlX2ZpaWppaVwiOiBpbnZva2VfZmlpamlpLFxuIFwiaW52b2tlX2lcIjogaW52b2tlX2ksXG4gXCJpbnZva2VfaWRcIjogaW52b2tlX2lkLFxuIFwiaW52b2tlX2lkZFwiOiBpbnZva2VfaWRkLFxuIFwiaW52b2tlX2lkaWlpXCI6IGludm9rZV9pZGlpaSxcbiBcImludm9rZV9pZlwiOiBpbnZva2VfaWYsXG4gXCJpbnZva2VfaWZmXCI6IGludm9rZV9pZmYsXG4gXCJpbnZva2VfaWlcIjogaW52b2tlX2lpLFxuIFwiaW52b2tlX2lpZFwiOiBpbnZva2VfaWlkLFxuIFwiaW52b2tlX2lpZGlpXCI6IGludm9rZV9paWRpaSxcbiBcImludm9rZV9paWRqXCI6IGludm9rZV9paWRqLFxuIFwiaW52b2tlX2lpaVwiOiBpbnZva2VfaWlpLFxuIFwiaW52b2tlX2lpaWRcIjogaW52b2tlX2lpaWQsXG4gXCJpbnZva2VfaWlpZGlcIjogaW52b2tlX2lpaWRpLFxuIFwiaW52b2tlX2lpaWlcIjogaW52b2tlX2lpaWksXG4gXCJpbnZva2VfaWlpaWRcIjogaW52b2tlX2lpaWlkLFxuIFwiaW52b2tlX2lpaWlkampcIjogaW52b2tlX2lpaWlkamosXG4gXCJpbnZva2VfaWlpaWlcIjogaW52b2tlX2lpaWlpLFxuIFwiaW52b2tlX2lpaWlpZFwiOiBpbnZva2VfaWlpaWlkLFxuIFwiaW52b2tlX2lpaWlpaVwiOiBpbnZva2VfaWlpaWlpLFxuIFwiaW52b2tlX2lpaWlpaWlcIjogaW52b2tlX2lpaWlpaWksXG4gXCJpbnZva2VfaWlpaWlpaWlcIjogaW52b2tlX2lpaWlpaWlpLFxuIFwiaW52b2tlX2lpaWlpaWlpaVwiOiBpbnZva2VfaWlpaWlpaWlpLFxuIFwiaW52b2tlX2lpaWlpaWlpaWlcIjogaW52b2tlX2lpaWlpaWlpaWksXG4gXCJpbnZva2VfaWlpaWlpaWlpaWlcIjogaW52b2tlX2lpaWlpaWlpaWlpLFxuIFwiaW52b2tlX2lpaWlpaWlpaWlpaVwiOiBpbnZva2VfaWlpaWlpaWlpaWlpLFxuIFwiaW52b2tlX2lpaWlpaWlpaWlpaWlcIjogaW52b2tlX2lpaWlpaWlpaWlpaWksXG4gXCJpbnZva2VfaWlpaWlpaWlpaWlpaWlpXCI6IGludm9rZV9paWlpaWlpaWlpaWlpaWksXG4gXCJpbnZva2VfaWlpaWlpaWlpaWlpaWlpaVwiOiBpbnZva2VfaWlpaWlpaWlpaWlpaWlpaSxcbiBcImludm9rZV9paWlpaWlpaWlpaWlqXCI6IGludm9rZV9paWlpaWlpaWlpaWlqLFxuIFwiaW52b2tlX2lpaWlpaWlpaWlqaVwiOiBpbnZva2VfaWlpaWlpaWlpaWppLFxuIFwiaW52b2tlX2lpaWlpaWlpalwiOiBpbnZva2VfaWlpaWlpaWlqLFxuIFwiaW52b2tlX2lpaWlpaWlpamlcIjogaW52b2tlX2lpaWlpaWlpamksXG4gXCJpbnZva2VfaWlpaWlpaWpcIjogaW52b2tlX2lpaWlpaWlqLFxuIFwiaW52b2tlX2lpaWlpaWlqaVwiOiBpbnZva2VfaWlpaWlpaWppLFxuIFwiaW52b2tlX2lpaWlpaWlqaWlcIjogaW52b2tlX2lpaWlpaWlqaWksXG4gXCJpbnZva2VfaWlpaWlpalwiOiBpbnZva2VfaWlpaWlpaixcbiBcImludm9rZV9paWlpaWlqaVwiOiBpbnZva2VfaWlpaWlpamksXG4gXCJpbnZva2VfaWlpaWlpamppXCI6IGludm9rZV9paWlpaWlqamksXG4gXCJpbnZva2VfaWlpaWlqXCI6IGludm9rZV9paWlpaWosXG4gXCJpbnZva2VfaWlpaWlqaVwiOiBpbnZva2VfaWlpaWlqaSxcbiBcImludm9rZV9paWlpaWppaVwiOiBpbnZva2VfaWlpaWlqaWksXG4gXCJpbnZva2VfaWlpaWlqaWpcIjogaW52b2tlX2lpaWlpamlqLFxuIFwiaW52b2tlX2lpaWlpampcIjogaW52b2tlX2lpaWlpamosXG4gXCJpbnZva2VfaWlpaWlqamlcIjogaW52b2tlX2lpaWlpamppLFxuIFwiaW52b2tlX2lpaWlpamppaWpqXCI6IGludm9rZV9paWlpaWpqaWlqaixcbiBcImludm9rZV9paWlpaWpqalwiOiBpbnZva2VfaWlpaWlqamosXG4gXCJpbnZva2VfaWlpaWlqamppXCI6IGludm9rZV9paWlpaWpqamksXG4gXCJpbnZva2VfaWlpaWpcIjogaW52b2tlX2lpaWlqLFxuIFwiaW52b2tlX2lpaWlqaVwiOiBpbnZva2VfaWlpaWppLFxuIFwiaW52b2tlX2lpaWlqaWlcIjogaW52b2tlX2lpaWlqaWksXG4gXCJpbnZva2VfaWlpaWppaWlcIjogaW52b2tlX2lpaWlqaWlpLFxuIFwiaW52b2tlX2lpaWlqalwiOiBpbnZva2VfaWlpaWpqLFxuIFwiaW52b2tlX2lpaWlqamlcIjogaW52b2tlX2lpaWlqamksXG4gXCJpbnZva2VfaWlpaWpqaWlcIjogaW52b2tlX2lpaWlqamlpLFxuIFwiaW52b2tlX2lpaWlqampcIjogaW52b2tlX2lpaWlqamosXG4gXCJpbnZva2VfaWlpalwiOiBpbnZva2VfaWlpaixcbiBcImludm9rZV9paWlqaVwiOiBpbnZva2VfaWlpamksXG4gXCJpbnZva2VfaWlpamlpXCI6IGludm9rZV9paWlqaWksXG4gXCJpbnZva2VfaWlpamlpaVwiOiBpbnZva2VfaWlpamlpaSxcbiBcImludm9rZV9paWlqaWlpaVwiOiBpbnZva2VfaWlpamlpaWksXG4gXCJpbnZva2VfaWlpamlpalwiOiBpbnZva2VfaWlpamlpaixcbiBcImludm9rZV9paWlqaWlqalwiOiBpbnZva2VfaWlpamlpamosXG4gXCJpbnZva2VfaWlpamlqXCI6IGludm9rZV9paWlqaWosXG4gXCJpbnZva2VfaWlpampcIjogaW52b2tlX2lpaWpqLFxuIFwiaW52b2tlX2lpaWpqaVwiOiBpbnZva2VfaWlpamppLFxuIFwiaW52b2tlX2lpaWpqaWlcIjogaW52b2tlX2lpaWpqaWksXG4gXCJpbnZva2VfaWlpamppaWpcIjogaW52b2tlX2lpaWpqaWlqLFxuIFwiaW52b2tlX2lpaWpqaWlqaVwiOiBpbnZva2VfaWlpamppaWppLFxuIFwiaW52b2tlX2lpaWpqalwiOiBpbnZva2VfaWlpampqLFxuIFwiaW52b2tlX2lpaWpqamlcIjogaW52b2tlX2lpaWpqamksXG4gXCJpbnZva2VfaWlpampqaWlcIjogaW52b2tlX2lpaWpqamlpLFxuIFwiaW52b2tlX2lpalwiOiBpbnZva2VfaWlqLFxuIFwiaW52b2tlX2lpamlcIjogaW52b2tlX2lpamksXG4gXCJpbnZva2VfaWlqaWlcIjogaW52b2tlX2lpamlpLFxuIFwiaW52b2tlX2lpamlpaVwiOiBpbnZva2VfaWlqaWlpLFxuIFwiaW52b2tlX2lpamlpaWlcIjogaW52b2tlX2lpamlpaWksXG4gXCJpbnZva2VfaWlqaWlqalwiOiBpbnZva2VfaWlqaWlqaixcbiBcImludm9rZV9paWppamlcIjogaW52b2tlX2lpamlqaSxcbiBcImludm9rZV9paWpqXCI6IGludm9rZV9paWpqLFxuIFwiaW52b2tlX2lpamppXCI6IGludm9rZV9paWpqaSxcbiBcImludm9rZV9paWpqaWlcIjogaW52b2tlX2lpamppaSxcbiBcImludm9rZV9paWpqaWlpXCI6IGludm9rZV9paWpqaWlpLFxuIFwiaW52b2tlX2lpamppaWlpXCI6IGludm9rZV9paWpqaWlpaSxcbiBcImludm9rZV9paWpqaWpqXCI6IGludm9rZV9paWpqaWpqLFxuIFwiaW52b2tlX2lpampqXCI6IGludm9rZV9paWpqaixcbiBcImludm9rZV9palwiOiBpbnZva2VfaWosXG4gXCJpbnZva2VfaWppXCI6IGludm9rZV9pamksXG4gXCJpbnZva2VfaWppaVwiOiBpbnZva2VfaWppaSxcbiBcImludm9rZV9pamppXCI6IGludm9rZV9pamppLFxuIFwiaW52b2tlX2lqamlpaVwiOiBpbnZva2VfaWpqaWlpLFxuIFwiaW52b2tlX2pcIjogaW52b2tlX2osXG4gXCJpbnZva2VfamRcIjogaW52b2tlX2pkLFxuIFwiaW52b2tlX2pmXCI6IGludm9rZV9qZixcbiBcImludm9rZV9qaVwiOiBpbnZva2VfamksXG4gXCJpbnZva2VfamlpXCI6IGludm9rZV9qaWksXG4gXCJpbnZva2VfamlpaVwiOiBpbnZva2VfamlpaSxcbiBcImludm9rZV9qaWlpaVwiOiBpbnZva2VfamlpaWksXG4gXCJpbnZva2VfamlpaWlpXCI6IGludm9rZV9qaWlpaWksXG4gXCJpbnZva2VfamlpaWlpaVwiOiBpbnZva2VfamlpaWlpaSxcbiBcImludm9rZV9qaWlpaWlpaVwiOiBpbnZva2VfamlpaWlpaWksXG4gXCJpbnZva2VfamlpaWlpaWppaVwiOiBpbnZva2VfamlpaWlpaWppaSxcbiBcImludm9rZV9qaWlpaWlqaWlpaVwiOiBpbnZva2VfamlpaWlpamlpaWksXG4gXCJpbnZva2VfamlpaWlqXCI6IGludm9rZV9qaWlpaWosXG4gXCJpbnZva2VfamlpaWlqaVwiOiBpbnZva2VfamlpaWlqaSxcbiBcImludm9rZV9qaWlpaWppaVwiOiBpbnZva2VfamlpaWlqaWksXG4gXCJpbnZva2VfamlpaWpcIjogaW52b2tlX2ppaWlqLFxuIFwiaW52b2tlX2ppaWlqaVwiOiBpbnZva2VfamlpaWppLFxuIFwiaW52b2tlX2ppaWlqaWlcIjogaW52b2tlX2ppaWlqaWksXG4gXCJpbnZva2VfamlpaWppaWlcIjogaW52b2tlX2ppaWlqaWlpLFxuIFwiaW52b2tlX2ppaWlqalwiOiBpbnZva2VfamlpaWpqLFxuIFwiaW52b2tlX2ppaWlqampcIjogaW52b2tlX2ppaWlqamosXG4gXCJpbnZva2VfamlpalwiOiBpbnZva2VfamlpaixcbiBcImludm9rZV9qaWlqaVwiOiBpbnZva2VfamlpamksXG4gXCJpbnZva2VfamlpamlpXCI6IGludm9rZV9qaWlqaWksXG4gXCJpbnZva2VfamlpamlpaVwiOiBpbnZva2VfamlpamlpaSxcbiBcImludm9rZV9qaWlqaWpqaWlcIjogaW52b2tlX2ppaWppamppaSxcbiBcImludm9rZV9qaWpcIjogaW52b2tlX2ppaixcbiBcImludm9rZV9qaWppaWlcIjogaW52b2tlX2ppamlpaSxcbiBcImludm9rZV9qaWppaWlpXCI6IGludm9rZV9qaWppaWlpLFxuIFwiaW52b2tlX2ppamlqXCI6IGludm9rZV9qaWppaixcbiBcImludm9rZV9qaWpqXCI6IGludm9rZV9qaWpqLFxuIFwiaW52b2tlX2ppamppalwiOiBpbnZva2VfamlqamlqLFxuIFwiaW52b2tlX2pqXCI6IGludm9rZV9qaixcbiBcImludm9rZV9qamlcIjogaW52b2tlX2pqaSxcbiBcImludm9rZV9qamlqaVwiOiBpbnZva2VfamppamksXG4gXCJpbnZva2VfampqXCI6IGludm9rZV9qamosXG4gXCJpbnZva2VfampqaWlcIjogaW52b2tlX2pqamlpLFxuIFwiaW52b2tlX2pqamppXCI6IGludm9rZV9qampqaSxcbiBcImludm9rZV9qampqampkXCI6IGludm9rZV9qampqampkLFxuIFwiaW52b2tlX3ZcIjogaW52b2tlX3YsXG4gXCJpbnZva2VfdmlcIjogaW52b2tlX3ZpLFxuIFwiaW52b2tlX3ZpZFwiOiBpbnZva2VfdmlkLFxuIFwiaW52b2tlX3ZpZGlpampcIjogaW52b2tlX3ZpZGlpamosXG4gXCJpbnZva2VfdmlmXCI6IGludm9rZV92aWYsXG4gXCJpbnZva2VfdmlmaWlqalwiOiBpbnZva2VfdmlmaWlqaixcbiBcImludm9rZV92aWlcIjogaW52b2tlX3ZpaSxcbiBcImludm9rZV92aWlkXCI6IGludm9rZV92aWlkLFxuIFwiaW52b2tlX3ZpaWRpaVwiOiBpbnZva2VfdmlpZGlpLFxuIFwiaW52b2tlX3ZpaWZcIjogaW52b2tlX3ZpaWYsXG4gXCJpbnZva2VfdmlpaVwiOiBpbnZva2VfdmlpaSxcbiBcImludm9rZV92aWlpaVwiOiBpbnZva2VfdmlpaWksXG4gXCJpbnZva2VfdmlpaWlkaWlpaVwiOiBpbnZva2VfdmlpaWlkaWlpaSxcbiBcImludm9rZV92aWlpaWlcIjogaW52b2tlX3ZpaWlpaSxcbiBcImludm9rZV92aWlpaWlpXCI6IGludm9rZV92aWlpaWlpLFxuIFwiaW52b2tlX3ZpaWlpaWlkaWlpXCI6IGludm9rZV92aWlpaWlpZGlpaSxcbiBcImludm9rZV92aWlpaWlpaVwiOiBpbnZva2VfdmlpaWlpaWksXG4gXCJpbnZva2VfdmlpaWlpaWlpXCI6IGludm9rZV92aWlpaWlpaWksXG4gXCJpbnZva2VfdmlpaWlpaWlpaVwiOiBpbnZva2VfdmlpaWlpaWlpaSxcbiBcImludm9rZV92aWlpaWlpaWlpaVwiOiBpbnZva2VfdmlpaWlpaWlpaWksXG4gXCJpbnZva2VfdmlpaWlpaWlpaWlpXCI6IGludm9rZV92aWlpaWlpaWlpaWksXG4gXCJpbnZva2VfdmlpaWlpaWlpaWlpaWlcIjogaW52b2tlX3ZpaWlpaWlpaWlpaWlpLFxuIFwiaW52b2tlX3ZpaWlpaWlpaWlpaWlpaWlcIjogaW52b2tlX3ZpaWlpaWlpaWlpaWlpaWksXG4gXCJpbnZva2VfdmlpaWlpaWpcIjogaW52b2tlX3ZpaWlpaWlqLFxuIFwiaW52b2tlX3ZpaWlpaWpcIjogaW52b2tlX3ZpaWlpaWosXG4gXCJpbnZva2VfdmlpaWlpamlcIjogaW52b2tlX3ZpaWlpaWppLFxuIFwiaW52b2tlX3ZpaWlpaWppaWlcIjogaW52b2tlX3ZpaWlpaWppaWksXG4gXCJpbnZva2VfdmlpaWlpamlpaWlcIjogaW52b2tlX3ZpaWlpaWppaWlpLFxuIFwiaW52b2tlX3ZpaWlpaWpqXCI6IGludm9rZV92aWlpaWlqaixcbiBcImludm9rZV92aWlpaWlqamlcIjogaW52b2tlX3ZpaWlpaWpqaSxcbiBcImludm9rZV92aWlpaWlqamppXCI6IGludm9rZV92aWlpaWlqamppLFxuIFwiaW52b2tlX3ZpaWlpalwiOiBpbnZva2VfdmlpaWlqLFxuIFwiaW52b2tlX3ZpaWlpamlcIjogaW52b2tlX3ZpaWlpamksXG4gXCJpbnZva2VfdmlpaWlqaWlcIjogaW52b2tlX3ZpaWlpamlpLFxuIFwiaW52b2tlX3ZpaWlpamlpaVwiOiBpbnZva2VfdmlpaWlqaWlpLFxuIFwiaW52b2tlX3ZpaWlpamlpaWlcIjogaW52b2tlX3ZpaWlpamlpaWksXG4gXCJpbnZva2VfdmlpaWlqaWlpaWlcIjogaW52b2tlX3ZpaWlpamlpaWlpLFxuIFwiaW52b2tlX3ZpaWlpamlpaWlpaWlpXCI6IGludm9rZV92aWlpaWppaWlpaWlpaSxcbiBcImludm9rZV92aWlpaWppalwiOiBpbnZva2VfdmlpaWlqaWosXG4gXCJpbnZva2VfdmlpaWlqalwiOiBpbnZva2VfdmlpaWlqaixcbiBcImludm9rZV92aWlpaWpqaVwiOiBpbnZva2VfdmlpaWlqamksXG4gXCJpbnZva2VfdmlpaWlqamlpXCI6IGludm9rZV92aWlpaWpqaWksXG4gXCJpbnZva2VfdmlpaWlqampqXCI6IGludm9rZV92aWlpaWpqamosXG4gXCJpbnZva2VfdmlpaWpcIjogaW52b2tlX3ZpaWlqLFxuIFwiaW52b2tlX3ZpaWlqaVwiOiBpbnZva2VfdmlpaWppLFxuIFwiaW52b2tlX3ZpaWlqaWlcIjogaW52b2tlX3ZpaWlqaWksXG4gXCJpbnZva2VfdmlpaWppaWlcIjogaW52b2tlX3ZpaWlqaWlpLFxuIFwiaW52b2tlX3ZpaWlqaWlpaWpqalwiOiBpbnZva2VfdmlpaWppaWlpampqLFxuIFwiaW52b2tlX3ZpaWlqaWpcIjogaW52b2tlX3ZpaWlqaWosXG4gXCJpbnZva2VfdmlpaWppamlcIjogaW52b2tlX3ZpaWlqaWppLFxuIFwiaW52b2tlX3ZpaWlqaWppamlcIjogaW52b2tlX3ZpaWlqaWppamksXG4gXCJpbnZva2VfdmlpaWppampqXCI6IGludm9rZV92aWlpamlqamosXG4gXCJpbnZva2VfdmlpaWpqXCI6IGludm9rZV92aWlpamosXG4gXCJpbnZva2VfdmlpaWpqaVwiOiBpbnZva2VfdmlpaWpqaSxcbiBcImludm9rZV92aWlpamppaVwiOiBpbnZva2VfdmlpaWpqaWksXG4gXCJpbnZva2VfdmlpaWpqaWlqXCI6IGludm9rZV92aWlpamppaWosXG4gXCJpbnZva2VfdmlpaWpqaWpcIjogaW52b2tlX3ZpaWlqamlqLFxuIFwiaW52b2tlX3ZpaWlqampcIjogaW52b2tlX3ZpaWlqamosXG4gXCJpbnZva2VfdmlpaWpqamppXCI6IGludm9rZV92aWlpampqamksXG4gXCJpbnZva2VfdmlpalwiOiBpbnZva2VfdmlpaixcbiBcImludm9rZV92aWlqaVwiOiBpbnZva2VfdmlpamksXG4gXCJpbnZva2VfdmlpamlpXCI6IGludm9rZV92aWlqaWksXG4gXCJpbnZva2VfdmlpamlpaVwiOiBpbnZva2VfdmlpamlpaSxcbiBcImludm9rZV92aWlqaWlpaVwiOiBpbnZva2VfdmlpamlpaWksXG4gXCJpbnZva2VfdmlpamlpaWlpXCI6IGludm9rZV92aWlqaWlpaWksXG4gXCJpbnZva2VfdmlpamlpaWlpaVwiOiBpbnZva2VfdmlpamlpaWlpaSxcbiBcImludm9rZV92aWlqaWlpaWlqXCI6IGludm9rZV92aWlqaWlpaWlqLFxuIFwiaW52b2tlX3ZpaWppaWlqXCI6IGludm9rZV92aWlqaWlpaixcbiBcImludm9rZV92aWlqaWlqXCI6IGludm9rZV92aWlqaWlqLFxuIFwiaW52b2tlX3ZpaWppaWppXCI6IGludm9rZV92aWlqaWlqaSxcbiBcImludm9rZV92aWlqaWlqalwiOiBpbnZva2VfdmlpamlpamosXG4gXCJpbnZva2VfdmlpamlqXCI6IGludm9rZV92aWlqaWosXG4gXCJpbnZva2VfdmlpamlqaVwiOiBpbnZva2VfdmlpamlqaSxcbiBcImludm9rZV92aWlqaWppaWlpampqXCI6IGludm9rZV92aWlqaWppaWlpampqLFxuIFwiaW52b2tlX3ZpaWppampcIjogaW52b2tlX3ZpaWppamosXG4gXCJpbnZva2VfdmlpampcIjogaW52b2tlX3ZpaWpqLFxuIFwiaW52b2tlX3ZpaWpqaVwiOiBpbnZva2VfdmlpamppLFxuIFwiaW52b2tlX3ZpaWpqaWlcIjogaW52b2tlX3ZpaWpqaWksXG4gXCJpbnZva2VfdmlpampqXCI6IGludm9rZV92aWlqamosXG4gXCJpbnZva2VfdmlpampqaVwiOiBpbnZva2VfdmlpampqaSxcbiBcImludm9rZV92aWpcIjogaW52b2tlX3ZpaixcbiBcImludm9rZV92aWppXCI6IGludm9rZV92aWppLFxuIFwiaW52b2tlX3ZpamlpXCI6IGludm9rZV92aWppaSxcbiBcImludm9rZV92aWppaWlcIjogaW52b2tlX3ZpamlpaSxcbiBcImludm9rZV92aWppaWlpXCI6IGludm9rZV92aWppaWlpLFxuIFwiaW52b2tlX3ZpamlpaWppXCI6IGludm9rZV92aWppaWlqaSxcbiBcImludm9rZV92aWppaWpqXCI6IGludm9rZV92aWppaWpqLFxuIFwiaW52b2tlX3ZpamlqXCI6IGludm9rZV92aWppaixcbiBcImludm9rZV92aWppamlcIjogaW52b2tlX3ZpamlqaSxcbiBcImludm9rZV92aWppamlpaWlqampcIjogaW52b2tlX3ZpamlqaWlpaWpqaixcbiBcImludm9rZV92aWppampcIjogaW52b2tlX3ZpamlqaixcbiBcImludm9rZV92aWppamppaWlpaVwiOiBpbnZva2VfdmlqaWpqaWlpaWksXG4gXCJpbnZva2VfdmlqaWpqaWlqXCI6IGludm9rZV92aWppamppaWosXG4gXCJpbnZva2VfdmlqaWpqamlcIjogaW52b2tlX3ZpamlqamppLFxuIFwiaW52b2tlX3ZpampcIjogaW52b2tlX3ZpamosXG4gXCJpbnZva2VfdmlqamlcIjogaW52b2tlX3ZpamppLFxuIFwiaW52b2tlX3ZpamppaWlpXCI6IGludm9rZV92aWpqaWlpaSxcbiBcImludm9rZV92aWpqaWlpaWlcIjogaW52b2tlX3ZpamppaWlpaSxcbiBcImludm9rZV92aWpqaWpcIjogaW52b2tlX3ZpamppaixcbiBcImludm9rZV92aWpqalwiOiBpbnZva2VfdmlqamosXG4gXCJpbnZva2VfdmlqamppXCI6IGludm9rZV92aWpqamksXG4gXCJpbnZva2VfdmpcIjogaW52b2tlX3ZqLFxuIFwiaW52b2tlX3ZqaWlcIjogaW52b2tlX3ZqaWksXG4gXCJpbnZva2VfdmppaWlpXCI6IGludm9rZV92amlpaWksXG4gXCJpbnZva2VfdmppaWlqaVwiOiBpbnZva2VfdmppaWlqaSxcbiBcImludm9rZV92amppaVwiOiBpbnZva2VfdmpqaWksXG4gXCJpbnZva2VfdmpqaWppalwiOiBpbnZva2VfdmpqaWppaixcbiBcImxsdm1fZWhfdHlwZWlkX2ZvclwiOiBfbGx2bV9laF90eXBlaWRfZm9yLFxuIFwic2VnZmF1bHRcIjogc2VnZmF1bHQsXG4gXCJzZXRUZW1wUmV0MFwiOiBfc2V0VGVtcFJldDAsXG4gXCJzdHJmdGltZV9sXCI6IF9zdHJmdGltZV9sXG59O1xuXG52YXIgYXNtID0gY3JlYXRlV2FzbSgpO1xuXG52YXIgX19fd2FzbV9jYWxsX2N0b3JzID0gTW9kdWxlW1wiX19fd2FzbV9jYWxsX2N0b3JzXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcIl9fd2FzbV9jYWxsX2N0b3JzXCIpO1xuXG52YXIgX21haW4gPSBNb2R1bGVbXCJfbWFpblwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJtYWluXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGhcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2UgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZmFpbF93aXRoID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmFpbF93aXRoXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZmFpbF93aXRoXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcmVzZXQgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9yZXNldFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3Jlc2V0XCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfY29ubmVjdCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2Nvbm5lY3RcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9jb25uZWN0XCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZGlzY29ubmVjdCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3RcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9kaXNjb25uZWN0XCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXMgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZSA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mbHVzaF9maWxlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfb3BlbiA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX29wZW5cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9vcGVuXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm8gPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mb1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHMgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0c1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZHJvcF9maWxlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcyA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXNcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfc2V0X2ZpbGVfZGVzY3JpcHRvciA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX3NldF9maWxlX2Rlc2NyaXB0b3JcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXJcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGggPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb24gPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfdmVyc2lvblwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2dldF92ZXJzaW9uXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3MgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfdG9rZW5pemUgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl90b2tlbml6ZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3Rva2VuaXplXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGUgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2UgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jbG9zZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcXVlcnlfcnVuID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcXVlcnlfcnVuXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydCA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0XCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWwgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cyA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHNcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXMgPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lc1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbSA9IE1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGggPSBNb2R1bGVbXCJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCIpO1xuXG52YXIgX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoID0gTW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCIpO1xuXG52YXIgX19fZXJybm9fbG9jYXRpb24gPSBNb2R1bGVbXCJfX19lcnJub19sb2NhdGlvblwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJfX2Vycm5vX2xvY2F0aW9uXCIpO1xuXG52YXIgX19fc3RkaW9fZXhpdCA9IE1vZHVsZVtcIl9fX3N0ZGlvX2V4aXRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiX19zdGRpb19leGl0XCIpO1xuXG52YXIgX19fZGxfc2V0ZXJyID0gTW9kdWxlW1wiX19fZGxfc2V0ZXJyXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcIl9fZGxfc2V0ZXJyXCIpO1xuXG52YXIgX2h0b25sID0gTW9kdWxlW1wiX2h0b25sXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImh0b25sXCIpO1xuXG52YXIgX2h0b25zID0gTW9kdWxlW1wiX2h0b25zXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImh0b25zXCIpO1xuXG52YXIgX250b2hzID0gTW9kdWxlW1wiX250b2hzXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcIm50b2hzXCIpO1xuXG52YXIgX21hbGxvYyA9IE1vZHVsZVtcIl9tYWxsb2NcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwibWFsbG9jXCIpO1xuXG52YXIgX2ZyZWUgPSBNb2R1bGVbXCJfZnJlZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJmcmVlXCIpO1xuXG52YXIgX2Vtc2NyaXB0ZW5fZ2V0X3NicmtfcHRyID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fZ2V0X3NicmtfcHRyXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImVtc2NyaXB0ZW5fZ2V0X3NicmtfcHRyXCIpO1xuXG52YXIgX3NicmsgPSBNb2R1bGVbXCJfc2Jya1wiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJzYnJrXCIpO1xuXG52YXIgX3NldFRocmV3ID0gTW9kdWxlW1wiX3NldFRocmV3XCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcInNldFRocmV3XCIpO1xuXG52YXIgX2Vtc2NyaXB0ZW5fc3RhY2tfaW5pdCA9IE1vZHVsZVtcIl9lbXNjcmlwdGVuX3N0YWNrX2luaXRcIl0gPSBmdW5jdGlvbigpIHtcbiByZXR1cm4gKF9lbXNjcmlwdGVuX3N0YWNrX2luaXQgPSBNb2R1bGVbXCJfZW1zY3JpcHRlbl9zdGFja19pbml0XCJdID0gTW9kdWxlW1wiYXNtXCJdW1wiZW1zY3JpcHRlbl9zdGFja19pbml0XCJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxudmFyIF9lbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2ZyZWVcIl0gPSBmdW5jdGlvbigpIHtcbiByZXR1cm4gKF9lbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2ZyZWVcIl0gPSBNb2R1bGVbXCJhc21cIl1bXCJlbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlXCJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxudmFyIF9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2Jhc2VcIl0gPSBmdW5jdGlvbigpIHtcbiByZXR1cm4gKF9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2Jhc2VcIl0gPSBNb2R1bGVbXCJhc21cIl1bXCJlbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlXCJdKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxudmFyIF9lbXNjcmlwdGVuX3N0YWNrX2dldF9lbmQgPSBNb2R1bGVbXCJfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kXCJdID0gZnVuY3Rpb24oKSB7XG4gcmV0dXJuIChfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kID0gTW9kdWxlW1wiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZFwiXSA9IE1vZHVsZVtcImFzbVwiXVtcImVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZFwiXSkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG5cbnZhciBzdGFja1NhdmUgPSBNb2R1bGVbXCJzdGFja1NhdmVcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwic3RhY2tTYXZlXCIpO1xuXG52YXIgc3RhY2tSZXN0b3JlID0gTW9kdWxlW1wic3RhY2tSZXN0b3JlXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcInN0YWNrUmVzdG9yZVwiKTtcblxudmFyIHN0YWNrQWxsb2MgPSBNb2R1bGVbXCJzdGFja0FsbG9jXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcInN0YWNrQWxsb2NcIik7XG5cbnZhciBfX19jeGFfY2FuX2NhdGNoID0gTW9kdWxlW1wiX19fY3hhX2Nhbl9jYXRjaFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJfX2N4YV9jYW5fY2F0Y2hcIik7XG5cbnZhciBfX19jeGFfaXNfcG9pbnRlcl90eXBlID0gTW9kdWxlW1wiX19fY3hhX2lzX3BvaW50ZXJfdHlwZVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJfX2N4YV9pc19wb2ludGVyX3R5cGVcIik7XG5cbnZhciBkeW5DYWxsX2ppamkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2ogPSBNb2R1bGVbXCJkeW5DYWxsX2pcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qXCIpO1xuXG52YXIgZHluQ2FsbF9qaSA9IE1vZHVsZVtcImR5bkNhbGxfamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaVwiKTtcblxudmFyIGR5bkNhbGxfaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWpqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpampqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqampcIik7XG5cbnZhciBkeW5DYWxsX2lpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpalwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWppamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpamlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWpqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqampcIik7XG5cbnZhciBkeW5DYWxsX2lqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWppXCIpO1xuXG52YXIgZHluQ2FsbF92aWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlqXCIpO1xuXG52YXIgZHluQ2FsbF9qaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaVwiKTtcblxudmFyIGR5bkNhbGxfaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpamlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpamlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaVwiKTtcblxudmFyIGR5bkNhbGxfamlqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpamlpaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlpaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9paWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWppaVwiKTtcblxudmFyIGR5bkNhbGxfamlpamlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpamlpXCIpO1xuXG52YXIgZHluQ2FsbF9maWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ZpaWppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ZpaWppaVwiKTtcblxudmFyIGR5bkNhbGxfZGlpamlpID0gTW9kdWxlW1wiZHluQ2FsbF9kaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9kaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpaWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWlpamlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqalwiKTtcblxudmFyIGR5bkNhbGxfamlpaWppaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2ppaWppaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlpamlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2ppaWlpaWppaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlpaWlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpaWppaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpamlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpamlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlpamlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpaWppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqamlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamppalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqamlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqaWpqaWlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWppamppaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppamppaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqamlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWpqaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWpqaWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWpqamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpampqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpampqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlpaWlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpamlpaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWppaWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWlpaWpqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWppaWlpampqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWppaWlpampqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWppaWlpampqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWppaWlpampqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlqaWlpaWpqalwiKTtcblxudmFyIGR5bkNhbGxfamogPSBNb2R1bGVbXCJkeW5DYWxsX2pqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfampcIik7XG5cbnZhciBkeW5DYWxsX2pkID0gTW9kdWxlW1wiZHluQ2FsbF9qZFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2pkXCIpO1xuXG52YXIgZHluQ2FsbF9qZiA9IE1vZHVsZVtcImR5bkNhbGxfamZcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qZlwiKTtcblxudmFyIGR5bkNhbGxfaWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpampqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqampcIik7XG5cbnZhciBkeW5DYWxsX2lpaWpqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpamppXCIpO1xuXG52YXIgZHluQ2FsbF92aWppamlpaWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpamlqaWlpaWpqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamlqaWlpaWpqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpaWppXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWlpaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpamlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWpqalwiKTtcblxudmFyIGR5bkNhbGxfdmlqamlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWpqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWpqaWpcIik7XG5cbnZhciBkeW5DYWxsX2ppaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqamppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpampqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpamppamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpamppampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWpqaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWppaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqaWlpaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWppaWlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWlqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlpaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWlpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpaWlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWlpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWlpaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2ppaWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpampqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlqalwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpamlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpamlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWppalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpamlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlpaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpamlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qaWlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpalwiKTtcblxudmFyIGR5bkNhbGxfamlqamlqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWpqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWpqaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpamlpaWlpaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWppaWlpaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpamlpaWlpaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9paiA9IE1vZHVsZVtcImR5bkNhbGxfaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9palwiKTtcblxudmFyIGR5bkNhbGxfampqID0gTW9kdWxlW1wiZHluQ2FsbF9qampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qampcIik7XG5cbnZhciBkeW5DYWxsX2ppaWppID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWppXCIpO1xuXG52YXIgZHluQ2FsbF9qamlqaSA9IE1vZHVsZVtcImR5bkNhbGxfamppamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qamlqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWogPSBNb2R1bGVbXCJkeW5DYWxsX2ppaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2ppamlqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWppalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppamlqXCIpO1xuXG52YXIgZHluQ2FsbF9qaWpqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamlqalwiKTtcblxudmFyIGR5bkNhbGxfamlpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92amlpXCIpO1xuXG52YXIgZHluQ2FsbF9pampqID0gTW9kdWxlW1wiZHluQ2FsbF9pampqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWpqalwiKTtcblxudmFyIGR5bkNhbGxfampqZCA9IE1vZHVsZVtcImR5bkNhbGxfampqZFwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2pqamRcIik7XG5cbnZhciBkeW5DYWxsX2pqampqamQgPSBNb2R1bGVbXCJkeW5DYWxsX2pqampqamRcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qampqampkXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmppaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWlqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWlqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpamlpaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaiA9IE1vZHVsZVtcImR5bkNhbGxfamlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpamppID0gTW9kdWxlW1wiZHluQ2FsbF92aWpqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpamppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWpqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpamppaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWlqamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWlqamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqamlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqamlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWpqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWpqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlqamlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWpqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWpqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpaWpqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlpamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlpamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWRqID0gTW9kdWxlW1wiZHluQ2FsbF9paWRqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlkalwiKTtcblxudmFyIGR5bkNhbGxfaWpqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWpqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lqamlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpaWlqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlpaWlpaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWlpaWlpaWlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWlpaWlpaWlpalwiKTtcblxudmFyIGR5bkNhbGxfaWlpamppaWppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlqamlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqamlpamlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWpqaWlqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlqamlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWpqaWlqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWlpamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWRqaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWRqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlkampcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpampqXCIpO1xuXG52YXIgZHluQ2FsbF92aWppaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlpaWppaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWlpaWppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlqamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpamppXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpamppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWpqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlpaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppaWlpaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWppaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWppaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpamlpaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpamlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWppaWpcIik7XG5cbnZhciBkeW5DYWxsX2lpamppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlqamlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqamlpXCIpO1xuXG52YXIgZHluQ2FsbF9paWpqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9paWpqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqamlpaVwiKTtcblxudmFyIGR5bkNhbGxfaWlqamlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpamppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpamppID0gTW9kdWxlW1wiZHluQ2FsbF9paWpqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWppaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9paWppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqaWlpaVwiKTtcblxudmFyIGR5bkNhbGxfaWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpamlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZqamlpID0gTW9kdWxlW1wiZHluQ2FsbF92amppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZqamlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWppaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWppaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWppaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWppaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWppaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpamlqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpamlqXCIpO1xuXG52YXIgZHluQ2FsbF9paWpqID0gTW9kdWxlW1wiZHluQ2FsbF9paWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlqalwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWppaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWppalwiKTtcblxudmFyIGR5bkNhbGxfaWlpamlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWppaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpamppaWpqID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWpqaWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWlpamppaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlqaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpamlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpamppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpamppaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWpqaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZqamlqaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZqamlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92amppamlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWpqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpampqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpampqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpaWppID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlpamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWpqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWpqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqamlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpaWlqalwiKTtcblxudmFyIGR5bkNhbGxfamlqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWppaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppaWlqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWppaWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWppaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlpamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppaWlqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWppaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWppalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWpcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppaWogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWlqXCIpO1xuXG52YXIgZHluQ2FsbF92aWppaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWpcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppalwiKTtcblxudmFyIGR5bkNhbGxfdmppaWlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmppaWlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZqaWlpamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppaWlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppaWlpaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWlpaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9qampqaSA9IE1vZHVsZVtcImR5bkNhbGxfampqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qampqaVwiKTtcblxudmFyIGR5bkNhbGxfampqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2pqamlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfampqaWlcIik7XG5cbnZhciBkeW5DYWxsX2pqaSA9IE1vZHVsZVtcImR5bkNhbGxfamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWppamkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpamlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpamlqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWppamlqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWppamlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWppamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWlpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlpaWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWlpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF9paWlqamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWpqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpaWpqalwiKTtcblxudmFyIGR5bkNhbGxfdmogPSBNb2R1bGVbXCJkeW5DYWxsX3ZqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmpcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlqaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpaWlqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpamlpXCIpO1xuXG52YXIgZHluQ2FsbF9paWppaWkgPSBNb2R1bGVbXCJkeW5DYWxsX2lpamlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2lpamlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWlqalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpamlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpZmlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpZmlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWZpaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWRpaWpqID0gTW9kdWxlW1wiZHluQ2FsbF92aWRpaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlkaWlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlpaiA9IE1vZHVsZVtcImR5bkNhbGxfdmlpaWlpalwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlpaWpcIik7XG5cbnZhciBkeW5DYWxsX2lqamlpaSA9IE1vZHVsZVtcImR5bkNhbGxfaWpqaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWpqaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWppampqaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqaWpqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWppampqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpamlpamogPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppaWpqXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlpamlpampcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlpaWpqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlpaWpqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWlqamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWlqaWlqaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpamlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqaWlqalwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWppampqID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpamlqampcIik7XG5cbnZhciBkeW5DYWxsX2lpamlpamogPSBNb2R1bGVbXCJkeW5DYWxsX2lpamlpampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWppaWpqXCIpO1xuXG52YXIgZHluQ2FsbF92aWlpampqamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWlqampqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqampqaVwiKTtcblxudmFyIGR5bkNhbGxfdmlpaWlqaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpaWppaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlpaWppaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppaWlpID0gTW9kdWxlW1wiZHluQ2FsbF92aWlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWppaWlpXCIpO1xuXG52YXIgZHluQ2FsbF92aWpqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqamlpaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWpqaWlpaVwiKTtcblxudmFyIGR5bkNhbGxfdmlqaWpqaWlpaWkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpamlqamlpaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqaWpqaWlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpamppaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfdmlqamlpaWlpXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfdmlqamlpaWlpXCIpO1xuXG52YXIgZHluQ2FsbF9paWlqamppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlqamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpampqaVwiKTtcblxudmFyIGR5bkNhbGxfamlpamlqamlpID0gTW9kdWxlW1wiZHluQ2FsbF9qaWlqaWpqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9qaWlqaWpqaWlcIik7XG5cbnZhciBkeW5DYWxsX2lpaWlpaWpqaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWlpamppXCJdID0gY3JlYXRlRXhwb3J0V3JhcHBlcihcImR5bkNhbGxfaWlpaWlpamppXCIpO1xuXG52YXIgZHluQ2FsbF9paWlpaWpqaiA9IE1vZHVsZVtcImR5bkNhbGxfaWlpaWlqampcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpqalwiKTtcblxudmFyIGR5bkNhbGxfamlqaWlpaSA9IE1vZHVsZVtcImR5bkNhbGxfamlqaWlpaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX2ppamlpaWlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWlqaWppID0gTW9kdWxlW1wiZHluQ2FsbF92aWlpamlqaVwiXSA9IGNyZWF0ZUV4cG9ydFdyYXBwZXIoXCJkeW5DYWxsX3ZpaWlqaWppXCIpO1xuXG52YXIgZHluQ2FsbF9paWlqamppaSA9IE1vZHVsZVtcImR5bkNhbGxfaWlpampqaWlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlqamppaVwiKTtcblxudmFyIGR5bkNhbGxfaWlpaWlqamppID0gTW9kdWxlW1wiZHluQ2FsbF9paWlpaWpqamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF9paWlpaWpqamlcIik7XG5cbnZhciBkeW5DYWxsX3ZpaWppamkgPSBNb2R1bGVbXCJkeW5DYWxsX3ZpaWppamlcIl0gPSBjcmVhdGVFeHBvcnRXcmFwcGVyKFwiZHluQ2FsbF92aWlqaWppXCIpO1xuXG5mdW5jdGlvbiBpbnZva2VfaWlpaShpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92KGluZGV4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWkoaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LCBhMSwgYTIpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paShpbmRleCwgYTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpKGluZGV4LCBhMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ZpaWkoaW5kZXgsIGExLCBhMiwgYTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfZGlpaShpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlmKGluZGV4LCBhMSwgYTIsIGEzKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpZChpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWkoaW5kZXgsIGExLCBhMiwgYTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2koaW5kZXgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWlpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0LCBhMTUpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpZChpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9pZmYoaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lkZChpbmRleCwgYTEsIGEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lkaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWYoaW5kZXgsIGExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9pZChpbmRleCwgYTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpZihpbmRleCwgYTEsIGEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWQoaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfZmkoaW5kZXgsIGExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9kaShpbmRleCwgYTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpZGlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpZChpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWQoaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWlkaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlpaWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWRpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWRpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZ2V0V2FzbVRhYmxlRW50cnkoaW5kZXgpKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9kaWkoaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlkKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpZGkoaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KShhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9mKGluZGV4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGdldFdhc21UYWJsZUVudHJ5KGluZGV4KSgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfZChpbmRleCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBnZXRXYXNtVGFibGVFbnRyeShpbmRleCkoKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamkoaW5kZXgsIGExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamkoaW5kZXgsIGExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaShpbmRleCwgYTEsIGEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpKGluZGV4LCBhMSwgYTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWooaW5kZXgsIGExLCBhMiwgYTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWooaW5kZXgsIGExLCBhMiwgYTMpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaihpbmRleCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ooaW5kZXgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlqamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaihpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqKGluZGV4LCBhMSwgYTIsIGEzKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9pamkoaW5kZXgsIGExLCBhMiwgYTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9pamkoaW5kZXgsIGExLCBhMiwgYTMpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWpqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lqamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWpqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWppamlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWppamlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWpqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlpKGluZGV4LCBhMSwgYTIsIGEzKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaShpbmRleCwgYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWppaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpamlqamlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWpqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9maWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9maWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfZGlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfZGlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWppaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlpaWlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWlpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpampqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWlqampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWppaWlpaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpamlpaWlqamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0LCBhMTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqaWlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWppaWlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1LCBhMTYsIGExNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamlqaWlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWpqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWpqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlpaWlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaihpbmRleCwgYTEsIGEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamooaW5kZXgsIGExLCBhMik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qZChpbmRleCwgYTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qZChpbmRleCwgYTEpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamYoaW5kZXgsIGExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamYoaW5kZXgsIGExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppamlpaWlqamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0LCBhMTUsIGExNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWppaWlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1LCBhMTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlqamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpamppaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlpaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamppamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpamppamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaWppaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlpaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWlpaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaWlpaWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlqaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qamlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2pqaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lqKGluZGV4LCBhMSwgYTIpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paihpbmRleCwgYTEsIGEyKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZqaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaihpbmRleCwgYTEsIGEyLCBhMykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaihpbmRleCwgYTEsIGEyLCBhMyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9pamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92amlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpaWppaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWppaWlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamlpaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qamooaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9qampqampkKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2pqampqamQoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWpqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaWpqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpamppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWpqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWlpaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWpqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlpamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpaWpqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpZGooaW5kZXgsIGExLCBhMiwgYTMsIGE0KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlkaihpbmRleCwgYTEsIGEyLCBhMywgYTQpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpamppaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWpqaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpamppaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWpqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlkamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlkamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWppaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpamppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlqamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlqamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlqamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWpqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92amppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpaWppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpampqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWpqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92amppamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZqamlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWlpamppaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlpamppaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamlpaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWppaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2ppamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWlpamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlqamlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWpqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWppaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmppaWlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92amlpaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamlpaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWlpaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfampqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfampqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2pqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfampqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamppKGluZGV4LCBhMSwgYTIsIGEzKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfamppKGluZGV4LCBhMSwgYTIsIGEzKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWppamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmooaW5kZXgsIGExLCBhMikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmooaW5kZXgsIGExLCBhMik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWlqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX2lpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpamlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWppaWpqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpZmlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlmaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpZGlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlkaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpaWlqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppampqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpamlqamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpamlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlqaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpaWlpaWpqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWlpaWpqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWppampqKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpamlqamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlqaWlqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpamlpamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpampqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2lpaWpqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWpqamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpampqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpaWlqaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWlpaWppaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfdmlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlqaWppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICBkeW5DYWxsX3ZpaWppamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWppamppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWppamppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzKTtcbiB9IGNhdGNoIChlKSB7XG4gIHN0YWNrUmVzdG9yZShzcCk7XG4gIGlmIChlICE9PSBlICsgMCkgdGhyb3cgZTtcbiAgX3NldFRocmV3KDEsIDApO1xuIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlX3ZpamppaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgZHluQ2FsbF92aWpqaWlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWpqaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlqamlpaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlpamlqamlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIHJldHVybiBkeW5DYWxsX2ppaWppamppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfaWlpaWlpamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9paWlpaWlqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlqamppaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpampqaWkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV92aWlpamlqaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xuIHZhciBzcCA9IHN0YWNrU2F2ZSgpO1xuIHRyeSB7XG4gIGR5bkNhbGxfdmlpaWppamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpO1xuIH0gY2F0Y2ggKGUpIHtcbiAgc3RhY2tSZXN0b3JlKHNwKTtcbiAgaWYgKGUgIT09IGUgKyAwKSB0aHJvdyBlO1xuICBfc2V0VGhyZXcoMSwgMCk7XG4gfVxufVxuXG5mdW5jdGlvbiBpbnZva2VfamlqaWlpaShpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiB2YXIgc3AgPSBzdGFja1NhdmUoKTtcbiB0cnkge1xuICByZXR1cm4gZHluQ2FsbF9qaWppaWlpKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWpqaihpbmRleCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlqamooaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbmZ1bmN0aW9uIGludm9rZV9paWlpaWpqamkoaW5kZXgsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExKSB7XG4gdmFyIHNwID0gc3RhY2tTYXZlKCk7XG4gdHJ5IHtcbiAgcmV0dXJuIGR5bkNhbGxfaWlpaWlqamppKGluZGV4LCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSk7XG4gfSBjYXRjaCAoZSkge1xuICBzdGFja1Jlc3RvcmUoc3ApO1xuICBpZiAoZSAhPT0gZSArIDApIHRocm93IGU7XG4gIF9zZXRUaHJldygxLCAwKTtcbiB9XG59XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJpbnRBcnJheUZyb21TdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaW50QXJyYXlUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbk1vZHVsZVtcImNjYWxsXCJdID0gY2NhbGw7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjd3JhcFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRWYWx1ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRWYWx1ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhbGxvY2F0ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJVVEY4QXJyYXlUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJVVEY4VG9TdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RyaW5nVG9VVEY4QXJyYXlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RyaW5nVG9VVEY4XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImxlbmd0aEJ5dGVzVVRGOFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdGFja1RyYWNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFkZE9uUHJlUnVuXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFkZE9uSW5pdFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhZGRPblByZU1haW5cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWRkT25FeGl0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFkZE9uUG9zdFJ1blwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZVN0cmluZ1RvTWVtb3J5XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndyaXRlQXJyYXlUb01lbW9yeVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUFzY2lpVG9NZW1vcnlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWRkUnVuRGVwZW5kZW5jeVwiLCB0cnVlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlbW92ZVJ1bkRlcGVuZGVuY3lcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU19jcmVhdGVGb2xkZXJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfY3JlYXRlUGF0aFwiLCB0cnVlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTX2NyZWF0ZURhdGFGaWxlXCIsIHRydWUpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfY3JlYXRlUHJlbG9hZGVkRmlsZVwiLCB0cnVlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTX2NyZWF0ZUxhenlGaWxlXCIsIHRydWUpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRlNfY3JlYXRlTGlua1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU19jcmVhdGVEZXZpY2VcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJGU191bmxpbmtcIiwgdHJ1ZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRMRUJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0RnVuY3Rpb25UYWJsZXNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWxpZ25GdW5jdGlvblRhYmxlc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlckZ1bmN0aW9uc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhZGRGdW5jdGlvblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZW1vdmVGdW5jdGlvblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJwcmV0dHlQcmludFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJkeW5DYWxsXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImdldENvbXBpbGVyU2V0dGluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJwcmludFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJwcmludEVyclwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRUZW1wUmV0MFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRUZW1wUmV0MFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjYWxsTWFpblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhYm9ydFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJrZWVwUnVudGltZUFsaXZlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInB0clRvU3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInplcm9NZW1vcnlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RyaW5nVG9OZXdVVEY4XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRU5WXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkVSUk5PX0NPREVTXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkVSUk5PX01FU1NBR0VTXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInNldEVyck5vXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImluZXRQdG9uNFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJpbmV0TnRvcDRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiaW5ldFB0b242XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImluZXROdG9wNlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWFkU29ja2FkZHJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVTb2NrYWRkclwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJETlNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0SG9zdEJ5TmFtZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJQcm90b2NvbHNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU29ja2V0c1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRSYW5kb21EZXZpY2VcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwidHJhdmVyc2VTdGFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJVTldJTkRfQ0FDSEVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY29udmVydFBDdG9Tb3VyY2VMb2NhdGlvblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWFkQXNtQ29uc3RBcmdzQXJyYXlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVhZEFzbUNvbnN0QXJnc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJtYWluVGhyZWFkRU1fQVNNXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImpzdG9pX3FcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwianN0b2lfc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRFeGVjdXRhYmxlTmFtZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJsaXN0ZW5PbmNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImF1dG9SZXN1bWVBdWRpb0NvbnRleHRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZHluQ2FsbExlZ2FjeVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXREeW5DYWxsZXJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZHluQ2FsbFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJoYW5kbGVFeGNlcHRpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicnVudGltZUtlZXBhbGl2ZVB1c2hcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicnVudGltZUtlZXBhbGl2ZVBvcFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjYWxsVXNlckNhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIm1heWJlRXhpdFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzYWZlU2V0VGltZW91dFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhc21qc01hbmdsZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJhc3luY0xvYWRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWxpZ25NZW1vcnlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwibW1hcEFsbG9jXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlYWxseU5lZ2F0aXZlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInVuU2lnblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZVNpZ25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZm9ybWF0U3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlBBVEhcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiUEFUSF9GU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJTWVNDQUxMU1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRTb2NrZXRGcm9tRkRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZ2V0U29ja2V0QWRkcmVzc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJKU0V2ZW50c1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlcktleUV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3BlY2lhbEhUTUxUYXJnZXRzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIm1heWJlQ1N0cmluZ1RvSnNTdHJpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmluZEV2ZW50VGFyZ2V0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbmRDYW52YXNFdmVudFRhcmdldFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmlsbE1vdXNlRXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyTW91c2VFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyV2hlZWxFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyVWlFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyRm9jdXNFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxEZXZpY2VPcmllbnRhdGlvbkV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlckRldmljZU9yaWVudGF0aW9uRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsRGV2aWNlTW90aW9uRXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyRGV2aWNlTW90aW9uRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzY3JlZW5PcmllbnRhdGlvblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsT3JpZW50YXRpb25DaGFuZ2VFdmVudERhdGFcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJPcmllbnRhdGlvbkNoYW5nZUV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZmlsbEZ1bGxzY3JlZW5DaGFuZ2VFdmVudERhdGFcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJGdWxsc2NyZWVuQ2hhbmdlRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclJlc3RvcmVPbGRTdHlsZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJoaWRlRXZlcnl0aGluZ0V4Y2VwdEdpdmVuRWxlbWVudFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZXN0b3JlSGlkZGVuRWxlbWVudHNcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic2V0TGV0dGVyYm94XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImN1cnJlbnRGdWxsc2NyZWVuU3RyYXRlZ3lcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVzdG9yZU9sZFdpbmRvd2VkU3R5bGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic29mdEZ1bGxzY3JlZW5SZXNpemVXZWJHTFJlbmRlclRhcmdldFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJkb1JlcXVlc3RGdWxsc2NyZWVuXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxQb2ludGVybG9ja0NoYW5nZUV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclBvaW50ZXJsb2NrQ2hhbmdlRXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclBvaW50ZXJsb2NrRXJyb3JFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlcXVlc3RQb2ludGVyTG9ja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJmaWxsVmlzaWJpbGl0eUNoYW5nZUV2ZW50RGF0YVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJyZWdpc3RlclZpc2liaWxpdHlDaGFuZ2VFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyVG91Y2hFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxHYW1lcGFkRXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInJlZ2lzdGVyR2FtZXBhZEV2ZW50Q2FsbGJhY2tcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJCZWZvcmVVbmxvYWRFdmVudENhbGxiYWNrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZpbGxCYXR0ZXJ5RXZlbnREYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImJhdHRlcnlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVnaXN0ZXJCYXR0ZXJ5RXZlbnRDYWxsYmFja1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRDYW52YXNFbGVtZW50U2l6ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRDYW52YXNFbGVtZW50U2l6ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJkZW1hbmdsZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJkZW1hbmdsZUFsbFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJqc1N0YWNrVHJhY2VcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RhY2tUcmFjZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJnZXRFbnZTdHJpbmdzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImNoZWNrV2FzaUNsb2NrXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZsdXNoX05PX0ZJTEVTWVNURU1cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid3JpdGVJNTNUb0k2NFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUk1M1RvSTY0Q2xhbXBlZFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUk1M1RvSTY0U2lnbmFsaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndyaXRlSTUzVG9VNjRDbGFtcGVkXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndyaXRlSTUzVG9VNjRTaWduYWxpbmdcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVhZEk1M0Zyb21JNjRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwicmVhZEk1M0Zyb21VNjRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY29udmVydEkzMlBhaXJUb0k1M1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJjb252ZXJ0VTMyUGFpclRvSTUzXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImRsb3Blbk1pc3NpbmdFcnJvclwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzZXRJbW1lZGlhdGVXcmFwcGVkXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImNsZWFySW1tZWRpYXRlV3JhcHBlZFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJwb2x5ZmlsbFNldEltbWVkaWF0ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ1bmNhdWdodEV4Y2VwdGlvbkNvdW50XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImV4Y2VwdGlvbkxhc3RcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZXhjZXB0aW9uQ2F1Z2h0XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkV4Y2VwdGlvbkluZm9cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZXhjZXB0aW9uX2FkZFJlZlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJleGNlcHRpb25fZGVjUmVmXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImZvcm1hdEV4Y2VwdGlvblwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJCcm93c2VyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInNldE1haW5Mb29wXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndnZXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwidGVtcEZpeGVkTGVuZ3RoQXJyYXlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwibWluaVRlbXBXZWJHTEZsb2F0QnVmZmVyc1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJoZWFwT2JqZWN0Rm9yV2ViR0xUeXBlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImhlYXBBY2Nlc3NTaGlmdEZvcldlYkdMSGVhcFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJHTFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJlbXNjcmlwdGVuV2ViR0xHZXRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiY29tcHV0ZVVucGFja0FsaWduZWRJbWFnZVNpemVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiZW1zY3JpcHRlbldlYkdMR2V0VGV4UGl4ZWxEYXRhXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImVtc2NyaXB0ZW5XZWJHTEdldFVuaWZvcm1cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid2ViZ2xHZXRVbmlmb3JtTG9jYXRpb25cIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwid2ViZ2xQcmVwYXJlVW5pZm9ybUxvY2F0aW9uc0JlZm9yZUZpcnN0VXNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndlYmdsR2V0TGVmdEJyYWNlUG9zXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImVtc2NyaXB0ZW5XZWJHTEdldFZlcnRleEF0dHJpYlwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJ3cml0ZUdMQXJyYXlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiQUxcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU0RMX3VuaWNvZGVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU0RMX3R0ZkNvbnRleHRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU0RMX2F1ZGlvXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIlNETFwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJTRExfZ2Z4XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkdMVVRcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiRUdMXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkdMRldfV2luZG93XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkdMRldcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiR0xFV1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJJREJTdG9yZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJydW5BbmRBYm9ydElmRXJyb3JcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiU09DS0ZTXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIkZTXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcIndhcm5PbmNlXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0YWNrU2F2ZVwiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdGFja1Jlc3RvcmVcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwic3RhY2tBbGxvY1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJBc2NpaVRvU3RyaW5nXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcInN0cmluZ1RvQXNjaWlcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiVVRGMTZUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdHJpbmdUb1VURjE2XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImxlbmd0aEJ5dGVzVVRGMTZcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiVVRGMzJUb1N0cmluZ1wiLCBmYWxzZSk7XG5cbnVuZXhwb3J0ZWRSdW50aW1lRnVuY3Rpb24oXCJzdHJpbmdUb1VURjMyXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImxlbmd0aEJ5dGVzVVRGMzJcIiwgZmFsc2UpO1xuXG51bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uKFwiYWxsb2NhdGVVVEY4XCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbihcImFsbG9jYXRlVVRGOE9uU3RhY2tcIiwgZmFsc2UpO1xuXG5Nb2R1bGVbXCJ3cml0ZVN0YWNrQ29va2llXCJdID0gd3JpdGVTdGFja0Nvb2tpZTtcblxuTW9kdWxlW1wiY2hlY2tTdGFja0Nvb2tpZVwiXSA9IGNoZWNrU3RhY2tDb29raWU7XG5cbnVuZXhwb3J0ZWRSdW50aW1lU3ltYm9sKFwiQUxMT0NfTk9STUFMXCIsIGZhbHNlKTtcblxudW5leHBvcnRlZFJ1bnRpbWVTeW1ib2woXCJBTExPQ19TVEFDS1wiLCBmYWxzZSk7XG5cbnZhciBjYWxsZWRSdW47XG5cbmZ1bmN0aW9uIEV4aXRTdGF0dXMoc3RhdHVzKSB7XG4gdGhpcy5uYW1lID0gXCJFeGl0U3RhdHVzXCI7XG4gdGhpcy5tZXNzYWdlID0gXCJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KFwiICsgc3RhdHVzICsgXCIpXCI7XG4gdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG59XG5cbnZhciBjYWxsZWRNYWluID0gZmFsc2U7XG5cbmRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IGZ1bmN0aW9uIHJ1bkNhbGxlcigpIHtcbiBpZiAoIWNhbGxlZFJ1bikgcnVuKCk7XG4gaWYgKCFjYWxsZWRSdW4pIGRlcGVuZGVuY2llc0Z1bGZpbGxlZCA9IHJ1bkNhbGxlcjtcbn07XG5cbmZ1bmN0aW9uIGNhbGxNYWluKGFyZ3MpIHtcbiBhc3NlcnQocnVuRGVwZW5kZW5jaWVzID09IDAsICdjYW5ub3QgY2FsbCBtYWluIHdoZW4gYXN5bmMgZGVwZW5kZW5jaWVzIHJlbWFpbiEgKGxpc3RlbiBvbiBNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSknKTtcbiBhc3NlcnQoX19BVFBSRVJVTl9fLmxlbmd0aCA9PSAwLCBcImNhbm5vdCBjYWxsIG1haW4gd2hlbiBwcmVSdW4gZnVuY3Rpb25zIHJlbWFpbiB0byBiZSBjYWxsZWRcIik7XG4gdmFyIGVudHJ5RnVuY3Rpb24gPSBNb2R1bGVbXCJfbWFpblwiXTtcbiBhcmdzID0gYXJncyB8fCBbXTtcbiB2YXIgYXJnYyA9IGFyZ3MubGVuZ3RoICsgMTtcbiB2YXIgYXJndiA9IHN0YWNrQWxsb2MoKGFyZ2MgKyAxKSAqIDQpO1xuIFNBRkVfSEVBUF9TVE9SRSgoYXJndiA+Pj4gMikgKiA0LCBhbGxvY2F0ZVVURjhPblN0YWNrKHRoaXNQcm9ncmFtKSwgNCk7XG4gZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdjOyBpKyspIHtcbiAgU0FGRV9IRUFQX1NUT1JFKCgoYXJndiA+PiAyKSArIGkgPj4+IDApICogNCwgYWxsb2NhdGVVVEY4T25TdGFjayhhcmdzW2kgLSAxXSksIDQpO1xuIH1cbiBTQUZFX0hFQVBfU1RPUkUoKChhcmd2ID4+IDIpICsgYXJnYyA+Pj4gMCkgKiA0LCAwLCA0KTtcbiB0cnkge1xuICB2YXIgcmV0ID0gZW50cnlGdW5jdGlvbihhcmdjLCBhcmd2KTtcbiAgZXhpdChyZXQsIHRydWUpO1xuICByZXR1cm4gcmV0O1xuIH0gY2F0Y2ggKGUpIHtcbiAgcmV0dXJuIGhhbmRsZUV4Y2VwdGlvbihlKTtcbiB9IGZpbmFsbHkge1xuICBjYWxsZWRNYWluID0gdHJ1ZTtcbiB9XG59XG5cbmZ1bmN0aW9uIHN0YWNrQ2hlY2tJbml0KCkge1xuIF9lbXNjcmlwdGVuX3N0YWNrX2luaXQoKTtcbiB3cml0ZVN0YWNrQ29va2llKCk7XG59XG5cbmZ1bmN0aW9uIHJ1bihhcmdzKSB7XG4gYXJncyA9IGFyZ3MgfHwgYXJndW1lbnRzXztcbiBpZiAocnVuRGVwZW5kZW5jaWVzID4gMCkge1xuICByZXR1cm47XG4gfVxuIHN0YWNrQ2hlY2tJbml0KCk7XG4gcHJlUnVuKCk7XG4gaWYgKHJ1bkRlcGVuZGVuY2llcyA+IDApIHtcbiAgcmV0dXJuO1xuIH1cbiBmdW5jdGlvbiBkb1J1bigpIHtcbiAgaWYgKGNhbGxlZFJ1bikgcmV0dXJuO1xuICBjYWxsZWRSdW4gPSB0cnVlO1xuICBNb2R1bGVbXCJjYWxsZWRSdW5cIl0gPSB0cnVlO1xuICBpZiAoQUJPUlQpIHJldHVybjtcbiAgaW5pdFJ1bnRpbWUoKTtcbiAgcHJlTWFpbigpO1xuICByZWFkeVByb21pc2VSZXNvbHZlKE1vZHVsZSk7XG4gIGlmIChNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSkgTW9kdWxlW1wib25SdW50aW1lSW5pdGlhbGl6ZWRcIl0oKTtcbiAgaWYgKHNob3VsZFJ1bk5vdykgY2FsbE1haW4oYXJncyk7XG4gIHBvc3RSdW4oKTtcbiB9XG4gaWYgKE1vZHVsZVtcInNldFN0YXR1c1wiXSkge1xuICBNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJSdW5uaW5nLi4uXCIpO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIik7XG4gICB9LCAxKTtcbiAgIGRvUnVuKCk7XG4gIH0sIDEpO1xuIH0gZWxzZSB7XG4gIGRvUnVuKCk7XG4gfVxuIGNoZWNrU3RhY2tDb29raWUoKTtcbn1cblxuTW9kdWxlW1wicnVuXCJdID0gcnVuO1xuXG5mdW5jdGlvbiBjaGVja1VuZmx1c2hlZENvbnRlbnQoKSB7XG4gdmFyIG9sZE91dCA9IG91dDtcbiB2YXIgb2xkRXJyID0gZXJyO1xuIHZhciBoYXMgPSBmYWxzZTtcbiBvdXQgPSBlcnIgPSAoeCA9PiB7XG4gIGhhcyA9IHRydWU7XG4gfSk7XG4gdHJ5IHtcbiAgdmFyIGZsdXNoID0gZmx1c2hfTk9fRklMRVNZU1RFTTtcbiAgaWYgKGZsdXNoKSBmbHVzaCgpO1xuIH0gY2F0Y2ggKGUpIHt9XG4gb3V0ID0gb2xkT3V0O1xuIGVyciA9IG9sZEVycjtcbiBpZiAoaGFzKSB7XG4gIHdhcm5PbmNlKFwic3RkaW8gc3RyZWFtcyBoYWQgY29udGVudCBpbiB0aGVtIHRoYXQgd2FzIG5vdCBmbHVzaGVkLiB5b3Ugc2hvdWxkIHNldCBFWElUX1JVTlRJTUUgdG8gMSAoc2VlIHRoZSBGQVEpLCBvciBtYWtlIHN1cmUgdG8gZW1pdCBhIG5ld2xpbmUgd2hlbiB5b3UgcHJpbnRmIGV0Yy5cIik7XG4gIHdhcm5PbmNlKFwiKHRoaXMgbWF5IGFsc28gYmUgZHVlIHRvIG5vdCBpbmNsdWRpbmcgZnVsbCBmaWxlc3lzdGVtIHN1cHBvcnQgLSB0cnkgYnVpbGRpbmcgd2l0aCAtc0ZPUkNFX0ZJTEVTWVNURU0pXCIpO1xuIH1cbn1cblxuZnVuY3Rpb24gZXhpdChzdGF0dXMsIGltcGxpY2l0KSB7XG4gRVhJVFNUQVRVUyA9IHN0YXR1cztcbiBjaGVja1VuZmx1c2hlZENvbnRlbnQoKTtcbiBpZiAoa2VlcFJ1bnRpbWVBbGl2ZSgpICYmICFpbXBsaWNpdCkge1xuICB2YXIgbXNnID0gXCJwcm9ncmFtIGV4aXRlZCAod2l0aCBzdGF0dXM6IFwiICsgc3RhdHVzICsgXCIpLCBidXQgRVhJVF9SVU5USU1FIGlzIG5vdCBzZXQsIHNvIGhhbHRpbmcgZXhlY3V0aW9uIGJ1dCBub3QgZXhpdGluZyB0aGUgcnVudGltZSBvciBwcmV2ZW50aW5nIGZ1cnRoZXIgYXN5bmMgZXhlY3V0aW9uIChidWlsZCB3aXRoIEVYSVRfUlVOVElNRT0xLCBpZiB5b3Ugd2FudCBhIHRydWUgc2h1dGRvd24pXCI7XG4gIHJlYWR5UHJvbWlzZVJlamVjdChtc2cpO1xuICBlcnIobXNnKTtcbiB9XG4gcHJvY0V4aXQoc3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gcHJvY0V4aXQoY29kZSkge1xuIEVYSVRTVEFUVVMgPSBjb2RlO1xuIGlmICgha2VlcFJ1bnRpbWVBbGl2ZSgpKSB7XG4gIGlmIChNb2R1bGVbXCJvbkV4aXRcIl0pIE1vZHVsZVtcIm9uRXhpdFwiXShjb2RlKTtcbiAgQUJPUlQgPSB0cnVlO1xuIH1cbiBxdWl0Xyhjb2RlLCBuZXcgRXhpdFN0YXR1cyhjb2RlKSk7XG59XG5cbmlmIChNb2R1bGVbXCJwcmVJbml0XCJdKSB7XG4gaWYgKHR5cGVvZiBNb2R1bGVbXCJwcmVJbml0XCJdID09IFwiZnVuY3Rpb25cIikgTW9kdWxlW1wicHJlSW5pdFwiXSA9IFsgTW9kdWxlW1wicHJlSW5pdFwiXSBdO1xuIHdoaWxlIChNb2R1bGVbXCJwcmVJbml0XCJdLmxlbmd0aCA+IDApIHtcbiAgTW9kdWxlW1wicHJlSW5pdFwiXS5wb3AoKSgpO1xuIH1cbn1cblxudmFyIHNob3VsZFJ1bk5vdyA9IHRydWU7XG5cbmlmIChNb2R1bGVbXCJub0luaXRpYWxSdW5cIl0pIHNob3VsZFJ1bk5vdyA9IGZhbHNlO1xuXG5ydW4oKTtcblxuXG4gIHJldHVybiBEdWNrREIucmVhZHlcbn1cbik7XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgRHVja0RCOyIsICJpbXBvcnQgKiBhcyBhcnJvdyBmcm9tICdhcGFjaGUtYXJyb3cnO1xuaW1wb3J0IHsgRHVja0RCQmluZGluZ3MgfSBmcm9tICcuL2JpbmRpbmdzX2ludGVyZmFjZSc7XG5pbXBvcnQgeyBDU1ZJbnNlcnRPcHRpb25zLCBKU09OSW5zZXJ0T3B0aW9ucywgQXJyb3dJbnNlcnRPcHRpb25zIH0gZnJvbSAnLi9pbnNlcnRfb3B0aW9ucyc7XG5cbi8qKiBBIHRoaW4gaGVscGVyIHRvIGJpbmQgdGhlIGNvbm5lY3Rpb24gaWQgYW5kIHRhbGsgcmVjb3JkIGJhdGNoZXMgKi9cbmV4cG9ydCBjbGFzcyBEdWNrREJDb25uZWN0aW9uIHtcbiAgICAvKiogVGhlIGJpbmRpbmdzICovXG4gICAgcHJvdGVjdGVkIF9iaW5kaW5nczogRHVja0RCQmluZGluZ3M7XG4gICAgLyoqIFRoZSBjb25uZWN0aW9uIGhhbmRsZSAqL1xuICAgIHByb3RlY3RlZCBfY29ubjogbnVtYmVyO1xuXG4gICAgLyoqIENvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoYmluZGluZ3M6IER1Y2tEQkJpbmRpbmdzLCBjb25uOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZ3MgPSBiaW5kaW5ncztcbiAgICAgICAgdGhpcy5fY29ubiA9IGNvbm47XG4gICAgfVxuXG4gICAgLyoqIENsb3NlIGEgY29ubmVjdGlvbiAqL1xuICAgIHB1YmxpYyBjbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYmluZGluZ3MuZGlzY29ubmVjdCh0aGlzLl9jb25uKTtcbiAgICB9XG5cbiAgICAvKiogQnJhdmUgc291bHMgbWF5IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNvbnN1bWUgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiBpZCAqL1xuICAgIHB1YmxpYyB1c2VVbnNhZmU8Uj4oY2FsbGJhY2s6IChiaW5kaW5nczogRHVja0RCQmluZGluZ3MsIGNvbm46IG51bWJlcikgPT4gUikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5fYmluZGluZ3MsIHRoaXMuX2Nvbm4pO1xuICAgIH1cblxuICAgIC8qKiBSdW4gYSBxdWVyeSAqL1xuICAgIHB1YmxpYyBxdWVyeTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhcnJvdy5EYXRhVHlwZSB9ID0gYW55Pih0ZXh0OiBzdHJpbmcpOiBhcnJvdy5UYWJsZTxUPiB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX2JpbmRpbmdzLnJ1blF1ZXJ5KHRoaXMuX2Nvbm4sIHRleHQpO1xuICAgICAgICBjb25zdCByZWFkZXIgPSBhcnJvdy5SZWNvcmRCYXRjaFJlYWRlci5mcm9tPFQ+KGJ1ZmZlcik7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N5bmMoKSk7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc0ZpbGUoKSk7XG4gICAgICAgIHJldHVybiBuZXcgYXJyb3cuVGFibGUocmVhZGVyKTtcbiAgICB9XG5cbiAgICAvKiogU2VuZCBhIHF1ZXJ5ICovXG4gICAgcHVibGljIGFzeW5jIHNlbmQ8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGUgfSA9IGFueT4oXG4gICAgICAgIHRleHQ6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPGFycm93LlJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+PiB7XG4gICAgICAgIGxldCBoZWFkZXIgPSB0aGlzLl9iaW5kaW5ncy5zdGFydFBlbmRpbmdRdWVyeSh0aGlzLl9jb25uLCB0ZXh0KTtcbiAgICAgICAgd2hpbGUgKGhlYWRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXIgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLl9iaW5kaW5ncy5wb2xsUGVuZGluZ1F1ZXJ5KHRoaXMuX2Nvbm4pKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZXIgPSBuZXcgUmVzdWx0U3RyZWFtSXRlcmF0b3IodGhpcy5fYmluZGluZ3MsIHRoaXMuX2Nvbm4sIGhlYWRlcik7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGFycm93LlJlY29yZEJhdGNoUmVhZGVyLmZyb208VD4oaXRlcik7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N5bmMoKSk7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N0cmVhbSgpKTtcbiAgICAgICAgcmV0dXJuIHJlYWRlcjtcbiAgICB9XG5cbiAgICAvKiogQ2FuY2VsIGEgcXVlcnkgdGhhdCB3YXMgc2VudCBlYXJsaWVyICovXG4gICAgcHVibGljIGNhbmNlbFNlbnQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5ncy5jYW5jZWxQZW5kaW5nUXVlcnkodGhpcy5fY29ubik7XG4gICAgfVxuXG4gICAgLyoqIEdldCB0YWJsZSBuYW1lcyAqL1xuICAgIHB1YmxpYyBnZXRUYWJsZU5hbWVzKHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5ncy5nZXRUYWJsZU5hbWVzKHRoaXMuX2Nvbm4sIHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAvKiogQ3JlYXRlIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXG4gICAgcHVibGljIHByZXBhcmU8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGUgfSA9IGFueT4odGV4dDogc3RyaW5nKTogUHJlcGFyZWRTdGF0ZW1lbnQge1xuICAgICAgICBjb25zdCBzdG10ID0gdGhpcy5fYmluZGluZ3MuY3JlYXRlUHJlcGFyZWQodGhpcy5fY29ubiwgdGV4dCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJlcGFyZWRTdGF0ZW1lbnQ8VD4odGhpcy5fYmluZGluZ3MsIHRoaXMuX2Nvbm4sIHN0bXQpO1xuICAgIH1cblxuICAgIC8qKiBDcmVhdGUgYSBzY2FsYXIgZnVuY3Rpb24gKi9cbiAgICBwdWJsaWMgY3JlYXRlU2NhbGFyRnVuY3Rpb24obmFtZTogc3RyaW5nLCByZXR1cm5zOiBhcnJvdy5EYXRhVHlwZSwgZnVuYzogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmdzLmNyZWF0ZVNjYWxhckZ1bmN0aW9uKHRoaXMuX2Nvbm4sIG5hbWUsIHJldHVybnMsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKiBJbnNlcnQgYW4gYXJyb3cgdGFibGUgKi9cbiAgICBwdWJsaWMgaW5zZXJ0QXJyb3dUYWJsZSh0YWJsZTogYXJyb3cuVGFibGUsIG9wdGlvbnM6IEFycm93SW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xuXHRjb25zdCBidWZmZXIgPSBhcnJvdy50YWJsZVRvSVBDKHRhYmxlLCAnc3RyZWFtJyk7XG4gICAgICAgIHRoaXMuaW5zZXJ0QXJyb3dGcm9tSVBDU3RyZWFtKGJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKiBJbnNlcnQgYW4gYXJyb3cgdGFibGUgZnJvbSBhbiBpcGMgc3RyZWFtICovXG4gICAgcHVibGljIGluc2VydEFycm93RnJvbUlQQ1N0cmVhbShidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM6IEFycm93SW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9iaW5kaW5ncy5pbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0odGhpcy5fY29ubiwgYnVmZmVyLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKiogSW5lc3J0IGNzdiBmaWxlIGZyb20gcGF0aCAqL1xuICAgIHB1YmxpYyBpbnNlcnRDU1ZGcm9tUGF0aChwYXRoOiBzdHJpbmcsIG9wdGlvbnM6IENTVkluc2VydE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYmluZGluZ3MuaW5zZXJ0Q1NWRnJvbVBhdGgodGhpcy5fY29ubiwgcGF0aCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKiBJbnNlcnQganNvbiBmaWxlIGZyb20gcGF0aCAqL1xuICAgIHB1YmxpYyBpbnNlcnRKU09ORnJvbVBhdGgocGF0aDogc3RyaW5nLCBvcHRpb25zOiBKU09OSW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9iaW5kaW5ncy5pbnNlcnRKU09ORnJvbVBhdGgodGhpcy5fY29ubiwgcGF0aCwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG4vKiogQSByZXN1bHQgc3RyZWFtIGl0ZXJhdG9yICovXG5leHBvcnQgY2xhc3MgUmVzdWx0U3RyZWFtSXRlcmF0b3IgaW1wbGVtZW50cyBJdGVyYWJsZTxVaW50OEFycmF5PiB7XG4gICAgLyoqIEZpcnN0IGNodW5rPyAqL1xuICAgIF9maXJzdDogYm9vbGVhbjtcbiAgICAvKiogUmVhY2hlZCBlbmQgb2Ygc3RyZWFtPyAqL1xuICAgIF9kZXBsZXRlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBiaW5kaW5nczogRHVja0RCQmluZGluZ3MsIHByb3RlY3RlZCBjb25uOiBudW1iZXIsIHByb3RlY3RlZCBoZWFkZXI6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgdGhpcy5fZmlyc3QgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZXBsZXRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIG5leHQoKTogSXRlcmF0b3JSZXN1bHQ8VWludDhBcnJheT4ge1xuICAgICAgICBpZiAodGhpcy5fZmlyc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRoaXMuaGVhZGVyIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RlcGxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmZlckk4ID0gdGhpcy5iaW5kaW5ncy5mZXRjaFF1ZXJ5UmVzdWx0cyh0aGlzLmNvbm4pO1xuICAgICAgICB0aGlzLl9kZXBsZXRlZCA9IGJ1ZmZlckk4Lmxlbmd0aCA9PSAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdGhpcy5fZGVwbGV0ZWQsXG4gICAgICAgICAgICB2YWx1ZTogYnVmZmVySTgsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuLyoqIEEgdGhpbiBoZWxwZXIgdG8gYmluZCB0aGUgcHJlcGFyZWQgc3RhdGVtZW50IGlkKi9cbmV4cG9ydCBjbGFzcyBQcmVwYXJlZFN0YXRlbWVudDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhcnJvdy5EYXRhVHlwZSB9ID0gYW55PiB7XG4gICAgLyoqIFRoZSBiaW5kaW5ncyAqL1xuICAgIHByb3RlY3RlZCByZWFkb25seSBiaW5kaW5nczogRHVja0RCQmluZGluZ3M7XG4gICAgLyoqIFRoZSBjb25uZWN0aW9uIGlkICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbm5lY3Rpb25JZDogbnVtYmVyO1xuICAgIC8qKiBUaGUgc3RhdGVtZW50IGlkICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHN0YXRlbWVudElkOiBudW1iZXI7XG5cbiAgICAvKiogQ29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihiaW5kaW5nczogRHVja0RCQmluZGluZ3MsIGNvbm5lY3Rpb25JZDogbnVtYmVyLCBzdGF0ZW1lbnRJZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuc3RhdGVtZW50SWQgPSBzdGF0ZW1lbnRJZDtcbiAgICB9XG5cbiAgICAvKiogQ2xvc2UgYSBwcmVwYXJlZCBzdGF0ZW1lbnQgKi9cbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MuY2xvc2VQcmVwYXJlZCh0aGlzLmNvbm5lY3Rpb25JZCwgdGhpcy5zdGF0ZW1lbnRJZCk7XG4gICAgfVxuXG4gICAgLyoqIFJ1biBhIHByZXBhcmVkIHN0YXRlbWVudCAqL1xuICAgIHB1YmxpYyBxdWVyeSguLi5wYXJhbXM6IGFueVtdKTogYXJyb3cuVGFibGU8VD4ge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLmJpbmRpbmdzLnJ1blByZXBhcmVkKHRoaXMuY29ubmVjdGlvbklkLCB0aGlzLnN0YXRlbWVudElkLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCByZWFkZXIgPSBhcnJvdy5SZWNvcmRCYXRjaFJlYWRlci5mcm9tPFQ+KGJ1ZmZlcik7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N5bmMoKSk7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc0ZpbGUoKSk7XG4gICAgICAgIHJldHVybiBuZXcgYXJyb3cuVGFibGUocmVhZGVyIGFzIGFycm93LlJlY29yZEJhdGNoRmlsZVJlYWRlcik7XG4gICAgfVxuXG4gICAgLyoqIFNlbmQgYSBwcmVwYXJlZCBzdGF0ZW1lbnQgKi9cbiAgICBwdWJsaWMgc2VuZCguLi5wYXJhbXM6IGFueVtdKTogYXJyb3cuUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4ge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmJpbmRpbmdzLnNlbmRQcmVwYXJlZCh0aGlzLmNvbm5lY3Rpb25JZCwgdGhpcy5zdGF0ZW1lbnRJZCwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgaXRlciA9IG5ldyBSZXN1bHRTdHJlYW1JdGVyYXRvcih0aGlzLmJpbmRpbmdzLCB0aGlzLmNvbm5lY3Rpb25JZCwgaGVhZGVyKTtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gYXJyb3cuUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbTxUPihpdGVyKTtcbiAgICAgICAgY29uc29sZS5hc3NlcnQocmVhZGVyLmlzU3luYygpKTtcbiAgICAgICAgY29uc29sZS5hc3NlcnQocmVhZGVyLmlzU3RyZWFtKCkpO1xuICAgICAgICByZXR1cm4gcmVhZGVyIGFzIGFycm93LlJlY29yZEJhdGNoU3RyZWFtUmVhZGVyO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBEdWNrREJSdW50aW1lIH0gZnJvbSAnLi9ydW50aW1lJztcbmltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XG5cbmNvbnN0IFRFWFRfRU5DT0RFUiA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgVEVYVF9ERUNPREVSID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xuXG5mdW5jdGlvbiBzdG9yZUVycm9yKG1vZDogRHVja0RCTW9kdWxlLCByZXNwb25zZTogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtc2dCdWZmZXIgPSBURVhUX0VOQ09ERVIuZW5jb2RlKG1lc3NhZ2UpO1xuICAgIGNvbnN0IGhlYXBBZGRyID0gbW9kLl9tYWxsb2MobXNnQnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgIGNvbnN0IGhlYXBBcnJheSA9IG1vZC5IRUFQVTguc3ViYXJyYXkoaGVhcEFkZHIsIGhlYXBBZGRyICsgbXNnQnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgIGhlYXBBcnJheS5zZXQobXNnQnVmZmVyKTtcbiAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAwXSA9IDE7XG4gICAgbW9kLkhFQVBGNjRbKHJlc3BvbnNlID4+IDMpICsgMV0gPSBoZWFwQWRkcjtcbiAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAyXSA9IGhlYXBBcnJheS5ieXRlTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlU2l6ZShwdHlwZTogc3RyaW5nKSB7XG4gICAgc3dpdGNoIChwdHlwZSkge1xuICAgICAgICBjYXNlICdVSU5UOCc6XG4gICAgICAgIGNhc2UgJ0lOVDgnOlxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGNhc2UgJ0lOVDMyJzpcbiAgICAgICAgY2FzZSAnRkxPQVQnOlxuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIGNhc2UgJ0lOVDY0JzpcbiAgICAgICAgY2FzZSAnVUlOVDY0JzpcbiAgICAgICAgY2FzZSAnRE9VQkxFJzpcbiAgICAgICAgY2FzZSAnVkFSQ0hBUic6XG4gICAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHRyVG9BcnJheShtb2Q6IER1Y2tEQk1vZHVsZSwgcHRyOiBudW1iZXIsIHB0eXBlOiBzdHJpbmcsIG46IG51bWJlcikge1xuICAgIGNvbnN0IGhlYXAgPSBtb2QuSEVBUFU4LnN1YmFycmF5KHB0ciwgcHRyICsgbiAqIGdldFR5cGVTaXplKHB0eXBlKSk7XG4gICAgc3dpdGNoIChwdHlwZSkge1xuICAgICAgICBjYXNlICdVSU5UOCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XG4gICAgICAgIGNhc2UgJ0lOVDgnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XG4gICAgICAgIGNhc2UgJ0lOVDMyJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcbiAgICAgICAgY2FzZSAnRkxPQVQnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XG4gICAgICAgIGNhc2UgJ0RPVUJMRSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcbiAgICAgICAgY2FzZSAnVkFSQ0hBUic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXk8c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbD4oMCk7IC8vIGNvdWdoXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwdHJUb1VpbnQ4QXJyYXkobW9kOiBEdWNrREJNb2R1bGUsIHB0cjogbnVtYmVyLCBuOiBudW1iZXIpIHtcbiAgICBjb25zdCBoZWFwID0gbW9kLkhFQVBVOC5zdWJhcnJheShwdHIsIHB0ciArIG4pO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcbn1cbmZ1bmN0aW9uIHB0clRvRmxvYXQ2NEFycmF5KG1vZDogRHVja0RCTW9kdWxlLCBwdHI6IG51bWJlciwgbjogbnVtYmVyKSB7XG4gICAgY29uc3QgaGVhcCA9IG1vZC5IRUFQVTguc3ViYXJyYXkocHRyLCBwdHIgKyBuICogOCk7XG4gICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XG59XG5cbmludGVyZmFjZSBBcmd1bWVudFR5cGVEZXNjcmlwdGlvbiB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBzcWxUeXBlOiBzdHJpbmc7XG4gICAgcGh5c2ljYWxUeXBlOiBzdHJpbmc7XG4gICAgdmFsaWRpdHlCdWZmZXI/OiBudW1iZXI7XG4gICAgZGF0YUJ1ZmZlcj86IG51bWJlcjtcbiAgICBsZW5ndGhCdWZmZXI/OiBudW1iZXI7XG4gICAgY2hpbGRyZW4/OiBBcmd1bWVudFR5cGVEZXNjcmlwdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgUmV0dXJuVHlwZURlc2NyaXB0aW9uIHtcbiAgICBzcWxUeXBlOiBzdHJpbmc7XG4gICAgcGh5c2ljYWxUeXBlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBTY2hlbWFEZXNjcmlwdGlvbiB7XG4gICAgcm93czogbnVtYmVyO1xuICAgIGFyZ3M6IEFyZ3VtZW50VHlwZURlc2NyaXB0aW9uW107XG4gICAgcmV0OiBSZXR1cm5UeXBlRGVzY3JpcHRpb247XG59XG5cbnR5cGUgQXJndW1lbnRSZXNvbHZlciA9IChyb3c6IG51bWJlcikgPT4gYW55IHwgbnVsbDtcblxuLy8gdGhpcyBpcyBjYWxsZWQgZnJvbSB3ZWJkYi5jYy9DYWxsU2NhbGFyVURGRnVuY3Rpb24sIGNoYW5nZXMgaGVyZSBuZWVkIHRvIGJlIG1hdGNoZWQgdGhlcmVcbmV4cG9ydCBmdW5jdGlvbiBjYWxsU2NhbGFyVURGKFxuICAgIHJ1bnRpbWU6IER1Y2tEQlJ1bnRpbWUsXG4gICAgbW9kOiBEdWNrREJNb2R1bGUsXG4gICAgcmVzcG9uc2U6IG51bWJlcixcbiAgICBmdW5jSWQ6IG51bWJlcixcbiAgICBkZXNjUHRyOiBudW1iZXIsXG4gICAgZGVzY1NpemU6IG51bWJlcixcbiAgICBwdHJzUHRyOiBudW1iZXIsXG4gICAgcHRyc1NpemU6IG51bWJlcixcbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVkZiA9IHJ1bnRpbWUuX3VkZkZ1bmN0aW9ucy5nZXQoZnVuY0lkKTtcbiAgICAgICAgaWYgKCF1ZGYpIHtcbiAgICAgICAgICAgIHN0b3JlRXJyb3IobW9kLCByZXNwb25zZSwgJ1Vua25vd24gVURGIHdpdGggaWQ6ICcgKyBmdW5jSWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhd0Rlc2MgPSBURVhUX0RFQ09ERVIuZGVjb2RlKG1vZC5IRUFQVTguc3ViYXJyYXkoZGVzY1B0ciwgZGVzY1B0ciArIGRlc2NTaXplKSk7XG4gICAgICAgIGNvbnN0IGRlc2MgPSBKU09OLnBhcnNlKHJhd0Rlc2MpIGFzIFNjaGVtYURlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBwdHJzID0gcHRyVG9GbG9hdDY0QXJyYXkobW9kLCBwdHJzUHRyLCBwdHJzU2l6ZSAvIDgpO1xuXG4gICAgICAgIGNvbnN0IGJ1aWxkUmVzb2x2ZXIgPSAoYXJnOiBBcmd1bWVudFR5cGVEZXNjcmlwdGlvbik6IEFyZ3VtZW50UmVzb2x2ZXIgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbGlkaXR5OiBVaW50OEFycmF5IHwgbnVsbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoYXJnLnZhbGlkaXR5QnVmZmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGl0eSA9IHB0clRvVWludDhBcnJheShtb2QsIHB0cnNbYXJnLnZhbGlkaXR5QnVmZmVyXSBhcyBudW1iZXIsIGRlc2Mucm93cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGFyZy5waHlzaWNhbFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdWQVJDSEFSJzoge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnLmRhdGFCdWZmZXIgPT09IG51bGwgfHwgYXJnLmRhdGFCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGJ1ZmZlciBmb3IgVkFSQ0hBUiBhcmd1bWVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcubGVuZ3RoQnVmZmVyID09PSBudWxsIHx8IGFyZy5sZW5ndGhCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGxlbmd0aCBidWZmZXIgZm9yIFZBUkNIQVIgYXJndW1lbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCByYXcgPSBwdHJUb0FycmF5KG1vZCwgcHRyc1thcmcuZGF0YUJ1ZmZlcl0gYXMgbnVtYmVyLCBhcmcucGh5c2ljYWxUeXBlLCBkZXNjLnJvd3MpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzOiAoc3RyaW5nIHwgbnVsbClbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdMZW5ndGhzID0gcHRyVG9GbG9hdDY0QXJyYXkobW9kLCBwdHJzW2FyZy5sZW5ndGhCdWZmZXJdIGFzIG51bWJlciwgZGVzYy5yb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkZXNjLnJvd3M7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkaXR5ICE9IG51bGwgJiYgIXZhbGlkaXR5W2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5ncy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViYXJyYXkgPSBtb2QuSEVBUFU4LnN1YmFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1tqXSBhcyBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1tqXSBhcyBudW1iZXIpICsgKHN0cmluZ0xlbmd0aHNbal0gYXMgbnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHIgPSBURVhUX0RFQ09ERVIuZGVjb2RlKHN1YmFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3MucHVzaChzdHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocm93OiBudW1iZXIpID0+IHN0cmluZ3Nbcm93XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnU1RSVUNUJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXA6IGFueSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbjogQXJndW1lbnRSZXNvbHZlcltdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgKGFyZy5jaGlsZHJlbj8ubGVuZ3RoIHx8IDApOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhcmcuY2hpbGRyZW4hW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBidWlsZFJlc29sdmVyKGF0dHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCgocm93OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBbYXR0ci5uYW1lIV0gPSBjaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkaXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocm93OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkaXR5IVtyb3ddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc29sdmVyIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVyKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChyb3c6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzb2x2ZXIgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIocm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnLmRhdGFCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGJ1ZmZlciBmb3IgYXJndW1lbnQgb2YgdHlwZTogJyArIGFyZy5waHlzaWNhbFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwdHJUb0FycmF5KG1vZCwgcHRyc1thcmcuZGF0YUJ1ZmZlcl0gYXMgbnVtYmVyLCBhcmcucGh5c2ljYWxUeXBlLCBkZXNjLnJvd3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRpdHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChyb3c6IG51bWJlcikgPT4gKCF2YWxpZGl0eSFbcm93XSA/IG51bGwgOiBkYXRhW3Jvd10pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChyb3c6IG51bWJlcikgPT4gZGF0YVtyb3ddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRyYW5zbGF0ZSBhcmd1bWVudCBkYXRhXG4gICAgICAgIGNvbnN0IGFyZ1Jlc29sdmVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2MuYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYXJnUmVzb2x2ZXJzLnB1c2goYnVpbGRSZXNvbHZlcihkZXNjLmFyZ3NbaV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXBhcmUgcmVzdWx0IGJ1ZmZlcnNcbiAgICAgICAgLy8gVE9ETzogd2UgcHJvYmFibHkgZG8gbm90IHdhbnQgdG8gcmVjcmVhdGUgdGhvc2UgZXZlcnkgdGltZVxuICAgICAgICBjb25zdCByZXN1bHREYXRhTGVuID0gZGVzYy5yb3dzICogZ2V0VHlwZVNpemUoZGVzYy5yZXQucGh5c2ljYWxUeXBlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0RGF0YVB0ciA9IG1vZC5fbWFsbG9jKHJlc3VsdERhdGFMZW4pO1xuICAgICAgICBjb25zdCByZXN1bHREYXRhID0gcHRyVG9BcnJheShtb2QsIHJlc3VsdERhdGFQdHIsIGRlc2MucmV0LnBoeXNpY2FsVHlwZSwgZGVzYy5yb3dzKTtcbiAgICAgICAgY29uc3QgcmVzdWx0VmFsaWRpdHlQdHIgPSBtb2QuX21hbGxvYyhkZXNjLnJvd3MpO1xuICAgICAgICBjb25zdCByZXN1bHRWYWxpZGl0eSA9IHB0clRvVWludDhBcnJheShtb2QsIHJlc3VsdFZhbGlkaXR5UHRyLCBkZXNjLnJvd3MpO1xuICAgICAgICBpZiAocmVzdWx0RGF0YS5sZW5ndGggPT0gMCB8fCByZXN1bHRWYWxpZGl0eS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgc3RvcmVFcnJvcihtb2QsIHJlc3BvbnNlLCBcIkNhbid0IGNyZWF0ZSBwaHlzaWNhbCBhcnJheXMgZm9yIHJlc3VsdFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmF3UmVzdWx0RGF0YSA9IHJlc3VsdERhdGE7XG4gICAgICAgIGlmIChkZXNjLnJldC5waHlzaWNhbFR5cGUgPT0gJ1ZBUkNIQVInKSB7XG4gICAgICAgICAgICByYXdSZXN1bHREYXRhID0gbmV3IEFycmF5PHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw+KGRlc2Mucm93cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvblxuICAgICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzYy5hcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXNjLnJvd3M7ICsraSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkZXNjLmFyZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBhcmdzW2pdID0gYXJnUmVzb2x2ZXJzW2pdKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzID0gdWRmLmZ1bmMoLi4uYXJncyk7XG4gICAgICAgICAgICByYXdSZXN1bHREYXRhW2ldID0gcmVzO1xuICAgICAgICAgICAgcmVzdWx0VmFsaWRpdHlbaV0gPSByZXMgPT09IHVuZGVmaW5lZCB8fCByZXMgPT09IG51bGwgPyAwIDogMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuY29kZSByZXR1cm4gdmFsdWVzXG4gICAgICAgIGxldCByZXN1bHRMZW5ndGhzUHRyID0gMDtcbiAgICAgICAgc3dpdGNoIChkZXNjLnJldC5waHlzaWNhbFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1ZBUkNIQVInOiB7XG4gICAgICAgICAgICAgICAgLy8gQWxsb2NhdGUgcmVzdWx0IGJ1ZmZlcnNcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHREYXRhVVRGOCA9IG5ldyBBcnJheTxVaW50OEFycmF5PigwKTsgLy8gY291Z2hcbiAgICAgICAgICAgICAgICByZXN1bHRMZW5ndGhzUHRyID0gbW9kLl9tYWxsb2MoZGVzYy5yb3dzICogZ2V0VHlwZVNpemUoJ0RPVUJMRScpKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRMZW5ndGhzID0gcHRyVG9GbG9hdDY0QXJyYXkobW9kLCByZXN1bHRMZW5ndGhzUHRyLCBkZXNjLnJvd3MpO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0d28gbG9vcHMgdG8gZmlndXJlIG91dCB0aGUgdG90YWwgbGVuZ3RoIGJ1dCBtYXliZSB3ZSBjYW4gYXZvaWQgdGhlIGRvdWJsZSBhbGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBkZXNjLnJvd3M7ICsrcm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHV0ZjggPSBURVhUX0VOQ09ERVIuZW5jb2RlKChyYXdSZXN1bHREYXRhIGFzIChzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKVtdKVtyb3ddIHx8ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YVVURjgucHVzaCh1dGY4KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGVuZ3Roc1tyb3ddID0gdXRmOC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IHV0ZjgubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdlIG1hbGxvYyBhIGJ1ZmZlciBmb3IgdGhlIHN0cmluZ3MgdG8gbGl2ZSBpbiBmb3Igbm93XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0U3RyaW5nUHRyID0gbW9kLl9tYWxsb2ModG90YWxMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFN0cmluZ0J1ZiA9IG1vZC5IRUFQVTguc3ViYXJyYXkocmVzdWx0U3RyaW5nUHRyLCByZXN1bHRTdHJpbmdQdHIgKyB0b3RhbExlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAvLyBOb3cgY29weSBhbGwgdGhlIHN0cmluZ3MgdG8gdGhlIG5ldyBidWZmZXIgYmFjayB0byBiYWNrXG4gICAgICAgICAgICAgICAgbGV0IHdyaXRlck9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgZGVzYy5yb3dzOyArK3Jvdykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHREYXRhW3Jvd10gPSB3cml0ZXJPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFVURjggPSByZXN1bHREYXRhVVRGOFtyb3ddO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cml0ZXIgPSByZXN1bHRTdHJpbmdCdWYuc3ViYXJyYXkod3JpdGVyT2Zmc2V0LCB3cml0ZXJPZmZzZXQgKyByZXN1bHRVVEY4Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci5zZXQocmVzdWx0VVRGOCk7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlck9mZnNldCArPSByZXN1bHRVVEY4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOZWVkIHRvIHN0b3JlIHRocmVlIHBvaW50ZXJzLCBkYXRhLCB2YWxpZGl0eSBhbmQgbGVuZ3RoXG4gICAgICAgIGNvbnN0IHJldExlbiA9IDMgKiA4O1xuICAgICAgICBjb25zdCByZXRQdHIgPSBtb2QuX21hbGxvYyhyZXRMZW4pO1xuICAgICAgICBjb25zdCByZXRCdWZmZXIgPSBwdHJUb0Zsb2F0NjRBcnJheShtb2QsIHJldFB0ciwgMyk7XG4gICAgICAgIHJldEJ1ZmZlclswXSA9IHJlc3VsdERhdGFQdHI7XG4gICAgICAgIHJldEJ1ZmZlclsxXSA9IHJlc3VsdFZhbGlkaXR5UHRyO1xuICAgICAgICByZXRCdWZmZXJbMl0gPSByZXN1bHRMZW5ndGhzUHRyO1xuXG4gICAgICAgIC8vIFBhY2sgcmVzcG9uc2VcbiAgICAgICAgbW9kLkhFQVBGNjRbKHJlc3BvbnNlID4+IDMpICsgMF0gPSAwO1xuICAgICAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAxXSA9IHJldFB0cjtcbiAgICAgICAgbW9kLkhFQVBGNjRbKHJlc3BvbnNlID4+IDMpICsgMl0gPSAwO1xuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICBzdG9yZUVycm9yKG1vZCwgcmVzcG9uc2UsIGUudG9TdHJpbmcoKSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XG5pbXBvcnQgeyBVREZGdW5jdGlvbiB9IGZyb20gJy4vdWRmX2Z1bmN0aW9uJztcbmltcG9ydCAqIGFzIHVkZl9ydCBmcm9tICcuL3VkZl9ydW50aW1lJztcblxuLyoqIFdyYXBwZXIgZm9yIFRleHREZWNvZGVyIHRvIHN1cHBvcnQgc2hhcmVkIGFycmF5IGJ1ZmZlcnMgKi9cbmZ1bmN0aW9uIFRleHREZWNvZGVyV3JhcHBlcigpOiAoaW5wdXQ/OiBCdWZmZXJTb3VyY2UpID0+IHN0cmluZyB7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgIHJldHVybiAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEuYnVmZmVyIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoZGF0YSk7XG4gICAgfTtcbn1cbi8qKiBIZWxwZXIgdG8gZGVjb2RlIHRleHQgKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVUZXh0ID0gVGV4dERlY29kZXJXcmFwcGVyKCk7XG5cbi8qKiBDb3B5IGEgYnVmZmVyICovXG5leHBvcnQgZnVuY3Rpb24gZmFpbFdpdGgobW9kOiBEdWNrREJNb2R1bGUsIG1zZzogc3RyaW5nKTogdm9pZCB7XG4gICAgbW9kLmNjYWxsKCdkdWNrZGJfd2ViX2ZhaWxfd2l0aCcsIG51bGwsIFsnc3RyaW5nJ10sIFttc2ddKTtcbn1cblxuLyoqIENvcHkgYSBidWZmZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5QnVmZmVyKG1vZDogRHVja0RCTW9kdWxlLCBiZWdpbjogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IFVpbnQ4QXJyYXkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IG1vZC5IRUFQVTguc3ViYXJyYXkoYmVnaW4sIGJlZ2luICsgbGVuZ3RoKTtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5ieXRlTGVuZ3RoKSk7XG4gICAgY29weS5zZXQoYnVmZmVyKTtcbiAgICByZXR1cm4gY29weTtcbn1cblxuLyoqIERlY29kZSBhIHN0cmluZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRTdHJpbmcobW9kOiBEdWNrREJNb2R1bGUsIGJlZ2luOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KGJlZ2luLCBiZWdpbiArIGxlbmd0aCkpO1xufVxuXG4vKiogVGhlIGRhdGEgcHJvdG9jb2wgKi9cbmV4cG9ydCBlbnVtIER1Y2tEQkRhdGFQcm90b2NvbCB7XG4gICAgQlVGRkVSID0gMCxcbiAgICBOQVRJVkUgPSAxLFxuICAgIEhUVFAgPSAzLFxuICAgIFMzID0gNCxcbn1cblxuLyoqIEZpbGUgZmxhZ3MgZm9yIG9wZW5pbmcgZmlsZXMqL1xuZXhwb3J0IGVudW0gRmlsZUZsYWdzIHtcbiAgICAvLyEgT3BlbiBmaWxlIHdpdGggcmVhZCBhY2Nlc3NcbiAgICBGSUxFX0ZMQUdTX1JFQUQgPSAxIDw8IDAsXG4gICAgLy8hIE9wZW4gZmlsZSB3aXRoIHdyaXRlIGFjY2Vzc1xuICAgIEZJTEVfRkxBR1NfV1JJVEUgPSAxIDw8IDEsXG4gICAgLy8hIFVzZSBkaXJlY3QgSU8gd2hlbiByZWFkaW5nL3dyaXRpbmcgdG8gdGhlIGZpbGVcbiAgICBGSUxFX0ZMQUdTX0RJUkVDVF9JTyA9IDEgPDwgMixcbiAgICAvLyEgQ3JlYXRlIGZpbGUgaWYgbm90IGV4aXN0cywgY2FuIG9ubHkgYmUgdXNlZCB0b2dldGhlciB3aXRoIFdSSVRFXG4gICAgRklMRV9GTEFHU19GSUxFX0NSRUFURSA9IDEgPDwgMyxcbiAgICAvLyEgQWx3YXlzIGNyZWF0ZSBhIG5ldyBmaWxlLiBJZiBhIGZpbGUgZXhpc3RzLCB0aGUgZmlsZSBpcyB0cnVuY2F0ZWQuIENhbm5vdCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggQ1JFQVRFLlxuICAgIEZJTEVfRkxBR1NfRklMRV9DUkVBVEVfTkVXID0gMSA8PCA0LFxuICAgIC8vISBPcGVuIGZpbGUgaW4gYXBwZW5kIG1vZGVcbiAgICBGSUxFX0ZMQUdTX0FQUEVORCA9IDEgPDwgNSxcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBBV1MgUzMgRmlsZXN5c3RlbSAqL1xuZXhwb3J0IGludGVyZmFjZSBTM0NvbmZpZyB7XG4gICAgcmVnaW9uPzogc3RyaW5nO1xuICAgIGVuZHBvaW50Pzogc3RyaW5nO1xuICAgIGFjY2Vzc0tleUlkPzogc3RyaW5nO1xuICAgIHNlY3JldEFjY2Vzc0tleT86IHN0cmluZztcbiAgICBzZXNzaW9uVG9rZW4/OiBzdHJpbmc7XG59XG5cbi8qKiBBbiBpbmZvIGZvciBhIGZpbGUgcmVnaXN0ZXJlZCB3aXRoIER1Y2tEQiAqL1xuZXhwb3J0IGludGVyZmFjZSBEdWNrREJGaWxlSW5mbyB7XG4gICAgY2FjaGVFcG9jaDogbnVtYmVyO1xuICAgIGZpbGVJZDogbnVtYmVyO1xuICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgZGF0YVByb3RvY29sOiBEdWNrREJEYXRhUHJvdG9jb2w7XG4gICAgZGF0YVVybDogc3RyaW5nIHwgbnVsbDtcbiAgICBkYXRhTmF0aXZlRmQ6IG51bWJlciB8IG51bGw7XG4gICAgYWxsb3dGdWxsSHR0cFJlYWRzPzogYm9vbGVhbjtcbiAgICBzM0NvbmZpZz86IFMzQ29uZmlnO1xufVxuXG4vKiogR2xvYmFsIGluZm8gZm9yIGFsbCBmaWxlcyByZWdpc3RlcmVkIHdpdGggRHVja0RCICovXG5leHBvcnQgaW50ZXJmYWNlIER1Y2tEQkdsb2JhbEZpbGVJbmZvIHtcbiAgICBjYWNoZUVwb2NoOiBudW1iZXI7XG4gICAgYWxsb3dGdWxsSHR0cFJlYWRzPzogYm9vbGVhbjtcbiAgICBzM0NvbmZpZz86IFMzQ29uZmlnO1xufVxuXG4vKiogQ2FsbCBhIGZ1bmN0aW9uIHdpdGggcGFja2VkIHJlc3BvbnNlIGJ1ZmZlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGxTUmV0KFxuICAgIG1vZDogRHVja0RCTW9kdWxlLFxuICAgIGZ1bmNOYW1lOiBzdHJpbmcsXG4gICAgYXJnVHlwZXM6IEFycmF5PEVtc2NyaXB0ZW4uSlNUeXBlPixcbiAgICBhcmdzOiBBcnJheTxhbnk+LFxuKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcbiAgICBjb25zdCBzdGFja1BvaW50ZXIgPSBtb2Quc3RhY2tTYXZlKCk7XG5cbiAgICAvLyBBbGxvY2F0ZSB0aGUgcGFja2VkIHJlc3BvbnNlIGJ1ZmZlclxuICAgIGNvbnN0IHJlc3BvbnNlID0gbW9kLnN0YWNrQWxsb2MoMyAqIDgpO1xuICAgIGFyZ1R5cGVzLnVuc2hpZnQoJ251bWJlcicpO1xuICAgIGFyZ3MudW5zaGlmdChyZXNwb25zZSk7XG5cbiAgICAvLyBEbyB0aGUgY2FsbFxuICAgIG1vZC5jY2FsbChmdW5jTmFtZSwgbnVsbCwgYXJnVHlwZXMsIGFyZ3MpO1xuXG4gICAgLy8gUmVhZCB0aGUgcmVzcG9uc2VcbiAgICBjb25zdCBzdGF0dXMgPSBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAwXTtcbiAgICBjb25zdCBkYXRhID0gbW9kLkhFQVBGNjRbKHJlc3BvbnNlID4+IDMpICsgMV07XG4gICAgY29uc3QgZGF0YVNpemUgPSBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAyXTtcblxuICAgIC8vIFJlc3RvcmUgdGhlIHN0YWNrXG4gICAgbW9kLnN0YWNrUmVzdG9yZShzdGFja1BvaW50ZXIpO1xuICAgIHJldHVybiBbc3RhdHVzLCBkYXRhLCBkYXRhU2l6ZV07XG59XG5cbi8qKiBEcm9wIHJlc3BvbnNlIGJ1ZmZlcnMgKi9cbmV4cG9ydCBmdW5jdGlvbiBkcm9wUmVzcG9uc2VCdWZmZXJzKG1vZDogRHVja0RCTW9kdWxlKTogdm9pZCB7XG4gICAgbW9kLmNjYWxsKCdkdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlJywgbnVsbCwgW10sIFtdKTtcbn1cblxuLyoqIFRoZSBkdWNrZGIgcnVudGltZSAqL1xuZXhwb3J0IGludGVyZmFjZSBEdWNrREJSdW50aW1lIHtcbiAgICBfZmlsZXM/OiBNYXA8c3RyaW5nLCBhbnk+O1xuICAgIF91ZGZGdW5jdGlvbnM6IE1hcDxudW1iZXIsIFVERkZ1bmN0aW9uPjtcblxuICAgIC8vIFRlc3QgYSBwbGF0Zm9ybSBmZWF0dXJlXG4gICAgdGVzdFBsYXRmb3JtRmVhdHVyZShtb2Q6IER1Y2tEQk1vZHVsZSwgZmVhdHVyZTogbnVtYmVyKTogYm9vbGVhbjtcblxuICAgIC8vIEZpbGUgQVBJcyB3aXRoIGRlZGljYXRlZCBmaWxlIGlkZW50aWZpZXJcbiAgICBvcGVuRmlsZShtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIsIGZsYWdzOiBGaWxlRmxhZ3MpOiB2b2lkO1xuICAgIHN5bmNGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IHZvaWQ7XG4gICAgY2xvc2VGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IG51bWJlcjtcbiAgICB0cnVuY2F0ZUZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyLCBuZXdTaXplOiBudW1iZXIpOiB2b2lkO1xuICAgIHJlYWRGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgYnVmZmVyOiBudW1iZXIsIGJ5dGVzOiBudW1iZXIsIGxvY2F0aW9uOiBudW1iZXIpOiBudW1iZXI7XG4gICAgd3JpdGVGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgYnVmZmVyOiBudW1iZXIsIGJ5dGVzOiBudW1iZXIsIGxvY2F0aW9uOiBudW1iZXIpOiBudW1iZXI7XG5cbiAgICAvLyBGaWxlIEFQSXMgd2l0aCBwYXRoIHBhcmFtZXRlclxuICAgIHJlbW92ZURpcmVjdG9yeShtb2Q6IER1Y2tEQk1vZHVsZSwgcGF0aFB0cjogbnVtYmVyLCBwYXRoTGVuOiBudW1iZXIpOiB2b2lkO1xuICAgIGNoZWNrRGlyZWN0b3J5KG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IGJvb2xlYW47XG4gICAgY3JlYXRlRGlyZWN0b3J5KG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IHZvaWQ7XG4gICAgbGlzdERpcmVjdG9yeUVudHJpZXMobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBnbG9iKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IHZvaWQ7XG4gICAgbW92ZUZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZyb21QdHI6IG51bWJlciwgZnJvbUxlbjogbnVtYmVyLCB0b1B0cjogbnVtYmVyLCB0b0xlbjogbnVtYmVyKTogdm9pZDtcbiAgICBjaGVja0ZpbGUobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKTogYm9vbGVhbjtcbiAgICByZW1vdmVGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IHZvaWQ7XG5cbiAgICAvLyBDYWxsIGEgc2NhbGFyIFVERiBmdW5jdGlvblxuICAgIGNhbGxTY2FsYXJVREYoXG4gICAgICAgIG1vZDogRHVja0RCTW9kdWxlLFxuICAgICAgICByZXNwb25zZTogbnVtYmVyLFxuICAgICAgICBmdW5jSWQ6IG51bWJlcixcbiAgICAgICAgZGVzY1B0cjogbnVtYmVyLFxuICAgICAgICBkZXNjU2l6ZTogbnVtYmVyLFxuICAgICAgICBwdHJzUHRyOiBudW1iZXIsXG4gICAgICAgIHB0cnNTaXplOiBudW1iZXIsXG4gICAgKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUlVOVElNRTogRHVja0RCUnVudGltZSA9IHtcbiAgICBfdWRmRnVuY3Rpb25zOiBuZXcgTWFwKCksXG5cbiAgICB0ZXN0UGxhdGZvcm1GZWF0dXJlOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmVhdHVyZTogbnVtYmVyKTogYm9vbGVhbiA9PiBmYWxzZSxcbiAgICBvcGVuRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyLCBmbGFnczogRmlsZUZsYWdzKTogdm9pZCA9PiB7fSxcbiAgICBzeW5jRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyKTogdm9pZCA9PiB7fSxcbiAgICBjbG9zZUZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9maWxlSWQ6IG51bWJlcik6IHZvaWQgPT4ge30sXG4gICAgZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIHRydW5jYXRlRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyLCBfbmV3U2l6ZTogbnVtYmVyKTogdm9pZCA9PiB7fSxcbiAgICByZWFkRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyLCBfYnVmZmVyOiBudW1iZXIsIF9ieXRlczogbnVtYmVyLCBfbG9jYXRpb246IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgd3JpdGVGaWxlOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIsIF9idWZmZXI6IG51bWJlciwgX2J5dGVzOiBudW1iZXIsIF9sb2NhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIHJlbW92ZURpcmVjdG9yeTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX3BhdGhQdHI6IG51bWJlciwgX3BhdGhMZW46IG51bWJlcik6IHZvaWQgPT4ge30sXG4gICAgY2hlY2tEaXJlY3Rvcnk6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgY3JlYXRlRGlyZWN0b3J5OiAoX21vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKTogdm9pZCA9PiB7fSxcbiAgICBsaXN0RGlyZWN0b3J5RW50cmllczogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX3BhdGhQdHI6IG51bWJlciwgX3BhdGhMZW46IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBnbG9iOiAoX21vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKTogdm9pZCA9PiB7fSxcbiAgICBtb3ZlRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2Zyb21QdHI6IG51bWJlciwgX2Zyb21MZW46IG51bWJlciwgX3RvUHRyOiBudW1iZXIsIF90b0xlbjogbnVtYmVyKTogdm9pZCA9PiB7fSxcbiAgICBjaGVja0ZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgcmVtb3ZlRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX3BhdGhQdHI6IG51bWJlciwgX3BhdGhMZW46IG51bWJlcik6IHZvaWQgPT4ge30sXG4gICAgY2FsbFNjYWxhclVERjogKFxuICAgICAgICBtb2Q6IER1Y2tEQk1vZHVsZSxcbiAgICAgICAgcmVzcG9uc2U6IG51bWJlcixcbiAgICAgICAgZnVuY0lkOiBudW1iZXIsXG4gICAgICAgIGRlc2NQdHI6IG51bWJlcixcbiAgICAgICAgZGVzY1NpemU6IG51bWJlcixcbiAgICAgICAgcHRyc1B0cjogbnVtYmVyLFxuICAgICAgICBwdHJzU2l6ZTogbnVtYmVyLFxuICAgICk6IHZvaWQgPT4ge1xuICAgICAgICB1ZGZfcnQuY2FsbFNjYWxhclVERihERUZBVUxUX1JVTlRJTUUsIG1vZCwgcmVzcG9uc2UsIGZ1bmNJZCwgZGVzY1B0ciwgZGVzY1NpemUsIHB0cnNQdHIsIHB0cnNTaXplKTtcbiAgICB9LFxufTtcbiIsICJleHBvcnQgaW50ZXJmYWNlIEZpbGVCbG9ja1N0YXRpc3RpY3Mge1xuICAgIC8qKiBUaGUgZmlsZSByZWFkcyBjb2xkICovXG4gICAgZmlsZV9yZWFkc19jb2xkOiBudW1iZXI7XG4gICAgLyoqIFRoZSBmaWxlIHJlYWRzIGFoZWFkcyAqL1xuICAgIGZpbGVfcmVhZHNfYWhlYWQ6IG51bWJlcjtcbiAgICAvKiogVGhlIGZpbGUgcmVhZHMgY2FjaGVkICovXG4gICAgZmlsZV9yZWFkc19jYWNoZWQ6IG51bWJlcjtcbiAgICAvKiogVGhlIGZpbGUgd3JpdGVzICovXG4gICAgZmlsZV93cml0ZXM6IG51bWJlcjtcbiAgICAvKiogVGhlIHBhZ2UgYWNjZXNzZXMgKi9cbiAgICBwYWdlX2FjY2Vzc2VzOiBudW1iZXI7XG4gICAgLyoqIFRoZSBwYWdlIGxvYWRzICovXG4gICAgcGFnZV9sb2FkczogbnVtYmVyO1xufVxuXG4vKiogVGhlIGZpbGUgYmxvY2sgc3RhdGlzdGljcyAqL1xuZXhwb3J0IGNsYXNzIEZpbGVTdGF0aXN0aWNzIHtcbiAgICAvKiogVGhlIGNvbGQgZmlsZSByZWFkcyAqL1xuICAgIHB1YmxpYyB0b3RhbEZpbGVSZWFkc0NvbGQ6IG51bWJlcjtcbiAgICAvKiogVGhlIGZpbGUgcmVhZGFoZWFkcyAqL1xuICAgIHB1YmxpYyB0b3RhbEZpbGVSZWFkc0FoZWFkOiBudW1iZXI7XG4gICAgLyoqIFRoZSBjYWNoZWQgZmlsZSByZWFkcyAqL1xuICAgIHB1YmxpYyB0b3RhbEZpbGVSZWFkc0NhY2hlZDogbnVtYmVyO1xuICAgIC8qKiBUaGUgZmlsZSB3cml0ZXMgKi9cbiAgICBwdWJsaWMgdG90YWxGaWxlV3JpdGVzOiBudW1iZXI7XG4gICAgLyoqIFRoZSBwYWdlIGFjY2Vzc2VzICovXG4gICAgcHVibGljIHRvdGFsUGFnZUFjY2Vzc2VzOiBudW1iZXI7XG4gICAgLyoqIFRoZSBwYWdlIGxvYWRzICovXG4gICAgcHVibGljIHRvdGFsUGFnZUxvYWRzOiBudW1iZXI7XG4gICAgLyoqIFRoZSBibG9ja3MgKi9cbiAgICBwdWJsaWMgYmxvY2tTaXplOiBudW1iZXI7XG4gICAgLyoqIFRoZSBibG9ja3MgKi9cbiAgICBwdWJsaWMgYmxvY2tTdGF0czogVWludDhBcnJheTtcblxuICAgIGNvbnN0cnVjdG9yKHU4YXJyYXk6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgY29uc3QgZjY0ID0gbmV3IEZsb2F0NjRBcnJheSh1OGFycmF5LmJ1ZmZlciwgdThhcnJheS5ieXRlT2Zmc2V0LCB1OGFycmF5LmJ5dGVMZW5ndGggLyA4KTtcbiAgICAgICAgY29uc3QgYmxvY2tzID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKHU4YXJyYXkuYnl0ZUxlbmd0aCkpO1xuICAgICAgICBibG9ja3Muc2V0KHU4YXJyYXkuc3ViYXJyYXkoNyAqIDgpKTtcbiAgICAgICAgdGhpcy50b3RhbEZpbGVSZWFkc0NvbGQgPSBmNjRbMF07XG4gICAgICAgIHRoaXMudG90YWxGaWxlUmVhZHNBaGVhZCA9IGY2NFsxXTtcbiAgICAgICAgdGhpcy50b3RhbEZpbGVSZWFkc0NhY2hlZCA9IGY2NFsyXTtcbiAgICAgICAgdGhpcy50b3RhbEZpbGVXcml0ZXMgPSBmNjRbM107XG4gICAgICAgIHRoaXMudG90YWxQYWdlQWNjZXNzZXMgPSBmNjRbNF07XG4gICAgICAgIHRoaXMudG90YWxQYWdlTG9hZHMgPSBmNjRbNV07XG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gZjY0WzZdO1xuICAgICAgICB0aGlzLmJsb2NrU3RhdHMgPSBibG9ja3M7XG4gICAgfVxuXG4gICAgLyoqIFRoZSBibG9jayBzdGF0cyAqL1xuICAgIHB1YmxpYyBnZXRCbG9ja1N0YXRzKGluZGV4OiBudW1iZXIsIG91dD86IEZpbGVCbG9ja1N0YXRpc3RpY3MpOiBGaWxlQmxvY2tTdGF0aXN0aWNzIHtcbiAgICAgICAgb3V0ID0gb3V0IHx8IHtcbiAgICAgICAgICAgIGZpbGVfcmVhZHNfY29sZDogMCxcbiAgICAgICAgICAgIGZpbGVfcmVhZHNfYWhlYWQ6IDAsXG4gICAgICAgICAgICBmaWxlX3JlYWRzX2NhY2hlZDogMCxcbiAgICAgICAgICAgIGZpbGVfd3JpdGVzOiAwLFxuICAgICAgICAgICAgcGFnZV9hY2Nlc3NlczogMCxcbiAgICAgICAgICAgIHBhZ2VfbG9hZHM6IDAsXG4gICAgICAgIH07XG4gICAgICAgIG91dC5maWxlX3dyaXRlcyA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAwXSAmIDBiMTExMTtcbiAgICAgICAgb3V0LmZpbGVfcmVhZHNfY29sZCA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAwXSA+PiA0O1xuICAgICAgICBvdXQuZmlsZV9yZWFkc19haGVhZCA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAxXSAmIDBiMTExMTtcbiAgICAgICAgb3V0LmZpbGVfcmVhZHNfY2FjaGVkID0gdGhpcy5ibG9ja1N0YXRzW2luZGV4ICogMyArIDFdID4+IDQ7XG4gICAgICAgIG91dC5wYWdlX2FjY2Vzc2VzID0gdGhpcy5ibG9ja1N0YXRzW2luZGV4ICogMyArIDFdICYgMGIxMTExO1xuICAgICAgICBvdXQucGFnZV9sb2FkcyA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAxXSA+PiA0O1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBEdWNrREJNb2R1bGUsIFBUaHJlYWQgfSBmcm9tICcuL2R1Y2tkYl9tb2R1bGUnO1xuaW1wb3J0IHsgRHVja0RCQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7IEluc3RhbnRpYXRpb25Qcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgRHVja0RCQmluZGluZ3MgfSBmcm9tICcuL2JpbmRpbmdzX2ludGVyZmFjZSc7XG5pbXBvcnQgeyBEdWNrREJDb25uZWN0aW9uIH0gZnJvbSAnLi9jb25uZWN0aW9uJztcbmltcG9ydCB7IFN0YXR1c0NvZGUgfSBmcm9tICcuLi9zdGF0dXMnO1xuaW1wb3J0IHsgZHJvcFJlc3BvbnNlQnVmZmVycywgRHVja0RCUnVudGltZSwgcmVhZFN0cmluZywgY2FsbFNSZXQsIGNvcHlCdWZmZXIgfSBmcm9tICcuL3J1bnRpbWUnO1xuaW1wb3J0IHsgQ1NWSW5zZXJ0T3B0aW9ucywgSlNPTkluc2VydE9wdGlvbnMsIEFycm93SW5zZXJ0T3B0aW9ucyB9IGZyb20gJy4vaW5zZXJ0X29wdGlvbnMnO1xuaW1wb3J0IHsgU2NyaXB0VG9rZW5zIH0gZnJvbSAnLi90b2tlbnMnO1xuaW1wb3J0IHsgRmlsZVN0YXRpc3RpY3MgfSBmcm9tICcuL2ZpbGVfc3RhdHMnO1xuaW1wb3J0IHsgYXJyb3dUb1NRTEZpZWxkLCBhcnJvd1RvU1FMVHlwZSB9IGZyb20gJy4uL2pzb25fdHlwZWRlZic7XG5pbXBvcnQgeyBXZWJGaWxlIH0gZnJvbSAnLi93ZWJfZmlsZSc7XG5pbXBvcnQgeyBVREZGdW5jdGlvbiwgVURGRnVuY3Rpb25EZWNsYXJhdGlvbiB9IGZyb20gJy4vdWRmX2Z1bmN0aW9uJztcbmltcG9ydCAqIGFzIGFycm93IGZyb20gJ2FwYWNoZS1hcnJvdyc7XG5cbmNvbnN0IFRFWFRfRU5DT0RFUiA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxuICAgIHZhciBEVUNLREJfUlVOVElNRTogYW55O1xufVxuXG4vKiogQSBEdWNrREIgRmVhdHVyZSAqL1xuZXhwb3J0IGVudW0gRHVja0RCRmVhdHVyZSB7XG4gICAgV0FTTV9FWENFUFRJT05TID0gMSA8PCAwLFxuICAgIFdBU01fVEhSRUFEUyA9IDEgPDwgMSxcbiAgICBXQVNNX1NJTUQgPSAxIDw8IDIsXG4gICAgV0FTTV9CVUxLX01FTU9SWSA9IDEgPDwgMyxcbiAgICBFTUlUX0JJR0lOVCA9IDEgPDwgNCxcbn1cblxuLyoqIFRoZSBwcm94eSBmb3IgZWl0aGVyIHRoZSBicm93c2VyLSBvcmRlciBub2RlLWJhc2VkIER1Y2tEQiBBUEkgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEdWNrREJCaW5kaW5nc0Jhc2UgaW1wbGVtZW50cyBEdWNrREJCaW5kaW5ncyB7XG4gICAgLyoqIFRoZSBsb2dnZXIgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2xvZ2dlcjogTG9nZ2VyO1xuICAgIC8qKiBCYWNrZW5kLWRlcGVuZGVudCBuYXRpdmUtZ2x1ZSBjb2RlIGZvciBEdWNrREIgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3J1bnRpbWU6IER1Y2tEQlJ1bnRpbWU7XG4gICAgLyoqIFRoZSBpbnN0YW5jZSAqL1xuICAgIHByb3RlY3RlZCBfaW5zdGFuY2U6IER1Y2tEQk1vZHVsZSB8IG51bGwgPSBudWxsO1xuICAgIC8qKiBUaGUgbG9hZGluZyBwcm9taXNlICovXG4gICAgcHJvdGVjdGVkIF9pbml0UHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xuICAgIC8qKiBUaGUgcmVzb2x2ZXIgZm9yIHRoZSBvcGVuIHByb21pc2UgKGNhbGxlZCBieSBvblJ1bnRpbWVJbml0aWFsaXplZCkgKi9cbiAgICBwcm90ZWN0ZWQgX2luaXRQcm9taXNlUmVzb2x2ZXI6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgICAvKiogVGhlIG5leHQgVURGIGlkICovXG4gICAgcHJvdGVjdGVkIF9uZXh0VURGSWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcjogTG9nZ2VyLCBydW50aW1lOiBEdWNrREJSdW50aW1lKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5fcnVudGltZSA9IHJ1bnRpbWU7XG4gICAgICAgIHRoaXMuX25leHRVREZJZCA9IDE7XG4gICAgfVxuXG4gICAgLyoqIEdldCB0aGUgbG9nZ2VyICovXG4gICAgcHVibGljIGdldCBsb2dnZXIoKTogTG9nZ2VyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ2dlcjtcbiAgICB9XG4gICAgLyoqIEdldCB0aGUgaW5zdGFuY2UgKi9cbiAgICBwdWJsaWMgZ2V0IG1vZCgpOiBEdWNrREJNb2R1bGUge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UhO1xuICAgIH1cbiAgICAvKiogR2V0IHRoZSBpbnN0YW5jZSAqL1xuICAgIHB1YmxpYyBnZXQgcHRocmVhZCgpOiBQVGhyZWFkIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZC5QVGhyZWFkIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSBtb2R1bGUgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaW5zdGFudGlhdGVJbXBsKG1vZHVsZU92ZXJyaWRlczogUGFydGlhbDxEdWNrREJNb2R1bGU+KTogUHJvbWlzZTxEdWNrREJNb2R1bGU+O1xuICAgIC8qKiBJbnN0YW50aWF0ZSB0aGUgbW9kdWxlICovXG4gICAgcHJvdGVjdGVkIG9uSW5zdGFudGlhdGlvblByb2dyZXNzOiAoKHA6IEluc3RhbnRpYXRpb25Qcm9ncmVzcykgPT4gdm9pZClbXSA9IFtdO1xuICAgIC8qKiBJbnN0YW50aWF0ZSB0aGUgZGF0YWJhc2UgKi9cbiAgICBwdWJsaWMgYXN5bmMgaW5zdGFudGlhdGUob25Qcm9ncmVzczogKHByb2dyZXNzOiBJbnN0YW50aWF0aW9uUHJvZ3Jlc3MpID0+IHZvaWQgPSBfID0+IHt9KTogUHJvbWlzZTx0aGlzPiB7XG4gICAgICAgIC8vIEFscmVhZHkgb3BlbmVkP1xuICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3BlbiBpbiBwcm9ncmVzcz9cbiAgICAgICAgaWYgKHRoaXMuX2luaXRQcm9taXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub25JbnN0YW50aWF0aW9uUHJvZ3Jlc3MucHVzaChvblByb2dyZXNzKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2luaXRQcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhIHByb21pc2UgdGhhdCB3ZSBjYW4gYXdhaXRcbiAgICAgICAgdGhpcy5faW5pdFByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVnaXN0ZXIgcHJvZ3Jlc3MgaGFuZGxlclxuICAgICAgICB0aGlzLm9uSW5zdGFudGlhdGlvblByb2dyZXNzID0gW29uUHJvZ3Jlc3NdO1xuICAgICAgICAvLyBJbml0aWFsaXplIGR1Y2tkYlxuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGF3YWl0IHRoaXMuaW5zdGFudGlhdGVJbXBsKHtcbiAgICAgICAgICAgIHByaW50OiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLFxuICAgICAgICAgICAgcHJpbnRFcnI6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksXG4gICAgICAgICAgICBvblJ1bnRpbWVJbml0aWFsaXplZDogdGhpcy5faW5pdFByb21pc2VSZXNvbHZlcixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdhaXQgZm9yIG9uUnVudGltZUluaXRpYWxpemVkXG4gICAgICAgIGF3YWl0IHRoaXMuX2luaXRQcm9taXNlO1xuICAgICAgICB0aGlzLl9pbml0UHJvbWlzZSA9IG51bGw7XG4gICAgICAgIC8vIFJlbW92ZSBvd24gcHJvZ3Jlc3MgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5vbkluc3RhbnRpYXRpb25Qcm9ncmVzcyA9IHRoaXMub25JbnN0YW50aWF0aW9uUHJvZ3Jlc3MuZmlsdGVyKHggPT4geCAhPSBvblByb2dyZXNzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBPcGVuIGEgZGF0YWJhc2UgYXQgYSBwYXRoICovXG4gICAgcHVibGljIG9wZW4oY29uZmlnOiBEdWNrREJDb25maWcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX29wZW4nLCBbJ3N0cmluZyddLCBbSlNPTi5zdHJpbmdpZnkoY29uZmlnKV0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgIH1cblxuICAgIC8qKiBSZXNldCB0aGUgZGF0YWJhc2UgKi9cbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9yZXNldCcsIFtdLCBbXSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XG4gICAgfVxuXG4gICAgLyoqIEdldCB0aGUgdmVyc2lvbiAqL1xuICAgIHB1YmxpYyBnZXRWZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9nZXRfdmVyc2lvbicsIFtdLCBbXSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgfVxuICAgIC8qKiBHZXQgdGhlIGZlYXR1cmUgZmxhZ3MgKi9cbiAgICBwdWJsaWMgZ2V0RmVhdHVyZUZsYWdzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZC5jY2FsbCgnZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncycsICdudW1iZXInLCBbXSwgW10pO1xuICAgIH1cblxuICAgIC8qKiBUb2tlbml6ZSBhIHNjcmlwdCAqL1xuICAgIHB1YmxpYyB0b2tlbml6ZSh0ZXh0OiBzdHJpbmcpOiBTY3JpcHRUb2tlbnMge1xuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfdG9rZW5pemUnLCBbJ3N0cmluZyddLCBbdGV4dF0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKSBhcyBTY3JpcHRUb2tlbnM7XG4gICAgfVxuXG4gICAgLyoqIENvbm5lY3QgdG8gZGF0YWJhc2UgKi9cbiAgICBwdWJsaWMgY29ubmVjdCgpOiBEdWNrREJDb25uZWN0aW9uIHtcbiAgICAgICAgY29uc3QgY29ubiA9IHRoaXMubW9kLmNjYWxsKCdkdWNrZGJfd2ViX2Nvbm5lY3QnLCAnbnVtYmVyJywgW10sIFtdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEdWNrREJDb25uZWN0aW9uKHRoaXMsIGNvbm4pO1xuICAgIH1cbiAgICAvKiogRGlzY29ubmVjdCBmcm9tIGRhdGFiYXNlICovXG4gICAgcHVibGljIGRpc2Nvbm5lY3QoY29ubjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMubW9kLmNjYWxsKCdkdWNrZGJfd2ViX2Rpc2Nvbm5lY3QnLCBudWxsLCBbJ251bWJlciddLCBbY29ubl0pO1xuICAgICAgICBpZiAodGhpcy5wdGhyZWFkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiBbLi4udGhpcy5wdGhyZWFkLnJ1bm5pbmdXb3JrZXJzLCAuLi50aGlzLnB0aHJlYWQudW51c2VkV29ya2Vyc10pIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBjbWQ6ICdkcm9wVURGRnVuY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbklkOiBjb25uLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIFNlbmQgYSBxdWVyeSBhbmQgcmV0dXJuIHRoZSBmdWxsIHJlc3VsdCAqL1xuICAgIHB1YmxpYyBydW5RdWVyeShjb25uOiBudW1iZXIsIHRleHQ6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfcXVlcnlfcnVuJywgWydudW1iZXInLCAnc3RyaW5nJ10sIFtjb25uLCB0ZXh0XSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3RhcnQgYSBwZW5kaW5nIHF1ZXJ5IGFzeW5jaHJvbm91c2x5LlxuICAgICAqICBUaGlzIG1ldGhvZCByZXR1cm5zIGVpdGhlciB0aGUgYXJyb3cgaXBjIHNjaGVtYSBvciBudWxsLlxuICAgICAqICBPbiBudWxsLCB0aGUgcXVlcnkgaGFzIHRvIGJlIGV4ZWN1dGVkIHVzaW5nIGBwb2xsUGVuZGluZ1F1ZXJ5YCB1bnRpbCB0aGF0IHJldHVybnMgIT0gbnVsbC5cbiAgICAgKiAgUmVzdWx0cyBjYW4gdGhlbiBiZSBmZXRjaGVkIHVzaW5nIGBmZXRjaFF1ZXJ5UmVzdWx0c2BcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRQZW5kaW5nUXVlcnkoY29ubjogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpOiBVaW50OEFycmF5IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0JywgWydudW1iZXInLCAnc3RyaW5nJ10sIFtjb25uLCB0ZXh0XSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGQgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKiogUG9sbCBhIHBlbmRpbmcgcXVlcnkgKi9cbiAgICBwdWJsaWMgcG9sbFBlbmRpbmdRdWVyeShjb25uOiBudW1iZXIpOiBVaW50OEFycmF5IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGwnLCBbJ251bWJlciddLCBbY29ubl0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvcHlCdWZmZXIodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLyoqIENhbmNlbCBhIHBlbmRpbmcgcXVlcnkgKi9cbiAgICBwdWJsaWMgY2FuY2VsUGVuZGluZ1F1ZXJ5KGNvbm46IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2QuY2NhbGwoJ2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9jYW5jZWwnLCAnYm9vbGVhbicsIFsnbnVtYmVyJ10sIFtjb25uXSk7XG4gICAgfVxuICAgIC8qKiBGZXRjaCBxdWVyeSByZXN1bHRzICovXG4gICAgcHVibGljIGZldGNoUXVlcnlSZXN1bHRzKGNvbm46IG51bWJlcik6IFVpbnQ4QXJyYXkge1xuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cycsIFsnbnVtYmVyJ10sIFtjb25uXSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKiogR2V0IHRhYmxlIG5hbWVzICovXG4gICAgcHVibGljIGdldFRhYmxlTmFtZXMoY29ubjogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lcycsIFsnbnVtYmVyJywgJ3N0cmluZyddLCBbY29ubiwgdGV4dF0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKSBhcyBzdHJpbmdbXTtcbiAgICB9XG5cbiAgICAvKiogQ3JlYXRlIGEgc2NhbGFyIGZ1bmN0aW9uICovXG4gICAgcHVibGljIGNyZWF0ZVNjYWxhckZ1bmN0aW9uKFxuICAgICAgICBjb25uOiBudW1iZXIsXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgcmV0dXJuczogYXJyb3cuRGF0YVR5cGUsXG4gICAgICAgIGZ1bmM6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZGVjbDogVURGRnVuY3Rpb25EZWNsYXJhdGlvbiA9IHtcbiAgICAgICAgICAgIGZ1bmN0aW9uSWQ6IHRoaXMuX25leHRVREZJZCxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICByZXR1cm5UeXBlOiBhcnJvd1RvU1FMVHlwZShyZXR1cm5zKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVmOiBVREZGdW5jdGlvbiA9IHtcbiAgICAgICAgICAgIGZ1bmN0aW9uSWQ6IGRlY2wuZnVuY3Rpb25JZCxcbiAgICAgICAgICAgIGNvbm5lY3Rpb25JZDogY29ubixcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICByZXR1cm5UeXBlOiByZXR1cm5zLFxuICAgICAgICAgICAgZnVuYyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fbmV4dFVERklkICs9IDE7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxuICAgICAgICAgICAgdGhpcy5tb2QsXG4gICAgICAgICAgICAnZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZScsXG4gICAgICAgICAgICBbJ251bWJlcicsICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFtjb25uLCBKU09OLnN0cmluZ2lmeShkZWNsKV0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XG4gICAgICAgIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuX3VkZkZ1bmN0aW9ucyA9IChnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLl91ZGZGdW5jdGlvbnMgfHwgbmV3IE1hcCgpKS5zZXQoXG4gICAgICAgICAgICBkZWYuZnVuY3Rpb25JZCxcbiAgICAgICAgICAgIGRlZixcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMucHRocmVhZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB3b3JrZXIgb2YgWy4uLnRoaXMucHRocmVhZC5ydW5uaW5nV29ya2VycywgLi4udGhpcy5wdGhyZWFkLnVudXNlZFdvcmtlcnNdKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgY21kOiAncmVnaXN0ZXJVREZGdW5jdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIHVkZjogZGVmLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIFByZXBhcmUgYSBzdGF0ZW1lbnQgYW5kIHJldHVybiBpdHMgaWRlbnRpZmllciAqL1xuICAgIHB1YmxpYyBjcmVhdGVQcmVwYXJlZChjb25uOiBudW1iZXIsIHRleHQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUnLCBbJ251bWJlcicsICdzdHJpbmcnXSwgW2Nvbm4sIHRleHRdKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuXG4gICAgLyoqIENsb3NlIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXG4gICAgcHVibGljIGNsb3NlUHJlcGFyZWQoY29ubjogbnVtYmVyLCBzdGF0ZW1lbnQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2UnLCBbJ251bWJlcicsICdudW1iZXInXSwgW2Nvbm4sIHN0YXRlbWVudF0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgIH1cblxuICAgIC8qKiBFeGVjdXRlIGEgcHJlcGFyZWQgc3RhdGVtZW50IGFuZCByZXR1cm4gdGhlIGZ1bGwgcmVzdWx0ICovXG4gICAgcHVibGljIHJ1blByZXBhcmVkKGNvbm46IG51bWJlciwgc3RhdGVtZW50OiBudW1iZXIsIHBhcmFtczogYW55W10pOiBVaW50OEFycmF5IHtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXG4gICAgICAgICAgICB0aGlzLm1vZCxcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX3ByZXBhcmVkX3J1bicsXG4gICAgICAgICAgICBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJ10sXG4gICAgICAgICAgICBbY29ubiwgc3RhdGVtZW50LCBKU09OLnN0cmluZ2lmeShwYXJhbXMpXSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBjb3B5QnVmZmVyKHRoaXMubW9kLCBkLCBuKTtcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyoqIEV4ZWN1dGUgYSBwcmVwYXJlZCBzdGF0ZW1lbnQgYW5kIHN0cmVhbSB0aGUgcmVzdWx0ICovXG4gICAgcHVibGljIHNlbmRQcmVwYXJlZChjb25uOiBudW1iZXIsIHN0YXRlbWVudDogbnVtYmVyLCBwYXJhbXM6IGFueVtdKTogVWludDhBcnJheSB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxuICAgICAgICAgICAgdGhpcy5tb2QsXG4gICAgICAgICAgICAnZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kJyxcbiAgICAgICAgICAgIFsnbnVtYmVyJywgJ251bWJlcicsICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFtjb25uLCBzdGF0ZW1lbnQsIEpTT04uc3RyaW5naWZ5KHBhcmFtcyldLFxuICAgICAgICApO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvcHlCdWZmZXIodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvKiogSW5zZXJ0IHJlY29yZCBiYXRjaGVzIGZyb20gYW4gYXJyb3cgaXBjIHN0cmVhbSAqL1xuICAgIHB1YmxpYyBpbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0oY29ubjogbnVtYmVyLCBidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBBcnJvd0luc2VydE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgICAvLyBTdG9yZSBidWZmZXJcbiAgICAgICAgY29uc3QgYnVmZmVyUHRyID0gdGhpcy5tb2QuX21hbGxvYyhidWZmZXIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgYnVmZmVyT2ZzID0gdGhpcy5tb2QuSEVBUFU4LnN1YmFycmF5KGJ1ZmZlclB0ciwgYnVmZmVyUHRyICsgYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlck9mcy5zZXQoYnVmZmVyKTtcbiAgICAgICAgY29uc3Qgb3B0SlNPTiA9IG9wdGlvbnMgPyBKU09OLnN0cmluZ2lmeShvcHRpb25zKSA6ICcnO1xuXG4gICAgICAgIC8vIENhbGwgd2FzbSBmdW5jdGlvblxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldChcbiAgICAgICAgICAgIHRoaXMubW9kLFxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbScsXG4gICAgICAgICAgICBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddLFxuICAgICAgICAgICAgW2Nvbm4sIGJ1ZmZlclB0ciwgYnVmZmVyLmxlbmd0aCwgb3B0SlNPTl0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogSW5zZXJ0IGNzdiBmcm9tIHBhdGggKi9cbiAgICBwdWJsaWMgaW5zZXJ0Q1NWRnJvbVBhdGgoY29ubjogbnVtYmVyLCBwYXRoOiBzdHJpbmcsIG9wdGlvbnM6IENTVkluc2VydE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgLy8gU3RyaW5naWZ5IG9wdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNvbHVtbnNGbGF0ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4gb3B0aW9ucy5jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRmxhdC5wdXNoKGFycm93VG9TUUxGaWVsZChrLCBvcHRpb25zLmNvbHVtbnNba10pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHQgPSB7IC4uLm9wdGlvbnMgfSBhcyBhbnk7XG4gICAgICAgIG9wdC5jb2x1bW5zID0gb3B0LmNvbHVtbnNGbGF0O1xuICAgICAgICBkZWxldGUgb3B0LmNvbHVtbnNGbGF0O1xuICAgICAgICBjb25zdCBvcHRKU09OID0gSlNPTi5zdHJpbmdpZnkob3B0KTtcblxuICAgICAgICAvLyBDYWxsIHdhc20gZnVuY3Rpb25cbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXG4gICAgICAgICAgICB0aGlzLm1vZCxcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoJyxcbiAgICAgICAgICAgIFsnbnVtYmVyJywgJ3N0cmluZycsICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFtjb25uLCBwYXRoLCBvcHRKU09OXSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogSW5zZXJ0IGpzb24gZnJvbSBwYXRoICovXG4gICAgcHVibGljIGluc2VydEpTT05Gcm9tUGF0aChjb25uOiBudW1iZXIsIHBhdGg6IHN0cmluZywgb3B0aW9uczogSlNPTkluc2VydE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgLy8gU3RyaW5naWZ5IG9wdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNvbHVtbnNGbGF0ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4gb3B0aW9ucy5jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRmxhdC5wdXNoKGFycm93VG9TUUxGaWVsZChrLCBvcHRpb25zLmNvbHVtbnNba10pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHQgPSB7IC4uLm9wdGlvbnMgfSBhcyBhbnk7XG4gICAgICAgIG9wdC5jb2x1bW5zID0gb3B0LmNvbHVtbnNGbGF0O1xuICAgICAgICBkZWxldGUgb3B0LmNvbHVtbnNGbGF0O1xuICAgICAgICBjb25zdCBvcHRKU09OID0gSlNPTi5zdHJpbmdpZnkob3B0KTtcblxuICAgICAgICAvLyBDYWxsIHdhc20gZnVuY3Rpb25cbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXG4gICAgICAgICAgICB0aGlzLm1vZCxcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aCcsXG4gICAgICAgICAgICBbJ251bWJlcicsICdzdHJpbmcnLCAnc3RyaW5nJ10sXG4gICAgICAgICAgICBbY29ubiwgcGF0aCwgb3B0SlNPTl0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEdsb2IgZmlsZSBpbmZvcyAqL1xuICAgIHB1YmxpYyBnbG9iRmlsZXMocGF0aDogc3RyaW5nKTogV2ViRmlsZVtdIHtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvcycsIFsnc3RyaW5nJ10sIFtwYXRoXSk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5mb1N0ciA9IHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pO1xuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2UoaW5mb1N0cikgYXMgV2ViRmlsZVtdO1xuICAgICAgICBpZiAoaW5mbyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIC8qKiBSZWdpc3RlciBhIGZpbGUgb2JqZWN0IFVSTCAqL1xuICAgIHB1YmxpYyByZWdpc3RlckZpbGVVUkwobmFtZTogc3RyaW5nLCB1cmw/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB1cmwgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxuICAgICAgICAgICAgdGhpcy5tb2QsXG4gICAgICAgICAgICAnZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybCcsXG4gICAgICAgICAgICBbJ3N0cmluZycsICdzdHJpbmcnLCAnbnVtYmVyJ10sXG4gICAgICAgICAgICBbbmFtZSwgdXJsLCAtMV0sXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XG4gICAgfVxuICAgIC8qKiBSZWdpc3RlciBmaWxlIHRleHQgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJGaWxlVGV4dChuYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBURVhUX0VOQ09ERVIuZW5jb2RlKHRleHQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRmlsZUJ1ZmZlcihuYW1lLCBidWZmZXIpO1xuICAgIH1cbiAgICAvKiogUmVnaXN0ZXIgYSBmaWxlIGJ1ZmZlciAqL1xuICAgIHB1YmxpYyByZWdpc3RlckZpbGVCdWZmZXIobmFtZTogc3RyaW5nLCBidWZmZXI6IFVpbnQ4QXJyYXkpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5tb2QuX21hbGxvYyhidWZmZXIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZHN0ID0gdGhpcy5tb2QuSEVBUFU4LnN1YmFycmF5KHB0ciwgcHRyICsgYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIGRzdC5zZXQoYnVmZmVyKTtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXG4gICAgICAgICAgICB0aGlzLm1vZCxcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyJyxcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlcicsICdudW1iZXInXSxcbiAgICAgICAgICAgIFtuYW1lLCBwdHIsIGJ1ZmZlci5sZW5ndGhdLFxuICAgICAgICApO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgIH1cbiAgICAvKiogUmVnaXN0ZXIgYSBmaWxlIG9iamVjdCBVUkwgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJGaWxlSGFuZGxlPEhhbmRsZVR5cGU+KG5hbWU6IHN0cmluZywgaGFuZGxlOiBIYW5kbGVUeXBlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxuICAgICAgICAgICAgdGhpcy5tb2QsXG4gICAgICAgICAgICAnZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX3VybCcsXG4gICAgICAgICAgICBbJ3N0cmluZycsICdzdHJpbmcnLCAnbnVtYmVyJ10sXG4gICAgICAgICAgICBbbmFtZSwgbmFtZSwgLTFdLFxuICAgICAgICApO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgICAgICBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLl9maWxlcyA9IChnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLl9maWxlcyB8fCBuZXcgTWFwKCkpLnNldChuYW1lLCBoYW5kbGUpO1xuICAgICAgICBpZiAodGhpcy5wdGhyZWFkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB0aGlzLnB0aHJlYWQucnVubmluZ1dvcmtlcnMpIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBjbWQ6ICdyZWdpc3RlckZpbGVIYW5kbGUnLFxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZUhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB3b3JrZXIgb2YgdGhpcy5wdGhyZWFkLnVudXNlZFdvcmtlcnMpIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBjbWQ6ICdkcm9wRmlsZUhhbmRsZScsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBEcm9wIGZpbGUgKi9cbiAgICBwdWJsaWMgZHJvcEZpbGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9mc19kcm9wX2ZpbGUnLCBbJ3N0cmluZyddLCBbbmFtZV0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgIH1cbiAgICAvKiogRHJvcCBmaWxlcyAqL1xuICAgIHB1YmxpYyBkcm9wRmlsZXMoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzJywgW10sIFtdKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcbiAgICB9XG4gICAgLyoqIEZsdXNoIGFsbCBmaWxlcyAqL1xuICAgIHB1YmxpYyBmbHVzaEZpbGVzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1vZC5jY2FsbCgnZHVja2RiX3dlYl9mbHVzaF9maWxlcycsIG51bGwsIFtdLCBbXSk7XG4gICAgfVxuICAgIC8qKiBXcml0ZSBhIGZpbGUgdG8gYSBwYXRoICovXG4gICAgcHVibGljIGNvcHlGaWxlVG9QYXRoKG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCcsIFsnc3RyaW5nJywgJ3N0cmluZyddLCBbbmFtZSwgcGF0aF0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgIH1cbiAgICAvKiogV3JpdGUgYSBmaWxlIHRvIGEgYnVmZmVyICovXG4gICAgcHVibGljIGNvcHlGaWxlVG9CdWZmZXIobmFtZTogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyJywgWydzdHJpbmcnXSwgW25hbWVdKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLm1vZC5IRUFQVTguc3ViYXJyYXkoZCwgZCArIG4pO1xuICAgICAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIGNvcHkuc2V0KGJ1ZmZlcik7XG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG5cbiAgICAvKiogRW5hYmxlIHRyYWNraW5nIG9mIGZpbGUgc3RhdGlzdGljcyAqL1xuICAgIHB1YmxpYyBjb2xsZWN0RmlsZVN0YXRpc3RpY3MoZmlsZTogc3RyaW5nLCBlbmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cycsIFsnc3RyaW5nJywgJ2Jvb2xlYW4nXSwgW2ZpbGUsIGVuYWJsZV0pO1xuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBFeHBvcnQgZmlsZSBzdGF0aXN0aWNzICovXG4gICAgcHVibGljIGV4cG9ydEZpbGVTdGF0aXN0aWNzKGZpbGU6IHN0cmluZyk6IEZpbGVTdGF0aXN0aWNzIHtcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzJywgWydzdHJpbmcnXSwgW2ZpbGVdKTtcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZpbGVTdGF0aXN0aWNzKHRoaXMubW9kLkhFQVBVOC5zdWJhcnJheShkLCBkICsgbikpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgRHVja0RCV2FzbSBmcm9tICcuL2R1Y2tkYi1tdnAuanMnO1xuaW1wb3J0IHsgRHVja0RCTW9kdWxlIH0gZnJvbSAnLi9kdWNrZGJfbW9kdWxlJztcbmltcG9ydCB7IER1Y2tEQkJpbmRpbmdzQmFzZSB9IGZyb20gJy4vYmluZGluZ3NfYmFzZSc7XG5pbXBvcnQgeyBEdWNrREJSdW50aW1lIH0gZnJvbSAnLi9ydW50aW1lJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxuICAgIHZhciBEVUNLREJfUlVOVElNRTogYW55O1xufVxuXG4vKiogRHVja0RCIGJpbmRpbmdzIGZvciBub2RlLmpzICovXG5leHBvcnQgY2xhc3MgRHVja0RCTm9kZUJpbmRpbmdzIGV4dGVuZHMgRHVja0RCQmluZGluZ3NCYXNlIHtcbiAgICAvKiogVGhlIHBhdGggb2YgdGhlIHdhc20gbW9kdWxlICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1haW5Nb2R1bGVQYXRoOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBwYXRoIG9mIHRoZSBwdGhyZWFkIHdvcmtlciBzY3JpcHQgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcHRocmVhZFdvcmtlclBhdGg6IHN0cmluZyB8IG51bGw7XG5cbiAgICAvKiogQ29uc3RydWN0b3IgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIGxvZ2dlcjogTG9nZ2VyLFxuICAgICAgICBydW50aW1lOiBEdWNrREJSdW50aW1lLFxuICAgICAgICBtYWluTW9kdWxlUGF0aDogc3RyaW5nLFxuICAgICAgICBwdGhyZWFkV29ya2VyUGF0aDogc3RyaW5nIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9nZ2VyLCBydW50aW1lKTtcbiAgICAgICAgdGhpcy5tYWluTW9kdWxlUGF0aCA9IG1haW5Nb2R1bGVQYXRoO1xuICAgICAgICB0aGlzLnB0aHJlYWRXb3JrZXJQYXRoID0gcHRocmVhZFdvcmtlclBhdGg7XG4gICAgfVxuXG4gICAgLyoqIExvY2F0ZSBhIGZpbGUgKi9cbiAgICBwcm90ZWN0ZWQgbG9jYXRlRmlsZShwYXRoOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHBhdGguZW5kc1dpdGgoJy53YXNtJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1haW5Nb2R1bGVQYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCcud29ya2VyLmpzJykpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wdGhyZWFkV29ya2VyUGF0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBEdWNrREIgd29ya2VyIHBhdGghJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdGhyZWFkV29ya2VyUGF0aCE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXQVNNIGluc3RhbnRpYXRpb24gcmVxdWVzdGVkIHVuZXhwZWN0ZWQgZmlsZTogcHJlZml4PSR7cHJlZml4fSBwYXRoPSR7cGF0aH1gKTtcbiAgICB9XG5cbiAgICAvKiogSW5zdGFudGlhdGUgdGhlIHdhc20gbW9kdWxlICovXG4gICAgcHJvdGVjdGVkIGluc3RhbnRpYXRlV2FzbShcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICAgICAgaW1wb3J0czogYW55LFxuICAgICAgICBzdWNjZXNzOiAoaW5zdGFuY2U6IFdlYkFzc2VtYmx5Lkluc3RhbmNlLCBtb2R1bGU6IFdlYkFzc2VtYmx5Lk1vZHVsZSkgPT4gdm9pZCxcbiAgICApOiBFbXNjcmlwdGVuLldlYkFzc2VtYmx5RXhwb3J0cyB7XG4gICAgICAgIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBmdW5jIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3J1bnRpbWUpKSB7XG4gICAgICAgICAgICBpZiAoZnVuYyA9PSAnY29uc3RydWN0b3InKSBjb250aW51ZTtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUVbZnVuY10gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMuX3J1bnRpbWUsIGZ1bmMpIS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWYgPSBmcy5yZWFkRmlsZVN5bmModGhpcy5tYWluTW9kdWxlUGF0aCk7XG4gICAgICAgIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJ1ZiwgaW1wb3J0cykudGhlbihvdXRwdXQgPT4ge1xuICAgICAgICAgICAgc3VjY2VzcyhvdXRwdXQuaW5zdGFuY2UsIG91dHB1dC5tb2R1bGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKiBJbnN0YW50aWF0ZSB0aGUgYmluZGluZ3MgKi9cbiAgICBwcm90ZWN0ZWQgaW5zdGFudGlhdGVJbXBsKG1vZHVsZU92ZXJyaWRlczogUGFydGlhbDxEdWNrREJNb2R1bGU+KTogUHJvbWlzZTxEdWNrREJNb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIER1Y2tEQldhc20oe1xuICAgICAgICAgICAgLi4ubW9kdWxlT3ZlcnJpZGVzLFxuICAgICAgICAgICAgaW5zdGFudGlhdGVXYXNtOiB0aGlzLmluc3RhbnRpYXRlV2FzbS5iaW5kKHRoaXMpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IER1Y2tEQldhc20gZnJvbSAnLi9kdWNrZGItZWguanMnO1xuaW1wb3J0IHsgRHVja0RCTW9kdWxlIH0gZnJvbSAnLi9kdWNrZGJfbW9kdWxlJztcbmltcG9ydCB7IER1Y2tEQk5vZGVCaW5kaW5ncyB9IGZyb20gJy4vYmluZGluZ3Nfbm9kZV9iYXNlLmpzJztcbmltcG9ydCB7IER1Y2tEQlJ1bnRpbWUgfSBmcm9tICcuL3J1bnRpbWUnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nJztcblxuLyoqIER1Y2tEQiBiaW5kaW5ncyBmb3Igbm9kZS5qcyAqL1xuZXhwb3J0IGNsYXNzIER1Y2tEQiBleHRlbmRzIER1Y2tEQk5vZGVCaW5kaW5ncyB7XG4gICAgLyoqIENvbnN0cnVjdG9yICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBsb2dnZXI6IExvZ2dlcixcbiAgICAgICAgcnVudGltZTogRHVja0RCUnVudGltZSxcbiAgICAgICAgbWFpbk1vZHVsZVBhdGg6IHN0cmluZyxcbiAgICAgICAgcHRocmVhZFdvcmtlclBhdGg6IHN0cmluZyB8IG51bGwgPSBudWxsLFxuICAgICkge1xuICAgICAgICBzdXBlcihsb2dnZXIsIHJ1bnRpbWUsIG1haW5Nb2R1bGVQYXRoLCBwdGhyZWFkV29ya2VyUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSBiaW5kaW5ncyAqL1xuICAgIHByb3RlY3RlZCBpbnN0YW50aWF0ZUltcGwobW9kdWxlT3ZlcnJpZGVzOiBQYXJ0aWFsPER1Y2tEQk1vZHVsZT4pOiBQcm9taXNlPER1Y2tEQk1vZHVsZT4ge1xuICAgICAgICByZXR1cm4gRHVja0RCV2FzbSh7XG4gICAgICAgICAgICAuLi5tb2R1bGVPdmVycmlkZXMsXG4gICAgICAgICAgICBpbnN0YW50aWF0ZVdhc206IHRoaXMuaW5zdGFudGlhdGVXYXNtLmJpbmQodGhpcyksXG4gICAgICAgICAgICBsb2NhdGVGaWxlOiB0aGlzLmxvY2F0ZUZpbGUuYmluZCh0aGlzKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEdWNrREI7XG4iLCAiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7XG4gICAgRHVja0RCUnVudGltZSxcbiAgICBEdWNrREJGaWxlSW5mbyxcbiAgICBjYWxsU1JldCxcbiAgICBkcm9wUmVzcG9uc2VCdWZmZXJzLFxuICAgIGZhaWxXaXRoLFxuICAgIHJlYWRTdHJpbmcsXG4gICAgZGVjb2RlVGV4dCxcbiAgICBEdWNrREJEYXRhUHJvdG9jb2wsXG4gICAgRmlsZUZsYWdzLFxufSBmcm9tICcuL3J1bnRpbWUnO1xuaW1wb3J0IHsgU3RhdHVzQ29kZSB9IGZyb20gJy4uL3N0YXR1cyc7XG5pbXBvcnQgeyBEdWNrREJNb2R1bGUgfSBmcm9tICcuL2R1Y2tkYl9tb2R1bGUnO1xuaW1wb3J0ICogYXMgZmcgZnJvbSAnZmFzdC1nbG9iJztcbmltcG9ydCAqIGFzIHVkZiBmcm9tICcuL3VkZl9ydW50aW1lJztcblxuZXhwb3J0IGNvbnN0IE5PREVfUlVOVElNRTogRHVja0RCUnVudGltZSAmIHtcbiAgICBfZmlsZUluZm9DYWNoZTogTWFwPG51bWJlciwgRHVja0RCRmlsZUluZm8+O1xuXG4gICAgcmVzb2x2ZUZpbGVJbmZvKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IER1Y2tEQkZpbGVJbmZvIHwgbnVsbDtcbn0gPSB7XG4gICAgX2ZpbGVzOiBuZXcgTWFwPHN0cmluZywgYW55PigpLFxuICAgIF9maWxlSW5mb0NhY2hlOiBuZXcgTWFwPG51bWJlciwgRHVja0RCRmlsZUluZm8+KCksXG4gICAgX3VkZkZ1bmN0aW9uczogbmV3IE1hcCgpLFxuXG4gICAgcmVzb2x2ZUZpbGVJbmZvKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IER1Y2tEQkZpbGVJbmZvIHwgbnVsbCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBOT0RFX1JVTlRJTUUuX2ZpbGVJbmZvQ2FjaGUuZ2V0KGZpbGVJZCk7XG4gICAgICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldChcbiAgICAgICAgICAgICAgICBtb2QsXG4gICAgICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCcsXG4gICAgICAgICAgICAgICAgWydudW1iZXInLCAnbnVtYmVyJ10sXG4gICAgICAgICAgICAgICAgW2ZpbGVJZCwgY2FjaGVkPy5jYWNoZUVwb2NoIHx8IDBdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIHJlYWRTdHJpbmcobW9kLCBkLCBuKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBFcG9jaCBpcyB1cCB0byBkYXRlIHdpdGggV0FTTVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWQhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5mb1N0ciA9IHJlYWRTdHJpbmcobW9kLCBkLCBuKTtcbiAgICAgICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnMobW9kKTtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBKU09OLnBhcnNlKGluZm9TdHIpIGFzIER1Y2tEQkZpbGVJbmZvO1xuICAgICAgICAgICAgaWYgKGluZm8gPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBOT0RFX1JVTlRJTUUuX2ZpbGVJbmZvQ2FjaGUuc2V0KGZpbGVJZCwgaW5mbyk7XG4gICAgICAgICAgICByZXR1cm4gaW5mbyBhcyBEdWNrREJGaWxlSW5mbztcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdGVzdFBsYXRmb3JtRmVhdHVyZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgZmVhdHVyZTogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHN3aXRjaCAoZmVhdHVyZSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgQmlnSW50NjRBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgdGVzdCBmb3IgdW5rbm93biBmZWF0dXJlOiAke2ZlYXR1cmV9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9wZW5GaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgZmxhZ3M6IEZpbGVGbGFncyk6IG51bWJlciB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBOT0RFX1JVTlRJTUUuX2ZpbGVJbmZvQ2FjaGUuZGVsZXRlKGZpbGVJZCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gTk9ERV9SVU5USU1FLnJlc29sdmVGaWxlSW5mbyhtb2QsIGZpbGVJZCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIC8vIE5hdGl2ZSBmaWxlXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTkFUSVZFOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGUuZGF0YU5hdGl2ZUZkID0gZnMub3BlblN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmRhdGFVcmwhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnMuY29uc3RhbnRzLk9fQ1JFQVQgfCBmcy5jb25zdGFudHMuT19SRFdSLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnMuY29uc3RhbnRzLlNfSVJVU1IgfCBmcy5jb25zdGFudHMuU19JV1VTUixcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2QsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbnVtYmVyJywgJ251bWJlciddLFxuICAgICAgICAgICAgICAgICAgICAgICAgW2ZpbGVJZCwgZmlsZS5kYXRhTmF0aXZlRmRdLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIHJlYWRTdHJpbmcobW9kLCBkLCBuKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVNpemUgPSBmcy5mc3RhdFN5bmMoZmlsZS5kYXRhTmF0aXZlRmQhKS5zaXplO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBtb2QuX21hbGxvYygyICogOCk7XG4gICAgICAgICAgICAgICAgICAgIG1vZC5IRUFQRjY0WyhyZXN1bHQgPj4gMykgKyAwXSA9ICtmaWxlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgbW9kLkhFQVBGNjRbKHJlc3VsdCA+PiAzKSArIDFdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSFRUUCBmaWxlXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuSFRUUDpcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5TMzpcbiAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCAnTm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgc3luY0ZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9maWxlSWQ6IG51bWJlcikgPT4ge30sXG4gICAgY2xvc2VGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gTk9ERV9SVU5USU1FLnJlc29sdmVGaWxlSW5mbyhtb2QsIGZpbGVJZCk7XG4gICAgICAgICAgICBOT0RFX1JVTlRJTUUuX2ZpbGVJbmZvQ2FjaGUuZGVsZXRlKGZpbGVJZCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLk5BVElWRToge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUuZGF0YU5hdGl2ZUZkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIGBGaWxlICR7ZmlsZUlkfSBpcyBtaXNzaW5nIGEgZmlsZSBkZXNjcmlwdG9yYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmcy5jbG9zZVN5bmMoZmlsZS5kYXRhTmF0aXZlRmQpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlLmRhdGFOYXRpdmVGZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5IVFRQOlxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLlMzOlxuICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIGBOb3QgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICB0cnVuY2F0ZUZpbGU6IChtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIsIG5ld1NpemU6IG51bWJlcikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IE5PREVfUlVOVElNRS5yZXNvbHZlRmlsZUluZm8obW9kLCBmaWxlSWQpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWxlPy5kYXRhUHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5OQVRJVkU6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWxlLmRhdGFOYXRpdmVGZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBgRmlsZSAke2ZpbGVJZH0gaXMgbWlzc2luZyBhIGZpbGUgZGVzY3JpcHRvcmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnMudHJ1bmNhdGVTeW5jKGZpbGUuZGF0YVVybCEsIG5ld1NpemUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuSFRUUDpcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5TMzpcbiAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBgTm90IGltcGxlbWVudGVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgcmVhZEZpbGU6IChtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIsIGJ1ZjogbnVtYmVyLCBieXRlczogbnVtYmVyLCBsb2NhdGlvbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gTk9ERV9SVU5USU1FLnJlc29sdmVGaWxlSW5mbyhtb2QsIGZpbGVJZCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLk5BVElWRToge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUuZGF0YU5hdGl2ZUZkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIGBGaWxlICR7ZmlsZUlkfSBpcyBtaXNzaW5nIGEgZmlsZSBkZXNjcmlwdG9yYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZFN5bmMoZmlsZS5kYXRhTmF0aXZlRmQhLCBtb2QuSEVBUFU4LCBidWYsIGJ5dGVzLCBsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkhUVFA6XG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuUzM6XG4gICAgICAgICAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgYE5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIHdyaXRlRmlsZTogKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgYnVmOiBudW1iZXIsIGJ5dGVzOiBudW1iZXIsIGxvY2F0aW9uOiBudW1iZXIpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBOT0RFX1JVTlRJTUUucmVzb2x2ZUZpbGVJbmZvKG1vZCwgZmlsZUlkKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmlsZT8uZGF0YVByb3RvY29sKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTkFUSVZFOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsZS5kYXRhTmF0aXZlRmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgYEZpbGUgJHtmaWxlSWR9IGlzIG1pc3NpbmcgYSBmaWxlIGRlc2NyaXB0b3JgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IG1vZC5IRUFQVTguc3ViYXJyYXkoYnVmLCBidWYgKyBieXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcy53cml0ZVN5bmMoZmlsZS5kYXRhTmF0aXZlRmQhLCBzcmMsIDAsIHNyYy5sZW5ndGgsIGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lOiAobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gTk9ERV9SVU5USU1FLnJlc29sdmVGaWxlSW5mbyhtb2QsIGZpbGVJZCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLk5BVElWRToge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUuZGF0YU5hdGl2ZUZkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsIGBGaWxlICR7ZmlsZUlkfSBpcyBtaXNzaW5nIGEgZmlsZSBkZXNjcmlwdG9yYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnMuZnN0YXRTeW5jKGZpbGUuZGF0YU5hdGl2ZUZkISkubXRpbWUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5IVFRQOlxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLlMzOlxuICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsICdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIGNoZWNrRGlyZWN0b3J5OiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KHBhdGhQdHIsIHBhdGhQdHIgKyBwYXRoTGVuKSk7XG4gICAgICAgICAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhwYXRoKTtcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZURpcmVjdG9yeTogKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVRleHQobW9kLkhFQVBVOC5zdWJhcnJheShwYXRoUHRyLCBwYXRoUHRyICsgcGF0aExlbikpO1xuICAgICAgICAgICAgcmV0dXJuIGZzLm1rZGlyU3luYyhwYXRoKTtcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlRGlyZWN0b3J5OiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KHBhdGhQdHIsIHBhdGhQdHIgKyBwYXRoTGVuKSk7XG4gICAgICAgICAgICByZXR1cm4gZnMucm1kaXJTeW5jKHBhdGgpO1xuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBsaXN0RGlyZWN0b3J5RW50cmllczogKG1vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIGZhaWxXaXRoKG1vZCwgJ05vdCBJbXBsZW1lbnRlZCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBnbG9iOiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcmVhZFN0cmluZyhtb2QsIHBhdGhQdHIsIHBhdGhMZW4pO1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGZnLnN5bmMoW3BhdGhdLCB7IGRvdDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIG1vZC5jY2FsbCgnZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoJywgbnVsbCwgWydzdHJpbmcnXSwgW2VudHJ5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdmVGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIGZyb21QdHI6IG51bWJlciwgZnJvbUxlbjogbnVtYmVyLCB0b1B0cjogbnVtYmVyLCB0b0xlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZWFkU3RyaW5nKG1vZCwgZnJvbVB0ciwgZnJvbUxlbik7XG4gICAgICAgIGNvbnN0IHRvID0gcmVhZFN0cmluZyhtb2QsIHRvUHRyLCB0b0xlbik7XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IE5PREVfUlVOVElNRS5fZmlsZXM/LmdldChmcm9tKTtcbiAgICAgICAgaWYgKGhhbmRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBOT0RFX1JVTlRJTUUuX2ZpbGVzIS5kZWxldGUoaGFuZGxlKTtcbiAgICAgICAgICAgIE5PREVfUlVOVElNRS5fZmlsZXMhLnNldCh0bywgaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBOT0RFX1JVTlRJTUUuX2ZpbGVJbmZvQ2FjaGU/LmVudHJpZXMoKSB8fCBbXSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmRhdGFVcmwgPT0gZnJvbSkge1xuICAgICAgICAgICAgICAgIE5PREVfUlVOVElNRS5fZmlsZUluZm9DYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGNoZWNrRmlsZTogKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVRleHQobW9kLkhFQVBVOC5zdWJhcnJheShwYXRoUHRyLCBwYXRoUHRyICsgcGF0aExlbikpO1xuICAgICAgICAgICAgcmV0dXJuIGZzLmV4aXN0c1N5bmMocGF0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KHBhdGhQdHIsIHBhdGhQdHIgKyBwYXRoTGVuKSk7XG4gICAgICAgICAgICByZXR1cm4gZnMucm1TeW5jKHBhdGgpO1xuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxsU2NhbGFyVURGOiAoXG4gICAgICAgIG1vZDogRHVja0RCTW9kdWxlLFxuICAgICAgICByZXNwb25zZTogbnVtYmVyLFxuICAgICAgICBmdW5jSWQ6IG51bWJlcixcbiAgICAgICAgZGVzY1B0cjogbnVtYmVyLFxuICAgICAgICBkZXNjU2l6ZTogbnVtYmVyLFxuICAgICAgICBwdHJzUHRyOiBudW1iZXIsXG4gICAgICAgIHB0cnNTaXplOiBudW1iZXIsXG4gICAgKTogdm9pZCA9PiB7XG4gICAgICAgIHVkZi5jYWxsU2NhbGFyVURGKE5PREVfUlVOVElNRSwgbW9kLCByZXNwb25zZSwgZnVuY0lkLCBkZXNjUHRyLCBkZXNjU2l6ZSwgcHRyc1B0ciwgcHRyc1NpemUpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOT0RFX1JVTlRJTUU7XG4iXSwKICAibWFwcGluZ3MiOiAiMG9CQUFBLElBQUFBLEdBQUFDLEdBQUFDLElBQUEsY0FDQSxPQUFPLGVBQWVBLEdBQVMsYUFBYyxDQUFFLE1BQU8sRUFBSyxDQUFDLEVBQzVEQSxHQUFRLFVBQVlBLEdBQVEsUUFBVSxPQUN0QyxTQUFTQyxHQUFRQyxFQUFPLENBQ3BCLE9BQU9BLEVBQU0sT0FBTyxDQUFDQyxFQUFZQyxJQUFTLENBQUMsRUFBRSxPQUFPRCxFQUFZQyxDQUFJLEVBQUcsQ0FBQyxDQUFDLENBQzdFLENBQ0FKLEdBQVEsUUFBVUMsR0FDbEIsU0FBU0ksR0FBVUgsRUFBT0ksRUFBVyxDQUNqQyxJQUFNQyxFQUFTLENBQUMsQ0FBQyxDQUFDLEVBQ2RDLEVBQWEsRUFDakIsUUFBV0osS0FBUUYsRUFDWEksRUFBVUYsQ0FBSSxHQUNkSSxJQUNBRCxFQUFPQyxHQUFj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TyxDQUFDLEVBQ3ZFLE9BQU8sR0FBQVgsUUFBRyxPQUFPWSxDQUFJLENBQ3pCLE9BQVNULEVBQVAsQ0FDRSxPQUFBWixHQUFTUCxFQUFLbUIsRUFBRSxTQUFTLENBQUMsRUFDbkIsQ0FDWCxDQUNKLEVBQ0EsY0FBZSxDQUNYbkIsRUFDQTZDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLElBQ08sQ0FDSEMsR0FBY3BELEdBQWNDLEVBQUs2QyxFQUFVQyxFQUFRQyxFQUFTQyxFQUFVQyxFQUFTQyxDQUFRLENBQy9GLENBQ0osRVo3UkEsSUFBTUUsR0FBTixjQUF5QkMsRUFBc0IsQ0FFakMsWUFBWUMsRUFBaUNDLEVBQXlCLENBQzVFLFdBQVcsWUFBWUQsRUFBVUMsQ0FBUSxDQUM3QyxDQUdBLE1BQWdCLFlBQ1pDLEVBQ0FDLEVBQ0FDLEVBQ3VCLENBRXZCLE9BQU8sTUFEVSxJQUFJQyxHQUFPLEtBQU1DLEdBQWNKLEVBQWdCQyxDQUFpQixFQUMzRCxZQUFZQyxDQUFRLENBQzlDLENBQ0osRUFHTyxTQUFTRyxJQUF1QixDQUNuQyxJQUFNQyxFQUFNLElBQUlWLEdBQ2hCLFdBQVcsVUFBWSxNQUFPVyxHQUE4QyxDQUN4RSxNQUFNRCxFQUFJLFVBQVVDLEVBQU0sSUFBSSxDQUNsQyxDQUNKLENBRUFGLEdBQWUiLAogICJuYW1lcyI6IFsicmVxdWlyZV9hcnJheSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZmxhdHRlbiIsICJpdGVtcyIsICJjb2xsZWN0aW9uIiwgIml0ZW0iLCAic3BsaXRXaGVuIiwgInByZWRpY2F0ZSIsICJyZXN1bHQiLCAiZ3JvdXBJbmRleCIsICJyZXF1aXJlX2Vycm5vIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJpc0Vub2VudENvZGVFcnJvciIsICJlcnJvciIsICJyZXF1aXJlX2ZzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJEaXJlbnRGcm9tU3RhdHMiLCAibmFtZSIsICJzdGF0cyIsICJjcmVhdGVEaXJlbnRGcm9tU3RhdHMiLCAicmVxdWlyZV9wYXRoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJwYXRoIiwgIkxFQURJTkdfRE9UX1NFR01FTlRfQ0hBUkFDVEVSU19DT1VOVCIsICJVTkVTQ0FQRURfR0xPQl9TWU1CT0xTX1JFIiwgInVuaXhpZnkiLCAiZmlsZXBhdGgiLCAibWFrZUFic29sdXRlIiwgImN3ZCIsICJlc2NhcGUiLCAicGF0dGVybiIsICJyZW1vdmVMZWFkaW5nRG90U2VnbWVudCIsICJlbnRyeSIsICJzZWNvbmRDaGFyYWN0ZXJ5IiwgInJlcXVpcmVfaXNfZXh0Z2xvYiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0ciIsICJtYXRjaCIsICJyZXF1aXJlX2lzX2dsb2IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc0V4dGdsb2IiLCAiY2hhcnMiLCAic3RyaWN0Q2hlY2siLCAic3RyIiwgImluZGV4IiwgInBpcGVJbmRleCIsICJjbG9zZVNxdWFyZUluZGV4IiwgImNsb3NlQ3VybHlJbmRleCIsICJjbG9zZVBhcmVuSW5kZXgiLCAiYmFja1NsYXNoSW5kZXgiLCAib3BlbiIsICJjbG9zZSIsICJuIiwgInJlbGF4ZWRDaGVjayIsICJvcHRpb25zIiwgImNoZWNrIiwgInJlcXVpcmVfZ2xvYl9wYXJlbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc0dsb2IiLCAicGF0aFBvc2l4RGlybmFtZSIsICJpc1dpbjMyIiwgInNsYXNoIiwgImJhY2tzbGFzaCIsICJlbmNsb3N1cmUiLCAiZ2xvYmJ5IiwgImVzY2FwZWQiLCAic3RyIiwgIm9wdHMiLCAib3B0aW9ucyIsICJyZXF1aXJlX3V0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJudW0iLCAibm9kZSIsICJ0eXBlIiwgIm1pbiIsICJtYXgiLCAic3RlcCIsICJsaW1pdCIsICJibG9jayIsICJuIiwgIm5vZGVzIiwgImFjYyIsICJhcmdzIiwgInJlc3VsdCIsICJmbGF0IiwgImFyciIsICJpIiwgImVsZSIsICJyZXF1aXJlX3N0cmluZ2lmeSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWxzIiwgImFzdCIsICJvcHRpb25zIiwgInN0cmluZ2lmeSIsICJub2RlIiwgInBhcmVudCIsICJpbnZhbGlkQmxvY2siLCAiaW52YWxpZE5vZGUiLCAib3V0cHV0IiwgImNoaWxkIiwgInJlcXVpcmVfaXNfbnVtYmVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibnVtIiwgInJlcXVpcmVfdG9fcmVnZXhfcmFuZ2UiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc051bWJlciIsICJ0b1JlZ2V4UmFuZ2UiLCAibWluIiwgIm1heCIsICJvcHRpb25zIiwgIm9wdHMiLCAicmVsYXgiLCAic2hvcnRoYW5kIiwgImNhcHR1cmUiLCAid3JhcCIsICJjYWNoZUtleSIsICJhIiwgImIiLCAicmVzdWx0IiwgImlzUGFkZGVkIiwgImhhc1BhZGRpbmciLCAic3RhdGUiLCAicG9zaXRpdmVzIiwgIm5lZ2F0aXZlcyIsICJuZXdNaW4iLCAic3BsaXRUb1BhdHRlcm5zIiwgImNvbGxhdGVQYXR0ZXJucyIsICJuZWciLCAicG9zIiwgIm9ubHlOZWdhdGl2ZSIsICJmaWx0ZXJQYXR0ZXJucyIsICJvbmx5UG9zaXRpdmUiLCAiaW50ZXJzZWN0ZWQiLCAic3BsaXRUb1JhbmdlcyIsICJuaW5lcyIsICJ6ZXJvcyIsICJzdG9wIiwgImNvdW50TmluZXMiLCAic3RvcHMiLCAiY291bnRaZXJvcyIsICJjb21wYXJlIiwgInJhbmdlVG9QYXR0ZXJuIiwgInN0YXJ0IiwgInppcHBlZCIsICJ6aXAiLCAiZGlnaXRzIiwgInBhdHRlcm4iLCAiY291bnQiLCAiaSIsICJzdGFydERpZ2l0IiwgInN0b3BEaWdpdCIsICJ0b0NoYXJhY3RlckNsYXNzIiwgInRvayIsICJyYW5nZXMiLCAidG9rZW5zIiwgInByZXYiLCAib2JqIiwgInRvUXVhbnRpZmllciIsICJwYWRaZXJvcyIsICJhcnIiLCAiY29tcGFyaXNvbiIsICJwcmVmaXgiLCAiaW50ZXJzZWN0aW9uIiwgImVsZSIsICJzdHJpbmciLCAiY29udGFpbnMiLCAia2V5IiwgInZhbCIsICJsZW4iLCAiaW50ZWdlciIsICJzdHIiLCAidmFsdWUiLCAiZGlmZiIsICJyZXF1aXJlX2ZpbGxfcmFuZ2UiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgInRvUmVnZXhSYW5nZSIsICJpc09iamVjdCIsICJ2YWwiLCAidHJhbnNmb3JtIiwgInRvTnVtYmVyIiwgInZhbHVlIiwgImlzVmFsaWRWYWx1ZSIsICJpc051bWJlciIsICJudW0iLCAiemVyb3MiLCAiaW5wdXQiLCAiaW5kZXgiLCAic3RyaW5naWZ5IiwgInN0YXJ0IiwgImVuZCIsICJvcHRpb25zIiwgInBhZCIsICJtYXhMZW5ndGgiLCAiZGFzaCIsICJ0b01heExlbiIsICJuZWdhdGl2ZSIsICJ0b1NlcXVlbmNlIiwgInBhcnRzIiwgImEiLCAiYiIsICJwcmVmaXgiLCAicG9zaXRpdmVzIiwgIm5lZ2F0aXZlcyIsICJyZXN1bHQiLCAidG9SYW5nZSIsICJpc051bWJlcnMiLCAic3RvcCIsICJ0b1JlZ2V4IiwgIndyYXAiLCAicmFuZ2VFcnJvciIsICJhcmdzIiwgImludmFsaWRSYW5nZSIsICJpbnZhbGlkU3RlcCIsICJzdGVwIiwgImZpbGxOdW1iZXJzIiwgImRlc2NlbmRpbmciLCAic3RhcnRTdHJpbmciLCAiZW5kU3RyaW5nIiwgInN0ZXBTdHJpbmciLCAicGFkZGVkIiwgIm1heExlbiIsICJmb3JtYXQiLCAicHVzaCIsICJyYW5nZSIsICJmaWxsTGV0dGVycyIsICJtaW4iLCAibWF4IiwgImZpbGwiLCAib3B0cyIsICJyZXF1aXJlX2NvbXBpbGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmaWxsIiwgInV0aWxzIiwgImNvbXBpbGUiLCAiYXN0IiwgIm9wdGlvbnMiLCAid2FsayIsICJub2RlIiwgInBhcmVudCIsICJpbnZhbGlkQmxvY2siLCAiaW52YWxpZE5vZGUiLCAiaW52YWxpZCIsICJwcmVmaXgiLCAib3V0cHV0IiwgImFyZ3MiLCAicmFuZ2UiLCAiY2hpbGQiLCAicmVxdWlyZV9leHBhbmQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmaWxsIiwgInN0cmluZ2lmeSIsICJ1dGlscyIsICJhcHBlbmQiLCAicXVldWUiLCAic3Rhc2giLCAiZW5jbG9zZSIsICJyZXN1bHQiLCAiZWxlIiwgIml0ZW0iLCAidmFsdWUiLCAiZXhwYW5kIiwgImFzdCIsICJvcHRpb25zIiwgInJhbmdlTGltaXQiLCAid2FsayIsICJub2RlIiwgInBhcmVudCIsICJwIiwgInEiLCAiYXJncyIsICJyYW5nZSIsICJibG9jayIsICJpIiwgImNoaWxkIiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9wYXJzZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0cmluZ2lmeSIsICJNQVhfTEVOR1RIIiwgIkNIQVJfQkFDS1NMQVNIIiwgIkNIQVJfQkFDS1RJQ0siLCAiQ0hBUl9DT01NQSIsICJDSEFSX0RPVCIsICJDSEFSX0xFRlRfUEFSRU5USEVTRVMiLCAiQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUyIsICJDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UiLCAiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSIsICJDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQiLCAiQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCIsICJDSEFSX0RPVUJMRV9RVU9URSIsICJDSEFSX1NJTkdMRV9RVU9URSIsICJDSEFSX05PX0JSRUFLX1NQQUNFIiwgIkNIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFIiwgInBhcnNlIiwgImlucHV0IiwgIm9wdGlvbnMiLCAib3B0cyIsICJtYXgiLCAiYXN0IiwgInN0YWNrIiwgImJsb2NrIiwgInByZXYiLCAiYnJhY2tldHMiLCAibGVuZ3RoIiwgImluZGV4IiwgImRlcHRoIiwgInZhbHVlIiwgIm1lbW8iLCAiYWR2YW5jZSIsICJwdXNoIiwgIm5vZGUiLCAiY2xvc2VkIiwgIm5leHQiLCAib3BlbiIsICJkb2xsYXIiLCAidHlwZSIsICJzaWJsaW5ncyIsICJiZWZvcmUiLCAicGFyZW50IiwgInJlcXVpcmVfYnJhY2VzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAic3RyaW5naWZ5IiwgImNvbXBpbGUiLCAiZXhwYW5kIiwgInBhcnNlIiwgImJyYWNlcyIsICJpbnB1dCIsICJvcHRpb25zIiwgIm91dHB1dCIsICJwYXR0ZXJuIiwgInJlc3VsdCIsICJyZXF1aXJlX2NvbnN0YW50cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInBhdGgiLCAiV0lOX1NMQVNIIiwgIldJTl9OT19TTEFTSCIsICJET1RfTElURVJBTCIsICJQTFVTX0xJVEVSQUwiLCAiUU1BUktfTElURVJBTCIsICJTTEFTSF9MSVRFUkFMIiwgIk9ORV9DSEFSIiwgIlFNQVJLIiwgIkVORF9BTkNIT1IiLCAiU1RBUlRfQU5DSE9SIiwgIkRPVFNfU0xBU0giLCAiTk9fRE9UIiwgIk5PX0RPVFMiLCAiTk9fRE9UX1NMQVNIIiwgIk5PX0RPVFNfU0xBU0giLCAiUU1BUktfTk9fRE9UIiwgIlNUQVIiLCAiUE9TSVhfQ0hBUlMiLCAiV0lORE9XU19DSEFSUyIsICJQT1NJWF9SRUdFWF9TT1VSQ0UiLCAiY2hhcnMiLCAid2luMzIiLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJ3aW4zMiIsICJSRUdFWF9CQUNLU0xBU0giLCAiUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSCIsICJSRUdFWF9TUEVDSUFMX0NIQVJTIiwgIlJFR0VYX1NQRUNJQUxfQ0hBUlNfR0xPQkFMIiwgInZhbCIsICJzdHIiLCAibWF0Y2giLCAic2VncyIsICJvcHRpb25zIiwgImlucHV0IiwgImNoYXIiLCAibGFzdElkeCIsICJpZHgiLCAic3RhdGUiLCAib3V0cHV0IiwgInByZXBlbmQiLCAiYXBwZW5kIiwgInJlcXVpcmVfc2NhbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWxzIiwgIkNIQVJfQVNURVJJU0siLCAiQ0hBUl9BVCIsICJDSEFSX0JBQ0tXQVJEX1NMQVNIIiwgIkNIQVJfQ09NTUEiLCAiQ0hBUl9ET1QiLCAiQ0hBUl9FWENMQU1BVElPTl9NQVJLIiwgIkNIQVJfRk9SV0FSRF9TTEFTSCIsICJDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UiLCAiQ0hBUl9MRUZUX1BBUkVOVEhFU0VTIiwgIkNIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCIsICJDSEFSX1BMVVMiLCAiQ0hBUl9RVUVTVElPTl9NQVJLIiwgIkNIQVJfUklHSFRfQ1VSTFlfQlJBQ0UiLCAiQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUyIsICJDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUIiwgImlzUGF0aFNlcGFyYXRvciIsICJjb2RlIiwgImRlcHRoIiwgInRva2VuIiwgInNjYW4iLCAiaW5wdXQiLCAib3B0aW9ucyIsICJvcHRzIiwgImxlbmd0aCIsICJzY2FuVG9FbmQiLCAic2xhc2hlcyIsICJ0b2tlbnMiLCAicGFydHMiLCAic3RyIiwgImluZGV4IiwgInN0YXJ0IiwgImxhc3RJbmRleCIsICJpc0JyYWNlIiwgImlzQnJhY2tldCIsICJpc0dsb2IiLCAiaXNFeHRnbG9iIiwgImlzR2xvYnN0YXIiLCAiYnJhY2VFc2NhcGVkIiwgImJhY2tzbGFzaGVzIiwgIm5lZ2F0ZWQiLCAibmVnYXRlZEV4dGdsb2IiLCAiZmluaXNoZWQiLCAiYnJhY2VzIiwgInByZXYiLCAiZW9zIiwgInBlZWsiLCAiYWR2YW5jZSIsICJuZXh0IiwgImJhc2UiLCAicHJlZml4IiwgImdsb2IiLCAic3RhdGUiLCAicHJldkluZGV4IiwgImlkeCIsICJuIiwgImkiLCAidmFsdWUiLCAicmVxdWlyZV9wYXJzZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbnN0YW50cyIsICJ1dGlscyIsICJNQVhfTEVOR1RIIiwgIlBPU0lYX1JFR0VYX1NPVVJDRSIsICJSRUdFWF9OT05fU1BFQ0lBTF9DSEFSUyIsICJSRUdFWF9TUEVDSUFMX0NIQVJTX0JBQ0tSRUYiLCAiUkVQTEFDRU1FTlRTIiwgImV4cGFuZFJhbmdlIiwgImFyZ3MiLCAib3B0aW9ucyIsICJ2YWx1ZSIsICJ2IiwgInN5bnRheEVycm9yIiwgInR5cGUiLCAiY2hhciIsICJwYXJzZSIsICJpbnB1dCIsICJvcHRzIiwgIm1heCIsICJsZW4iLCAiYm9zIiwgInRva2VucyIsICJjYXB0dXJlIiwgIndpbjMyIiwgIlBMQVRGT1JNX0NIQVJTIiwgIkVYVEdMT0JfQ0hBUlMiLCAiRE9UX0xJVEVSQUwiLCAiUExVU19MSVRFUkFMIiwgIlNMQVNIX0xJVEVSQUwiLCAiT05FX0NIQVIiLCAiRE9UU19TTEFTSCIsICJOT19ET1QiLCAiTk9fRE9UX1NMQVNIIiwgIk5PX0RPVFNfU0xBU0giLCAiUU1BUksiLCAiUU1BUktfTk9fRE9UIiwgIlNUQVIiLCAiU1RBUlRfQU5DSE9SIiwgImdsb2JzdGFyIiwgIm5vZG90IiwgInFtYXJrTm9Eb3QiLCAic3RhciIsICJzdGF0ZSIsICJleHRnbG9icyIsICJicmFjZXMiLCAic3RhY2siLCAicHJldiIsICJlb3MiLCAicGVlayIsICJuIiwgImFkdmFuY2UiLCAicmVtYWluaW5nIiwgImNvbnN1bWUiLCAibnVtIiwgImFwcGVuZCIsICJ0b2tlbiIsICJuZWdhdGUiLCAiY291bnQiLCAiaW5jcmVtZW50IiwgImRlY3JlbWVudCIsICJwdXNoIiwgInRvayIsICJpc0JyYWNlIiwgImlzRXh0Z2xvYiIsICJleHRnbG9iT3BlbiIsICJvdXRwdXQiLCAiZXh0Z2xvYkNsb3NlIiwgInJlc3QiLCAiZXh0Z2xvYlN0YXIiLCAiYmFja3NsYXNoZXMiLCAibSIsICJlc2MiLCAiY2hhcnMiLCAiZmlyc3QiLCAiaW5kZXgiLCAibmV4dCIsICJtYXRjaCIsICJzbGFzaGVzIiwgImlubmVyIiwgImlkeCIsICJwcmUiLCAicG9zaXgiLCAiZXh0Z2xvYiIsICJwcmV2VmFsdWUiLCAiZXNjYXBlZCIsICJvcGVuIiwgImJyYWNlIiwgImFyciIsICJyYW5nZSIsICJpIiwgIm91dCIsICJ0b2tzIiwgInQiLCAicHJpb3IiLCAiYmVmb3JlIiwgImlzU3RhcnQiLCAiYWZ0ZXJTdGFyIiwgImFmdGVyIiwgImVuZCIsICJOT19ET1RTIiwgInNsYXNoRG90IiwgImNyZWF0ZSIsICJzdHIiLCAic291cmNlIiwgInJlcXVpcmVfcGljb21hdGNoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicGF0aCIsICJzY2FuIiwgInBhcnNlIiwgInV0aWxzIiwgImNvbnN0YW50cyIsICJpc09iamVjdCIsICJ2YWwiLCAicGljb21hdGNoIiwgImdsb2IiLCAib3B0aW9ucyIsICJyZXR1cm5TdGF0ZSIsICJmbnMiLCAiaW5wdXQiLCAic3RyIiwgImlzTWF0Y2giLCAic3RhdGUiLCAiaXNTdGF0ZSIsICJvcHRzIiwgInBvc2l4IiwgInJlZ2V4IiwgImlzSWdub3JlZCIsICJpZ25vcmVPcHRzIiwgIm1hdGNoZXIiLCAicmV0dXJuT2JqZWN0IiwgIm1hdGNoIiwgIm91dHB1dCIsICJyZXN1bHQiLCAiZm9ybWF0IiwgInBhdHRlcm5zIiwgInBhdHRlcm4iLCAicCIsICJyZXR1cm5PdXRwdXQiLCAicHJlcGVuZCIsICJhcHBlbmQiLCAic291cmNlIiwgInBhcnNlZCIsICJlcnIiLCAicmVxdWlyZV9waWNvbWF0Y2giLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX21pY3JvbWF0Y2giLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgImJyYWNlcyIsICJwaWNvbWF0Y2giLCAidXRpbHMiLCAiaXNFbXB0eVN0cmluZyIsICJ2YWwiLCAibWljcm9tYXRjaCIsICJsaXN0IiwgInBhdHRlcm5zIiwgIm9wdGlvbnMiLCAib21pdCIsICJrZWVwIiwgIml0ZW1zIiwgIm5lZ2F0aXZlcyIsICJvblJlc3VsdCIsICJzdGF0ZSIsICJpIiwgImlzTWF0Y2giLCAibmVnYXRlZCIsICJpdGVtIiwgIm1hdGNoZWQiLCAibWF0Y2hlcyIsICJwIiwgInBhdHRlcm4iLCAic3RyIiwgInJlc3VsdCIsICJvYmoiLCAia2V5cyIsICJyZXMiLCAia2V5IiwgImdsb2IiLCAiaW5wdXQiLCAicG9zaXgiLCAibWF0Y2giLCAidiIsICJhcmdzIiwgInJlcXVpcmVfcGF0dGVybiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJnbG9iUGFyZW50IiwgIm1pY3JvbWF0Y2giLCAiR0xPQlNUQVIiLCAiRVNDQVBFX1NZTUJPTCIsICJDT01NT05fR0xPQl9TWU1CT0xTX1JFIiwgIlJFR0VYX0NIQVJBQ1RFUl9DTEFTU19TWU1CT0xTX1JFIiwgIlJFR0VYX0dST1VQX1NZTUJPTFNfUkUiLCAiR0xPQl9FWFRFTlNJT05fU1lNQk9MU19SRSIsICJCUkFDRV9FWFBBTlNJT05fU0VQQVJBVE9SU19SRSIsICJpc1N0YXRpY1BhdHRlcm4iLCAicGF0dGVybiIsICJvcHRpb25zIiwgImlzRHluYW1pY1BhdHRlcm4iLCAiaGFzQnJhY2VFeHBhbnNpb24iLCAib3BlbmluZ0JyYWNlSW5kZXgiLCAiY2xvc2luZ0JyYWNlSW5kZXgiLCAiYnJhY2VDb250ZW50IiwgImNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybiIsICJpc05lZ2F0aXZlUGF0dGVybiIsICJjb252ZXJ0VG9OZWdhdGl2ZVBhdHRlcm4iLCAiaXNQb3NpdGl2ZVBhdHRlcm4iLCAiZ2V0TmVnYXRpdmVQYXR0ZXJucyIsICJwYXR0ZXJucyIsICJnZXRQb3NpdGl2ZVBhdHRlcm5zIiwgImdldFBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSIsICJpc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3RvcnkiLCAiZ2V0UGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeSIsICJnZXRCYXNlRGlyZWN0b3J5IiwgImhhc0dsb2JTdGFyIiwgImVuZHNXaXRoU2xhc2hHbG9iU3RhciIsICJpc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybiIsICJiYXNlbmFtZSIsICJleHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbiIsICJjb2xsZWN0aW9uIiwgImV4cGFuZEJyYWNlRXhwYW5zaW9uIiwgImdldFBhdHRlcm5QYXJ0cyIsICJwYXJ0cyIsICJtYWtlUmUiLCAiY29udmVydFBhdHRlcm5zVG9SZSIsICJtYXRjaEFueSIsICJlbnRyeSIsICJwYXR0ZXJuc1JlIiwgInBhdHRlcm5SZSIsICJyZXF1aXJlX21lcmdlMiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlN0cmVhbSIsICJQYXNzVGhyb3VnaCIsICJzbGljZSIsICJtZXJnZTIiLCAic3RyZWFtc1F1ZXVlIiwgImFyZ3MiLCAibWVyZ2luZyIsICJvcHRpb25zIiwgImRvRW5kIiwgImRvUGlwZUVycm9yIiwgIm1lcmdlZFN0cmVhbSIsICJhZGRTdHJlYW0iLCAiaSIsICJsZW4iLCAicGF1c2VTdHJlYW1zIiwgIm1lcmdlU3RyZWFtIiwgInN0cmVhbXMiLCAiZW5kU3RyZWFtIiwgInBpcGVzQ291bnQiLCAibmV4dCIsICJwaXBlIiwgInN0cmVhbSIsICJvbmVuZCIsICJvbmVycm9yIiwgImVyciIsICJyZXF1aXJlX3N0cmVhbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibWVyZ2UyIiwgIm1lcmdlIiwgInN0cmVhbXMiLCAibWVyZ2VkU3RyZWFtIiwgInN0cmVhbSIsICJlcnJvciIsICJwcm9wYWdhdGVDbG9zZUV2ZW50VG9Tb3VyY2VzIiwgInJlcXVpcmVfc3RyaW5nIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJpc1N0cmluZyIsICJpbnB1dCIsICJpc0VtcHR5IiwgInJlcXVpcmVfdXRpbHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImFycmF5IiwgImVycm5vIiwgImZzIiwgInBhdGgiLCAicGF0dGVybiIsICJzdHJlYW0iLCAic3RyaW5nIiwgInJlcXVpcmVfdGFza3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgImdlbmVyYXRlIiwgInBhdHRlcm5zIiwgInNldHRpbmdzIiwgInBvc2l0aXZlUGF0dGVybnMiLCAiZ2V0UG9zaXRpdmVQYXR0ZXJucyIsICJuZWdhdGl2ZVBhdHRlcm5zIiwgImdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlIiwgInN0YXRpY1BhdHRlcm5zIiwgInBhdHRlcm4iLCAiZHluYW1pY1BhdHRlcm5zIiwgInN0YXRpY1Rhc2tzIiwgImNvbnZlcnRQYXR0ZXJuc1RvVGFza3MiLCAiZHluYW1pY1Rhc2tzIiwgInBvc2l0aXZlIiwgIm5lZ2F0aXZlIiwgImR5bmFtaWMiLCAidGFza3MiLCAicGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeSIsICJwYXR0ZXJuc0luc2lkZUN1cnJlbnREaXJlY3RvcnkiLCAib3V0c2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCIsICJncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5IiwgImluc2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCIsICJjb252ZXJ0UGF0dGVybkdyb3Vwc1RvVGFza3MiLCAiY29udmVydFBhdHRlcm5Hcm91cFRvVGFzayIsICJpZ25vcmUiLCAiZ3JvdXAiLCAiY29sbGVjdGlvbiIsICJiYXNlIiwgInJlcXVpcmVfcGF0dGVybnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIkRPVUJMRV9TTEFTSF9SRSIsICJ0cmFuc2Zvcm0iLCAicGF0dGVybnMiLCAicGF0dGVybiIsICJyZW1vdmVEdXBsaWNhdGVTbGFzaGVzIiwgInJlcXVpcmVfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInJlYWQiLCAicGF0aCIsICJzZXR0aW5ncyIsICJjYWxsYmFjayIsICJsc3RhdEVycm9yIiwgImxzdGF0IiwgImNhbGxGYWlsdXJlQ2FsbGJhY2siLCAiY2FsbFN1Y2Nlc3NDYWxsYmFjayIsICJzdGF0RXJyb3IiLCAic3RhdCIsICJlcnJvciIsICJyZXN1bHQiLCAicmVxdWlyZV9zeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJyZWFkIiwgInBhdGgiLCAic2V0dGluZ3MiLCAibHN0YXQiLCAic3RhdCIsICJlcnJvciIsICJyZXF1aXJlX2ZzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmcyIsICJjcmVhdGVGaWxlU3lzdGVtQWRhcHRlciIsICJmc01ldGhvZHMiLCAicmVxdWlyZV9zZXR0aW5ncyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnMiLCAiU2V0dGluZ3MiLCAiX29wdGlvbnMiLCAib3B0aW9uIiwgInZhbHVlIiwgInJlcXVpcmVfb3V0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhc3luYyIsICJzeW5jIiwgInNldHRpbmdzXzEiLCAic3RhdCIsICJwYXRoIiwgIm9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayIsICJjYWxsYmFjayIsICJnZXRTZXR0aW5ncyIsICJzdGF0U3luYyIsICJvcHRpb25zT3JTZXR0aW5ncyIsICJzZXR0aW5ncyIsICJzZXR0aW5nc09yT3B0aW9ucyIsICJyZXF1aXJlX3F1ZXVlX21pY3JvdGFzayIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInByb21pc2UiLCAiY2IiLCAiZXJyIiwgInJlcXVpcmVfcnVuX3BhcmFsbGVsIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicnVuUGFyYWxsZWwiLCAicXVldWVNaWNyb3Rhc2siLCAidGFza3MiLCAiY2IiLCAicmVzdWx0cyIsICJwZW5kaW5nIiwgImtleXMiLCAiaXNTeW5jIiwgImRvbmUiLCAiZXJyIiwgImVuZCIsICJlYWNoIiwgImkiLCAicmVzdWx0IiwgImtleSIsICJ0YXNrIiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUUyIsICJNQUpPUl9WRVJTSU9OIiwgIk1JTk9SX1ZFUlNJT04iLCAiU1VQUE9SVEVEX01BSk9SX1ZFUlNJT04iLCAiU1VQUE9SVEVEX01JTk9SX1ZFUlNJT04iLCAiSVNfTUFUQ0hFRF9CWV9NQUpPUiIsICJJU19NQVRDSEVEX0JZX01BSk9SX0FORF9NSU5PUiIsICJyZXF1aXJlX2ZzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJEaXJlbnRGcm9tU3RhdHMiLCAibmFtZSIsICJzdGF0cyIsICJjcmVhdGVEaXJlbnRGcm9tU3RhdHMiLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnMiLCAicmVxdWlyZV9jb21tb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImpvaW5QYXRoU2VnbWVudHMiLCAiYSIsICJiIiwgInNlcGFyYXRvciIsICJyZXF1aXJlX2FzeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmc1N0YXQiLCAicnBsIiwgImNvbnN0YW50c18xIiwgInV0aWxzIiwgImNvbW1vbiIsICJyZWFkIiwgImRpcmVjdG9yeSIsICJzZXR0aW5ncyIsICJjYWxsYmFjayIsICJyZWFkZGlyV2l0aEZpbGVUeXBlcyIsICJyZWFkZGlyIiwgInJlYWRkaXJFcnJvciIsICJkaXJlbnRzIiwgImNhbGxGYWlsdXJlQ2FsbGJhY2siLCAiZW50cmllcyIsICJkaXJlbnQiLCAiY2FsbFN1Y2Nlc3NDYWxsYmFjayIsICJ0YXNrcyIsICJlbnRyeSIsICJtYWtlUnBsVGFza0VudHJ5IiwgInJwbEVycm9yIiwgInJwbEVudHJpZXMiLCAiZG9uZSIsICJzdGF0RXJyb3IiLCAic3RhdHMiLCAibmFtZXMiLCAibmFtZSIsICJwYXRoIiwgImVycm9yIiwgInJlc3VsdCIsICJyZXF1aXJlX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzU3RhdCIsICJjb25zdGFudHNfMSIsICJ1dGlscyIsICJjb21tb24iLCAicmVhZCIsICJkaXJlY3RvcnkiLCAic2V0dGluZ3MiLCAicmVhZGRpcldpdGhGaWxlVHlwZXMiLCAicmVhZGRpciIsICJkaXJlbnQiLCAiZW50cnkiLCAic3RhdHMiLCAiZXJyb3IiLCAibmFtZSIsICJlbnRyeVBhdGgiLCAicmVxdWlyZV9mcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnMiLCAiY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIiLCAiZnNNZXRob2RzIiwgInJlcXVpcmVfc2V0dGluZ3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInBhdGgiLCAiZnNTdGF0IiwgImZzIiwgIlNldHRpbmdzIiwgIl9vcHRpb25zIiwgIm9wdGlvbiIsICJ2YWx1ZSIsICJyZXF1aXJlX291dCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYXN5bmMiLCAic3luYyIsICJzZXR0aW5nc18xIiwgInNjYW5kaXIiLCAicGF0aCIsICJvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2siLCAiY2FsbGJhY2siLCAiZ2V0U2V0dGluZ3MiLCAic2NhbmRpclN5bmMiLCAib3B0aW9uc09yU2V0dGluZ3MiLCAic2V0dGluZ3MiLCAic2V0dGluZ3NPck9wdGlvbnMiLCAicmVxdWlyZV9yZXVzaWZ5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmV1c2lmeSIsICJDb25zdHJ1Y3RvciIsICJoZWFkIiwgInRhaWwiLCAiZ2V0IiwgImN1cnJlbnQiLCAicmVsZWFzZSIsICJvYmoiLCAicmVxdWlyZV9xdWV1ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJldXNpZnkiLCAiZmFzdHF1ZXVlIiwgImNvbnRleHQiLCAid29ya2VyIiwgImNvbmN1cnJlbmN5IiwgImNhY2hlIiwgIlRhc2siLCAicXVldWVIZWFkIiwgInF1ZXVlVGFpbCIsICJfcnVubmluZyIsICJlcnJvckhhbmRsZXIiLCAic2VsZiIsICJwdXNoIiwgIm5vb3AiLCAicGF1c2UiLCAicnVubmluZyIsICJyZXN1bWUiLCAiaWRsZSIsICJsZW5ndGgiLCAiZ2V0UXVldWUiLCAidW5zaGlmdCIsICJraWxsIiwgImtpbGxBbmREcmFpbiIsICJlcnJvciIsICJjdXJyZW50IiwgImNvdW50ZXIiLCAidGFza3MiLCAiaSIsICJyZWxlYXNlIiwgInZhbHVlIiwgImRvbmUiLCAiaG9sZGVyIiwgIm5leHQiLCAiaGFuZGxlciIsICJlcnIiLCAicmVzdWx0IiwgImNhbGxiYWNrIiwgInZhbCIsICJxdWV1ZUFzUHJvbWlzZWQiLCAiYXN5bmNXcmFwcGVyIiwgImFyZyIsICJjYiIsICJyZXMiLCAicXVldWUiLCAicHVzaENiIiwgInVuc2hpZnRDYiIsICJkcmFpbmVkIiwgInAiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAicHJldmlvdXNEcmFpbiIsICJyZXF1aXJlX2NvbW1vbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiaXNGYXRhbEVycm9yIiwgInNldHRpbmdzIiwgImVycm9yIiwgImlzQXBwbGllZEZpbHRlciIsICJmaWx0ZXIiLCAidmFsdWUiLCAicmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yIiwgImZpbGVwYXRoIiwgInNlcGFyYXRvciIsICJqb2luUGF0aFNlZ21lbnRzIiwgImEiLCAiYiIsICJyZXF1aXJlX3JlYWRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiY29tbW9uIiwgIlJlYWRlciIsICJfcm9vdCIsICJfc2V0dGluZ3MiLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZXZlbnRzXzEiLCAiZnNTY2FuZGlyIiwgImZhc3RxIiwgImNvbW1vbiIsICJyZWFkZXJfMSIsICJBc3luY1JlYWRlciIsICJfcm9vdCIsICJfc2V0dGluZ3MiLCAiY2FsbGJhY2siLCAiZGlyZWN0b3J5IiwgImJhc2UiLCAicXVldWVJdGVtIiwgImVycm9yIiwgIml0ZW0iLCAiZG9uZSIsICJlbnRyaWVzIiwgImVudHJ5IiwgImZ1bGxwYXRoIiwgInJlcXVpcmVfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImFzeW5jXzEiLCAiQXN5bmNQcm92aWRlciIsICJfcm9vdCIsICJfc2V0dGluZ3MiLCAiY2FsbGJhY2siLCAiZXJyb3IiLCAiY2FsbEZhaWx1cmVDYWxsYmFjayIsICJlbnRyeSIsICJjYWxsU3VjY2Vzc0NhbGxiYWNrIiwgImVudHJpZXMiLCAicmVxdWlyZV9zdHJlYW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInN0cmVhbV8xIiwgImFzeW5jXzEiLCAiU3RyZWFtUHJvdmlkZXIiLCAiX3Jvb3QiLCAiX3NldHRpbmdzIiwgImVycm9yIiwgImVudHJ5IiwgInJlcXVpcmVfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnNTY2FuZGlyIiwgImNvbW1vbiIsICJyZWFkZXJfMSIsICJTeW5jUmVhZGVyIiwgImRpcmVjdG9yeSIsICJiYXNlIiwgIml0ZW0iLCAiZW50cmllcyIsICJlbnRyeSIsICJlcnJvciIsICJmdWxscGF0aCIsICJyZXF1aXJlX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInN5bmNfMSIsICJTeW5jUHJvdmlkZXIiLCAiX3Jvb3QiLCAiX3NldHRpbmdzIiwgInJlcXVpcmVfc2V0dGluZ3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInBhdGgiLCAiZnNTY2FuZGlyIiwgIlNldHRpbmdzIiwgIl9vcHRpb25zIiwgIm9wdGlvbiIsICJ2YWx1ZSIsICJyZXF1aXJlX291dCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYXN5bmNfMSIsICJzdHJlYW1fMSIsICJzeW5jXzEiLCAic2V0dGluZ3NfMSIsICJ3YWxrIiwgImRpcmVjdG9yeSIsICJvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2siLCAiY2FsbGJhY2siLCAiZ2V0U2V0dGluZ3MiLCAid2Fsa1N5bmMiLCAib3B0aW9uc09yU2V0dGluZ3MiLCAic2V0dGluZ3MiLCAid2Fsa1N0cmVhbSIsICJzZXR0aW5nc09yT3B0aW9ucyIsICJyZXF1aXJlX3JlYWRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJmc1N0YXQiLCAidXRpbHMiLCAiUmVhZGVyIiwgIl9zZXR0aW5ncyIsICJmaWxlcGF0aCIsICJzdGF0cyIsICJwYXR0ZXJuIiwgImVudHJ5IiwgImVycm9yIiwgInJlcXVpcmVfc3RyZWFtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJzdHJlYW1fMSIsICJmc1N0YXQiLCAiZnNXYWxrIiwgInJlYWRlcl8xIiwgIlJlYWRlclN0cmVhbSIsICJyb290IiwgIm9wdGlvbnMiLCAicGF0dGVybnMiLCAiZmlsZXBhdGhzIiwgInN0cmVhbSIsICJpbmRleCIsICJfZW5jIiwgImRvbmUiLCAiZW50cnkiLCAiaSIsICJmaWxlcGF0aCIsICJwYXR0ZXJuIiwgInN0YXRzIiwgImVycm9yIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInJlcXVpcmVfbWF0Y2hlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAiTWF0Y2hlciIsICJfcGF0dGVybnMiLCAiX3NldHRpbmdzIiwgIl9taWNyb21hdGNoT3B0aW9ucyIsICJwYXR0ZXJucyIsICJwYXR0ZXJuIiwgInNlZ21lbnRzIiwgInNlY3Rpb25zIiwgInBhcnQiLCAic2VnbWVudCIsICJyZXF1aXJlX3BhcnRpYWwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1hdGNoZXJfMSIsICJQYXJ0aWFsTWF0Y2hlciIsICJmaWxlcGF0aCIsICJwYXJ0cyIsICJsZXZlbHMiLCAicGF0dGVybnMiLCAiaW5mbyIsICJwYXR0ZXJuIiwgInNlY3Rpb24iLCAicGFydCIsICJpbmRleCIsICJzZWdtZW50IiwgInJlcXVpcmVfZGVlcCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAicGFydGlhbF8xIiwgIkRlZXBGaWx0ZXIiLCAiX3NldHRpbmdzIiwgIl9taWNyb21hdGNoT3B0aW9ucyIsICJiYXNlUGF0aCIsICJwb3NpdGl2ZSIsICJuZWdhdGl2ZSIsICJtYXRjaGVyIiwgIm5lZ2F0aXZlUmUiLCAiZW50cnkiLCAicGF0dGVybnMiLCAiYWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJucyIsICJmaWxlcGF0aCIsICJlbnRyeVBhdGgiLCAiZW50cnlQYXRoRGVwdGgiLCAiYmFzZVBhdGhEZXB0aCIsICJwYXR0ZXJuc1JlIiwgInJlcXVpcmVfZW50cnkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgIkVudHJ5RmlsdGVyIiwgIl9zZXR0aW5ncyIsICJfbWljcm9tYXRjaE9wdGlvbnMiLCAicG9zaXRpdmUiLCAibmVnYXRpdmUiLCAicG9zaXRpdmVSZSIsICJuZWdhdGl2ZVJlIiwgImVudHJ5IiwgImZpbGVwYXRoIiwgImlzTWF0Y2hlZCIsICJlbnRyeVBhdGgiLCAicGF0dGVybnNSZSIsICJmdWxscGF0aCIsICJyZXF1aXJlX2Vycm9yIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJ1dGlscyIsICJFcnJvckZpbHRlciIsICJfc2V0dGluZ3MiLCAiZXJyb3IiLCAicmVxdWlyZV9lbnRyeSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAiRW50cnlUcmFuc2Zvcm1lciIsICJfc2V0dGluZ3MiLCAiZW50cnkiLCAiZmlsZXBhdGgiLCAicmVxdWlyZV9wcm92aWRlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJkZWVwXzEiLCAiZW50cnlfMSIsICJlcnJvcl8xIiwgImVudHJ5XzIiLCAiUHJvdmlkZXIiLCAiX3NldHRpbmdzIiwgInRhc2siLCAiYmFzZVBhdGgiLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3RyZWFtXzEiLCAicHJvdmlkZXJfMSIsICJQcm92aWRlckFzeW5jIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgImVudHJpZXMiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAic3RyZWFtIiwgImVudHJ5IiwgInJlcXVpcmVfc3RyZWFtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJzdHJlYW1fMSIsICJzdHJlYW1fMiIsICJwcm92aWRlcl8xIiwgIlByb3ZpZGVyU3RyZWFtIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgInNvdXJjZSIsICJkZXN0aW5hdGlvbiIsICJlcnJvciIsICJlbnRyeSIsICJyZXF1aXJlX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzU3RhdCIsICJmc1dhbGsiLCAicmVhZGVyXzEiLCAiUmVhZGVyU3luYyIsICJyb290IiwgIm9wdGlvbnMiLCAicGF0dGVybnMiLCAiZW50cmllcyIsICJwYXR0ZXJuIiwgImZpbGVwYXRoIiwgImVudHJ5IiwgInN0YXRzIiwgImVycm9yIiwgInJlcXVpcmVfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3luY18xIiwgInByb3ZpZGVyXzEiLCAiUHJvdmlkZXJTeW5jIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgInJlcXVpcmVfc2V0dGluZ3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzIiwgIm9zIiwgIkNQVV9DT1VOVCIsICJTZXR0aW5ncyIsICJfb3B0aW9ucyIsICJvcHRpb24iLCAidmFsdWUiLCAibWV0aG9kcyIsICJyZXF1aXJlX291dCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInRhc2tNYW5hZ2VyIiwgInBhdHRlcm5NYW5hZ2VyIiwgImFzeW5jXzEiLCAic3RyZWFtXzEiLCAic3luY18xIiwgInNldHRpbmdzXzEiLCAidXRpbHMiLCAiRmFzdEdsb2IiLCAic291cmNlIiwgIm9wdGlvbnMiLCAiYXNzZXJ0UGF0dGVybnNJbnB1dCIsICJ3b3JrcyIsICJnZXRXb3JrcyIsICJyZXN1bHQiLCAic3luYyIsICJzdHJlYW0iLCAiZ2VuZXJhdGVUYXNrcyIsICJwYXR0ZXJucyIsICJzZXR0aW5ncyIsICJpc0R5bmFtaWNQYXR0ZXJuIiwgImVzY2FwZVBhdGgiLCAiX1Byb3ZpZGVyIiwgInRhc2tzIiwgInByb3ZpZGVyIiwgImlucHV0IiwgIml0ZW0iLCAiZHVja2RiX25vZGVfZWhfd29ya2VyX2V4cG9ydHMiLCAiX19leHBvcnQiLCAicmVnaXN0ZXJXb3JrZXIiLCAiX190b0NvbW1vbkpTIiwgImFycm93IiwgImFycm93VG9TUUxUeXBlIiwgInR5cGUiLCAiZGVjIiwgImMiLCAiYXJyb3dUb1NRTEZpZWxkIiwgIm1hcF8iLCAibmFtZSIsICJ0IiwgIkFzeW5jRHVja0RCRGlzcGF0Y2hlciIsICJlbnRyeSIsICJyZXF1ZXN0IiwgIm9iaiIsICJwIiwgImNvbm4iLCAiXyIsICJjIiwgInJlc3VsdCIsICJ0cmFuc2ZlciIsICJpbmZvcyIsICJidWZmZXIiLCAiaW1wb3J0X21ldGEiLCAiRHVja0RCIiwgIl9zY3JpcHREaXIiLCAiTW9kdWxlIiwgInJlYWR5UHJvbWlzZVJlc29sdmUiLCAicmVhZHlQcm9taXNlUmVqZWN0IiwgInJlc29sdmUiLCAicmVqZWN0IiwgImFib3J0IiwgIm1vZHVsZU92ZXJyaWRlcyIsICJhcmd1bWVudHNfIiwgInRoaXNQcm9ncmFtIiwgInF1aXRfIiwgInN0YXR1cyIsICJ0b1Rocm93IiwgIkVOVklST05NRU5UX0lTX1dFQiIsICJFTlZJUk9OTUVOVF9JU19XT1JLRVIiLCAiRU5WSVJPTk1FTlRfSVNfTk9ERSIsICJFTlZJUk9OTUVOVF9JU19TSEVMTCIsICJzY3JpcHREaXJlY3RvcnkiLCAibG9jYXRlRmlsZSIsICJwYXRoIiwgInJlYWRfIiwgInJlYWRBc3luYyIsICJyZWFkQmluYXJ5IiwgInNldFdpbmRvd1RpdGxlIiwgImxvZ0V4Y2VwdGlvbk9uRXhpdCIsICJlIiwgIkV4aXRTdGF0dXMiLCAidG9Mb2ciLCAiZXJyIiwgImZzIiwgIm5vZGVQYXRoIiwgInJlcXVpcmVOb2RlRlMiLCAiZmlsZW5hbWUiLCAiYmluYXJ5IiwgInJldCIsICJhc3NlcnQiLCAib25sb2FkIiwgIm9uZXJyb3IiLCAiZGF0YSIsICJleCIsICJyZWFzb24iLCAia2VlcFJ1bnRpbWVBbGl2ZSIsICJmIiwgInVybCIsICJ4aHIiLCAidGl0bGUiLCAib3V0IiwgImNoZWNrSW5jb21pbmdNb2R1bGVBUEkiLCAibGVnYWN5TW9kdWxlUHJvcCIsICJJREJGUyIsICJQUk9YWUZTIiwgIldPUktFUkZTIiwgIk5PREVGUyIsICJhbGlnbk1lbW9yeSIsICJTVEFDS19BTElHTiIsICJQT0lOVEVSX1NJWkUiLCAiZ2V0TmF0aXZlVHlwZVNpemUiLCAidHlwZSIsICJiaXRzIiwgIndhcm5PbmNlIiwgInRleHQiLCAidWxlYjEyOEVuY29kZSIsICJuIiwgImNvbnZlcnRKc0Z1bmN0aW9uVG9XYXNtIiwgImZ1bmMiLCAic2lnIiwgInR5cGVOYW1lcyIsICJpIiwgInR5cGVTZWN0aW9uIiwgInNpZ1JldCIsICJzaWdQYXJhbSIsICJ0eXBlQ29kZXMiLCAiYnl0ZXMiLCAibW9kdWxlIiwgImluc3RhbmNlIiwgIndyYXBwZWRGdW5jIiwgImZyZWVUYWJsZUluZGV4ZXMiLCAiZnVuY3Rpb25zSW5UYWJsZU1hcCIsICJnZXRFbXB0eVRhYmxlU2xvdCIsICJ3YXNtVGFibGUiLCAidXBkYXRlVGFibGVNYXAiLCAib2Zmc2V0IiwgImNvdW50IiwgIml0ZW0iLCAiZ2V0V2FzbVRhYmxlRW50cnkiLCAiYWRkRnVuY3Rpb24iLCAic2V0V2FzbVRhYmxlRW50cnkiLCAid3JhcHBlZCIsICJyZW1vdmVGdW5jdGlvbiIsICJpbmRleCIsICJwcm9wIiwgIm5ld05hbWUiLCAiaWdub3JlZE1vZHVsZVByb3AiLCAidW5leHBvcnRlZE1lc3NhZ2UiLCAic3ltIiwgImlzRlNTeWJvbCIsICJtc2ciLCAidW5leHBvcnRlZFJ1bnRpbWVTeW1ib2wiLCAidW5leHBvcnRlZFJ1bnRpbWVGdW5jdGlvbiIsICJ0ZW1wUmV0MCIsICJzZXRUZW1wUmV0MCIsICJ2YWx1ZSIsICJnZXRUZW1wUmV0MCIsICJ3YXNtQmluYXJ5IiwgIm5vRXhpdFJ1bnRpbWUiLCAic2V0VmFsdWUiLCAicHRyIiwgIm5vU2FmZSIsICJIRUFQOCIsICJIRUFQMTYiLCAiSEVBUDMyIiwgInRlbXBJNjQiLCAidGVtcERvdWJsZSIsICJIRUFQRjMyIiwgIkhFQVBGNjQiLCAiU0FGRV9IRUFQX1NUT1JFIiwgIlNBRkVfSEVBUF9TVE9SRV9EIiwgImdldFZhbHVlIiwgIlNBRkVfSEVBUF9MT0FEIiwgIlNBRkVfSEVBUF9MT0FEX0QiLCAiZ2V0U2FmZUhlYXBUeXBlIiwgImlzRmxvYXQiLCAiZGVzdCIsICJydW50aW1lSW5pdGlhbGl6ZWQiLCAiYnJrIiwgIl9zYnJrIiwgIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlIiwgInVuc2lnbmVkIiwgInVuU2lnbiIsICJTQUZFX0ZUX01BU0siLCAibWFzayIsICJzZWdmYXVsdCIsICJhbGlnbmZhdWx0IiwgIndhc21NZW1vcnkiLCAiQUJPUlQiLCAiRVhJVFNUQVRVUyIsICJjb25kaXRpb24iLCAiZ2V0Q0Z1bmMiLCAiaWRlbnQiLCAiY2NhbGwiLCAicmV0dXJuVHlwZSIsICJhcmdUeXBlcyIsICJhcmdzIiwgIm9wdHMiLCAidG9DIiwgInN0ciIsICJsZW4iLCAic3RhY2tBbGxvYyIsICJzdHJpbmdUb1VURjgiLCAiYXJyIiwgIndyaXRlQXJyYXlUb01lbW9yeSIsICJjb252ZXJ0UmV0dXJuVmFsdWUiLCAiVVRGOFRvU3RyaW5nIiwgImNBcmdzIiwgInN0YWNrIiwgImNvbnZlcnRlciIsICJzdGFja1NhdmUiLCAib25Eb25lIiwgInN0YWNrUmVzdG9yZSIsICJjd3JhcCIsICJBTExPQ19OT1JNQUwiLCAiQUxMT0NfU1RBQ0siLCAiYWxsb2NhdGUiLCAic2xhYiIsICJhbGxvY2F0b3IiLCAiX21hbGxvYyIsICJIRUFQVTgiLCAiVVRGOERlY29kZXIiLCAiVVRGOEFycmF5VG9TdHJpbmciLCAiaGVhcE9yQXJyYXkiLCAiaWR4IiwgIm1heEJ5dGVzVG9SZWFkIiwgImVuZElkeCIsICJlbmRQdHIiLCAidTAiLCAidTEiLCAidTIiLCAiY2giLCAic3RyaW5nVG9VVEY4QXJyYXkiLCAiaGVhcCIsICJvdXRJZHgiLCAibWF4Qnl0ZXNUb1dyaXRlIiwgInN0YXJ0SWR4IiwgInUiLCAib3V0UHRyIiwgImxlbmd0aEJ5dGVzVVRGOCIsICJBc2NpaVRvU3RyaW5nIiwgInN0cmluZ1RvQXNjaWkiLCAid3JpdGVBc2NpaVRvTWVtb3J5IiwgIlVURjE2RGVjb2RlciIsICJVVEYxNlRvU3RyaW5nIiwgIm1heElkeCIsICJjb2RlVW5pdCIsICJzdHJpbmdUb1VURjE2IiwgInN0YXJ0UHRyIiwgIm51bUNoYXJzVG9Xcml0ZSIsICJsZW5ndGhCeXRlc1VURjE2IiwgIlVURjMyVG9TdHJpbmciLCAidXRmMzIiLCAic3RyaW5nVG9VVEYzMiIsICJ0cmFpbFN1cnJvZ2F0ZSIsICJsZW5ndGhCeXRlc1VURjMyIiwgImFsbG9jYXRlVVRGOCIsICJzaXplIiwgImFsbG9jYXRlVVRGOE9uU3RhY2siLCAid3JpdGVTdHJpbmdUb01lbW9yeSIsICJzdHJpbmciLCAiYnVmZmVyIiwgImRvbnRBZGROdWxsIiwgImxhc3RDaGFyIiwgImVuZCIsICJhcnJheSIsICJIRUFQIiwgIkhFQVBVMTYiLCAiSEVBUFUzMiIsICJ1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyIsICJidWYiLCAiVE9UQUxfU1RBQ0siLCAiSU5JVElBTF9NRU1PUlkiLCAid3JpdGVTdGFja0Nvb2tpZSIsICJtYXgiLCAiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZCIsICJjaGVja1N0YWNrQ29va2llIiwgImNvb2tpZTEiLCAiY29va2llMiIsICJoMTYiLCAiaDgiLCAiX19BVFBSRVJVTl9fIiwgIl9fQVRJTklUX18iLCAiX19BVE1BSU5fXyIsICJfX0FURVhJVF9fIiwgIl9fQVRQT1NUUlVOX18iLCAicHJlUnVuIiwgImFkZE9uUHJlUnVuIiwgImNhbGxSdW50aW1lQ2FsbGJhY2tzIiwgImluaXRSdW50aW1lIiwgInByZU1haW4iLCAicG9zdFJ1biIsICJhZGRPblBvc3RSdW4iLCAiY2IiLCAiYWRkT25Jbml0IiwgImFkZE9uUHJlTWFpbiIsICJhZGRPbkV4aXQiLCAicnVuRGVwZW5kZW5jaWVzIiwgInJ1bkRlcGVuZGVuY3lXYXRjaGVyIiwgImRlcGVuZGVuY2llc0Z1bGZpbGxlZCIsICJydW5EZXBlbmRlbmN5VHJhY2tpbmciLCAiZ2V0VW5pcXVlUnVuRGVwZW5kZW5jeSIsICJpZCIsICJvcmlnIiwgImFkZFJ1bkRlcGVuZGVuY3kiLCAic2hvd24iLCAiZGVwIiwgInJlbW92ZVJ1bkRlcGVuZGVuY3kiLCAiY2FsbGJhY2siLCAid2hhdCIsICJkYXRhVVJJUHJlZml4IiwgImlzRGF0YVVSSSIsICJpc0ZpbGVVUkkiLCAiY3JlYXRlRXhwb3J0V3JhcHBlciIsICJuYW1lIiwgImZpeGVkYXNtIiwgImRpc3BsYXlOYW1lIiwgImFzbSIsICJ3YXNtQmluYXJ5RmlsZSIsICJnZXRCaW5hcnkiLCAiZmlsZSIsICJnZXRCaW5hcnlQcm9taXNlIiwgInJlc3BvbnNlIiwgImNyZWF0ZVdhc20iLCAiaW5mbyIsICJhc21MaWJyYXJ5QXJnIiwgInJlY2VpdmVJbnN0YW5jZSIsICJleHBvcnRzIiwgInRydWVNb2R1bGUiLCAicmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQiLCAicmVzdWx0IiwgImluc3RhbnRpYXRlQXJyYXlCdWZmZXIiLCAicmVjZWl2ZXIiLCAiaW5zdGFudGlhdGVBc3luYyIsICJBU01fQ09OU1RTIiwgImNhbGxiYWNrcyIsICJ3aXRoU3RhY2tTYXZlIiwgImRlbWFuZ2xlIiwgImRlbWFuZ2xlQWxsIiwgInJlZ2V4IiwgIngiLCAieSIsICJ3YXNtVGFibGVNaXJyb3IiLCAiZnVuY1B0ciIsICJoYW5kbGVFeGNlcHRpb24iLCAianNTdGFja1RyYWNlIiwgImVycm9yIiwgInN0YWNrVHJhY2UiLCAianMiLCAiX19fYXNzZXJ0X2ZhaWwiLCAibGluZSIsICJTWVNDQUxMUyIsICJzdHJlYW0iLCAiY3VyciIsICJfX19zeXNjYWxsX19uZXdzZWxlY3QiLCAibmZkcyIsICJyZWFkZmRzIiwgIndyaXRlZmRzIiwgImV4Y2VwdGZkcyIsICJ0aW1lb3V0IiwgIlNPQ0tGUyIsICJGUyIsICJnZXRTb2NrZXRGcm9tRkQiLCAiZmQiLCAic29ja2V0IiwgInNldEVyck5vIiwgIl9fX2Vycm5vX2xvY2F0aW9uIiwgIlNvY2tldHMiLCAiaW5ldE50b3A0IiwgImFkZHIiLCAiaW5ldE50b3A2IiwgImludHMiLCAid29yZCIsICJsb25nZXN0IiwgImxhc3R6ZXJvIiwgInpzdGFydCIsICJwYXJ0cyIsICJoYXNpcHY0IiwgInY0cGFydCIsICJfbnRvaHMiLCAicmVhZFNvY2thZGRyIiwgInNhIiwgInNhbGVuIiwgImZhbWlseSIsICJwb3J0IiwgImluZXRQdG9uNCIsICJiIiwgInRtcCIsICJqc3RvaV9xIiwgImluZXRQdG9uNiIsICJ3b3JkcyIsICJ3IiwgInoiLCAidmFsaWQ2cmVneCIsICJfaHRvbnMiLCAiRE5TIiwgInJlcyIsICJnZXRTb2NrZXRBZGRyZXNzIiwgImFkZHJwIiwgImFkZHJsZW4iLCAiYWxsb3dOdWxsIiwgIl9fX3N5c2NhbGxfYmluZCIsICJzb2NrIiwgIl9fX3N5c2NhbGxfY29ubmVjdCIsICJfX19zeXNjYWxsX2ZhY2Nlc3NhdCIsICJkaXJmZCIsICJhbW9kZSIsICJmbGFncyIsICJfX19zeXNjYWxsX2ZjbnRsNjQiLCAiY21kIiwgInZhcmFyZ3MiLCAiX19fc3lzY2FsbF9mc3RhdDY0IiwgIl9fX3N5c2NhbGxfZnRydW5jYXRlNjQiLCAibGVuZ3RoX2xvdyIsICJsZW5ndGhfaGlnaCIsICJfX19zeXNjYWxsX2dldGRlbnRzNjQiLCAiZGlycCIsICJ6ZXJvTWVtb3J5IiwgImFkZHJlc3MiLCAid3JpdGVTb2NrYWRkciIsICJfX19zeXNjYWxsX2dldHBlZXJuYW1lIiwgImVycm5vIiwgIl9fX3N5c2NhbGxfZ2V0c29ja29wdCIsICJsZXZlbCIsICJvcHRuYW1lIiwgIm9wdHZhbCIsICJvcHRsZW4iLCAiX19fc3lzY2FsbF9pb2N0bCIsICJvcCIsICJfX19zeXNjYWxsX2xzdGF0NjQiLCAiX19fc3lzY2FsbF9ta2RpcmF0IiwgIm1vZGUiLCAiX19fc3lzY2FsbF9uZXdmc3RhdGF0IiwgIl9fX3N5c2NhbGxfb3BlbmF0IiwgIl9fX3N5c2NhbGxfcmVjdmZyb20iLCAiX19fc3lzY2FsbF9yZW5hbWVhdCIsICJvbGRkaXJmZCIsICJvbGRwYXRoIiwgIm5ld2RpcmZkIiwgIm5ld3BhdGgiLCAiX19fc3lzY2FsbF9ybWRpciIsICJfX19zeXNjYWxsX3NlbmR0byIsICJtZXNzYWdlIiwgImxlbmd0aCIsICJhZGRyX2xlbiIsICJfX19zeXNjYWxsX3NvY2tldCIsICJkb21haW4iLCAicHJvdG9jb2wiLCAiX19fc3lzY2FsbF9zdGF0NjQiLCAiX19fc3lzY2FsbF91bmxpbmthdCIsICJfX2RsaW5pdCIsICJtYWluX2Rzb19oYW5kbGUiLCAiZGxvcGVuTWlzc2luZ0Vycm9yIiwgIl9fZGxvcGVuX2pzIiwgImZsYWciLCAiX19kbHN5bV9qcyIsICJoYW5kbGUiLCAic3ltYm9sIiwgIl9fZW1zY3JpcHRlbl9kYXRlX25vdyIsICJub3dJc01vbm90b25pYyIsICJfX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMiLCAiX2Fib3J0IiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9jcmVhdGUiLCAicGF0aExlbiIsICJfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfZXhpc3RzIiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9saXN0X2ZpbGVzIiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9yZW1vdmUiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9jbG9zZSIsICJmaWxlSWQiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9leGlzdHMiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9nZXRfbGFzdF9tb2RpZmllZF90aW1lIiwgIl9kdWNrZGJfd2ViX2ZzX2ZpbGVfbW92ZSIsICJmcm9tIiwgImZyb21MZW4iLCAidG8iLCAidG9MZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9vcGVuIiwgIl9kdWNrZGJfd2ViX2ZzX2ZpbGVfcmVhZCIsICJsb2NhdGlvbiIsICJfZHVja2RiX3dlYl9mc19maWxlX3RydW5jYXRlIiwgIm5ld1NpemUiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV93cml0ZSIsICJfZHVja2RiX3dlYl9mc19nbG9iIiwgIl9kdWNrZGJfd2ViX3Rlc3RfcGxhdGZvcm1fZmVhdHVyZSIsICJmZWF0dXJlIiwgIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY2FsbCIsICJmdW5jSWQiLCAiZGVzY1B0ciIsICJkZXNjU2l6ZSIsICJwdHJzUHRyIiwgInB0cnNTaXplIiwgIl9lbXNjcmlwdGVuX2NvbnNvbGVfZXJyb3IiLCAiX2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfbWF4IiwgIl9lbXNjcmlwdGVuX2dldF9ub3ciLCAidCIsICJfZW1zY3JpcHRlbl9tZW1jcHlfYmlnIiwgInNyYyIsICJudW0iLCAiZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlciIsICJfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCIsICJyZXF1ZXN0ZWRTaXplIiwgIm9sZFNpemUiLCAibWF4SGVhcFNpemUiLCAiYWxpZ25VcCIsICJtdWx0aXBsZSIsICJjdXREb3duIiwgIm92ZXJHcm93bkhlYXBTaXplIiwgInJlcGxhY2VtZW50IiwgIkVOViIsICJnZXRFeGVjdXRhYmxlTmFtZSIsICJnZXRFbnZTdHJpbmdzIiwgImxhbmciLCAiZW52IiwgInN0cmluZ3MiLCAiX2Vudmlyb25fZ2V0IiwgIl9fZW52aXJvbiIsICJlbnZpcm9uX2J1ZiIsICJidWZTaXplIiwgIl9lbnZpcm9uX3NpemVzX2dldCIsICJwZW52aXJvbl9jb3VudCIsICJwZW52aXJvbl9idWZfc2l6ZSIsICJfZmRfY2xvc2UiLCAiX2ZkX3ByZWFkIiwgImlvdiIsICJpb3ZjbnQiLCAib2Zmc2V0X2xvdyIsICJvZmZzZXRfaGlnaCIsICJwbnVtIiwgIl9mZF9wd3JpdGUiLCAiX2ZkX3JlYWQiLCAiX2ZkX3NlZWsiLCAid2hlbmNlIiwgIm5ld09mZnNldCIsICJfZmRfc3luYyIsICJmbHVzaF9OT19GSUxFU1lTVEVNIiwgIl9fX3N0ZGlvX2V4aXQiLCAiYnVmZmVycyIsICJfZmRfd3JpdGUiLCAiaiIsICJfZ2V0YWRkcmluZm8iLCAibm9kZSIsICJzZXJ2aWNlIiwgImhpbnQiLCAiYWRkcnMiLCAiY2Fub24iLCAicHJvdG8iLCAiYWkiLCAibGFzdCIsICJhbGxvY2FkZHJpbmZvIiwgIl9odG9ubCIsICJnZXRSYW5kb21EZXZpY2UiLCAicmFuZG9tQnVmZmVyIiwgImNyeXB0b19tb2R1bGUiLCAiX2dldGVudHJvcHkiLCAiX2dldG5hbWVpbmZvIiwgIm5vZGVsZW4iLCAic2VydiIsICJzZXJ2bGVuIiwgIm92ZXJmbG93ZWQiLCAibG9va3VwIiwgIm51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsIiwgIl9zZXRUZW1wUmV0MCIsICJ2YWwiLCAiX19pc0xlYXBZZWFyIiwgInllYXIiLCAiX19hcnJheVN1bSIsICJzdW0iLCAiX19NT05USF9EQVlTX0xFQVAiLCAiX19NT05USF9EQVlTX1JFR1VMQVIiLCAiX19hZGREYXlzIiwgImRhdGUiLCAiZGF5cyIsICJuZXdEYXRlIiwgImxlYXAiLCAiY3VycmVudE1vbnRoIiwgImRheXNJbkN1cnJlbnRNb250aCIsICJfc3RyZnRpbWUiLCAicyIsICJtYXhzaXplIiwgImZvcm1hdCIsICJ0bSIsICJ0bV96b25lIiwgInBhdHRlcm4iLCAiRVhQQU5TSU9OX1JVTEVTXzEiLCAicnVsZSIsICJXRUVLREFZUyIsICJNT05USFMiLCAibGVhZGluZ1NvbWV0aGluZyIsICJkaWdpdHMiLCAiY2hhcmFjdGVyIiwgImxlYWRpbmdOdWxscyIsICJjb21wYXJlQnlEYXkiLCAiZGF0ZTEiLCAiZGF0ZTIiLCAic2duIiwgImNvbXBhcmUiLCAiZ2V0Rmlyc3RXZWVrU3RhcnREYXRlIiwgImphbkZvdXJ0aCIsICJnZXRXZWVrQmFzZWRZZWFyIiwgInRoaXNEYXRlIiwgImphbkZvdXJ0aFRoaXNZZWFyIiwgImphbkZvdXJ0aE5leHRZZWFyIiwgImZpcnN0V2Vla1N0YXJ0VGhpc1llYXIiLCAiZmlyc3RXZWVrU3RhcnROZXh0WWVhciIsICJFWFBBTlNJT05fUlVMRVNfMiIsICJ0d2VsdmVIb3VyIiwgImphbjEiLCAiZGVjMzEiLCAib2ZmIiwgImFoZWFkIiwgImludEFycmF5RnJvbVN0cmluZyIsICJfc3RyZnRpbWVfbCIsICJBU1NFUlRJT05TIiwgInN0cmluZ3kiLCAidThhcnJheSIsICJudW1CeXRlc1dyaXR0ZW4iLCAiaW50QXJyYXlUb1N0cmluZyIsICJjaHIiLCAiX19fd2FzbV9jYWxsX2N0b3JzIiwgIl9tYWluIiwgIl9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGgiLCAiX2R1Y2tkYl93ZWJfY2xlYXJfcmVzcG9uc2UiLCAiX2R1Y2tkYl93ZWJfZmFpbF93aXRoIiwgIl9kdWNrZGJfd2ViX3Jlc2V0IiwgIl9kdWNrZGJfd2ViX2Nvbm5lY3QiLCAiX2R1Y2tkYl93ZWJfZGlzY29ubmVjdCIsICJfZHVja2RiX3dlYl9mbHVzaF9maWxlcyIsICJfZHVja2RiX3dlYl9mbHVzaF9maWxlIiwgIl9kdWNrZGJfd2ViX29wZW4iLCAiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm8iLCAiX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzIiwgIl9kdWNrZGJfd2ViX2V4cG9ydF9maWxlX3N0YXRzIiwgIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZSIsICJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzIiwgIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvcyIsICJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkIiwgIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZSIsICJfZHVja2RiX3dlYl9mc19zZXRfZmlsZV9kZXNjcmlwdG9yIiwgIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsIiwgIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfYnVmZmVyIiwgIl9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXIiLCAiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGgiLCAiX2R1Y2tkYl93ZWJfZ2V0X3ZlcnNpb24iLCAiX2R1Y2tkYl93ZWJfZ2V0X2ZlYXR1cmVfZmxhZ3MiLCAiX2R1Y2tkYl93ZWJfdG9rZW5pemUiLCAiX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jcmVhdGUiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlIiwgIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlIiwgIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1biIsICJfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kIiwgIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1biIsICJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0IiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbCIsICJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbCIsICJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzIiwgIl9kdWNrZGJfd2ViX2dldF90YWJsZW5hbWVzIiwgIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW0iLCAiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGgiLCAiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoIiwgIl9fX2RsX3NldGVyciIsICJfZnJlZSIsICJfZW1zY3JpcHRlbl9nZXRfc2Jya19wdHIiLCAiX3NldFRocmV3IiwgIl9lbXNjcmlwdGVuX3N0YWNrX2luaXQiLCAiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2ZyZWUiLCAiZHluQ2FsbF9qaWppIiwgImR5bkNhbGxfaWlpaWlqIiwgImR5bkNhbGxfaWlpaWlqaiIsICJkeW5DYWxsX2lpaWlpaWpqIiwgImR5bkNhbGxfdmlpamlpIiwgImR5bkNhbGxfdmlpaiIsICJkeW5DYWxsX3ZpaWpqaSIsICJkeW5DYWxsX3ZpaWpqIiwgImR5bkNhbGxfdmlpaWpqIiwgImR5bkNhbGxfdmlpaWoiLCAiZHluQ2FsbF92aWlqaWoiLCAiZHluQ2FsbF92aWlqaSIsICJkeW5DYWxsX2ppIiwgImR5bkNhbGxfamlpaWlpIiwgImR5bkNhbGxfdmlqIiwgImR5bkNhbGxfaiIsICJkeW5DYWxsX2ppaSIsICJkeW5DYWxsX2ppaWkiLCAiZHluQ2FsbF9qaWoiLCAiZHluQ2FsbF9paWoiLCAiZHluQ2FsbF9paWlpaWppIiwgImR5bkNhbGxfamlpaWlqIiwgImR5bkNhbGxfamlqamlqIiwgImR5bkNhbGxfaWpqaiIsICJkeW5DYWxsX2pqamQiLCAiZHluQ2FsbF9qampqampkIiwgImR5bkNhbGxfdmpqaWppaiIsICJkeW5DYWxsX3ZpampqaSIsICJkeW5DYWxsX3ZqamlpIiwgImR5bkNhbGxfdmlpaWlpamkiLCAiZHluQ2FsbF9qaWlpamkiLCAiZHluQ2FsbF9qaWlpaiIsICJkeW5DYWxsX2lpaWoiLCAiZHluQ2FsbF92aWpqaiIsICJkeW5DYWxsX2ppaWppaSIsICJkeW5DYWxsX2ppamlpaSIsICJkeW5DYWxsX3ZpaWppaWlpaSIsICJkeW5DYWxsX3ZpaWppaWlqIiwgImR5bkNhbGxfdmlqaWlpamkiLCAiZHluQ2FsbF92aWlpaWoiLCAiZHluQ2FsbF9qaWlqaSIsICJkeW5DYWxsX3ZpaWlqaWoiLCAiZHluQ2FsbF92aWlqaWlqIiwgImR5bkNhbGxfdmlpaWlpamoiLCAiZHluQ2FsbF92aWlpamppIiwgImR5bkNhbGxfdmlqaWkiLCAiZHluQ2FsbF9qaWlpaSIsICJkeW5DYWxsX3ZpaWlqaWlpaWpqIiwgImR5bkNhbGxfamlpaWpqIiwgImR5bkNhbGxfdmlpaWppIiwgImR5bkNhbGxfdmlpaWlqaSIsICJkeW5DYWxsX2ppaWoiLCAiZHluQ2FsbF9qaWppaWlpIiwgImR5bkNhbGxfdmlpaWppamkiLCAiY2FsbGVkUnVuIiwgImNhbGxlZE1haW4iLCAicnVuQ2FsbGVyIiwgInJ1biIsICJjYWxsTWFpbiIsICJlbnRyeUZ1bmN0aW9uIiwgImFyZ2MiLCAiYXJndiIsICJleGl0IiwgInN0YWNrQ2hlY2tJbml0IiwgImRvUnVuIiwgInNob3VsZFJ1bk5vdyIsICJjaGVja1VuZmx1c2hlZENvbnRlbnQiLCAib2xkT3V0IiwgIm9sZEVyciIsICJoYXMiLCAiZmx1c2giLCAiaW1wbGljaXQiLCAicHJvY0V4aXQiLCAiY29kZSIsICJkdWNrZGJfZWhfZGVmYXVsdCIsICJpbXBvcnRfbWV0YSIsICJEdWNrREIiLCAiX3NjcmlwdERpciIsICJNb2R1bGUiLCAicmVhZHlQcm9taXNlUmVzb2x2ZSIsICJyZWFkeVByb21pc2VSZWplY3QiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiYWJvcnQiLCAibW9kdWxlT3ZlcnJpZGVzIiwgImFyZ3VtZW50c18iLCAidGhpc1Byb2dyYW0iLCAicXVpdF8iLCAic3RhdHVzIiwgInRvVGhyb3ciLCAiRU5WSVJPTk1FTlRfSVNfV0VCIiwgIkVOVklST05NRU5UX0lTX1dPUktFUiIsICJFTlZJUk9OTUVOVF9JU19OT0RFIiwgIkVOVklST05NRU5UX0lTX1NIRUxMIiwgInNjcmlwdERpcmVjdG9yeSIsICJsb2NhdGVGaWxlIiwgInBhdGgiLCAicmVhZF8iLCAicmVhZEFzeW5jIiwgInJlYWRCaW5hcnkiLCAic2V0V2luZG93VGl0bGUiLCAibG9nRXhjZXB0aW9uT25FeGl0IiwgImUiLCAiRXhpdFN0YXR1cyIsICJ0b0xvZyIsICJlcnIiLCAiZnMiLCAibm9kZVBhdGgiLCAicmVxdWlyZU5vZGVGUyIsICJmaWxlbmFtZSIsICJiaW5hcnkiLCAicmV0IiwgImFzc2VydCIsICJvbmxvYWQiLCAib25lcnJvciIsICJkYXRhIiwgImV4IiwgInJlYXNvbiIsICJrZWVwUnVudGltZUFsaXZlIiwgImYiLCAidXJsIiwgInhociIsICJ0aXRsZSIsICJvdXQiLCAiY2hlY2tJbmNvbWluZ01vZHVsZUFQSSIsICJsZWdhY3lNb2R1bGVQcm9wIiwgIklEQkZTIiwgIlBST1hZRlMiLCAiV09SS0VSRlMiLCAiTk9ERUZTIiwgImFsaWduTWVtb3J5IiwgIlNUQUNLX0FMSUdOIiwgIlBPSU5URVJfU0laRSIsICJnZXROYXRpdmVUeXBlU2l6ZSIsICJ0eXBlIiwgImJpdHMiLCAid2Fybk9uY2UiLCAidGV4dCIsICJ1bGViMTI4RW5jb2RlIiwgIm4iLCAiY29udmVydEpzRnVuY3Rpb25Ub1dhc20iLCAiZnVuYyIsICJzaWciLCAidHlwZU5hbWVzIiwgImkiLCAidHlwZVNlY3Rpb24iLCAic2lnUmV0IiwgInNpZ1BhcmFtIiwgInR5cGVDb2RlcyIsICJieXRlcyIsICJtb2R1bGUiLCAiaW5zdGFuY2UiLCAid3JhcHBlZEZ1bmMiLCAiZnJlZVRhYmxlSW5kZXhlcyIsICJmdW5jdGlvbnNJblRhYmxlTWFwIiwgImdldEVtcHR5VGFibGVTbG90IiwgIndhc21UYWJsZSIsICJ1cGRhdGVUYWJsZU1hcCIsICJvZmZzZXQiLCAiY291bnQiLCAiaXRlbSIsICJnZXRXYXNtVGFibGVFbnRyeSIsICJhZGRGdW5jdGlvbiIsICJzZXRXYXNtVGFibGVFbnRyeSIsICJ3cmFwcGVkIiwgInJlbW92ZUZ1bmN0aW9uIiwgImluZGV4IiwgInByb3AiLCAibmV3TmFtZSIsICJpZ25vcmVkTW9kdWxlUHJvcCIsICJ1bmV4cG9ydGVkTWVzc2FnZSIsICJzeW0iLCAiaXNGU1N5Ym9sIiwgIm1zZyIsICJ1bmV4cG9ydGVkUnVudGltZVN5bWJvbCIsICJ1bmV4cG9ydGVkUnVudGltZUZ1bmN0aW9uIiwgInRlbXBSZXQwIiwgInNldFRlbXBSZXQwIiwgInZhbHVlIiwgImdldFRlbXBSZXQwIiwgIndhc21CaW5hcnkiLCAibm9FeGl0UnVudGltZSIsICJzZXRWYWx1ZSIsICJwdHIiLCAibm9TYWZlIiwgIkhFQVA4IiwgIkhFQVAxNiIsICJIRUFQMzIiLCAidGVtcEk2NCIsICJ0ZW1wRG91YmxlIiwgIkhFQVBGMzIiLCAiSEVBUEY2NCIsICJTQUZFX0hFQVBfU1RPUkUiLCAiU0FGRV9IRUFQX1NUT1JFX0QiLCAiZ2V0VmFsdWUiLCAiU0FGRV9IRUFQX0xPQUQiLCAiU0FGRV9IRUFQX0xPQURfRCIsICJnZXRTYWZlSGVhcFR5cGUiLCAiaXNGbG9hdCIsICJkZXN0IiwgInJ1bnRpbWVJbml0aWFsaXplZCIsICJicmsiLCAiX3NicmsiLCAiX2Vtc2NyaXB0ZW5fc3RhY2tfZ2V0X2Jhc2UiLCAidW5zaWduZWQiLCAidW5TaWduIiwgIlNBRkVfRlRfTUFTSyIsICJtYXNrIiwgInNlZ2ZhdWx0IiwgImFsaWduZmF1bHQiLCAid2FzbU1lbW9yeSIsICJBQk9SVCIsICJFWElUU1RBVFVTIiwgImNvbmRpdGlvbiIsICJnZXRDRnVuYyIsICJpZGVudCIsICJjY2FsbCIsICJyZXR1cm5UeXBlIiwgImFyZ1R5cGVzIiwgImFyZ3MiLCAib3B0cyIsICJ0b0MiLCAic3RyIiwgImxlbiIsICJzdGFja0FsbG9jIiwgInN0cmluZ1RvVVRGOCIsICJhcnIiLCAid3JpdGVBcnJheVRvTWVtb3J5IiwgImNvbnZlcnRSZXR1cm5WYWx1ZSIsICJVVEY4VG9TdHJpbmciLCAiY0FyZ3MiLCAic3RhY2siLCAiY29udmVydGVyIiwgInN0YWNrU2F2ZSIsICJvbkRvbmUiLCAic3RhY2tSZXN0b3JlIiwgImN3cmFwIiwgIkFMTE9DX05PUk1BTCIsICJBTExPQ19TVEFDSyIsICJhbGxvY2F0ZSIsICJzbGFiIiwgImFsbG9jYXRvciIsICJfbWFsbG9jIiwgIkhFQVBVOCIsICJVVEY4RGVjb2RlciIsICJVVEY4QXJyYXlUb1N0cmluZyIsICJoZWFwT3JBcnJheSIsICJpZHgiLCAibWF4Qnl0ZXNUb1JlYWQiLCAiZW5kSWR4IiwgImVuZFB0ciIsICJ1MCIsICJ1MSIsICJ1MiIsICJjaCIsICJzdHJpbmdUb1VURjhBcnJheSIsICJoZWFwIiwgIm91dElkeCIsICJtYXhCeXRlc1RvV3JpdGUiLCAic3RhcnRJZHgiLCAidSIsICJvdXRQdHIiLCAibGVuZ3RoQnl0ZXNVVEY4IiwgIkFzY2lpVG9TdHJpbmciLCAic3RyaW5nVG9Bc2NpaSIsICJ3cml0ZUFzY2lpVG9NZW1vcnkiLCAiVVRGMTZEZWNvZGVyIiwgIlVURjE2VG9TdHJpbmciLCAibWF4SWR4IiwgImNvZGVVbml0IiwgInN0cmluZ1RvVVRGMTYiLCAic3RhcnRQdHIiLCAibnVtQ2hhcnNUb1dyaXRlIiwgImxlbmd0aEJ5dGVzVVRGMTYiLCAiVVRGMzJUb1N0cmluZyIsICJ1dGYzMiIsICJzdHJpbmdUb1VURjMyIiwgInRyYWlsU3Vycm9nYXRlIiwgImxlbmd0aEJ5dGVzVVRGMzIiLCAiYWxsb2NhdGVVVEY4IiwgInNpemUiLCAiYWxsb2NhdGVVVEY4T25TdGFjayIsICJ3cml0ZVN0cmluZ1RvTWVtb3J5IiwgInN0cmluZyIsICJidWZmZXIiLCAiZG9udEFkZE51bGwiLCAibGFzdENoYXIiLCAiZW5kIiwgImFycmF5IiwgIkhFQVAiLCAiSEVBUFUxNiIsICJIRUFQVTMyIiwgInVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzIiwgImJ1ZiIsICJUT1RBTF9TVEFDSyIsICJJTklUSUFMX01FTU9SWSIsICJ3cml0ZVN0YWNrQ29va2llIiwgIm1heCIsICJfZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kIiwgImNoZWNrU3RhY2tDb29raWUiLCAiY29va2llMSIsICJjb29raWUyIiwgImgxNiIsICJoOCIsICJfX0FUUFJFUlVOX18iLCAiX19BVElOSVRfXyIsICJfX0FUTUFJTl9fIiwgIl9fQVRFWElUX18iLCAiX19BVFBPU1RSVU5fXyIsICJwcmVSdW4iLCAiYWRkT25QcmVSdW4iLCAiY2FsbFJ1bnRpbWVDYWxsYmFja3MiLCAiaW5pdFJ1bnRpbWUiLCAicHJlTWFpbiIsICJwb3N0UnVuIiwgImFkZE9uUG9zdFJ1biIsICJjYiIsICJhZGRPbkluaXQiLCAiYWRkT25QcmVNYWluIiwgImFkZE9uRXhpdCIsICJydW5EZXBlbmRlbmNpZXMiLCAicnVuRGVwZW5kZW5jeVdhdGNoZXIiLCAiZGVwZW5kZW5jaWVzRnVsZmlsbGVkIiwgInJ1bkRlcGVuZGVuY3lUcmFja2luZyIsICJnZXRVbmlxdWVSdW5EZXBlbmRlbmN5IiwgImlkIiwgIm9yaWciLCAiYWRkUnVuRGVwZW5kZW5jeSIsICJzaG93biIsICJkZXAiLCAicmVtb3ZlUnVuRGVwZW5kZW5jeSIsICJjYWxsYmFjayIsICJ3aGF0IiwgImRhdGFVUklQcmVmaXgiLCAiaXNEYXRhVVJJIiwgImlzRmlsZVVSSSIsICJjcmVhdGVFeHBvcnRXcmFwcGVyIiwgIm5hbWUiLCAiZml4ZWRhc20iLCAiZGlzcGxheU5hbWUiLCAiYXNtIiwgIndhc21CaW5hcnlGaWxlIiwgImdldEJpbmFyeSIsICJmaWxlIiwgImdldEJpbmFyeVByb21pc2UiLCAicmVzcG9uc2UiLCAiY3JlYXRlV2FzbSIsICJpbmZvIiwgImFzbUxpYnJhcnlBcmciLCAicmVjZWl2ZUluc3RhbmNlIiwgImV4cG9ydHMiLCAidHJ1ZU1vZHVsZSIsICJyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCIsICJyZXN1bHQiLCAiaW5zdGFudGlhdGVBcnJheUJ1ZmZlciIsICJyZWNlaXZlciIsICJpbnN0YW50aWF0ZUFzeW5jIiwgIkFTTV9DT05TVFMiLCAiY2FsbGJhY2tzIiwgIndpdGhTdGFja1NhdmUiLCAiZGVtYW5nbGUiLCAiZGVtYW5nbGVBbGwiLCAicmVnZXgiLCAieCIsICJ5IiwgIndhc21UYWJsZU1pcnJvciIsICJmdW5jUHRyIiwgImhhbmRsZUV4Y2VwdGlvbiIsICJqc1N0YWNrVHJhY2UiLCAiZXJyb3IiLCAic3RhY2tUcmFjZSIsICJqcyIsICJfX19hc3NlcnRfZmFpbCIsICJsaW5lIiwgIl9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24iLCAiZXhjZXB0aW9uQ2F1Z2h0IiwgImV4Y2VwdGlvbl9hZGRSZWYiLCAidW5jYXVnaHRFeGNlcHRpb25Db3VudCIsICJfX19jeGFfYmVnaW5fY2F0Y2giLCAiRXhjZXB0aW9uSW5mbyIsICJleGNlcHRpb25MYXN0IiwgImV4Y1B0ciIsICJkZXN0cnVjdG9yIiwgInJlZmNvdW50IiwgImNhdWdodCIsICJyZXRocm93biIsICJwcmV2IiwgImFkanVzdGVkUHRyIiwgImlzUG9pbnRlciIsICJfX19jeGFfaXNfcG9pbnRlcl90eXBlIiwgImFkanVzdGVkIiwgIl9fX2N4YV9mcmVlX2V4Y2VwdGlvbiIsICJfZnJlZSIsICJleGNlcHRpb25fZGVjUmVmIiwgIl9fX2N4YV9lbmRfY2F0Y2giLCAiX3NldFRocmV3IiwgIl9fX3Jlc3VtZUV4Y2VwdGlvbiIsICJfX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF8yIiwgInRocm93biIsICJ0aHJvd25UeXBlIiwgInR5cGVBcnJheSIsICJjYXVnaHRUeXBlIiwgImFkanVzdGVkX3B0cl9hZGRyIiwgIl9fX2N4YV9jYW5fY2F0Y2giLCAiX19fY3hhX2ZpbmRfbWF0Y2hpbmdfY2F0Y2hfMyIsICJfX19jeGFfZmluZF9tYXRjaGluZ19jYXRjaF80IiwgIl9fX2N4YV9maW5kX21hdGNoaW5nX2NhdGNoXzUiLCAiX19fY3hhX3JldGhyb3ciLCAiX19fY3hhX3Rocm93IiwgIl9fX2N4YV91bmNhdWdodF9leGNlcHRpb25zIiwgIlNZU0NBTExTIiwgInN0cmVhbSIsICJjdXJyIiwgIl9fX3N5c2NhbGxfX25ld3NlbGVjdCIsICJuZmRzIiwgInJlYWRmZHMiLCAid3JpdGVmZHMiLCAiZXhjZXB0ZmRzIiwgInRpbWVvdXQiLCAiU09DS0ZTIiwgIkZTIiwgImdldFNvY2tldEZyb21GRCIsICJmZCIsICJzb2NrZXQiLCAic2V0RXJyTm8iLCAiX19fZXJybm9fbG9jYXRpb24iLCAiU29ja2V0cyIsICJpbmV0TnRvcDQiLCAiYWRkciIsICJpbmV0TnRvcDYiLCAiaW50cyIsICJ3b3JkIiwgImxvbmdlc3QiLCAibGFzdHplcm8iLCAienN0YXJ0IiwgInBhcnRzIiwgImhhc2lwdjQiLCAidjRwYXJ0IiwgIl9udG9ocyIsICJyZWFkU29ja2FkZHIiLCAic2EiLCAic2FsZW4iLCAiZmFtaWx5IiwgInBvcnQiLCAiaW5ldFB0b240IiwgImIiLCAidG1wIiwgImpzdG9pX3EiLCAiaW5ldFB0b242IiwgIndvcmRzIiwgInciLCAieiIsICJ2YWxpZDZyZWd4IiwgIl9odG9ucyIsICJETlMiLCAicmVzIiwgImdldFNvY2tldEFkZHJlc3MiLCAiYWRkcnAiLCAiYWRkcmxlbiIsICJhbGxvd051bGwiLCAiX19fc3lzY2FsbF9iaW5kIiwgInNvY2siLCAiX19fc3lzY2FsbF9jb25uZWN0IiwgIl9fX3N5c2NhbGxfZmFjY2Vzc2F0IiwgImRpcmZkIiwgImFtb2RlIiwgImZsYWdzIiwgIl9fX3N5c2NhbGxfZmNudGw2NCIsICJjbWQiLCAidmFyYXJncyIsICJfX19zeXNjYWxsX2ZzdGF0NjQiLCAiX19fc3lzY2FsbF9mdHJ1bmNhdGU2NCIsICJsZW5ndGhfbG93IiwgImxlbmd0aF9oaWdoIiwgIl9fX3N5c2NhbGxfZ2V0ZGVudHM2NCIsICJkaXJwIiwgInplcm9NZW1vcnkiLCAiYWRkcmVzcyIsICJ3cml0ZVNvY2thZGRyIiwgIl9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUiLCAiZXJybm8iLCAiX19fc3lzY2FsbF9nZXRzb2Nrb3B0IiwgImxldmVsIiwgIm9wdG5hbWUiLCAib3B0dmFsIiwgIm9wdGxlbiIsICJfX19zeXNjYWxsX2lvY3RsIiwgIm9wIiwgIl9fX3N5c2NhbGxfbHN0YXQ2NCIsICJfX19zeXNjYWxsX21rZGlyYXQiLCAibW9kZSIsICJfX19zeXNjYWxsX25ld2ZzdGF0YXQiLCAiX19fc3lzY2FsbF9vcGVuYXQiLCAiX19fc3lzY2FsbF9yZWN2ZnJvbSIsICJfX19zeXNjYWxsX3JlbmFtZWF0IiwgIm9sZGRpcmZkIiwgIm9sZHBhdGgiLCAibmV3ZGlyZmQiLCAibmV3cGF0aCIsICJfX19zeXNjYWxsX3JtZGlyIiwgIl9fX3N5c2NhbGxfc2VuZHRvIiwgIm1lc3NhZ2UiLCAibGVuZ3RoIiwgImFkZHJfbGVuIiwgIl9fX3N5c2NhbGxfc29ja2V0IiwgImRvbWFpbiIsICJwcm90b2NvbCIsICJfX19zeXNjYWxsX3N0YXQ2NCIsICJfX19zeXNjYWxsX3VubGlua2F0IiwgIl9fZGxpbml0IiwgIm1haW5fZHNvX2hhbmRsZSIsICJkbG9wZW5NaXNzaW5nRXJyb3IiLCAiX19kbG9wZW5fanMiLCAiZmxhZyIsICJfX2Rsc3ltX2pzIiwgImhhbmRsZSIsICJzeW1ib2wiLCAiX19lbXNjcmlwdGVuX2RhdGVfbm93IiwgIm5vd0lzTW9ub3RvbmljIiwgIl9fZW1zY3JpcHRlbl9nZXRfbm93X2lzX21vbm90b25pYyIsICJfYWJvcnQiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZSIsICJwYXRoTGVuIiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9leGlzdHMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlIiwgImZpbGVJZCIsICJfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyIsICJfZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWUiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlIiwgImZyb20iLCAiZnJvbUxlbiIsICJ0byIsICJ0b0xlbiIsICJfZHVja2RiX3dlYl9mc19maWxlX29wZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9yZWFkIiwgImxvY2F0aW9uIiwgIl9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUiLCAibmV3U2l6ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX3dyaXRlIiwgIl9kdWNrZGJfd2ViX2ZzX2dsb2IiLCAiX2R1Y2tkYl93ZWJfdGVzdF9wbGF0Zm9ybV9mZWF0dXJlIiwgImZlYXR1cmUiLCAiX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsIiwgImZ1bmNJZCIsICJkZXNjUHRyIiwgImRlc2NTaXplIiwgInB0cnNQdHIiLCAicHRyc1NpemUiLCAiX2Vtc2NyaXB0ZW5fY29uc29sZV9lcnJvciIsICJfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgiLCAiX2Vtc2NyaXB0ZW5fZ2V0X25vdyIsICJfZW1zY3JpcHRlbl9tZW1jcHlfYmlnIiwgInNyYyIsICJudW0iLCAiZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlciIsICJfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCIsICJyZXF1ZXN0ZWRTaXplIiwgIm9sZFNpemUiLCAibWF4SGVhcFNpemUiLCAiYWxpZ25VcCIsICJtdWx0aXBsZSIsICJjdXREb3duIiwgIm92ZXJHcm93bkhlYXBTaXplIiwgInJlcGxhY2VtZW50IiwgIkVOViIsICJnZXRFeGVjdXRhYmxlTmFtZSIsICJnZXRFbnZTdHJpbmdzIiwgImxhbmciLCAiZW52IiwgInN0cmluZ3MiLCAiX2Vudmlyb25fZ2V0IiwgIl9fZW52aXJvbiIsICJlbnZpcm9uX2J1ZiIsICJidWZTaXplIiwgIl9lbnZpcm9uX3NpemVzX2dldCIsICJwZW52aXJvbl9jb3VudCIsICJwZW52aXJvbl9idWZfc2l6ZSIsICJfZmRfY2xvc2UiLCAiX2ZkX3ByZWFkIiwgImlvdiIsICJpb3ZjbnQiLCAib2Zmc2V0X2xvdyIsICJvZmZzZXRfaGlnaCIsICJwbnVtIiwgIl9mZF9wd3JpdGUiLCAiX2ZkX3JlYWQiLCAiX2ZkX3NlZWsiLCAid2hlbmNlIiwgIm5ld09mZnNldCIsICJfZmRfc3luYyIsICJmbHVzaF9OT19GSUxFU1lTVEVNIiwgIl9fX3N0ZGlvX2V4aXQiLCAiYnVmZmVycyIsICJfZmRfd3JpdGUiLCAiaiIsICJfZ2V0VGVtcFJldDAiLCAiX2dldGFkZHJpbmZvIiwgIm5vZGUiLCAic2VydmljZSIsICJoaW50IiwgImFkZHJzIiwgImNhbm9uIiwgInByb3RvIiwgImFpIiwgImxhc3QiLCAiYWxsb2NhZGRyaW5mbyIsICJfaHRvbmwiLCAiZ2V0UmFuZG9tRGV2aWNlIiwgInJhbmRvbUJ1ZmZlciIsICJjcnlwdG9fbW9kdWxlIiwgIl9nZXRlbnRyb3B5IiwgIl9nZXRuYW1laW5mbyIsICJub2RlbGVuIiwgInNlcnYiLCAic2VydmxlbiIsICJvdmVyZmxvd2VkIiwgImxvb2t1cCIsICJudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbCIsICJfbGx2bV9laF90eXBlaWRfZm9yIiwgIl9zZXRUZW1wUmV0MCIsICJ2YWwiLCAiX19pc0xlYXBZZWFyIiwgInllYXIiLCAiX19hcnJheVN1bSIsICJzdW0iLCAiX19NT05USF9EQVlTX0xFQVAiLCAiX19NT05USF9EQVlTX1JFR1VMQVIiLCAiX19hZGREYXlzIiwgImRhdGUiLCAiZGF5cyIsICJuZXdEYXRlIiwgImxlYXAiLCAiY3VycmVudE1vbnRoIiwgImRheXNJbkN1cnJlbnRNb250aCIsICJfc3RyZnRpbWUiLCAicyIsICJtYXhzaXplIiwgImZvcm1hdCIsICJ0bSIsICJ0bV96b25lIiwgInBhdHRlcm4iLCAiRVhQQU5TSU9OX1JVTEVTXzEiLCAicnVsZSIsICJXRUVLREFZUyIsICJNT05USFMiLCAibGVhZGluZ1NvbWV0aGluZyIsICJkaWdpdHMiLCAiY2hhcmFjdGVyIiwgImxlYWRpbmdOdWxscyIsICJjb21wYXJlQnlEYXkiLCAiZGF0ZTEiLCAiZGF0ZTIiLCAic2duIiwgImNvbXBhcmUiLCAiZ2V0Rmlyc3RXZWVrU3RhcnREYXRlIiwgImphbkZvdXJ0aCIsICJnZXRXZWVrQmFzZWRZZWFyIiwgInRoaXNEYXRlIiwgImphbkZvdXJ0aFRoaXNZZWFyIiwgImphbkZvdXJ0aE5leHRZZWFyIiwgImZpcnN0V2Vla1N0YXJ0VGhpc1llYXIiLCAiZmlyc3RXZWVrU3RhcnROZXh0WWVhciIsICJFWFBBTlNJT05fUlVMRVNfMiIsICJ0d2VsdmVIb3VyIiwgImphbjEiLCAiZGVjMzEiLCAib2ZmIiwgImFoZWFkIiwgImludEFycmF5RnJvbVN0cmluZyIsICJfc3RyZnRpbWVfbCIsICJBU1NFUlRJT05TIiwgInN0cmluZ3kiLCAidThhcnJheSIsICJudW1CeXRlc1dyaXR0ZW4iLCAiaW50QXJyYXlUb1N0cmluZyIsICJjaHIiLCAiaW52b2tlX2QiLCAiaW52b2tlX2RpIiwgImludm9rZV9kaWkiLCAiaW52b2tlX2RpaWkiLCAiaW52b2tlX2RpaWppaSIsICJpbnZva2VfZiIsICJpbnZva2VfZmkiLCAiaW52b2tlX2ZpaWkiLCAiaW52b2tlX2ZpaWppaSIsICJpbnZva2VfaSIsICJpbnZva2VfaWQiLCAiaW52b2tlX2lkZCIsICJpbnZva2VfaWRpaWkiLCAiaW52b2tlX2lmIiwgImludm9rZV9pZmYiLCAiaW52b2tlX2lpIiwgImludm9rZV9paWQiLCAiaW52b2tlX2lpZGlpIiwgImludm9rZV9paWRqIiwgImludm9rZV9paWkiLCAiaW52b2tlX2lpaWQiLCAiaW52b2tlX2lpaWRpIiwgImludm9rZV9paWlpIiwgImludm9rZV9paWlpZCIsICJpbnZva2VfaWlpaWRqaiIsICJpbnZva2VfaWlpaWkiLCAiaW52b2tlX2lpaWlpZCIsICJpbnZva2VfaWlpaWlpIiwgImludm9rZV9paWlpaWlpIiwgImludm9rZV9paWlpaWlpaSIsICJpbnZva2VfaWlpaWlpaWlpIiwgImludm9rZV9paWlpaWlpaWlpIiwgImludm9rZV9paWlpaWlpaWlpaSIsICJpbnZva2VfaWlpaWlpaWlpaWlpIiwgImludm9rZV9paWlpaWlpaWlpaWlpIiwgImludm9rZV9paWlpaWlpaWlpaWlpaWkiLCAiaW52b2tlX2lpaWlpaWlpaWlpaWlpaWkiLCAiaW52b2tlX2lpaWlpaWlpaWlpaWoiLCAiaW52b2tlX2lpaWlpaWlpaWlqaSIsICJpbnZva2VfaWlpaWlpaWlqIiwgImludm9rZV9paWlpaWlpaWppIiwgImludm9rZV9paWlpaWlpaiIsICJpbnZva2VfaWlpaWlpaWppIiwgImludm9rZV9paWlpaWlpamlpIiwgImludm9rZV9paWlpaWlqIiwgImludm9rZV9paWlpaWlqaSIsICJpbnZva2VfaWlpaWlpamppIiwgImludm9rZV9paWlpaWoiLCAiaW52b2tlX2lpaWlpamkiLCAiaW52b2tlX2lpaWlpamlpIiwgImludm9rZV9paWlpaWppaiIsICJpbnZva2VfaWlpaWlqaiIsICJpbnZva2VfaWlpaWlqamkiLCAiaW52b2tlX2lpaWlpamppaWpqIiwgImludm9rZV9paWlpaWpqaiIsICJpbnZva2VfaWlpaWlqamppIiwgImludm9rZV9paWlpaiIsICJpbnZva2VfaWlpaWppIiwgImludm9rZV9paWlpamlpIiwgImludm9rZV9paWlpamlpaSIsICJpbnZva2VfaWlpaWpqIiwgImludm9rZV9paWlpamppIiwgImludm9rZV9paWlpamppaSIsICJpbnZva2VfaWlpaWpqaiIsICJpbnZva2VfaWlpaiIsICJpbnZva2VfaWlpamkiLCAiaW52b2tlX2lpaWppaSIsICJpbnZva2VfaWlpamlpaSIsICJpbnZva2VfaWlpamlpaWkiLCAiaW52b2tlX2lpaWppaWoiLCAiaW52b2tlX2lpaWppaWpqIiwgImludm9rZV9paWlqaWoiLCAiaW52b2tlX2lpaWpqIiwgImludm9rZV9paWlqamkiLCAiaW52b2tlX2lpaWpqaWkiLCAiaW52b2tlX2lpaWpqaWlqIiwgImludm9rZV9paWlqamlpamkiLCAiaW52b2tlX2lpaWpqaiIsICJpbnZva2VfaWlpampqaSIsICJpbnZva2VfaWlpampqaWkiLCAiaW52b2tlX2lpaiIsICJpbnZva2VfaWlqaSIsICJpbnZva2VfaWlqaWkiLCAiaW52b2tlX2lpamlpaSIsICJpbnZva2VfaWlqaWlpaSIsICJpbnZva2VfaWlqaWlqaiIsICJpbnZva2VfaWlqaWppIiwgImludm9rZV9paWpqIiwgImludm9rZV9paWpqaSIsICJpbnZva2VfaWlqamlpIiwgImludm9rZV9paWpqaWlpIiwgImludm9rZV9paWpqaWlpaSIsICJpbnZva2VfaWlqamlqaiIsICJpbnZva2VfaWlqamoiLCAiaW52b2tlX2lqIiwgImludm9rZV9pamkiLCAiaW52b2tlX2lqaWkiLCAiaW52b2tlX2lqamkiLCAiaW52b2tlX2lqamlpaSIsICJpbnZva2VfaiIsICJpbnZva2VfamQiLCAiaW52b2tlX2pmIiwgImludm9rZV9qaSIsICJpbnZva2VfamlpIiwgImludm9rZV9qaWlpIiwgImludm9rZV9qaWlpaSIsICJpbnZva2VfamlpaWlpIiwgImludm9rZV9qaWlpaWlpIiwgImludm9rZV9qaWlpaWlpaSIsICJpbnZva2VfamlpaWlpaWppaSIsICJpbnZva2VfamlpaWlpamlpaWkiLCAiaW52b2tlX2ppaWlpaiIsICJpbnZva2VfamlpaWlqaSIsICJpbnZva2VfamlpaWlqaWkiLCAiaW52b2tlX2ppaWlqIiwgImludm9rZV9qaWlpamkiLCAiaW52b2tlX2ppaWlqaWkiLCAiaW52b2tlX2ppaWlqaWlpIiwgImludm9rZV9qaWlpamoiLCAiaW52b2tlX2ppaWlqamoiLCAiaW52b2tlX2ppaWoiLCAiaW52b2tlX2ppaWppIiwgImludm9rZV9qaWlqaWkiLCAiaW52b2tlX2ppaWppaWkiLCAiaW52b2tlX2ppaWppamppaSIsICJpbnZva2VfamlqIiwgImludm9rZV9qaWppaWkiLCAiaW52b2tlX2ppamlpaWkiLCAiaW52b2tlX2ppamlqIiwgImludm9rZV9qaWpqIiwgImludm9rZV9qaWpqaWoiLCAiaW52b2tlX2pqIiwgImludm9rZV9qamkiLCAiaW52b2tlX2pqaWppIiwgImludm9rZV9qamoiLCAiaW52b2tlX2pqamlpIiwgImludm9rZV9qampqaSIsICJpbnZva2VfampqampqZCIsICJpbnZva2VfdiIsICJpbnZva2VfdmkiLCAiaW52b2tlX3ZpZCIsICJpbnZva2VfdmlkaWlqaiIsICJpbnZva2VfdmlmIiwgImludm9rZV92aWZpaWpqIiwgImludm9rZV92aWkiLCAiaW52b2tlX3ZpaWQiLCAiaW52b2tlX3ZpaWRpaSIsICJpbnZva2VfdmlpZiIsICJpbnZva2VfdmlpaSIsICJpbnZva2VfdmlpaWkiLCAiaW52b2tlX3ZpaWlpZGlpaWkiLCAiaW52b2tlX3ZpaWlpaSIsICJpbnZva2VfdmlpaWlpaSIsICJpbnZva2VfdmlpaWlpaWRpaWkiLCAiaW52b2tlX3ZpaWlpaWlpIiwgImludm9rZV92aWlpaWlpaWkiLCAiaW52b2tlX3ZpaWlpaWlpaWkiLCAiaW52b2tlX3ZpaWlpaWlpaWlpIiwgImludm9rZV92aWlpaWlpaWlpaWkiLCAiaW52b2tlX3ZpaWlpaWlpaWlpaWlpIiwgImludm9rZV92aWlpaWlpaWlpaWlpaWlpIiwgImludm9rZV92aWlpaWlpaiIsICJpbnZva2VfdmlpaWlpaiIsICJpbnZva2VfdmlpaWlpamkiLCAiaW52b2tlX3ZpaWlpaWppaWkiLCAiaW52b2tlX3ZpaWlpaWppaWlpIiwgImludm9rZV92aWlpaWlqaiIsICJpbnZva2VfdmlpaWlpamppIiwgImludm9rZV92aWlpaWlqamppIiwgImludm9rZV92aWlpaWoiLCAiaW52b2tlX3ZpaWlpamkiLCAiaW52b2tlX3ZpaWlpamlpIiwgImludm9rZV92aWlpaWppaWkiLCAiaW52b2tlX3ZpaWlpamlpaWkiLCAiaW52b2tlX3ZpaWlpamlpaWlpIiwgImludm9rZV92aWlpaWppaWlpaWlpaSIsICJpbnZva2VfdmlpaWlqaWoiLCAiaW52b2tlX3ZpaWlpamoiLCAiaW52b2tlX3ZpaWlpamppIiwgImludm9rZV92aWlpaWpqaWkiLCAiaW52b2tlX3ZpaWlpampqaiIsICJpbnZva2VfdmlpaWoiLCAiaW52b2tlX3ZpaWlqaSIsICJpbnZva2VfdmlpaWppaSIsICJpbnZva2VfdmlpaWppaWkiLCAiaW52b2tlX3ZpaWlqaWlpaWpqaiIsICJpbnZva2VfdmlpaWppaiIsICJpbnZva2VfdmlpaWppamkiLCAiaW52b2tlX3ZpaWlqaWppamkiLCAiaW52b2tlX3ZpaWlqaWpqaiIsICJpbnZva2VfdmlpaWpqIiwgImludm9rZV92aWlpamppIiwgImludm9rZV92aWlpamppaSIsICJpbnZva2VfdmlpaWpqaWlqIiwgImludm9rZV92aWlpamppaiIsICJpbnZva2VfdmlpaWpqaiIsICJpbnZva2VfdmlpaWpqamppIiwgImludm9rZV92aWlqIiwgImludm9rZV92aWlqaSIsICJpbnZva2VfdmlpamlpIiwgImludm9rZV92aWlqaWlpIiwgImludm9rZV92aWlqaWlpaSIsICJpbnZva2VfdmlpamlpaWlpIiwgImludm9rZV92aWlqaWlpaWlpIiwgImludm9rZV92aWlqaWlpaWlqIiwgImludm9rZV92aWlqaWlpaiIsICJpbnZva2VfdmlpamlpaiIsICJpbnZva2VfdmlpamlpamkiLCAiaW52b2tlX3ZpaWppaWpqIiwgImludm9rZV92aWlqaWoiLCAiaW52b2tlX3ZpaWppamkiLCAiaW52b2tlX3ZpaWppamlpaWlqamoiLCAiaW52b2tlX3ZpaWppamoiLCAiaW52b2tlX3ZpaWpqIiwgImludm9rZV92aWlqamkiLCAiaW52b2tlX3ZpaWpqaWkiLCAiaW52b2tlX3ZpaWpqaiIsICJpbnZva2VfdmlpampqaSIsICJpbnZva2VfdmlqIiwgImludm9rZV92aWppIiwgImludm9rZV92aWppaSIsICJpbnZva2VfdmlqaWlpIiwgImludm9rZV92aWppaWlpIiwgImludm9rZV92aWppaWlqaSIsICJpbnZva2VfdmlqaWlqaiIsICJpbnZva2VfdmlqaWoiLCAiaW52b2tlX3ZpamlqaSIsICJpbnZva2VfdmlqaWppaWlpampqIiwgImludm9rZV92aWppamoiLCAiaW52b2tlX3ZpamlqamlpaWlpIiwgImludm9rZV92aWppamppaWoiLCAiaW52b2tlX3ZpamlqamppIiwgImludm9rZV92aWpqIiwgImludm9rZV92aWpqaSIsICJpbnZva2VfdmlqamlpaWkiLCAiaW52b2tlX3ZpamppaWlpaSIsICJpbnZva2VfdmlqamlqIiwgImludm9rZV92aWpqaiIsICJpbnZva2VfdmlqamppIiwgImludm9rZV92aiIsICJpbnZva2VfdmppaSIsICJpbnZva2VfdmppaWlpIiwgImludm9rZV92amlpaWppIiwgImludm9rZV92amppaSIsICJpbnZva2VfdmpqaWppaiIsICJfX193YXNtX2NhbGxfY3RvcnMiLCAiX21haW4iLCAiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aCIsICJfZHVja2RiX3dlYl9jbGVhcl9yZXNwb25zZSIsICJfZHVja2RiX3dlYl9mYWlsX3dpdGgiLCAiX2R1Y2tkYl93ZWJfcmVzZXQiLCAiX2R1Y2tkYl93ZWJfY29ubmVjdCIsICJfZHVja2RiX3dlYl9kaXNjb25uZWN0IiwgIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGVzIiwgIl9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGUiLCAiX2R1Y2tkYl93ZWJfb3BlbiIsICJfZHVja2RiX3dlYl9nZXRfZ2xvYmFsX2ZpbGVfaW5mbyIsICJfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHMiLCAiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHMiLCAiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlIiwgIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zIiwgIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWQiLCAiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lIiwgIl9kdWNrZGJfd2ViX2ZzX3NldF9maWxlX2Rlc2NyaXB0b3IiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIiLCAiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciIsICJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCIsICJfZHVja2RiX3dlYl9nZXRfdmVyc2lvbiIsICJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncyIsICJfZHVja2RiX3dlYl90b2tlbml6ZSIsICJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZSIsICJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2UiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuIiwgIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQiLCAiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQiLCAiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsIiwgIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHMiLCAiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXMiLCAiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbSIsICJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aCIsICJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGgiLCAiX19fZGxfc2V0ZXJyIiwgIl9lbXNjcmlwdGVuX2dldF9zYnJrX3B0ciIsICJfZW1zY3JpcHRlbl9zdGFja19pbml0IiwgIl9lbXNjcmlwdGVuX3N0YWNrX2dldF9mcmVlIiwgImR5bkNhbGxfamlqaSIsICJkeW5DYWxsX2ppaWlpIiwgImR5bkNhbGxfaWlpaWlqIiwgImR5bkNhbGxfaWlpaWlqaiIsICJkeW5DYWxsX2lpaWlpaWpqIiwgImR5bkNhbGxfdmlpamlpIiwgImR5bkNhbGxfaiIsICJkeW5DYWxsX2ppIiwgImR5bkNhbGxfaWlqIiwgImR5bkNhbGxfdmlpaiIsICJkeW5DYWxsX3ZpaWpqaSIsICJkeW5DYWxsX3ZpaWpqIiwgImR5bkNhbGxfdmlpaWpqIiwgImR5bkNhbGxfdmlpamkiLCAiZHluQ2FsbF92aWpqaiIsICJkeW5DYWxsX2lpaWpqIiwgImR5bkNhbGxfdmlpaWoiLCAiZHluQ2FsbF92aWlqaWoiLCAiZHluQ2FsbF9paWlqIiwgImR5bkNhbGxfdmlqaWpqIiwgImR5bkNhbGxfdmlpaWpqaiIsICJkeW5DYWxsX2lqaSIsICJkeW5DYWxsX3ZpamkiLCAiZHluQ2FsbF92aWoiLCAiZHluQ2FsbF92aWlpaWoiLCAiZHluQ2FsbF9qaWkiLCAiZHluQ2FsbF9paWppIiwgImR5bkNhbGxfaWlpaWoiLCAiZHluQ2FsbF9paWlpaWppIiwgImR5bkNhbGxfaWlpamkiLCAiZHluQ2FsbF9paWlpamkiLCAiZHluQ2FsbF9qaWlpIiwgImR5bkNhbGxfamlqIiwgImR5bkNhbGxfdmlpamlpaWlpIiwgImR5bkNhbGxfaWlpamlpIiwgImR5bkNhbGxfamlpamlpIiwgImR5bkNhbGxfdmlpaWppaSIsICJkeW5DYWxsX2ZpaWppaSIsICJkeW5DYWxsX2RpaWppaSIsICJkeW5DYWxsX2lpaWlpaWlqaWkiLCAiZHluQ2FsbF92aWpqIiwgImR5bkNhbGxfamlpaWppaSIsICJkeW5DYWxsX2ppaWppaWkiLCAiZHluQ2FsbF92aWlpaWppIiwgImR5bkNhbGxfamlpaWlqaWkiLCAiZHluQ2FsbF9qaWlpaWlqaWlpaSIsICJkeW5DYWxsX2ppaWlqaWlpIiwgImR5bkNhbGxfdmlpaWlpamlpaWkiLCAiZHluQ2FsbF92aWlpamppaiIsICJkeW5DYWxsX3ZpaWppaWkiLCAiZHluQ2FsbF92aWppamppaWoiLCAiZHluQ2FsbF92aWlpamppaWoiLCAiZHluQ2FsbF92aWlpaWpqamoiLCAiZHluQ2FsbF92aWlqaWlpaWlqIiwgImR5bkNhbGxfdmlpaWppaWlpampqIiwgImR5bkNhbGxfdmlpamlqaWlpaWpqaiIsICJkeW5DYWxsX2pqIiwgImR5bkNhbGxfamQiLCAiZHluQ2FsbF9qZiIsICJkeW5DYWxsX2lpampqIiwgImR5bkNhbGxfaWlpamppIiwgImR5bkNhbGxfdmlqaWppaWlpampqIiwgImR5bkNhbGxfdmlpaWlpaWoiLCAiZHluQ2FsbF9paWlpaWlqaSIsICJkeW5DYWxsX2lpaWlpaWlpamkiLCAiZHluQ2FsbF92aWlpaWlqaiIsICJkeW5DYWxsX3ZpamlpaSIsICJkeW5DYWxsX3ZpaWpqaiIsICJkeW5DYWxsX3ZpamppaiIsICJkeW5DYWxsX2ppaWlpaSIsICJkeW5DYWxsX3ZpaWpqamkiLCAiZHluQ2FsbF92aWppaWlpIiwgImR5bkNhbGxfaWlqamlqaiIsICJkeW5DYWxsX3ZpaWlpamlpaWlpIiwgImR5bkNhbGxfdmlpaWlqaWlpaSIsICJkeW5DYWxsX2lpaWlpaWoiLCAiZHluQ2FsbF9paWlpaWlpaWlpamkiLCAiZHluQ2FsbF9paWlpaWlpaWoiLCAiZHluQ2FsbF9qaWlpampqIiwgImR5bkNhbGxfdmlpamlqaiIsICJkeW5DYWxsX2ppaWlpamkiLCAiZHluQ2FsbF9paWlpaWppaiIsICJkeW5DYWxsX3ZpaWlpaWppIiwgImR5bkNhbGxfamlpaWlpaWkiLCAiZHluQ2FsbF92aWppamkiLCAiZHluQ2FsbF9qaWlpaWoiLCAiZHluQ2FsbF9qaWpqaWoiLCAiZHluQ2FsbF92aWlpaWppaWlpaWlpaSIsICJkeW5DYWxsX2lqIiwgImR5bkNhbGxfampqIiwgImR5bkNhbGxfamlpamkiLCAiZHluQ2FsbF9qamlqaSIsICJkeW5DYWxsX2ppaWlqIiwgImR5bkNhbGxfamlqaWoiLCAiZHluQ2FsbF9qaWpqIiwgImR5bkNhbGxfamlpaWpqIiwgImR5bkNhbGxfdmppaSIsICJkeW5DYWxsX2lqamoiLCAiZHluQ2FsbF9qampkIiwgImR5bkNhbGxfampqampqZCIsICJkeW5DYWxsX3ZpaWlqaSIsICJkeW5DYWxsX2lqaWkiLCAiZHluQ2FsbF92amlpaWkiLCAiZHluQ2FsbF92aWlpaWlqaWlpIiwgImR5bkNhbGxfamlpaiIsICJkeW5DYWxsX3ZpamppIiwgImR5bkNhbGxfaWlpaWpqaWkiLCAiZHluQ2FsbF9paWlpaWpqaSIsICJkeW5DYWxsX3ZpaWlqamlpIiwgImR5bkNhbGxfdmlpaWlqamkiLCAiZHluQ2FsbF92aWlpaWpqaWkiLCAiZHluQ2FsbF92aWlpaWlqamkiLCAiZHluQ2FsbF9paWRqIiwgImR5bkNhbGxfaWpqaSIsICJkeW5DYWxsX2lpaWlpaWlqIiwgImR5bkNhbGxfaWlpaWlpaWlpaWlpaiIsICJkeW5DYWxsX2lpaWpqaWlqaSIsICJkeW5DYWxsX2lpaWpqaWlqIiwgImR5bkNhbGxfaWlpaWlpaWppIiwgImR5bkNhbGxfaWlpaWRqaiIsICJkeW5DYWxsX2lpaWlqamoiLCAiZHluQ2FsbF92aWppaSIsICJkeW5DYWxsX2ppaWlpaWlqaWkiLCAiZHluQ2FsbF9paWlpamppIiwgImR5bkNhbGxfdmlpaWpqaSIsICJkeW5DYWxsX2ppaWlpaWkiLCAiZHluQ2FsbF9paWlqaWlpIiwgImR5bkNhbGxfaWlpaWlqaWkiLCAiZHluQ2FsbF9paWlqaWlqIiwgImR5bkNhbGxfaWlqamlpIiwgImR5bkNhbGxfaWlqamlpaSIsICJkeW5DYWxsX2lpamppaWlpIiwgImR5bkNhbGxfaWlqamkiLCAiZHluQ2FsbF9paWppaWlpIiwgImR5bkNhbGxfaWlqaWkiLCAiZHluQ2FsbF92amppaSIsICJkeW5DYWxsX3ZpaWlpamlpIiwgImR5bkNhbGxfaWlpaWppaWkiLCAiZHluQ2FsbF9paWlqaWoiLCAiZHluQ2FsbF9paWpqIiwgImR5bkNhbGxfaWlpaWpqIiwgImR5bkNhbGxfdmlpaWppaWkiLCAiZHluQ2FsbF92aWlpaWppaiIsICJkeW5DYWxsX2lpaWppaWlpIiwgImR5bkNhbGxfaWlpaWlqamlpamoiLCAiZHluQ2FsbF92aWlqaWlqaSIsICJkeW5DYWxsX2lpaWpqaWkiLCAiZHluQ2FsbF92amppamlqIiwgImR5bkNhbGxfdmlqamppIiwgImR5bkNhbGxfamlpaWppIiwgImR5bkNhbGxfdmlpamppaSIsICJkeW5DYWxsX3ZpaWlpamoiLCAiZHluQ2FsbF9qaWppaWkiLCAiZHluQ2FsbF92aWlqaWlpaiIsICJkeW5DYWxsX3ZpamlpaWppIiwgImR5bkNhbGxfdmlpaWppaiIsICJkeW5DYWxsX3ZpaWppaWoiLCAiZHluQ2FsbF92aWppaiIsICJkeW5DYWxsX3ZqaWlpamkiLCAiZHluQ2FsbF92aWlqaWlpaWlpIiwgImR5bkNhbGxfampqamkiLCAiZHluQ2FsbF9qamppaSIsICJkeW5DYWxsX2pqaSIsICJkeW5DYWxsX2lpamlqaSIsICJkeW5DYWxsX3ZpaWlqaWppamkiLCAiZHluQ2FsbF92aWlpamlpaWlqaiIsICJkeW5DYWxsX2lpaWpqaiIsICJkeW5DYWxsX3ZqIiwgImR5bkNhbGxfaWlpaWppaSIsICJkeW5DYWxsX2lpamlpaSIsICJkeW5DYWxsX3ZpamlpamoiLCAiZHluQ2FsbF92aWZpaWpqIiwgImR5bkNhbGxfdmlkaWlqaiIsICJkeW5DYWxsX3ZpaWlpaWoiLCAiZHluQ2FsbF9pamppaWkiLCAiZHluQ2FsbF92aWppampqaSIsICJkeW5DYWxsX3ZpaWppaWpqIiwgImR5bkNhbGxfdmlpaWlpampqaSIsICJkeW5DYWxsX2lpaWppaWpqIiwgImR5bkNhbGxfdmlpaWppampqIiwgImR5bkNhbGxfaWlqaWlqaiIsICJkeW5DYWxsX3ZpaWlqampqaSIsICJkeW5DYWxsX3ZpaWlpamlpaSIsICJkeW5DYWxsX3ZpaWppaWlpIiwgImR5bkNhbGxfdmlqamlpaWkiLCAiZHluQ2FsbF92aWppamppaWlpaSIsICJkeW5DYWxsX3ZpamppaWlpaSIsICJkeW5DYWxsX2lpaWpqamkiLCAiZHluQ2FsbF9qaWlqaWpqaWkiLCAiZHluQ2FsbF9paWlpaWlqamkiLCAiZHluQ2FsbF9paWlpaWpqaiIsICJkeW5DYWxsX2ppamlpaWkiLCAiZHluQ2FsbF92aWlpamlqaSIsICJkeW5DYWxsX2lpaWpqamlpIiwgImR5bkNhbGxfaWlpaWlqamppIiwgImR5bkNhbGxfdmlpamlqaSIsICJhMSIsICJhMiIsICJhMyIsICJzcCIsICJhNCIsICJhNSIsICJhNiIsICJhNyIsICJhOCIsICJhOSIsICJhMTAiLCAiYTExIiwgImExMiIsICJhMTMiLCAiYTE0IiwgImExNSIsICJhMTYiLCAiYTE3IiwgImNhbGxlZFJ1biIsICJjYWxsZWRNYWluIiwgInJ1bkNhbGxlciIsICJydW4iLCAiY2FsbE1haW4iLCAiZW50cnlGdW5jdGlvbiIsICJhcmdjIiwgImFyZ3YiLCAiZXhpdCIsICJzdGFja0NoZWNrSW5pdCIsICJkb1J1biIsICJzaG91bGRSdW5Ob3ciLCAiY2hlY2tVbmZsdXNoZWRDb250ZW50IiwgIm9sZE91dCIsICJvbGRFcnIiLCAiaGFzIiwgImZsdXNoIiwgImltcGxpY2l0IiwgInByb2NFeGl0IiwgImNvZGUiLCAiZHVja2RiX212cF9kZWZhdWx0IiwgImFycm93IiwgIkR1Y2tEQkNvbm5lY3Rpb24iLCAiYmluZGluZ3MiLCAiY29ubiIsICJjYWxsYmFjayIsICJ0ZXh0IiwgImJ1ZmZlciIsICJyZWFkZXIiLCAiaGVhZGVyIiwgInJlc29sdmUiLCAicmVqZWN0IiwgImUiLCAiaXRlciIsICJSZXN1bHRTdHJlYW1JdGVyYXRvciIsICJxdWVyeSIsICJzdG10IiwgIlByZXBhcmVkU3RhdGVtZW50IiwgIm5hbWUiLCAicmV0dXJucyIsICJmdW5jIiwgInRhYmxlIiwgIm9wdGlvbnMiLCAicGF0aCIsICJidWZmZXJJOCIsICJjb25uZWN0aW9uSWQiLCAic3RhdGVtZW50SWQiLCAicGFyYW1zIiwgIlRFWFRfRU5DT0RFUiIsICJURVhUX0RFQ09ERVIiLCAic3RvcmVFcnJvciIsICJtb2QiLCAicmVzcG9uc2UiLCAibWVzc2FnZSIsICJtc2dCdWZmZXIiLCAiaGVhcEFkZHIiLCAiaGVhcEFycmF5IiwgImdldFR5cGVTaXplIiwgInB0eXBlIiwgInB0clRvQXJyYXkiLCAicHRyIiwgIm4iLCAiaGVhcCIsICJwdHJUb1VpbnQ4QXJyYXkiLCAicHRyVG9GbG9hdDY0QXJyYXkiLCAiY2FsbFNjYWxhclVERiIsICJydW50aW1lIiwgImZ1bmNJZCIsICJkZXNjUHRyIiwgImRlc2NTaXplIiwgInB0cnNQdHIiLCAicHRyc1NpemUiLCAidWRmIiwgInJhd0Rlc2MiLCAiZGVzYyIsICJwdHJzIiwgImJ1aWxkUmVzb2x2ZXIiLCAiYXJnIiwgIl9hIiwgInZhbGlkaXR5IiwgInJhdyIsICJzdHJpbmdzIiwgInN0cmluZ0xlbmd0aHMiLCAiaiIsICJzdWJhcnJheSIsICJzdHIiLCAicm93IiwgInRtcCIsICJjaGlsZHJlbiIsICJhdHRyIiwgImNoaWxkIiwgInJlc29sdmVyIiwgImRhdGEiLCAiYXJnUmVzb2x2ZXJzIiwgImkiLCAicmVzdWx0RGF0YUxlbiIsICJyZXN1bHREYXRhUHRyIiwgInJlc3VsdERhdGEiLCAicmVzdWx0VmFsaWRpdHlQdHIiLCAicmVzdWx0VmFsaWRpdHkiLCAicmF3UmVzdWx0RGF0YSIsICJhcmdzIiwgInJlcyIsICJyZXN1bHRMZW5ndGhzUHRyIiwgInJlc3VsdERhdGFVVEY4IiwgInJlc3VsdExlbmd0aHMiLCAidG90YWxMZW5ndGgiLCAidXRmOCIsICJyZXN1bHRTdHJpbmdQdHIiLCAicmVzdWx0U3RyaW5nQnVmIiwgIndyaXRlck9mZnNldCIsICJyZXN1bHRVVEY4IiwgInJldExlbiIsICJyZXRQdHIiLCAicmV0QnVmZmVyIiwgImUiLCAiVGV4dERlY29kZXJXcmFwcGVyIiwgImRlY29kZXIiLCAiZGF0YSIsICJkZWNvZGVUZXh0IiwgImZhaWxXaXRoIiwgIm1vZCIsICJtc2ciLCAiY29weUJ1ZmZlciIsICJiZWdpbiIsICJsZW5ndGgiLCAiYnVmZmVyIiwgImNvcHkiLCAicmVhZFN0cmluZyIsICJjYWxsU1JldCIsICJtb2QiLCAiZnVuY05hbWUiLCAiYXJnVHlwZXMiLCAiYXJncyIsICJzdGFja1BvaW50ZXIiLCAicmVzcG9uc2UiLCAic3RhdHVzIiwgImRhdGEiLCAiZGF0YVNpemUiLCAiZHJvcFJlc3BvbnNlQnVmZmVycyIsICJGaWxlU3RhdGlzdGljcyIsICJ1OGFycmF5IiwgImY2NCIsICJibG9ja3MiLCAiaW5kZXgiLCAib3V0IiwgIlRFWFRfRU5DT0RFUiIsICJEdWNrREJCaW5kaW5nc0Jhc2UiLCAibG9nZ2VyIiwgInJ1bnRpbWUiLCAib25Qcm9ncmVzcyIsICJfIiwgInJlc29sdmUiLCAieCIsICJjb25maWciLCAicyIsICJkIiwgIm4iLCAiY2FsbFNSZXQiLCAicmVhZFN0cmluZyIsICJkcm9wUmVzcG9uc2VCdWZmZXJzIiwgInZlcnNpb24iLCAidGV4dCIsICJyZXMiLCAiY29ubiIsICJEdWNrREJDb25uZWN0aW9uIiwgIndvcmtlciIsICJjb3B5QnVmZmVyIiwgIm5hbWUiLCAicmV0dXJucyIsICJmdW5jIiwgImRlY2wiLCAiYXJyb3dUb1NRTFR5cGUiLCAiZGVmIiwgInN0YXRlbWVudCIsICJwYXJhbXMiLCAiYnVmZmVyIiwgIm9wdGlvbnMiLCAiYnVmZmVyUHRyIiwgIm9wdEpTT04iLCAicGF0aCIsICJrIiwgImFycm93VG9TUUxGaWVsZCIsICJvcHQiLCAiaW5mb1N0ciIsICJpbmZvIiwgInVybCIsICJURVhUX0VOQ09ERVIiLCAicHRyIiwgImhhbmRsZSIsICJjb3B5IiwgImZpbGUiLCAiZW5hYmxlIiwgIkZpbGVTdGF0aXN0aWNzIiwgImltcG9ydF9mcyIsICJEdWNrREJOb2RlQmluZGluZ3MiLCAiRHVja0RCQmluZGluZ3NCYXNlIiwgImxvZ2dlciIsICJydW50aW1lIiwgIm1haW5Nb2R1bGVQYXRoIiwgInB0aHJlYWRXb3JrZXJQYXRoIiwgInBhdGgiLCAicHJlZml4IiwgImltcG9ydHMiLCAic3VjY2VzcyIsICJmdW5jIiwgImJ1ZiIsICJmcyIsICJvdXRwdXQiLCAibW9kdWxlT3ZlcnJpZGVzIiwgImR1Y2tkYl9tdnBfZGVmYXVsdCIsICJEdWNrREIiLCAiRHVja0RCTm9kZUJpbmRpbmdzIiwgImxvZ2dlciIsICJydW50aW1lIiwgIm1haW5Nb2R1bGVQYXRoIiwgInB0aHJlYWRXb3JrZXJQYXRoIiwgIm1vZHVsZU92ZXJyaWRlcyIsICJkdWNrZGJfZWhfZGVmYXVsdCIsICJpbXBvcnRfZnMiLCAiZmciLCAiTk9ERV9SVU5USU1FIiwgIm1vZCIsICJmaWxlSWQiLCAiY2FjaGVkIiwgInMiLCAiZCIsICJuIiwgImNhbGxTUmV0IiwgImZhaWxXaXRoIiwgInJlYWRTdHJpbmciLCAiaW5mb1N0ciIsICJkcm9wUmVzcG9uc2VCdWZmZXJzIiwgImluZm8iLCAiX21vZCIsICJmZWF0dXJlIiwgImZsYWdzIiwgImZpbGUiLCAiZnMiLCAiZmlsZVNpemUiLCAicmVzdWx0IiwgImUiLCAiX2ZpbGVJZCIsICJuZXdTaXplIiwgImJ1ZiIsICJieXRlcyIsICJsb2NhdGlvbiIsICJzcmMiLCAicGF0aFB0ciIsICJwYXRoTGVuIiwgInBhdGgiLCAiZGVjb2RlVGV4dCIsICJfcGF0aFB0ciIsICJfcGF0aExlbiIsICJlbnRyaWVzIiwgImVudHJ5IiwgImZyb21QdHIiLCAiZnJvbUxlbiIsICJ0b1B0ciIsICJ0b0xlbiIsICJfYSIsICJfYiIsICJmcm9tIiwgInRvIiwgImhhbmRsZSIsICJrZXkiLCAidmFsdWUiLCAicmVzcG9uc2UiLCAiZnVuY0lkIiwgImRlc2NQdHIiLCAiZGVzY1NpemUiLCAicHRyc1B0ciIsICJwdHJzU2l6ZSIsICJjYWxsU2NhbGFyVURGIiwgIk5vZGVXb3JrZXIiLCAiQXN5bmNEdWNrREJEaXNwYXRjaGVyIiwgInJlc3BvbnNlIiwgInRyYW5zZmVyIiwgIm1haW5Nb2R1bGVQYXRoIiwgInB0aHJlYWRXb3JrZXJQYXRoIiwgInByb2dyZXNzIiwgIkR1Y2tEQiIsICJOT0RFX1JVTlRJTUUiLCAicmVnaXN0ZXJXb3JrZXIiLCAiYXBpIiwgImV2ZW50Il0KfQo=
